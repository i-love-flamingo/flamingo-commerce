// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcf\x6f\xe4\x28\x16\xbe\xe7\xaf\xa8\xd2\x5e\x6a\xa4\xd6\x4a\xbb\xc7\xba\x25\x55\xe9\x56\x69\x3a\xe9\x74\x52\xd3\x7b\x68\x45\x11\xb1\x5f\x55\xb1\x8d\x8d\x07\x70\x12\x6b\xd5\xff\xfb\x0a\x0c\x36\x3f\x6d\x92\xd5\x8c\x34\xda\xcc\x61\x3a\x05\x1f\x8f\x07\x7c\x3c\x3e\x1e\x16\x5d\x03\x8b\x0d\xad\x2a\x60\x05\x3c\x6c\xa1\xa0\x0c\x09\x28\x37\x88\x89\xc5\x7f\xce\x16\x8b\xc5\xa2\x40\x4c\xac\x47\x88\xac\x59\xaa\x8a\xd2\x80\xb7\x40\xf0\x13\x30\x0c\x7c\xbd\xf8\xee\x00\xb7\x1e\xa4\x5b\xde\xab\xa6\x47\x08\xab\x2e\xba\x0d\x2d\x61\x55\xea\x9f\xf2\xc7\x7a\x71\x27\x18\xae\x8f\xcb\x5f\x3c\x07\x82\xc6\xc6\xea\x39\x21\x37\xa8\xab\xa0\x16\xb7\xf0\x7b\x8b\x19\x94\x3b\x01\x15\xf7\x9a\x3f\xdc\x30\x5c\xe8\xaa\xe5\x30\xc8\xbb\xb6\xaa\x10\xeb\x7c\xac\x2e\x5e\x9e\xfd\x3c\x3b\x73\x67\xcb\xae\xd6\x93\x55\x62\x5e\xd0\xb6\x16\x7e\x8f\xe7\x4d\x43\x30\x94\x5b\x53\xad\xc0\xbc\xad\xfc\x72\xab\x99\xf2\xd1\xc3\x7d\xc2\x07\xb1\x41\xac\x4c\xe2\x3e\x31\x54\x97\x7b\x2a\x10\xf9\x17\x16\xa7\x59\xb8\x42\x9a\xce\x9d\x16\xe7\x95\x2c\x8a\xb6\x3b\x21\x1e\xba\x7d\x41\x29\x01\x54\x2f\x07\xcb\xe8\x05\x82\x69\x57\x85\xf1\x79\xd4\xf3\x87\xcb\xf5\x62\xb7\xed\xad\x40\x2d\xb0\xe8\x76\xdb\x81\x05\xaa\xf4\x11\x13\x82\xeb\xe3\x79\x59\x32\xe0\xc1\x34\xf7\xa5\x0a\xd8\xb4\xac\x38\x21\x0e\xcc\xc3\xdc\x00\xe3\xb4\xd6\x0c\x4e\x13\xd7\xe1\x2b\x2a\x4b\x2c\x30\xad\x11\xd9\x22\x81\xc2\x4e\xad\xca\xde\xcb\xa6\x27\xe1\x1d\x10\x28\x64\x5d\x40\x40\xaf\xbe\x1f\x1a\x10\x5a\x1f\xf9\x9e\x9e\xb7\xe2\x24\x47\x5f\x48\x8a\xff\xa6\x86\xe0\xcc\x2f\xf2\xeb\xfd\x49\x42\xfd\xfa\x6c\x68\xdb\xd0\x5a\xee\xa4\x60\x80\x63\x95\x1e\x62\x09\x07\xd4\x12\xb1\x69\x19\x83\xba\xe8\x5c\x7b\x42\xf2\x04\xf7\x3b\xc9\xb5\xb3\x37\x35\xda\x8c\xfc\x73\xd3\x53\x67\x57\xeb\x40\xd1\x30\x5a\xb6\x85\xf0\x8b\x31\x77\x66\x01\x4a\x6f\x94\xc7\x81\xcb\x3e\x0d\x97\x0e\x7f\xf7\xe8\x25\xce\x56\x03\x7b\x54\xb0\x6b\x48\x00\x50\xb0\xb7\xbe\xc7\xf6\xae\xa9\xb7\x43\xd8\x5b\x22\x97\x1b\xb0\xb6\x56\x23\xd9\xb3\x6e\x76\x7f\x66\x00\x57\x08\xd7\x77\x27\xdc\x34\xb8\x3e\x5e\x5e\x21\x4c\xdc\x95\xc1\xfc\xb2\x6a\x44\xe7\x4d\xdd\x09\x71\x63\xf8\x23\x65\x93\xde\x0d\xed\xc2\x51\xc9\xf8\xb8\xdb\xae\xb0\xfa\x67\x76\x44\x4b\x63\x20\xb7\xa1\x44\x0d\x8d\xd4\x12\x7d\x15\xdd\xaa\x42\xec\x07\x88\x1b\x82\x0a\x70\x5c\xfd\xb0\x78\x42\x0c\xa3\x5a\xf8\x03\xd8\xd5\x62\xec\xf9\xf2\x45\x00\xab\x11\xb9\x85\x03\x48\x1e\xc3\x8a\xc1\x61\xc6\x03\xd3\xfa\x1b\x6d\x8b\x13\xb0\x3b\xf4\x84\xeb\x63\x10\x32\x07\x4f\x15\xeb\x21\x12\x58\x1e\xfa\x52\x6d\x90\xb7\x95\x59\xb6\x24\xf3\x5c\x8c\x8c\xbf\xc9\x83\x60\x58\x57\xd3\x60\x43\x79\x10\x77\x11\x21\xa6\x7a\x8f\x05\x89\x10\xca\x6c\x86\x4f\x8c\xf2\x44\x1f\x0e\x24\xc3\x27\x6b\x7f\x65\xa1\xdd\x43\x67\x7a\xe7\x56\xd7\xb4\x96\x8b\x74\x0b\x44\x9d\xf6\x79\x8d\x5e\xd9\x62\x3c\xcf\xc6\xa0\x18\xd9\x17\x83\xae\xd0\xcc\x72\xf7\xa1\xa1\xb0\xd2\x14\x17\xdd\xbe\x6b\x60\x25\x4f\x39\x9f\xad\xd3\xd1\x73\x0c\x79\x9b\x13\x62\x47\x08\x26\xf1\x41\x97\x6b\xb7\x46\xd7\xad\xe8\xe5\x47\x82\x5b\xa8\x10\xae\x71\x7d\x8c\x61\xe2\xa2\xc6\xd2\x47\x96\x0a\xd4\x52\xca\x1b\x83\x06\x0f\xfb\xa9\x1f\x09\xd7\x3c\x9c\x6c\x73\x67\x81\x74\x3b\x31\x4c\xa2\x3f\x57\xba\xcd\x30\xcb\xcb\xfb\x49\xe7\x8d\x3f\xda\x7f\x34\x41\x00\x2f\x4e\x4d\x9a\xb5\x5d\xce\x30\x6d\xa2\xee\xae\x3e\x50\x87\x0a\x93\x9d\x0c\x63\xcc\xe8\xa1\xc8\xb0\xba\x47\x2f\x19\x96\x64\x43\x97\xd4\x52\x62\xaf\x17\x1f\x09\x45\x22\x6d\x19\x0c\x45\xa2\xfa\x40\x22\xee\xad\xa3\xa1\xdf\x18\xe8\x65\x6f\x75\xe6\x87\x65\xd9\x26\x39\x14\x15\x63\x75\x8f\xae\xb0\x18\x4e\x82\xdd\xa8\x41\xd4\x4f\x5d\x1c\x3f\x6a\x15\x8b\x70\x2d\x80\x1d\x50\x11\x2c\x87\x27\xd3\x74\xbf\x47\x24\xe0\x19\xc5\x34\xd2\x37\x44\x5a\x08\xa7\x37\x3e\x96\x6d\x2f\xb9\x82\x4e\x70\xd5\x10\x90\x45\xfc\xcf\x74\x27\xb8\x53\x99\x2b\x8d\xfe\x39\x79\xec\x0f\x77\xc1\xe8\xd6\xdd\xda\xb5\x91\x2b\xa0\xd9\xab\x17\xdd\xae\x5c\xe9\x2b\x40\xf2\xca\x27\x81\xa9\x11\x44\x1d\x97\x7b\x2f\xe1\xbc\xac\x1a\xc2\x5b\x94\xbf\x89\x90\xe6\xd9\xb3\xa3\xc2\xfc\x39\x3b\xa3\x6e\xf3\xc4\xed\x9c\xb6\x7d\xc5\x69\xfb\x96\xc3\xf6\xd5\x67\xed\x2b\xb5\xc5\x1b\xa4\xc5\x09\x71\xcd\xbe\xe9\xd3\xcd\x5e\x7c\x73\xba\x39\x41\x54\x96\x3c\x53\xf6\xe3\x40\xe8\xb3\x5b\x5a\x81\x38\xd1\xd2\x2d\x2b\x10\x63\x58\x8a\x41\xbb\xd0\x70\xef\x33\x2d\x50\xe4\xfe\xb7\xf5\xaa\x75\x1b\x8e\x19\x94\x7b\x5c\xc1\x7a\x21\xff\x3f\x24\x35\x9c\x0b\xe6\xea\x07\x74\xb6\xa2\x70\xee\x7d\x0e\xf2\x57\xe8\x1c\x05\x28\x11\x7f\xf3\x60\xd6\x5c\xf0\xf5\xa2\x42\xcd\x77\xde\x87\xc5\x7f\x73\x5a\xff\xfd\x16\x3d\x5f\x01\xe7\xe8\x08\x19\x8d\xaf\x50\x33\xa2\x5c\xb7\x2d\xa0\xef\xfe\x15\x6a\x02\xdf\x2d\xb8\x3f\x86\xc9\x15\x35\xd3\xb9\xd0\xcb\x1a\x9e\x68\x68\x36\x6d\xd0\x72\xb8\xf0\x52\x0c\x8e\xa0\xca\x38\x6f\x23\x1a\x41\x48\x39\xee\xba\xd2\x48\xe6\xa6\x36\xae\x98\xdc\xf6\x28\x9d\x35\x8a\x25\x9b\xac\x03\xc1\xde\x46\xbb\xba\x90\xe1\x25\x21\x06\x9c\x8a\x99\x53\xd9\xef\x70\x4a\x10\x78\x58\x4d\xcb\xc7\x6e\x83\xaa\x06\xe1\xa3\x52\xdf\xab\xc2\xfa\x61\xa9\x84\x9c\x61\x3e\xf6\x12\xe3\x80\x89\x00\x36\xa5\x32\xc2\xe6\x39\x63\x1b\xe4\xb0\xed\xa0\x1b\x0f\xac\x4b\xc4\xc2\xad\x22\xe8\x11\x48\x2f\x4a\xfc\x2a\xbd\xa4\xa6\x32\xad\xcf\xa2\xad\x31\xb7\xe2\xb0\x9f\x8c\xa3\x4c\x7c\x61\xa5\x8c\x50\x5a\x0d\xcd\x09\x00\x8b\xb7\x38\x3c\xeb\x86\x33\x4e\xab\x2f\x87\x3f\xaa\x24\x6e\xde\xb6\x6a\x67\xf9\xfc\x1b\xbb\x17\x71\x55\x3a\xa0\x09\xd2\x01\xaa\x52\x67\x04\xae\x12\x29\x03\xdb\xcb\x6b\x54\x79\x15\x9c\xb6\xac\x00\x3f\x73\xf6\xbb\xe8\xac\x14\xd5\x7c\x3c\x75\x11\x4a\x6f\x05\x98\xcc\x10\x3e\xdc\xe8\xfc\x4e\x7d\xb8\x5e\xde\x7e\x14\xb8\x3e\x12\x50\x2c\x99\xba\xd3\x8f\xa8\x64\x32\x82\xd1\xe7\x39\x33\x06\x32\x97\x4a\xcb\x0d\x4c\xe3\x71\xc1\xe8\xb3\x9f\x31\x56\xbf\x53\x9b\xb2\x0f\xcd\x9a\x4e\x4f\x48\x58\xfb\x22\xbe\x43\x0e\x98\x71\x51\x2b\x12\x24\x31\x04\x45\x21\x2e\x1f\x71\x59\x12\xb8\x0e\x50\x8e\xf4\xee\x83\xfd\xa4\x3f\x1c\x91\x56\x68\x69\x90\xc4\x08\x06\x10\x19\x5a\x88\xb9\x66\x53\x3e\x8f\x1c\xd5\xf3\xf6\x19\xd7\x21\x4b\x0b\x5a\x35\xa8\xee\x82\xee\x9c\xd8\x86\x45\x08\xf0\x30\x0d\xe5\x62\x88\x7e\x49\xaf\xd5\xcd\x72\xd2\x0e\x83\x23\xb6\xe2\x68\xdc\x1f\x49\x23\x36\xe3\x73\x8f\x09\x0c\x39\x2b\x06\x04\x9a\x13\xad\xa7\xd8\x01\x95\x4a\xbe\x26\x7d\x8e\x12\xb5\x7f\x6c\x30\x97\xef\xf9\x37\x0b\x05\x97\x0a\x48\x20\x4c\x7c\xe4\x8d\x5b\x6b\xe2\x27\xe6\x02\xd7\xc7\x4d\xcb\x05\xad\x80\x45\x1e\x28\x2e\x23\x90\xb8\xbb\x31\xa4\x17\xb3\x27\x86\x39\x78\x66\x2e\x60\x48\xc0\x97\xc3\x05\x66\xe2\xe4\xc5\x64\xc4\x79\x43\x59\x7f\x71\x67\x5d\xbc\xf2\xba\xad\x1e\x7d\x59\x5d\xa3\x9e\xc7\x8a\x86\x93\x13\xef\x06\x51\xed\x10\x03\x0e\xec\x09\x4a\x75\x1c\xce\x66\x7c\x86\xe4\x5c\xf2\x92\x90\x52\x75\x39\xf9\x95\x68\x97\x63\x02\x32\xda\xe7\x94\x40\x31\xc9\xbd\xa4\xb3\x83\xc2\x88\x46\x76\x93\x23\x4c\x5e\xad\x6e\x47\xc4\x4c\xf2\xf0\x1b\x22\xb8\x54\x0b\x75\x0b\xbc\x25\x46\x32\x9d\x10\x97\x38\x5a\x5f\x32\x46\xc7\x78\xe5\x89\xeb\x01\xa0\xef\x1d\xbf\x82\x47\x0f\xac\x84\x8e\xb4\xcb\xed\xcd\xe8\x65\x9d\xa4\xd8\x18\xfd\x50\x06\x93\xf9\xc2\x08\xd6\x52\x3f\x92\x26\xf1\x78\x90\xf2\x32\x91\xd9\x93\xf2\x44\x33\x6f\xbc\x78\x52\xf9\xdb\x30\xdd\xeb\xc0\x7d\xb1\x99\x09\x34\x0f\xee\xa5\xe5\x23\x65\x86\xb6\x07\xca\xaa\x3e\x28\xf4\xff\xcd\x35\x53\xd1\x61\xa1\x8e\x55\x33\x27\x91\x0c\xca\x83\x84\x5a\x4b\x3d\x64\x52\x1a\x46\x0b\xe0\xdc\x92\xa1\xa9\x87\x73\xfd\xea\x37\xe4\xd5\x2d\xae\xfc\xc1\x5d\x47\x0c\x98\xc9\xc2\x40\x4a\x45\x81\x30\x93\xa9\x5a\x7d\x1c\x00\x83\xb8\xab\x81\x21\x32\xd5\x66\x9a\x7e\x23\x44\xfb\x50\x25\x98\xaf\x5f\x68\x3f\xf7\x97\x88\x69\x36\x78\xbe\xbe\xc9\xf2\x30\x1f\xae\x76\xce\xa5\x9f\x15\x77\xdf\x05\xda\xac\x40\x33\xb2\xec\x1f\xeb\x79\xcc\x3f\x53\x98\xff\x67\x09\xa7\xe4\x9b\x15\x49\x63\x98\x0c\x09\x77\x86\xeb\xa6\x15\x23\xb9\x43\x5e\xef\x14\x20\x87\xd8\x7f\x22\xaf\x33\x68\x9d\xc1\xea\x0c\x52\x67\x70\x3a\x83\xd2\x19\x8c\xce\x20\x74\x06\x9f\x33\xe8\x9c\xc1\xe6\x0c\x32\x67\x70\x39\x83\xca\x19\x4c\xce\x25\xb2\xc7\x63\x93\x22\x7d\x27\xf2\x3b\x91\xff\xd2\x44\xd6\x2f\xa7\x0e\x9b\x6d\x26\x97\x6e\xd5\x7a\x7e\x0b\xa8\x66\x73\x69\x7f\xf7\xe5\xa7\x9f\x01\xf7\xe1\x27\xa2\xd9\xa7\x25\x53\xc4\x9f\x2c\xc9\x1e\x69\x37\x68\xf6\xb9\x61\xc4\xfd\x7b\xc5\x00\xff\x60\x65\x9e\x18\xdb\xbb\x8e\x7c\xd7\x91\x7f\x2d\x1d\x39\x15\xb5\xcc\xfb\xe0\x97\xc6\xfa\x88\x23\x77\x67\x26\x1e\x9d\x7f\x9e\x9d\xc1\x8b\x80\xba\x54\x69\xa6\xc5\xd7\x76\xfc\x0e\xc2\x71\x62\x9d\xf8\xd8\x7f\x19\x42\xcd\x46\xa6\xc1\x87\x8e\x7e\x86\x27\xe8\xfe\x4a\x53\xde\xf7\xe0\xbc\x2c\xf7\x54\x9a\x58\x05\xef\x3a\xbb\xed\xf2\xc3\xf8\xfa\xf2\x21\x3e\x1f\xbf\x64\xba\xbf\x05\x02\x02\xec\xa7\xe1\xf9\xaf\x73\xe7\xed\xed\x04\x54\xc3\x47\xad\xca\xdf\xff\xc9\xe8\x6f\x4d\x89\x7a\xa3\x5f\x45\x97\x61\xd7\x9a\x9e\xdc\x2e\xd4\x6a\xf5\xfd\xb8\xc7\xc2\x0a\x8d\x01\x76\x3d\x7b\xdb\x09\x3e\xd0\x0a\x71\xe9\x8e\xbd\x3c\xcf\xca\xff\x5a\xe9\x83\x4f\xf0\xa0\xb7\x68\xa6\x28\xd6\xe1\x79\xd3\x90\x6e\xcc\xa1\x7e\x61\x26\x29\xba\x2a\xb2\x16\x28\x62\xf2\x16\x2a\xfa\x04\x83\x9d\xa3\xfe\x23\x6f\xc1\x93\xf6\x46\x1f\x57\xf6\x73\xf1\x1b\xec\xf5\x73\xec\x1d\x9b\xc0\x57\xa3\x0c\xea\x0b\x82\xcc\x54\x4c\x42\x2d\xef\x83\x2f\x54\x63\x27\xf2\x7d\x7a\xb1\xe3\x21\x8e\xaf\xb8\xfb\x3b\xd9\x8b\xdb\x2e\xdf\x9f\x9f\x67\xff\x0d\x00\x00\xff\xff\x47\x35\x3b\xca\xc9\x34\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
