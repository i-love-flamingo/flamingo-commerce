// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x97\x51\x6f\xdb\x38\x0c\xc7\xdf\xf3\x29\x58\xec\x65\x7b\xd8\x17\xf0\xdb\x96\xbb\xe1\x06\x6c\x68\x2e\xdd\x76\x0f\xc3\x10\xb0\x12\x1d\x0b\x95\x45\x1f\x45\xb7\x33\x0e\xfb\xee\x07\xc9\x6a\xea\x34\x49\x91\xa5\xdd\x76\x97\x87\x61\x95\xcc\x3f\x7f\xa4\x29\xca\xd4\xa1\x23\x98\x73\xdb\x92\x18\x5a\xcd\x1b\x32\x57\xdc\xeb\xea\x42\x51\x74\xe1\xd1\xd0\xb9\x58\x92\xd5\x92\x62\xef\x15\xfe\x99\x01\x00\xf4\xbd\xb3\x15\x5c\xa8\xb8\xb0\x3e\x9b\x7d\x9b\x3d\xdb\x23\x70\x67\x3b\xe7\xa0\xf4\x55\x41\xa8\x13\x8a\x14\x34\x82\x36\x04\x32\x2a\x72\x9d\xff\x32\xbd\x08\x05\x85\xe7\xd2\x87\xe0\xc2\xfa\x05\x74\x49\x00\x38\x29\x40\xdb\x2b\xaa\xe3\x30\x3b\x40\xbb\xeb\x6c\x04\x7d\x06\x1f\x1a\x82\x39\x8a\x82\x36\xa8\xe0\x22\xac\xd9\x85\x35\x28\xc3\x25\x8d\x2e\x6c\x7e\xd2\xa0\x68\x75\xa7\xfc\x1b\x19\x16\x54\xb2\xc9\x76\x22\x35\x5a\x14\x2a\x17\xc0\x60\xbc\x65\x74\x11\xd0\x0b\xa1\x1d\xa6\xba\x79\xef\x6d\xa8\x39\x56\x87\xb8\xed\xf9\xe6\x99\xe2\xe9\x42\x51\x09\x2c\x75\x14\x6c\xa2\xe5\x90\x73\x14\xf3\x32\xd7\xd0\xe1\xd0\xa6\x64\x61\xb0\x5b\x69\x7a\x59\x1e\x69\x71\x00\xc3\x41\xd1\x05\x40\x6b\x5d\x4a\x1d\x7a\x70\x1b\x17\xf9\xb1\x83\x40\x99\x27\x33\xac\xf2\xbf\x67\x05\xeb\x15\xf4\xc1\xfd\xdd\x13\x38\x0b\x35\x4b\x66\xea\x84\x0d\xc5\xb8\xb7\x2c\x66\x87\x0b\x63\x12\x33\xbc\x1c\xc1\x00\x2f\xb9\xd7\x51\x74\x92\xe5\xb4\xaf\x43\xe7\x0c\x7a\x3f\x40\x6c\xf8\x26\xa4\x7c\x20\xc4\xde\x10\xc5\x08\x1d\xae\xe9\xc1\xba\x98\xfa\x1a\xcb\xa2\xe4\xaf\xbc\x96\xf2\xfb\xfc\x50\x36\x16\x77\x16\x67\x5f\x46\x8d\x7b\xd2\xd5\x3d\x0d\x94\x1d\xf7\xc5\x92\x5a\x74\x7e\xe3\xb6\xfc\x26\x59\xcb\xb1\x3c\xf8\x6e\x26\x34\x25\xa2\x35\x2a\xdd\xe0\x50\xed\xe8\x4d\xc2\x5d\x08\x5f\x3b\x4b\x52\x6d\x6d\xb6\xa4\x0d\xdb\x6a\x97\x24\xfd\x1f\x5b\xee\x83\x4e\x36\x37\x54\x0b\x71\xa6\x14\x86\x3a\xf5\x54\xed\x8f\x65\xe6\x82\x92\xd4\xa9\x44\x8f\x2c\xb6\x12\x50\xc0\x96\xaa\x9d\xac\x1c\xa9\xb1\xfa\x0b\x9d\x82\x6b\x3b\x4f\x6d\xee\x37\x3f\xdb\xf7\x1b\x96\x79\x1f\x95\xdb\xd4\x17\x7e\x0d\xc6\x45\x6f\xd2\xc1\xfc\x55\xee\xdf\xa0\xf3\x64\x9f\xca\x7b\x5a\x11\xc2\xc8\xe1\xe8\xa6\x55\x08\x96\xd9\xea\x84\xf4\x35\x7c\xf3\xb6\x16\x6c\xe9\x29\x63\xf8\xb8\x7c\xf7\x88\x37\xda\xf0\xcd\x1f\x1f\xde\xbf\x7b\x4a\xa0\xa4\x77\x3a\xd1\x92\xac\x13\x32\x4f\x76\xd4\x1e\x9d\xa2\x05\x47\xfd\xe1\x50\x69\x61\x81\xa9\x34\x94\x24\x56\x0f\x5f\x1c\xa5\x16\x59\xda\xd5\xc6\xe6\xec\x4b\x0a\xec\xbb\x3b\xe3\x56\x45\x17\xd4\xdb\x43\x31\xb2\xe5\x8e\x7b\xc2\x31\x1d\x25\x57\xbf\x8b\xf0\x29\xfd\xea\x38\xb0\xd3\xb9\xca\x75\xf7\x5f\xc5\x9b\x63\x30\xe4\xc9\xbe\x1e\x1e\xd1\xf3\x7f\x52\x0e\xff\x17\xac\xe9\xdb\xe9\x13\x7a\x67\xf3\x37\xff\x0f\x7c\xed\x69\xe9\x7a\xe3\x68\x1c\x71\xa6\x17\x4c\xfa\x86\xfb\x74\x6f\xff\x7b\x9a\xd2\xf6\xb1\x2f\x0c\x57\x34\x6c\xf7\x92\x6b\xf4\x3d\x55\xf0\xb9\xac\xe5\xe6\x40\x5f\x95\x82\x85\xec\xe7\xcf\x9e\x64\x28\xc6\xbb\x3e\x5f\x19\x75\xd7\x74\xe7\xb9\x82\xd7\xcc\x9e\x70\xbc\xf3\xa6\x3a\xef\xcb\x10\xb5\x99\x8d\xce\x83\x1f\xa0\xe3\x18\xdd\xa5\x27\x70\xf5\x38\x77\xb4\x18\x4d\xe3\x02\x41\x60\x05\xcc\xea\xc0\x79\xd8\x41\xa8\x5d\x9a\x23\xf2\xf4\x70\x00\xe7\xde\xdc\xf8\x5c\x48\x7b\x09\x1f\xc5\x6f\x62\x7e\xb1\xef\x0a\xdf\x3f\x6e\xde\x0e\x1e\x8b\x09\xe3\x38\xe1\xb8\x98\xf1\x32\xcf\x01\x92\xb1\xd4\xf7\x26\x66\xbf\xc1\x92\x6a\xa1\xd8\x4c\x2d\x8e\x98\x34\x8f\x56\x7b\xed\xd9\x5c\xb9\xb0\x3e\x52\xf5\xdb\xec\xdf\x00\x00\x00\xff\xff\xea\xe0\x51\x28\x9a\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
