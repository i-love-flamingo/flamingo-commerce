// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xc1\x6e\xdb\x30\x0c\xbd\xeb\x2b\x18\xf8\xb2\x5d\xb2\xbb\x6f\x6b\x83\x02\xc5\x36\x74\x6b\x80\x5d\x82\xa0\x50\xac\x37\x5b\xab\x2c\xa5\x16\xdd\x36\x1b\xf2\xef\x83\x2c\xc7\xb1\x1d\x7b\xc9\x29\xd2\x23\x1f\xf5\x1e\x49\x6b\xbb\xaf\x99\x6e\x5d\x59\xa2\xca\xf0\xb4\x86\xac\xb2\xe2\xe9\x0b\x0e\x3f\xa5\xa9\x71\xa7\x0d\xa3\xa2\xbf\x82\x88\xe8\x39\xa5\x35\x57\xda\xe6\x8b\xe6\xf8\x9a\xd2\xa6\x3d\x6f\xc5\x51\x88\x69\xa6\x47\xbc\xd4\xf0\xdc\x52\xec\x65\x8e\xb5\xfe\x83\x94\xce\xbf\x7b\xcb\x1d\xd6\xbf\xef\x63\xde\x55\x7c\x73\x18\xa2\xb1\x76\x07\xaf\x74\x85\x8c\xb5\xb3\xe9\x05\xfc\x3c\x50\xe3\x9b\x80\xcd\xff\x25\x2f\xb6\x4d\xe6\x4b\x8d\x6a\x54\xf6\x44\x7c\x14\x22\x99\x96\xfc\x55\xbf\x22\xfe\x3d\x8b\x4f\xae\xb0\x25\x47\x21\xf8\xb0\xc7\x05\xd9\x37\xb0\x6c\xcd\x1b\xa7\xf7\x9b\xe1\x2a\x9d\x6b\x2b\xcd\x8f\x36\xa6\x8f\x8d\x8d\xbd\xb7\x1c\x01\x5b\x97\xdf\x65\x0e\x9f\x4e\x00\x8f\xf0\xb5\xe1\x16\xea\x80\x60\xf4\xc3\x3e\xb8\x3c\xe3\xe2\xba\x0b\x88\x43\x31\xa9\xe9\x1c\xd4\x2a\x33\x72\x07\x33\x9c\xae\x5f\x1a\x46\x0d\xaf\x3c\x0c\x32\x86\xfa\xec\xb3\x94\x6e\x9c\x33\x90\x76\x88\xac\x30\x80\x66\xeb\xd7\x79\x0e\xdf\xab\xcf\x78\xe7\xf4\xd2\xd4\x42\xe7\x85\xd1\x79\xc1\xe7\x77\x84\xae\x4f\x72\x46\xbf\x4e\x9d\x2e\x74\xb0\x6e\xb3\x1d\x47\xad\x5c\x56\x97\xb0\x4c\xf4\x89\x1e\x2a\x2a\xe5\x61\x07\x7a\x03\x29\x67\x99\x2c\xa0\x9a\x4c\x92\x56\x11\x17\xa0\xd2\xa9\xda\xc0\x47\x84\x1d\x49\xa5\x48\x12\x54\x8e\x70\xe2\x42\x7b\x72\xbb\xdf\xc8\x78\xb9\x5c\x06\x9a\x37\x6d\x0c\x79\x20\x3e\xc2\x37\x35\xc3\x00\x45\x6d\x53\xa3\x15\x85\x26\x74\x27\x33\x84\x27\x2b\x57\x4a\x6d\x97\xcd\xf1\xd6\x19\x13\x57\xaa\xe5\xeb\x6c\x9b\x6b\x7e\x17\xb0\x6d\x06\x5a\x24\x78\x67\x04\x2d\xc1\xb1\x66\x34\x4f\x06\x8d\x52\x3f\xf8\xfe\xbe\xa4\x73\x5f\x91\x8f\x53\x48\xf0\x7d\x92\xb4\xb7\x88\xd7\xf8\x2f\x56\x76\xb6\xd2\xd5\xcc\x85\x48\x8e\xff\x02\x00\x00\xff\xff\xca\x26\x17\xed\x55\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
