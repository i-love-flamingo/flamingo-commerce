// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xcd\x6e\xe3\x36\x10\x3e\xaf\x9f\x42\x46\x2e\x59\x60\xd1\x07\xd0\xcd\xb1\x8a\x85\xd1\x8d\x9b\x4d\xbc\xed\x61\x11\x14\x13\x71\x6c\xb3\xa1\x48\x95\x1c\x25\x11\x8a\x7d\xf7\x82\x12\x65\x93\x14\x25\xa7\x68\x73\x08\x12\xce\xc7\xf9\xfd\x66\x86\xa2\xb6\xc6\x6c\xad\xaa\x0a\x75\x89\x7f\x14\x58\x2a\x0d\x84\x6c\x0d\x9a\xb2\xbf\x17\x59\x96\x65\x25\x68\xca\xcf\x10\x2b\x59\x76\x02\x36\x80\x0b\x14\xfc\x05\x35\x47\x93\x67\xdf\x03\x60\x11\x41\xda\xe5\xe3\xe2\xc7\x62\x11\x1a\xf5\x6c\x71\x96\x67\x9b\xa2\x57\x8f\x92\x38\xb5\x9b\x22\xcf\x1e\x48\x73\x79\xe8\x4f\x9f\xb8\x10\x5c\x1e\x56\x8c\x69\x34\x26\xf2\xcb\x9d\x76\xc0\xba\xd1\xe5\x11\x0c\xea\x08\x73\x87\xda\x28\xe9\x02\x98\xf6\xfb\xe4\xae\x05\x5e\x7d\x00\xc6\x38\x71\x25\x41\x14\x40\x30\x36\xeb\x09\x97\xee\x4a\x0d\x6d\x85\x92\x1e\x50\x60\x69\xa5\xb1\x1f\x91\xd8\x85\x87\x42\xc9\x83\xd9\xa9\x55\x43\x47\x9b\x81\xd2\x66\xef\x5b\x17\xc6\x8d\x52\x02\xc1\x01\x21\x96\xc7\x89\xba\xfa\x00\x75\x2d\x38\xb2\xb5\x6a\x6a\x25\xd7\x8a\x8d\xc3\x3c\x8b\x5c\xa0\x0c\xf7\xd0\x08\x5a\x37\x5a\xa3\x2c\xdb\xb3\xc6\x2b\x2b\x25\x45\x20\x38\x61\x35\x52\xb4\x1b\x24\x4e\x8f\xfd\x73\xad\x1a\x49\x79\xb6\x91\x8e\x2e\xb5\x56\xac\x29\x29\x3e\xe6\x26\xc8\x04\xb2\x28\xd0\x83\x06\xc9\x3a\xfd\x5e\x02\xef\x34\x2f\x31\x8a\xf3\x33\xdf\xd3\x1a\x34\x1b\x39\xb7\x0a\xe5\x53\x14\x1c\x71\xd5\x71\xd2\xb1\xa4\xcd\x63\xb8\xa3\x48\xd8\x0b\x9b\x54\x7a\x0a\x5f\x3a\x6d\x3f\x69\x76\x23\xf7\x6a\xc2\xb4\x15\x9d\x5a\x34\x59\x97\xcd\xb9\x24\xe6\xc8\xeb\x9a\xcb\x83\x3d\x8a\xf4\x3d\x78\xa2\x1e\xdb\x3c\x75\x19\xff\xac\x55\xd0\x63\x5d\xda\x2f\x54\xc5\x29\xa8\x3a\xe1\x0e\xde\x56\x55\x5f\xf0\x24\xaa\x37\xb3\xc5\x29\x79\xaf\xa5\xe0\xa6\xb4\x4a\x66\x55\x55\x5b\x25\x6d\x00\xf7\x28\xba\x22\xbe\xeb\xce\xbf\xbd\xe0\xa5\xe5\x77\x4e\xc7\xe1\x4e\x3a\x47\x5e\x78\x97\xc1\x47\x30\x8e\x3a\x27\xf6\xcf\xb2\xc4\xd6\x7e\x18\xd0\x8a\x61\xd8\xfb\xaf\x4a\x3f\xef\x85\x7a\x0d\x4f\x2b\xa4\xa3\x62\xe1\x59\x09\x5a\x73\x3b\x5c\xfc\xc3\x81\x7a\x5f\x54\x09\x89\xc9\x55\x44\x62\x77\xc7\x70\x8d\x6c\xc7\x2b\xcc\x33\xfb\xbb\xa7\x09\x46\xc3\xf1\xfa\x19\xcf\x53\xe5\x63\x68\x36\x9c\xb1\xbf\x60\x6b\xe9\xec\x00\x8f\xfd\x04\xf2\x20\x5e\x1e\x4c\x9e\x55\x50\x7f\x37\x1d\xf4\xf1\x4f\xa3\xe4\x4f\xf7\xf0\x7a\x8b\xc6\xc0\x01\xe7\xd3\x38\xc4\x90\xb9\x5c\x5a\xe4\xc8\xab\x0b\x9b\xa6\x31\x78\x13\x6d\xa5\x60\x82\x85\xf5\x49\xba\xe3\x77\xe0\xe0\x09\x27\x11\xb9\x52\x5b\xb6\x4c\x35\x0b\xcd\xb6\x1a\x9b\x67\xf7\xfc\x40\xf4\xbc\xe2\xe3\xe9\x71\x9a\x1a\x6e\xc0\x07\xca\xbb\x93\xb4\x7a\x5f\xab\xbf\xf6\xdf\x08\xb5\x04\x71\x8f\x7b\xb4\x4b\x28\xca\x41\x05\xfa\x19\xa9\x16\x50\xe2\x7a\xc4\xfb\x17\xd0\x1c\x24\xdd\x76\x98\xbb\x34\xc6\x79\xb9\x85\x2a\x12\x18\xd5\xe8\x12\xe3\x35\xfa\x17\xb5\xde\xb2\x9a\xa7\xe8\x18\xf1\x1b\x88\x06\x47\x98\x77\x76\xc5\x30\x17\x56\xb1\xd1\x18\xee\xd8\xd6\x47\xc1\xe5\x41\x60\x57\xd5\xe4\xf4\x5e\xc6\xa8\x04\x9f\x7a\x8c\x56\xaf\x97\xd4\x0c\x90\xa4\x8e\x2b\x87\xd8\xc1\x1b\xfa\xf7\xbb\xff\x27\xfa\xc0\x35\x90\xa3\xc5\x0b\x50\x9e\x25\x7e\xfc\xfa\xec\xb9\x36\x24\xbb\x62\x4e\x62\x04\x24\x21\x21\xaf\x38\x63\x02\xb7\x23\x94\x8f\x71\x2d\x39\xeb\x8f\x01\xd1\x90\x9b\x9a\x93\x18\xd2\x88\x89\xd0\xc6\x98\xad\x9e\xf3\xf9\xcc\x35\x97\xb7\x2f\x5c\x8e\xd9\x56\xaa\xaa\x06\xd9\x8e\xcc\x05\x6b\x80\xd3\x18\x10\x61\x6a\x65\xa8\x6f\xa7\x39\xaf\x81\x2e\x65\x48\xe3\x81\xf7\x8f\xce\xe9\x0c\x75\xb3\x4a\x5f\xf0\xb9\xc7\x8c\x14\x05\x15\x43\x81\xf5\x51\xc9\x39\x76\x60\x05\x5c\xcc\xf8\x9c\x24\x6a\xff\x15\xe1\x78\x7a\x79\x45\xd4\x1d\xdc\x6e\x2d\x02\x2e\x62\xe4\x5d\x28\x1d\xe6\x20\x37\xc4\xe5\x61\xdd\x18\x52\x15\xea\xc4\x77\xc7\xcf\x09\x48\xda\xdd\x14\x32\x9a\xbd\x33\x61\x9e\x3c\x1b\x9e\xa6\x40\xf8\xeb\xfe\x86\x6b\x3a\x46\xb3\x15\x8c\xa9\x95\xee\xdf\xf8\xba\x4d\x0b\xb7\x4d\xf5\x14\xbf\x38\x24\xf4\x3c\xee\x68\xe8\x25\xde\x2e\x03\xc9\xba\xad\x9c\x7d\x6d\xce\x8f\xe3\xd2\x77\x32\x9f\xf8\x7e\x1d\x69\xb8\x75\x9d\x19\x2b\x59\x31\xb6\x53\xf6\xc6\xf5\x68\xbb\x6c\x8a\xe5\xa7\xf3\x0e\xf8\x74\x7a\x1a\x05\x7b\xe5\xe3\xb4\x07\x81\x9d\x02\x05\x12\xfa\xcf\x8f\xeb\xff\x41\x9f\xdd\xa3\xd7\x76\x2f\xdb\xd5\xd5\xf9\xfb\x9f\x94\x7e\xab\x6d\x79\xad\xd2\xaf\xd4\xbe\x43\xaf\x97\x9e\x19\x13\x3f\x16\xff\x04\x00\x00\xff\xff\x64\xec\x55\x4c\x69\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4201, mode: os.FileMode(420), modTime: time.Unix(1567425423, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
