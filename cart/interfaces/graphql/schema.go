// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe4\x28\xf6\x7d\xaf\x4f\x41\x94\x97\x6a\x29\xbf\xdf\x68\xf7\xb1\xde\x2a\x55\x49\xab\x34\x9d\x4c\x3a\x5d\xd3\xfb\xd0\x6a\x45\xc4\xbe\x55\x66\x1b\x83\x07\x70\x12\xab\xd5\xdf\x7d\x05\x06\x1b\x30\xfe\xb3\xb3\x3b\xa3\x95\x76\xe7\x61\x5a\x05\x87\x7b\x2f\x70\xb8\xf7\x80\xa3\x9a\x0a\xd0\x8e\x97\x25\x88\x0c\x9e\xf6\x90\x71\x81\x15\xe4\x3b\x2c\x14\xfa\xbe\x42\x08\xa1\x0c\x0b\xb5\xe9\x21\xba\xe7\xc2\x74\xe4\x0e\xbc\x07\x4a\x5e\x40\x10\x90\x1b\xf4\x25\x00\xee\x23\x48\x73\xf1\xd5\x0c\x3d\xc3\xb0\xeb\xba\xd9\xf1\x1c\xd6\xb9\xfd\xa9\x7f\x6c\xd0\x27\x25\x08\x3b\x5f\xbc\x8b\x02\x18\x0c\x5e\xfd\x58\xad\xc2\xa9\x78\x33\x20\xf9\x06\x1d\xf6\x6d\xd0\xc0\x14\x51\xcd\x61\xdf\x99\x36\xad\xcf\x84\x52\xc2\xce\xdb\x3c\x17\x20\x65\xe4\xcc\xb6\x1a\x60\x55\x8b\xac\xc0\x12\x44\x84\x79\x00\x21\x39\xb3\xcb\x32\xbe\x1a\xc1\x22\xe0\x3c\x27\x8a\x70\x86\xe9\x1e\x2b\x3c\x74\xea\x75\xb6\x51\x56\xb8\x29\x81\xa9\x4f\x40\x21\xd3\x7d\xd1\x90\xa7\x87\xa8\xbf\x9d\x1a\x50\xce\xce\xf2\xc8\xb7\xb5\x2a\xf4\xec\x33\xbd\x6e\xbf\x9a\x29\x5c\x73\x4e\x01\xb3\xd6\x3a\x8e\xfb\xe3\x45\xc2\x55\x45\x09\xe4\x3b\x5e\x57\x9c\xe9\xed\x19\x4c\xb0\xef\xb2\x53\xcc\xe1\x84\x6b\xaa\x76\xb5\x10\xc0\xb2\x26\xb4\xa7\xb8\xc2\x94\x28\x28\x07\x76\x8e\xae\xc7\x9a\x21\x32\x98\x1a\xe4\x71\xe8\x6d\x64\xef\xc9\x49\xed\xb0\xc8\x07\xf6\xb6\x61\xbf\x4f\xc2\xdf\xc3\x3d\x4b\xb9\xc8\x86\x5b\x11\x3b\xec\xeb\xca\x01\xee\x30\x61\x9f\x0a\x52\x55\x84\x9d\x6f\xee\x30\xa1\xce\xb4\x9d\xdb\x4d\x59\xa9\xa6\x9b\x91\x69\x2c\xb0\x74\x66\x6f\xb9\x98\x8c\xcd\x0d\x1b\x4e\xe9\xa0\xa0\x3c\xec\xd7\xc4\xfc\x33\x3b\x9d\x0b\x67\x60\xe9\x40\x8d\xea\x06\x99\x1d\xfb\xa8\x9a\x75\x89\xc5\x37\x50\x0f\x14\x67\x10\x44\x7a\x85\x5e\xb0\x20\x98\xa9\x38\xfe\x03\x53\xbd\xe7\x9b\x37\x05\x82\x61\xfa\x08\x27\xd0\x8c\x81\xb5\x80\xd3\x4c\x04\xed\x2a\x2a\x28\x77\xbc\x66\xca\x18\xb4\xc7\x45\xf0\xbc\xce\x94\xdf\xec\x3c\x7d\xe6\x75\x56\x80\xf8\x84\x5f\x08\x3b\xfb\xe7\xfd\x41\x90\x0c\x5a\x94\xc0\x2c\x37\xd3\x8a\xbb\xad\x99\xcb\x9f\x7e\x42\xef\x41\x6d\x29\xb5\xe4\x7c\x84\xdf\x6a\x22\x20\xd7\x61\x49\xf4\x7f\x48\x80\xaa\x05\x93\x08\x53\x8a\x54\x01\xa8\x6d\x5f\xeb\xc8\x75\xb8\x57\xc8\x91\xe2\x60\x7e\x19\x5f\x06\xf3\x0e\xa9\x02\x2b\xc4\x00\x72\xa4\x38\x7a\x06\x54\x61\x92\xa3\x57\xa2\x0a\x63\xe8\x44\x18\xa6\xe8\x2c\xb8\x94\xa8\xea\x02\xbe\x3c\xd5\x2c\x43\xeb\x0c\x69\x07\xef\x26\x42\x5b\xbf\x43\x66\x1e\x36\xd0\xef\x3f\xda\xf9\xc8\xba\x3c\xe2\x37\x88\xb3\xdf\x93\x69\x74\x0b\x67\x4e\x27\x24\x12\xe0\x53\xdb\x7a\xd1\xd9\x72\x93\xbb\x07\x95\x5c\xdf\x10\xf2\x37\xa2\x8a\x3d\x91\x99\xde\xab\xf4\x7e\x14\x58\x3a\xfc\x8e\x4b\x0d\xf2\x0f\x0c\xa6\xd4\xf5\x1e\x89\xa2\x89\x83\x28\xeb\x67\xb3\xc2\xef\xf5\xb2\x8d\x45\x64\x10\x47\xfc\xb6\x2d\x5b\xd2\x24\x51\xad\x9d\xd4\xbc\x86\x8e\xe6\xe7\xe5\xd9\x5b\x02\x6e\x43\x74\xa8\xc9\x38\xcb\x7b\xce\xf4\x16\x3f\x02\x35\xa5\x72\xd1\x98\x7f\x6e\x40\x81\xe5\x36\xae\x0a\xc3\x94\xd4\x91\xd0\x1e\xea\x20\xff\xb9\xe4\x61\xc8\x78\xdd\x1c\x9b\x0a\xd6\xba\x92\xc7\x79\x62\xba\x42\xf4\xa7\x75\x57\x60\x71\x86\xc1\xf2\x3d\xd9\xf6\x55\x14\xb7\x57\x33\xa2\x04\xfc\x08\x25\x26\x8c\xb0\xf3\x08\x44\xd6\x65\x6c\xe3\x96\x8b\x4c\x17\xa7\x68\xa5\x92\xda\x44\x9f\x2b\xab\x4f\xf0\xf8\x02\xeb\x71\xc1\x72\x69\xd5\xb3\x41\xb7\x94\x63\x75\x31\x6e\x18\xa4\x35\x6d\x6a\xec\xc4\x06\x9e\x4d\x96\xb0\xe7\xfe\xcb\xc0\xce\x57\xaf\x2a\xb4\x3b\x83\xdf\x8e\x5e\x48\x71\x46\xd6\x63\x46\xc3\x32\x09\xc2\xc6\x15\xe6\xe6\xae\x08\x1c\xfa\x34\x6e\x7e\xda\xe6\x74\x89\xfd\xaa\x1d\x11\xa6\x40\x9c\x70\x16\x7b\x8b\xb5\x90\xf5\x7b\xc6\x0a\x5e\x71\x4a\x88\x7c\xc6\xb4\x86\x61\xaa\x4f\xcf\x65\xdf\xea\x9a\x81\x13\x52\x56\x14\x74\x93\xfc\x33\xc3\x19\xa8\x61\x6b\xdd\x49\x86\xc9\x8a\xdf\xa9\xf8\x43\x4a\x89\xed\xfd\xde\x84\x78\x77\x65\xf8\xba\x39\xe4\x6b\xab\xb3\x47\xc5\xba\x06\x8e\xcd\x20\x19\xf8\x81\x9d\xf8\x48\xf0\xba\xab\xbb\x9e\x24\x45\xa4\x17\xb1\xf4\x0a\x6d\x64\xcf\xaf\xc1\x0b\xeb\xc4\xb8\x32\xf8\x37\x95\x91\xff\xc4\x4c\xff\x07\x57\xb5\x47\xfe\x3a\x23\x3e\x0a\x2c\x2d\x43\x3b\xe9\x3f\x49\x25\x4d\x10\x77\x83\xf5\x4b\x89\x69\x79\xe5\xe2\xdb\x89\xf2\xd7\xb0\xb5\x04\x55\xf0\x3c\x6c\xcb\xb0\x10\x44\xab\x1d\xbf\xd1\xf1\xf3\x03\xcf\x70\xe2\x22\xb6\x8f\xba\xed\x18\xa9\x15\xd8\x91\x94\xb0\x41\xfa\xff\x5d\xfe\x0d\x6e\x7a\xeb\x6f\xd0\xf8\x65\x2f\xb8\x80\x05\xc8\x9f\xa1\x09\x54\x8e\xd1\x80\x11\xcc\x5b\x0b\xb9\x41\x25\xae\xbe\xc8\x36\x75\xfe\x5d\x72\xf6\xff\x8f\xf8\xf5\x0e\xa4\xc4\x67\x58\x30\xf8\x0e\x57\x3d\x2a\x0c\xdb\x03\xc6\xe1\xdf\xe1\x6a\x10\xbb\x07\x8f\xe7\x30\xb9\xa3\x6e\x39\x91\xab\x6d\x5e\x21\xea\x9c\xcc\xdc\xdf\x6b\x09\xd7\xd1\x5d\x3f\xb8\x49\x86\x54\x49\x86\xe3\x67\x0c\x17\x89\x96\x9c\x61\x28\x46\x97\x8f\x1d\x6e\x35\x99\x1a\xec\x6d\x36\x75\x66\xbc\xcb\x6c\xd7\xed\x15\x0d\xff\xa8\x1d\x58\xa6\x53\xd0\x98\xff\xc4\x41\x4b\x4f\x37\x76\xe7\xde\x54\x52\x29\x37\xc2\x5a\x52\x3e\x37\x3b\x5c\x56\x98\x9c\x8d\x3c\x5c\x67\xde\x0f\x4f\x47\x4c\x7b\xb5\x86\x8c\x06\x39\x11\xaa\x40\x4c\xc9\x90\xe4\x68\x59\x97\x69\x7d\x36\xb2\xcf\x91\x91\xee\x35\xcc\x8f\x3e\x4c\x15\x9e\x04\x46\x61\x17\xc5\xcf\x40\x5b\x4d\x13\x77\xd9\xdd\x76\x9d\x71\x68\x3d\xd1\x93\xa3\x89\xf4\xd2\x78\xc4\x65\xc9\x85\xfa\x45\xe4\x3a\x79\x59\x31\x35\xa7\x1f\x3c\x4a\x93\x61\xa9\xec\x4a\xa4\x15\x6f\xc1\x3a\x9a\x96\xb4\x79\xdf\xaa\xff\x12\x17\xdf\xf5\xa3\x64\x6c\x1e\x12\xaa\xc1\x43\x82\xe9\xb4\x6f\x09\x77\x23\x8f\x0d\x7e\x94\xf7\xb8\x8c\x3a\x24\xaf\x45\x06\xf1\xeb\xd6\x6f\xaa\xf1\xde\x0e\xe6\x53\x6d\x88\x30\x72\x6d\x80\x59\x98\xdd\xbb\x2b\x49\xec\x34\x86\x07\xd7\x0f\xc2\xce\x14\x0c\x4b\x92\x52\xe5\x22\x46\x25\x92\x51\x8b\x11\xfc\x75\xce\x8c\x83\x8c\xda\xb8\xb4\xa8\xb8\x88\x9b\xdf\x63\x07\xac\xcd\xc0\x96\x1a\x2f\x58\x79\x1c\x4f\xb3\xfd\x44\x84\x54\xcc\x6c\xe8\x28\x86\xe2\x24\x24\xe4\x16\xc9\x73\x0a\xf7\x03\x54\xa0\xc2\xdb\x9c\x3e\x19\x8f\xc4\xb4\x56\x56\x01\x8c\x62\x94\x00\x48\x4c\x6d\x88\xb9\x17\x53\x31\xf7\x7c\xb3\xeb\xf6\x81\xb0\x21\xe3\x32\x5e\x56\x98\x35\x03\x77\x41\x9e\x22\x6a\x08\x88\x30\x15\x97\xaa\xcb\x64\xa3\x51\x9b\xbb\xe8\xa4\x1d\x01\x67\xe2\xe5\xc4\x74\x3c\x3a\xbd\x8a\x99\x98\x5b\xcc\xc0\x50\xb0\x63\x40\xa1\x2a\x38\x9b\x62\x87\xbe\xd3\xd3\x89\x98\x93\x44\x6d\x1f\xf7\xdd\x65\x7d\xfe\x1b\x81\x81\x6b\xa1\xa3\x30\xa1\x31\xf2\x21\xec\x75\xb9\x90\x48\x45\xd8\x79\x57\x4b\xc5\x4b\x10\x89\x0f\x02\x37\x09\x48\x3a\xdc\x14\x32\xca\xbf\x13\xd3\xec\x22\x73\x77\x31\xac\xe0\x97\xd3\x35\x11\xaa\x88\xf2\x2b\x96\xb2\xe2\xa2\xbd\xc3\x8b\x26\xdd\x79\x5f\x97\xcf\xb1\x7a\x66\xb8\xe5\xb1\xa1\xe1\xe4\xc2\x87\x09\xd1\x06\x64\x52\x4d\x66\xe6\xb6\x55\x4a\x90\xe7\x5a\x81\xa7\x4f\x05\x48\x10\x2f\x90\x9b\xca\xe7\x27\xf9\xa4\x87\xee\x1d\x69\xf4\xaa\x30\xa6\xed\xd2\x79\x30\xd4\xa4\x49\x97\xfd\x4b\x59\xd2\xe7\x94\x16\x71\x0f\x4d\xa3\xc1\x76\x62\x22\x99\xc4\xdd\x83\x56\xba\xdb\x7f\xf2\xea\x4b\x4d\xfa\xfd\xe3\x33\xa6\x24\x37\xdb\xf8\x08\xb2\xa6\x4e\x1c\x15\x58\x6a\x1c\x67\x37\x42\xf0\x3e\x9b\x45\x0a\xbb\x03\xd8\xcb\xc7\xcf\x10\x91\xe7\x92\x18\x4d\xa3\x0d\x4b\xef\xac\x46\xcf\x53\x5a\x56\xf4\x71\x18\x83\xed\x0d\xe2\x32\x11\x70\x02\x8c\xbe\xaf\x0c\x95\xdc\x67\x8e\x41\x2e\x30\xbd\x30\x16\xe8\x65\x7a\x65\x8c\x18\xb1\xe4\xeb\x6f\xa0\x5c\xff\x76\x67\x21\x4a\x49\xe1\x87\x9d\x99\x54\xf4\x14\xde\x5e\x6e\xb9\x70\xcc\x3d\x71\x51\xb6\x69\xa3\xfd\x6f\x6e\x98\xc9\x1f\xc8\x14\x5e\xb7\x2c\x89\xe7\x96\x27\x0d\xf5\xb6\xbb\x7b\x76\xa9\x04\xcf\x40\x4a\x4f\x74\x8e\x04\xec\x3e\xd9\x75\x8f\xc0\x1e\x5f\xfe\x60\xd7\x09\x03\x6e\xb1\x08\xd0\xdc\xb0\x60\xf8\xec\x69\x46\xdd\x76\x80\x4e\xca\x31\x10\x98\x4e\x8d\xf1\x28\x38\x16\x8c\x23\x1e\x32\xaf\x0d\x69\xf6\xdb\x6f\xa6\x1f\xda\x2b\xc3\x34\x1b\xa2\x58\x7f\x97\xe5\x6e\x3d\x42\xa5\xbc\x94\x7e\x5e\x66\xfe\x9f\x84\x9b\x95\x70\x4e\xb8\xfd\x65\x33\x8f\xf9\xeb\x18\xe6\xbf\x59\xe4\x19\x81\xe7\x65\xd2\x14\x66\x81\xc8\x5b\x11\x56\xd5\xaa\x27\xf7\x90\xd7\x07\x03\x58\x42\xec\x3f\x91\xd7\x0b\x68\xbd\x80\xd5\x0b\x48\xbd\x80\xd3\x0b\x28\xbd\x80\xd1\x0b\x08\xbd\x80\xcf\x0b\xe8\xbc\x80\xcd\x0b\xc8\xbc\x80\xcb\x0b\xa8\xbc\x80\xc9\x4b\x89\x0c\x6f\x0a\x58\x6e\x74\x27\xfa\x58\xf7\x9f\x50\x82\xb4\xbd\x19\xf9\x0b\xaf\x81\x85\x3b\xcb\x9a\xd8\xc8\x36\xcf\x8f\x5c\x8f\x58\x0f\x9e\x65\x0e\xfb\x8b\xab\xfe\xf1\xe4\x0a\xcd\xfe\x0d\x4d\x14\x41\xe0\x67\x0f\x14\x14\xf8\x8f\xbe\xf3\x7f\x93\x33\x6f\x4f\x8b\xbf\xee\xaf\x59\x4c\xbc\xff\x92\xd1\x5f\x2b\x7d\x27\xd2\x46\x3f\xaa\x66\x81\x5d\x6f\x79\x96\xba\x30\xb5\xb6\xf5\x13\x66\xa6\x35\xee\x33\xd4\x66\x36\x7d\x0d\x3e\xcf\x0e\x71\xe3\x8e\x23\xe1\xb6\x8e\xbf\x55\x5e\xc5\xdf\x4b\x06\xde\x92\xd2\x2f\xe5\x70\x9b\x7b\x7f\x3f\xb0\xf6\xdf\x51\xe7\xb6\x66\xf5\x63\xf5\x8f\x00\x00\x00\xff\xff\xf4\x9d\xe3\xc4\xc2\x28\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
