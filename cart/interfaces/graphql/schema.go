// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x6f\xdb\x36\x10\x7e\x9e\x7f\x85\x82\xbc\xa4\x40\xb1\x1f\xe0\x37\xc7\x1e\x0a\x63\x8d\x9b\x26\xee\xf6\x50\x04\xc3\x45\x3c\xdb\x5c\x28\x52\x23\x4f\x49\x8c\x22\xff\x7d\x20\x45\xc9\x24\x45\xc9\x19\xd6\x3e\x14\x35\xef\xd3\xf1\xee\xf8\xf1\xbb\x63\xe9\x58\x63\xb1\x54\x55\x85\xba\xc4\xbf\x56\x58\x2a\x0d\x84\x6c\x09\x9a\x8a\x1f\xb3\xa2\x28\x8a\x12\x34\xcd\x4f\x10\x6b\xb9\x70\x06\xd6\x81\x57\x28\xf8\x33\x6a\x8e\x66\x5e\x7c\x8f\x80\xab\x04\x72\xbc\x78\x98\xbd\xcd\x66\xf1\xa6\xc1\x5e\x9c\xcd\x8b\xf5\xaa\x75\x8f\x92\x38\x1d\xd7\xab\x79\x71\x4f\x9a\xcb\x7d\xbb\xfa\xc8\x85\xe0\x72\xbf\x60\x4c\xa3\x31\x49\x5c\x7e\xd5\x01\xeb\x46\x97\x07\x30\xa8\x13\xcc\x2d\x6a\xa3\xa4\x4f\x60\x3c\xee\x3e\x5c\x0b\x04\xc6\x38\x71\x25\x41\xac\x80\x60\xb8\x69\x60\x6c\xa3\xbc\xfc\xa5\x86\x63\x85\x92\xee\x51\x60\x69\xad\x69\x14\x89\xd9\x27\x87\x42\xc9\xbd\xd9\xaa\x45\x43\x07\x9b\x7f\x69\x6b\xf7\xcd\x25\x71\xad\x94\x40\xf0\x40\x48\xed\x69\x99\xa0\xae\x05\x47\xb6\x54\x4d\xad\xe4\x52\xb1\x61\x8a\x27\x93\x4f\x92\xe1\x0e\x1a\x41\xcb\x46\x6b\x94\xe5\x31\xf6\x47\x8a\x40\x70\xc2\x6a\xe0\x67\xdb\x59\xbc\x1b\xfb\xcf\xa5\x6a\x24\xcd\x8b\xb5\xf4\x4c\xa9\xb5\x62\x4d\x49\xe9\x32\x37\x51\x19\x90\x25\x59\xee\x35\x48\xe6\xfc\x07\xd5\xbb\xd5\xbc\xc4\x28\xc9\x4f\x7c\x47\x4b\xd0\x6c\x10\xda\x22\xb6\x8f\x71\x6f\x40\x52\x4f\x46\x4f\x8f\xe3\x3c\x85\x7b\x6e\xc4\x97\x60\x9d\x2b\xce\x2a\xb4\x8e\xef\x9f\xdd\x76\x2d\x77\x6a\x64\x6b\x6b\xea\xef\x66\xf6\x54\xd6\xa7\x03\x31\x07\x5e\xd7\x5c\xee\xed\x52\xe2\xef\x3e\x30\xb5\xd8\xe6\xd1\xd5\xfb\x93\x56\xd1\xe5\x72\x45\x3f\x73\x26\xde\x41\xe5\x8c\x5b\x78\x5d\x54\xed\x71\x67\x51\xed\x36\x1b\x1c\xb3\xb7\x5e\x56\xdc\x94\xd6\xc9\xa4\xab\x6a\xa3\xa4\x4d\xe0\x0e\x85\x3b\xc4\x77\x7d\xf3\x5f\x3f\x08\xca\xf2\x27\xa7\x43\xf7\x4d\xbe\x46\x41\x7a\xe7\xc1\x07\x30\x9e\x3a\x3d\xf7\x27\x59\x62\xcf\xbe\x53\x66\xc5\x30\xbe\xa6\x2f\x4a\x3f\xed\x84\x7a\x89\x57\x2b\xa4\x83\x62\xf1\x5a\x09\x5a\x73\xab\x2b\xe1\x62\x47\xbd\xcf\xaa\x84\x8c\x68\xad\x12\xb3\xff\xc6\x70\x8d\x6c\xcb\x2b\x9c\x17\xf6\xef\x96\x26\x98\xe8\xe2\xd5\x13\x9e\x24\xe5\x43\x22\x56\x11\xf2\x77\x3c\x5a\x3a\x7b\xc0\xc3\xec\x32\x81\x04\x75\x30\xf3\xa2\x82\xfa\xbb\x71\xd0\x87\xbf\x8d\x92\xbf\xde\xc1\xcb\x0d\x1a\x03\x7b\x9c\x2e\x63\x97\x43\xe1\x6b\x69\x91\x83\xa8\xce\xb4\x98\xc6\xe0\x75\xd2\x8e\x22\xfd\x8a\xcf\x27\x1b\x4e\x78\x03\xbb\x48\x38\x89\x24\x94\xda\xb2\x65\xec\xb2\xd0\xe4\x55\xf3\x1a\x99\xe3\x60\x20\x91\xbd\x79\x24\xcc\x14\xd6\xb5\xeb\x9c\xf4\x24\xd8\x31\xd5\x4b\x60\xfd\xb0\x51\xd5\xc0\xf7\xae\x2f\xcd\x8b\x98\xb1\x7d\xc3\x9a\xdb\x9f\xa1\x49\xc0\x23\x0a\xb7\x5a\xa4\x26\x9f\x7f\x67\xcc\xb5\x91\xf6\xe8\xb3\x5f\x73\x13\x08\x45\x72\xba\x46\x69\xfa\xa2\x99\xbd\x43\xf6\x8f\xeb\x6a\xd3\xfd\x25\x38\x64\x3e\x14\xe3\x5e\x84\x7d\xb7\x8c\x8e\xd3\xad\xe4\xdd\x87\x5e\xc3\xf1\xe9\x95\x50\x4b\x10\x77\xb8\x43\xdb\xd0\x13\x4a\x55\xa0\x9f\x90\x6a\x01\x25\x2e\x07\x32\xf2\x0c\x9a\x83\xa4\x1b\x87\xb9\xcd\x63\x7c\x94\x1b\xa8\x12\x83\x51\x8d\x2e\x31\x1d\x48\xfe\xa1\x63\xd0\xf9\xa7\x6f\xfc\x10\xf1\x07\x88\x06\x07\x98\x77\x8a\x4c\x27\xb3\x8b\x74\xd3\x14\xee\x8f\xb7\xcd\x82\xcb\xbd\x40\xc7\x92\x6c\x33\xbc\x48\x51\x99\xeb\xd9\x62\xb4\x7a\x39\xe7\xa6\x83\x64\x7d\x5c\x7a\xc4\x16\x5e\x31\xfc\xde\xfd\x1e\xbb\xaf\xad\x1e\x79\x5a\x3c\x03\x05\xfc\xce\x33\x7d\xc7\xb5\x21\xe9\x0e\x73\x14\x23\x20\x0b\x89\x79\xc5\x19\x13\xb8\x19\xa0\xa2\x61\xb2\x55\xb8\xc9\x78\x0c\x88\x86\x7c\x13\x1a\xc5\x90\x46\xcc\xa4\x36\xc4\x6c\xf4\x54\xcc\x27\xae\xf9\xba\x7d\xe6\x72\xc8\xb6\x52\x55\x35\xc8\xe3\x60\xbb\x48\xa3\x38\x0d\x01\x09\xa6\x56\x86\x7a\x15\x1b\x8d\x1a\xe8\x5c\x85\x34\xee\x79\xa0\x87\xf9\x78\xac\xb4\xea\x33\x31\xb7\x98\x81\xa3\xe8\xc4\x50\x60\x7d\x50\x72\x8a\x1d\x58\x01\x17\x13\x31\x67\x89\xda\xbe\xc6\x3c\x4f\xcf\x77\xdc\xda\xc1\xed\x10\x40\xc0\x45\x8a\xbc\x8d\xad\x9d\x0e\x72\x43\x5c\xee\x97\x8d\x21\x55\xa1\xce\xbc\xe0\x7e\xcb\x40\xf2\xe1\xe6\x90\x89\xf6\x4e\xa4\xd9\x47\xd6\x4d\xfa\x40\xf8\x65\x77\xcd\x35\x1d\x12\x6d\x05\x63\x6a\xa5\xdb\x07\x93\x3e\xe6\x8d\x9b\xa6\x7a\x4c\x07\x38\x09\x2d\x8f\x1d\x0d\x27\x0b\x1f\x8b\x61\xf1\xa3\x95\x99\xd2\xe5\xb5\x20\xd2\xfc\xb1\x21\x7b\x07\x6e\xa0\xf6\x6c\x33\xa8\x9f\x91\xb9\x8e\x17\x8a\x7b\xd6\x7b\xff\x28\x1c\x9d\x54\xc7\xa6\x9c\xbc\x40\xc6\xd3\x59\x76\xcb\xd3\x7b\x36\xbb\xe7\xd4\x0c\xd2\x3d\x10\x47\x83\xed\x87\x88\xac\x78\x5b\xe2\x4b\x2e\xf7\x43\xf3\xdb\x6c\x66\xdb\xb0\x64\x2e\x81\xe2\x6b\x73\x7a\xe5\x45\x71\xcc\x47\xfe\x07\x66\xe0\xe1\xc6\x6b\x62\xea\x64\xc1\xd8\x56\xd9\x2f\xae\x06\x7d\x7d\xbd\xba\xf8\x78\xea\xbe\x1f\xfb\x19\x3f\xea\xe8\x1f\xc6\x23\x88\xf6\x59\xa1\x40\xc2\x70\x8e\xbe\xfa\x09\xfe\xec\x04\x73\x65\xd9\x62\x79\xe5\xe2\xfd\x5f\x4e\xbf\xd5\xf6\x62\x59\xa7\x5f\xe9\xf8\x0e\xbf\x41\x79\x26\xb6\x78\x9b\xfd\x1b\x00\x00\xff\xff\x8f\xd9\x34\x75\x2b\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
