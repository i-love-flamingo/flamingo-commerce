// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x51\x6f\xe3\x36\x0c\x7e\x5e\x7e\x85\x8b\x7b\xe9\x80\xc3\x7e\x40\xde\xd2\x64\x38\x04\xbb\xe6\x7a\x77\xb9\xed\xe1\x50\x0c\xac\xc5\x38\x5a\x65\xc9\x93\xe8\xb6\xc6\xa1\xff\x7d\x90\x2c\x27\x92\x2c\x3b\xdd\xd6\x87\xa2\x16\x3f\x51\x24\x45\x7e\xa4\x4a\x5d\x83\xc5\x5a\xd5\x35\xea\x12\xff\xdc\x60\xa9\x34\x10\xb2\x35\x68\x2a\x7e\x2c\x8a\xa2\x28\x4a\xd0\xb4\x3c\x43\xac\xe4\xca\x09\xd8\x00\xde\xa0\xe0\x4f\xa8\x39\x9a\x65\xf1\x3d\x02\x6e\x12\x48\x77\x75\xef\xb6\x56\x38\x16\xdd\x74\x6b\xc5\xf0\x9a\xf9\x4f\xfb\xb1\x2c\xbe\x92\xe6\xb2\xba\xfa\x39\x31\x60\xb4\x79\xf1\xba\x58\xc4\xae\x04\x1e\x70\xb6\x2c\xb6\x9b\xde\x68\x94\xc4\xa9\xdb\x6e\x4e\xaa\xdd\xea\x03\x17\x82\xcb\x6a\xc5\x98\x46\x63\x92\xc3\xfc\xaa\x03\x36\xad\x2e\x8f\x60\x50\x27\x98\x3b\xd4\x46\x49\x1f\x96\xe9\x68\x44\x41\x00\xc6\x38\x71\x25\x41\x6c\x80\x60\x7c\x68\x20\xec\xad\x7c\xf7\x53\x03\x5d\x8d\x92\xbe\xa2\xc0\xd2\x4a\x53\x2b\x12\xb1\x77\x0e\x85\x92\x95\xd9\xab\x55\x4b\x47\xeb\x7f\x69\x23\xf7\xcd\x39\x71\xa3\x94\x40\xf0\x40\x48\xe5\x69\x98\xa0\x69\x04\x47\xb6\x56\x6d\xa3\xa4\xbd\xa0\x91\x8b\x67\x91\x77\x92\xe1\x01\x5a\x41\xeb\x56\x6b\x94\x65\x17\xeb\x23\x45\x20\x38\x61\x3d\xd2\xb3\x1f\x24\x5e\x8d\xfd\x73\xad\x5a\x49\xcb\x62\x2b\x7d\xfe\x35\x5a\xb1\xb6\xa4\x74\x99\x9b\x28\x0c\xc8\x12\x2f\x2b\x0d\x92\x39\xfd\x41\xf4\xee\x34\x2f\xb1\x97\x9b\xb6\x76\xd2\x3d\xbc\xac\xea\x5e\x77\x1e\xf6\xe0\x60\x3b\x9c\x00\xf8\x60\x7d\xe0\x07\x5a\x83\x66\x23\x17\x57\xb1\x3c\xac\x8c\xff\x52\x10\xbe\x0e\x12\x1d\xc3\x25\xf9\x6d\xf7\xf9\x3a\x19\x95\x93\x2f\x9c\xe1\xe8\x89\xc3\x12\x1a\xd8\xe6\x2e\x72\x13\x4a\x33\xd5\x6f\x31\x56\x74\xd3\x6d\xd9\xb5\x2f\xd4\xc9\x6a\xb7\xc0\x29\x0f\xb2\x86\x6f\xe5\x41\x4d\x18\x6f\x45\x27\x7e\xcb\xe6\x60\x60\xb1\x39\xf2\xa6\xe1\xb2\xb2\x4b\x89\xbe\xaf\x81\x28\x4a\x8c\x0f\x5a\x45\x54\xe2\x52\xe3\x42\x06\xbe\x2d\x01\x2f\xe5\x5f\xa4\x65\xc3\x4d\x69\x95\xcc\xaa\xaa\x77\x4a\x5a\x07\xbe\xa0\x70\x69\xf0\xa6\x3d\xff\x76\x43\x10\x96\x3f\x38\x1d\x87\x3d\xf9\x18\x05\xee\x5d\x06\x1f\xc1\xf8\xe4\x3b\x55\xfa\x6c\x96\xd8\xbb\x1f\xba\x5b\x58\x55\x6e\xe5\x59\xe9\xc7\x83\x50\xcf\xf1\x6a\x8d\x74\x54\x2c\x5e\x2b\x41\x6b\x6e\x59\x34\x5c\x1c\x52\xef\xa3\x2a\x21\x43\xd1\x9b\x44\xec\xf7\x18\xae\x91\xed\x79\x8d\xcb\xc2\xfe\x1e\xca\x24\xee\x02\xd7\x8f\xd8\x85\x0c\x10\x51\x73\x84\xfc\x0d\xbb\xa8\xea\xdf\x25\x90\x20\x0e\x66\x59\xd4\xd0\x7c\x37\x0e\x7a\xff\x97\x51\xf2\x97\x2f\xf0\x7c\x8b\xc6\x40\x85\xf3\x61\x1c\x7c\x28\x7c\x2c\x2d\x72\x64\xd5\x85\x86\xda\x1a\xbc\x49\x9a\x6f\xc4\xd6\xf1\xfd\x64\xcd\x09\x2b\x70\xb0\x84\x93\x48\x4c\x69\x6c\xb6\x4c\x15\x0b\xcd\x96\x9a\x67\xf2\x5c\x0e\x06\x44\x7e\x12\x4f\x98\x99\xc2\x86\xe1\x24\x47\x3d\x09\x76\x8a\xb7\x13\xd8\x69\x60\xab\x1b\xe0\x95\xec\x1b\x46\x9c\xb1\xa7\xf6\xbc\xb4\x9f\xa1\x48\xc0\x03\x0a\xb7\x5a\xa4\x22\xef\xff\x20\xcc\x35\xbb\xfe\xea\xb3\xbb\xb9\x09\x88\x22\xb9\x5d\xa3\x34\x7d\xd2\xcc\xd6\x90\xfd\x71\x3d\x7c\xbe\x43\x05\x97\xcc\xc7\x64\x7c\x22\x61\x3f\x1b\x44\xd7\xe9\x56\xf2\xea\x43\xad\xe1\xb0\xf8\x42\xa8\x25\x88\x2f\x78\x40\x3b\xbe\x24\x29\x55\x83\x7e\x44\x6a\x04\x94\xb8\x1e\xd1\xc8\x13\x68\x0e\x92\x6e\x1d\xe6\x2e\x8f\xf1\x56\xee\xa0\x4e\x04\x46\xb5\xba\xc4\x74\xfc\xfa\x9b\xba\x60\xce\x99\xaf\xf8\x31\xe2\x77\x10\x2d\x8e\x30\x6f\x24\x99\x81\x66\x57\xe9\xa1\x29\xdc\x5f\x6f\xef\x05\x97\x95\x40\x97\x25\xd9\x66\x78\x95\xa2\x26\x67\x29\xad\x9e\x2f\xa9\x19\x20\x59\x1d\xef\x3c\x62\x0f\x2f\x18\xee\x77\xdf\x53\xf5\xda\xf3\x91\x4f\x8b\x27\xa0\x20\xbf\xf3\x99\x7e\xe0\xda\x90\x74\x97\x39\x89\x11\x90\x85\xc4\x79\xc5\x19\x13\xb8\x1b\xa1\xa2\xd1\xb9\x67\xb8\x59\x7b\x0c\x88\x96\x7c\x13\x9a\xc4\x90\x46\xcc\xb8\x36\xc6\xec\xf4\x9c\xcd\xe7\x5c\xf3\x71\xfb\xc8\xe5\x38\xdb\x4a\x55\x37\x20\xbb\xd1\x71\x11\x47\x71\x1a\x03\x12\x4c\xa3\x0c\x9d\x58\x6c\xd2\x6a\xa0\x4b\x11\xd2\x58\xf1\x80\x0f\xf3\xf6\x58\x6a\xd5\x17\x6c\xee\x31\x23\x45\xd1\x8d\xa1\xc0\xe6\xa8\xe4\x5c\x76\x60\x0d\x5c\xcc\xd8\x9c\x4d\xd4\xfe\xed\xe9\xf3\xf4\x72\xc7\x6d\x1c\xdc\x0e\x01\x04\x5c\xa4\xc8\xbb\x58\x3a\xf0\x20\x37\xc4\x65\xb5\x6e\x0d\xa9\x1a\x75\xe6\xbd\xfa\x6b\x06\x92\x37\x37\x87\x4c\xb8\x77\xc6\xcd\x93\x65\xc3\xa4\x0f\x84\x9f\x0e\x37\x5c\xd3\x31\xe1\x56\x30\xa6\x51\xba\x7f\x1e\xea\x2e\x2f\xdc\xb5\xf5\x43\x3a\xc0\x49\xe8\xf3\xd8\xa5\xe1\x6c\xe0\x63\x32\x2c\x7e\xf4\x34\x53\x3a\xbf\x56\x44\x9a\x3f\xb4\x64\x6b\xe0\x16\x1a\x9f\x6d\x06\xf5\x13\x32\xd7\xf1\x42\x72\xcf\x6a\x3f\x3d\x81\x27\x27\xd5\xa9\x29\x27\x4f\x90\xf1\x74\x96\x3d\xf2\xfc\x7a\xcf\x9e\x39\x37\x83\x0c\xcf\xd8\x49\x63\x4f\x43\x44\x96\xbc\x6d\xe2\x4b\x2e\xab\xb1\xf8\x75\xb1\xb0\x6d\x58\x32\xe7\x40\xf1\xb9\x3d\xbf\xf2\x22\x3b\x96\x13\xff\xc5\x1a\x69\xb8\xf5\x9c\x98\x2a\x59\x31\xb6\x57\x76\xc7\xf5\xa8\xaf\x6f\x37\x57\xef\xcf\xdd\xf7\x7d\x71\xf1\x49\x9e\x58\x10\x9d\xb3\x41\x81\x84\xe1\x1c\x7d\xf9\x89\x7f\x59\x9f\x9d\x60\xae\x6d\xb6\xd8\xbc\x72\xf6\xfe\x2f\xa5\xdf\x1a\x5b\x58\x56\xe9\x67\xea\xde\xa0\x37\x08\xcf\xcc\x11\xaf\x8b\x7f\x02\x00\x00\xff\xff\x8a\xdf\xd6\xea\x6f\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
