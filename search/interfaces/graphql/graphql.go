// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x96\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x31\xbc\xb9\x77\xe3\xee\xb5\x4c\x8a\x00\x41\x13\xa4\x8d\x8b\x6e\x02\x23\x60\xa4\x13\x89\x2d\x7f\x1c\x71\xe4\xc4\x2d\xfc\xee\x05\x49\x59\x96\x6c\x29\x4e\x11\x20\xf6\xca\xe4\x0c\x0f\xe7\x7c\x14\x30\x23\xcd\xb2\x66\x3a\xb7\x5a\xa3\xca\x70\x3f\x87\xa8\xb2\xf2\xfe\x0b\xd6\x3f\x84\xaa\x71\x21\x15\xa3\xa2\x3f\x09\x11\xd1\xaf\x94\xe6\x5c\x49\x53\x4c\xc2\x72\x95\xd2\x5d\xb3\x5e\x24\x9b\x24\x19\x56\xba\xc5\x53\x0d\xc7\x8d\xc4\x52\x14\x98\xcb\xdf\x48\x69\xf7\xbb\x34\xdc\xc6\xba\xfb\xdd\x98\xb3\x15\x9f\xad\xfb\xd1\x78\x77\xac\xac\x57\xae\x0b\x79\x77\xaf\x7b\x9a\x2c\xc2\xc9\xa7\x1a\xd5\x9e\xee\x56\x78\x93\x24\xd3\x61\x4f\x57\x72\x85\xf8\x77\xe7\x6e\x7a\x44\x6d\xba\x49\x12\x5e\x2f\x71\x20\x76\x0d\x16\x0d\x9d\xfd\xe3\x5d\xda\xb6\x92\x85\x34\x42\x7d\x6b\x72\xba\xb1\x7d\x72\x97\x86\x63\xc0\xd4\xfa\xab\x28\xe0\xd2\x81\xc0\x2d\x5c\xad\xb8\x09\xb5\x01\x0f\xfa\x66\xc9\xd2\x9a\x11\x8a\xf3\x36\x21\xbe\xfa\xa0\xa7\x5d\x52\xe3\x4c\x89\x07\xa8\xfe\xe7\xf3\x28\xa1\xf2\xfe\x96\x83\x42\xc6\xc8\x53\x3a\xb3\x56\x41\x98\x49\xfc\xae\x18\xd5\xa3\xc8\x0e\xaf\xb9\x10\x19\xb6\x5f\x96\x11\x1a\x7d\xb5\x81\x3b\x97\xd6\x49\x5f\x55\xba\x33\x2c\x19\xda\xa5\x87\x3e\x83\xf6\x25\x43\x4f\x16\x31\xb1\x14\x6e\xde\xd4\xe7\xb7\xff\xa9\x46\x7f\x60\x9c\xc4\xca\x7f\x95\x47\x49\xf8\xed\xcc\xd6\x86\x9b\xe2\xc7\xd8\x5f\x49\xc7\x11\x8c\xd4\x4b\x05\x0d\xc3\xee\x43\xc9\xb5\x05\xbc\x99\xde\xeb\x3e\x02\xbc\x63\x5e\x3e\x92\xf0\xf7\x0a\x38\x29\xe1\xb6\x80\xf7\x11\xee\xc9\x9c\x84\xb0\x5f\x8b\x8c\xe5\x0a\x7b\x49\x6f\x74\x3e\x6a\xed\x56\x98\xe2\xb4\x6f\xb4\xab\xe0\x7d\x8f\xd4\xd7\x39\xd9\x2b\x69\xd9\x35\xad\xc5\x4b\x67\xb5\x95\xb8\xee\xe5\xb4\xbb\x6d\xee\x68\xb7\xa8\x8b\x02\xae\xd3\x2d\x18\x2f\x9c\x1e\xb6\xc0\x52\x16\xa5\x92\x45\xc9\x3b\x07\xbe\x47\x0f\x63\x0b\xdd\x6d\xdb\x97\x4b\xe9\x1b\xdd\xdd\x62\x3f\xeb\xb3\xcd\x6a\x0f\x93\xe8\x13\xdd\x54\xa4\xc5\xfa\x01\xf4\x0c\xca\xad\x61\x32\x40\x1e\x4e\x92\x30\x39\x71\x09\xd2\x36\xaf\x15\x5c\x8c\xb0\x25\x91\xe7\x24\x08\x79\x01\xbf\xe2\x52\x3a\xb2\x0f\x3f\x91\xf1\x6c\x36\xf3\x32\xcf\x52\x29\x72\x40\x2c\xc2\x85\x3b\x7d\xbb\x8f\xde\x86\x06\x81\x68\x74\x4a\xe1\x2d\x5d\x4a\xb9\xd5\x42\x9a\x59\x58\x9e\x5b\xe5\x89\x4a\x6b\x1a\xbd\x16\xdb\x58\xab\x6e\x13\x16\x61\xfc\x48\xa6\x78\x61\x78\x2f\x9e\x58\x18\x24\xb6\x80\xf6\x8e\xfe\xe7\xba\xd3\x4d\x3a\x36\xd4\xfd\x3f\x14\xf1\xdc\x07\x45\x3b\x63\xd3\x31\xfd\x83\x01\x6b\xf4\xa6\xa3\x27\x27\xde\xfa\xdf\x00\x00\x00\xff\xff\x8c\x6c\xdc\x25\xe5\x0a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
