// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcf\x6f\xe4\x28\x16\xbe\xe7\xaf\xa8\xd2\x5e\x6a\xa4\xd6\x4a\xbb\xc7\xba\x25\x55\xe9\x56\x69\x3a\xe9\x74\x52\xd3\x7b\x68\x45\x11\xb1\x5f\x55\xb1\x8d\x8d\x07\x70\x12\x6b\xd5\xff\xfb\x0a\x0c\x36\x3f\x6d\x92\xd5\x8c\x34\xda\xcc\x61\x26\x05\x1f\x8f\x07\x7c\x3c\x3e\x1e\x1e\xd1\x35\xb0\xd8\xd0\xaa\x02\x56\xc0\xc3\x16\x0a\xca\x90\x80\x72\x83\x98\x58\xfc\xe7\x6c\xb1\x58\x2c\x0a\xc4\xc4\x7a\x84\xc8\x9a\xa5\xaa\x28\x0d\x78\x0b\x04\x3f\x01\xc3\xc0\xd7\x8b\xef\x0e\x70\xeb\x41\xba\xe5\xbd\x6a\x7a\x84\xb0\xea\xa2\xdb\xd0\x12\x56\xa5\xfe\x29\x7f\xac\x17\x77\x82\xe1\xfa\xb8\xfc\xc5\x73\x20\x68\x6c\xac\x9e\x13\x72\x83\xba\x0a\x6a\x71\x0b\xbf\xb7\x98\x41\xb9\x13\x50\x71\xaf\xf9\xc3\x0d\xc3\x85\xae\x5a\x0e\x83\xbc\x6b\xab\x0a\xb1\xce\xc7\xea\xe2\xe5\xd9\xcf\xb3\x33\x77\xb6\xec\x6a\x3d\x59\x25\xe6\x05\x6d\x6b\xe1\xf7\x78\xde\x34\x04\x43\xb9\x35\xd5\x0a\xcc\xdb\xca\x2f\xb7\x9a\x29\x1f\x3d\xdc\x27\x7c\x10\x1b\xc4\xca\x24\xee\x13\x43\x75\xb9\xa7\x02\x91\x7f\x61\x71\x9a\x85\x2b\xa4\xe9\xdc\x69\x71\x5e\xc9\xa2\x68\xbb\x13\xe2\xa1\xdb\x17\x94\x12\x40\xf5\x72\xb0\x8c\x5e\x20\x98\x76\x55\x18\x9f\x47\x3d\x7f\xb8\x5c\x2f\x76\xdb\xde\x0a\xd4\x02\x8b\x6e\xb7\x1d\x58\xa0\x4a\x1f\x31\x21\xb8\x3e\x9e\x97\x25\x03\x1e\x4c\x73\x5f\xaa\x80\x4d\xcb\x8a\x13\xe2\xc0\x3c\xcc\x0d\x30\x4e\x6b\xcd\xe0\x34\x71\x1d\xbe\xa2\xb2\xc4\x02\xd3\x1a\x91\x2d\x12\x28\xec\xd4\xaa\xec\xbd\x6c\x7a\x12\xde\x01\x81\x42\xd6\x05\x04\xf4\xea\xfb\xa1\x01\xa1\xf5\x91\xef\xe9\x79\x2b\x4e\x72\xf4\x85\xa4\xf8\x6f\x6a\x08\xce\xfc\x22\xbf\xde\x9f\x24\xd4\xaf\xcf\x86\xb6\x0d\xad\xe5\x4e\x0a\x06\x38\x56\xe9\x21\x96\x70\x40\x2d\x11\x9b\x96\x31\xa8\x8b\xce\xb5\x27\x24\x4f\x70\xbf\x93\x5c\x3b\x7b\x53\xa3\xcd\xc8\x3f\x37\x3d\x75\x76\xb5\x0e\x14\x0d\xa3\x65\x5b\x08\xbf\x18\x73\x67\x16\xa0\xf4\x46\x79\x1c\xb8\xec\xd3\x70\xe9\xf0\x77\x8f\x5e\xe2\x6c\x35\xb0\x47\x05\xbb\x86\x04\x00\x05\x7b\xeb\x7b\x6c\xef\x9a\x7a\x3b\x84\xbd\x25\x72\xb9\x01\x6b\x6b\x35\x92\x3d\xeb\x66\xf7\x67\x06\x70\x85\x70\x7d\x77\xc2\x4d\x83\xeb\xe3\xe5\x15\xc2\xc4\x5d\x19\xcc\x2f\xab\x46\x74\xde\xd4\x9d\x10\x37\x86\x3f\x52\x36\xe9\xdd\xd0\x2e\x1c\x95\x8c\x8f\xbb\xed\x0a\xab\xff\xcc\x8e\x68\x69\x0c\xe4\x36\x94\xa8\xa1\x91\x5a\xa2\xaf\xa2\x5b\x55\x88\xfd\x00\x71\x43\x50\x01\x8e\xab\x1f\x16\x4f\x88\x61\x54\x0b\x7f\x00\xbb\x5a\x8c\x3d\x5f\xbe\x08\x60\x35\x22\xb7\x70\x00\xc9\x63\x58\x31\x38\xcc\x78\x60\x5a\x7f\xa3\x6d\x71\x02\x76\x87\x9e\x70\x7d\x0c\x42\xe6\xe0\xa9\x62\x3d\x44\x02\xcb\x43\x5f\xaa\x0d\xf2\xb6\x32\xcb\x96\x64\x9e\x8b\x91\xf1\x37\x79\x10\x0c\xeb\x6a\x1a\x6c\x28\x0f\xe2\x2e\x22\xc4\x54\xef\xb1\x20\x11\x42\x99\xcd\xf0\x89\x51\x9e\xe8\xc3\x81\x64\xf8\x64\xed\xaf\x2c\xb4\x7b\xe8\x4c\xef\xdc\xea\x9a\xd6\x72\x91\x6e\x81\xa8\xd3\x3e\xaf\xd1\x2b\x5b\x8c\xe7\xd9\x18\x14\x23\xfb\x62\xd0\x15\x9a\x59\xee\x3e\x34\x14\x56\x9a\xe2\xa2\xdb\x77\x0d\xac\xe4\x29\xe7\xb3\x75\x3a\x7a\x8e\x21\x6f\x73\x42\xec\x08\xc1\x24\x3e\xe8\x72\xed\xd6\xe8\xba\x15\xbd\xfc\x48\x70\x0b\x15\xc2\x35\xae\x8f\x31\x4c\x5c\xd4\x58\xfa\xc8\x52\x81\x5a\x4a\x79\x63\xd0\xe0\x61\x3f\xf5\x23\xe1\x9a\x87\x93\x6d\xee\x2c\x90\x6e\x27\x86\x49\xf4\xe7\x4a\xb7\x19\x66\x79\x79\x3f\xe9\xbc\xf1\x47\xfb\x8f\x26\x08\xe0\xc5\xa9\x49\xb3\xb6\xcb\x19\xa6\x4d\xd4\xdd\xd5\x07\xea\x50\x61\xb2\x93\x61\x8c\x19\x3d\x14\x19\x56\xf7\xe8\x25\xc3\x92\x6c\xe8\x92\x5a\x4a\xec\xf5\xe2\x23\xa1\x48\xa4\x2d\x83\xa1\x48\x54\x1f\x48\xc4\xbd\x75\x34\xf4\x1b\x03\xbd\xec\xad\xce\xfc\xb0\x2c\xdb\x24\x87\xa2\x62\xac\xee\xd1\x15\x16\xc3\x49\xb0\x1b\x35\x88\xfa\xa9\x8b\xe3\x47\xad\x62\x11\xae\x05\xb0\x03\x2a\x82\xe5\xf0\x64\x9a\xee\xf7\x88\x04\x3c\xa3\x98\x46\xfa\x86\x48\x0b\xe1\xf4\xc6\xc7\xb2\xed\x25\x57\xd0\x09\xae\x1a\x02\xb2\x88\xff\x99\xee\x04\x77\x2a\x73\xa5\xd1\x3f\x27\x8f\xfd\xe1\x2e\x18\xdd\xba\x5b\xbb\x36\x72\x05\x34\x7b\xf5\xa2\xdb\x95\x2b\x7d\x05\x48\x5e\xf9\x24\x30\x35\x82\xa8\xe3\x72\xef\x25\x9c\x97\x55\x43\x78\x8b\xf2\x37\x11\xd2\x3c\x7b\x76\x54\x98\x3f\x67\x67\xd4\x6d\x9e\xb8\x9d\xd3\xb6\xaf\x38\x6d\xdf\x72\xd8\xbe\xfa\xac\x7d\xa5\xb6\x78\x83\xb4\x38\x21\xae\xd9\x37\x7d\xba\xd9\x8b\x6f\x4e\x37\x27\x88\xca\x92\x67\xca\x7e\x1c\x08\x7d\x76\x4b\x2b\x10\x27\x5a\xba\x65\x05\x62\x0c\x4b\x31\x68\x17\x1a\xee\x7d\xa6\x05\x8a\xdc\xff\xb6\x5e\xb5\x6e\xc3\x31\x83\x72\x8f\x2b\x58\x2f\xe4\xbf\x87\xa4\x86\x73\xc1\x5c\xfd\x80\xce\x56\x14\xce\xbd\xcf\x41\xfe\x0a\x9d\xa3\x00\x25\xe2\x6f\x1e\xcc\x9a\x0b\xbe\x5e\x54\xa8\xf9\xce\xfb\xb0\xf8\x6f\x4e\xeb\xbf\xdf\xa2\xe7\x2b\xe0\x1c\x1d\x21\xa3\xf1\x15\x6a\x46\x94\xeb\xb6\x05\xf4\xdd\xbf\x42\x4d\xe0\xbb\x05\xf7\xc7\x30\xb9\xa2\x66\x3a\x17\x7a\x59\xc3\x13\x0d\xcd\xa6\x0d\x5a\x0e\x17\x5e\x8a\xc1\x11\x54\x19\xe7\x6d\x44\x23\x08\x29\xc7\x5d\x57\x1a\xc9\xdc\xd4\xc6\x15\x93\xdb\x1e\xa5\xb3\x46\xb1\x64\x93\x75\x20\xd8\xdb\x68\x57\x17\x32\xbc\x24\xc4\x80\x53\x31\x73\x2a\xfb\x1d\x4e\x09\x02\x0f\xab\x69\xf9\xd8\x6d\x50\xd5\x20\x7c\x54\xea\x7b\x55\x58\x3f\x2c\x95\x90\x33\xcc\xc7\x5e\x62\x1c\x30\x11\xc0\xa6\x54\x46\xd8\x3c\x67\x6c\x83\x1c\xb6\x1d\x74\xe3\x81\x75\x89\x58\xb8\x55\x04\x3d\x02\xe9\x45\x89\x5f\xa5\x97\xd4\x54\xa6\xf5\x59\xb4\x35\xe6\x56\x1c\xf6\x93\x71\x94\x89\x2f\xac\x94\x11\x4a\xab\xa1\x39\x01\x60\xf1\x16\x87\x67\xdd\x70\xc6\x69\xf5\xe5\xf0\x47\x95\xc4\xcd\xdb\x56\xed\x2c\x9f\x7f\x63\xf7\x22\xae\x4a\x07\x34\x41\x3a\x40\x55\xea\x8c\xc0\x55\x22\x65\x60\x7b\x79\x8d\x2a\xaf\x82\xd3\x96\x15\xe0\x67\xce\x7e\x17\x9d\x95\xa2\x9a\x8f\xa7\x2e\x42\xe9\xad\x00\x93\x19\xc2\x87\x1b\x9d\xdf\xa9\x0f\xd7\xcb\xdb\x8f\x02\xd7\x47\x02\x8a\x25\x53\x77\xfa\x11\x95\x4c\x46\x30\xfa\x3c\x67\xc6\x40\xe6\x52\x69\xb9\x81\x69\x3c\x2e\x18\x7d\xf6\x33\xc6\xea\x77\x6a\x53\xf6\xa1\x59\xd3\xe9\x09\x09\x6b\x5f\xc4\x77\xc8\x01\x33\x2e\x6a\x45\x82\x24\x86\xa0\x28\xc4\xe5\x23\x2e\x4b\x02\xd7\x01\xca\x91\xde\x7d\xb0\x9f\xf4\x87\x23\xd2\x0a\x2d\x0d\x92\x18\xc1\x00\x22\x43\x0b\x31\xd7\x6c\xca\xe7\x91\xa3\x7a\xde\x3e\xe3\x3a\x64\x69\x41\xab\x06\xd5\x5d\xd0\x9d\x13\xdb\xb0\x08\x01\x1e\xa6\xa1\x5c\x0c\xd1\x2f\xe9\xb5\xba\x59\x4e\xda\x61\x70\xc4\x56\x1c\x8d\xfb\x23\x69\xc4\x66\x7c\xee\x31\x81\x21\x67\xc5\x80\x40\x73\xa2\xf5\x14\x3b\xa0\x52\xc9\xd7\xa4\xcf\x51\xa2\xf6\x8f\x0d\xe6\xf2\x3d\xff\x66\xa1\xe0\x52\x01\x09\x84\x89\x8f\xbc\x71\x6b\x4d\xfc\xc4\x5c\xe0\xfa\xb8\x69\xb9\xa0\x15\xb0\xc8\x03\xc5\x65\x04\x12\x77\x37\x86\xf4\x62\xf6\xc4\x30\x07\xcf\xcc\x05\x0c\x09\xf8\x72\xb8\xc0\x4c\x9c\xbc\x98\x8c\x38\x6f\x28\xeb\x2f\xee\xac\x8b\x57\x5e\xb7\xd5\xa3\x2f\xab\x6b\xd4\xf3\x58\xd1\x70\x72\xe2\xdd\x20\xaa\x1d\x52\xa1\xa6\x50\x63\x3b\x17\x82\xe1\xc7\x56\x80\x25\x5c\x19\x70\x60\x4f\x50\xaa\xd3\x72\x36\x21\x34\xe4\xee\x92\x77\x88\x94\xe8\xcb\x49\xbf\x44\xbb\x1c\xf3\x93\xd1\x3e\xa7\xf4\x8b\xc9\xfd\x25\x9d\x1d\x04\x48\x34\xf0\x9b\x14\x62\xf2\xe6\x75\x3b\x22\x66\x72\x8b\xdf\x10\xc1\xa5\x5a\xc7\x5b\xe0\x2d\x31\x8a\xea\x84\xb8\xc4\xd1\xfa\x92\x31\x3a\x86\x33\x4f\x7b\x0f\x00\x7d\x2d\xf9\x15\x3c\xf6\x60\xa5\x83\xa4\x5d\x6e\xef\x55\x2f\x29\x25\xb5\xc8\xe8\x87\x32\x98\x4c\x27\x46\xb0\x96\x38\x92\x34\x89\x87\x8b\x94\x97\x89\xc4\x9f\x54\x2f\x9a\x79\xe3\xbd\x94\xca\xdf\x66\x23\x78\x1d\xb8\x0f\x3a\x33\x71\xe8\xc1\xbd\xd3\x7c\xa4\xcc\xd0\xf6\x40\x59\xd5\xc7\x8c\xfe\x9f\xb9\x66\x2a\x78\x2c\xd4\xa9\x6b\xe6\x24\x92\x60\x79\x90\x50\x6b\xa9\x87\x44\x4b\xc3\x68\x01\x9c\x5b\x2a\x35\xf5\xae\xae\x1f\x05\x87\xb4\xbb\xc5\x95\x3f\xb8\xeb\x88\x01\x33\x59\x18\x48\xa9\x28\x10\x26\x3a\x55\xab\x8f\x03\x60\xd0\x7e\x35\x30\x44\xa6\xda\x4c\xd3\x6f\x84\x68\x1f\xaa\x04\xf3\xf5\x03\xee\xe7\xfe\x8e\x31\xcd\x06\xcf\xd7\x37\x59\x1e\xe6\xc3\x95\xd6\xb9\xf4\xb3\xc2\xf2\xbb\x7e\x9b\xd5\x6f\x46\xb5\xfd\x63\x3d\x8f\xf9\x67\x0a\xf3\xff\xac\xf0\x94\xba\xb3\x22\x69\x0c\x93\xa1\xf0\xce\x70\xdd\xb4\x62\x24\x77\xc8\xeb\x9d\x02\xe4\x10\xfb\x4f\xe4\x75\x06\xad\x33\x58\x9d\x41\xea\x0c\x4e\x67\x50\x3a\x83\xd1\x19\x84\xce\xe0\x73\x06\x9d\x33\xd8\x9c\x41\xe6\x0c\x2e\x67\x50\x39\x83\xc9\xb9\x44\xf6\x78\x6c\x32\xa8\xef\x44\x7e\x27\xf2\x5f\x9a\xc8\xfa\x61\xd5\x61\xb3\xcd\xe4\xd2\xad\x5a\xcf\x6f\x01\xd5\x6c\xee\x55\xc0\x7d\x18\xea\x67\xc0\x7d\x17\x8a\x68\xf6\x69\xc9\x14\xf1\x27\x4b\xb2\x47\xda\x0d\x9a\x7d\x6e\x18\x71\xff\x5e\x31\xc0\x3f\x58\x99\x27\xc6\xf6\xae\x23\xdf\x75\xe4\x5f\x4b\x47\x4e\x45\x2d\xf3\x7c\xf8\xa5\xb1\xbe\xf1\xc8\xdd\x99\x89\x37\xe9\x9f\x67\x67\xf0\x22\xa0\x2e\x55\x9a\x69\xf1\xb5\x1d\x3f\x93\x70\x9c\x58\x27\xfe\x5f\x80\x65\x08\x35\x1b\x99\x06\xdf\x41\xfa\x19\x9e\xa0\xfb\x2b\x4d\x79\xdf\x83\xf3\xb2\xdc\x53\x69\x62\x15\x3c\xfb\xec\xb6\xcb\x0f\xe3\xe3\xcc\x87\xf8\x7c\xfc\x92\xe9\xfe\x16\x08\x08\xb0\x5f\x8e\xe7\x3f\xde\x9d\xb7\xb7\x13\x50\x0d\xdf\xbc\x2a\x7f\xff\x27\xa3\xbf\x35\x25\xea\x8d\x7e\x15\x5d\x86\x5d\x6b\x7a\x72\xbb\x50\xab\xd5\xf7\xe3\x1e\x0b\x2b\x34\x06\xd8\xf5\xec\x6d\x27\xf8\x7e\x2b\xc4\xa5\x3b\xf6\xf2\x3c\x2b\xff\x63\xa6\x0f\x3e\xc1\x83\xde\xa2\x99\xa2\x58\x87\xe7\x4d\x43\xba\x31\x87\xfa\x85\x99\xa4\xe8\xaa\xc8\x5a\xa0\x88\xc9\x5b\xa8\xe8\x13\x0c\x76\x8e\xfa\x8f\xbc\x05\x4f\xda\x1b\x7d\x5c\xd9\xaf\xc9\x6f\xb0\xd7\xcf\xb1\x77\x6c\x02\x5f\x8d\x32\xa8\x2f\x08\x32\x53\x31\x09\xb5\xbc\x0f\x3e\x60\x8d\x9d\xc8\xf7\xe9\xc5\x8e\x87\x38\xbe\xe2\xee\xef\x64\x2f\x6e\xbb\x7c\x7f\x7e\x9e\xfd\x37\x00\x00\xff\xff\x4e\x1f\x70\xa0\xe8\x34\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
