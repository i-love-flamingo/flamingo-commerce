// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xe3\x36\x10\xbd\xe7\x2b\x14\xec\x25\x05\x8a\x7e\x80\x6f\x89\xd3\x14\x41\xd7\x8b\x74\xe5\xf6\xb2\x08\x82\x31\x35\x96\x07\xa6\x48\x95\x1c\x65\x23\x14\xfd\xf7\x42\x24\x25\x8b\xa2\x64\xfb\xd8\xc3\xee\x69\x33\xef\x71\x66\x38\x9a\x79\x43\x93\x62\x34\x7b\x10\x98\xad\x75\x55\xa1\x11\xf8\xf6\x62\x74\xd1\x08\xce\xfe\xb9\xc9\xb2\x2c\xdb\x81\xc5\x47\x60\x58\x9d\x08\x0f\x60\x49\x04\x56\x07\xdd\x3a\x22\x23\x58\x34\x13\x6a\x60\x6d\x07\xcc\x73\x6d\x8d\x82\xf6\x24\x80\x49\x2b\x9b\xf2\xf3\x08\xf7\x67\xc8\xe6\x20\x11\x76\x12\x57\xd9\x83\xd6\x12\x41\x05\x67\xc1\x3c\x1f\xba\x3f\x14\x92\x6c\x6b\x5c\x65\x39\x1b\x52\xa5\xb7\x94\xc8\xcf\x05\x2a\xa6\x3d\xa1\x89\xa1\x03\xd8\x0d\x16\x04\x77\xa5\xd1\x4d\x3d\x60\x3f\x67\x8d\x85\xf2\xe4\xe6\xa7\x49\x3e\x25\xf2\x95\xc7\xa6\xb9\xba\x63\xb7\x37\xff\xde\xdc\x74\x79\x9e\xe0\x9c\xaa\x5a\x62\xff\x5d\xdc\x1f\x15\x2a\xb6\x3f\xbe\xd9\xff\xf7\x9b\x4d\x0b\x1e\x3e\x0d\x13\x77\xc5\x18\xfd\x1b\x67\x0f\xcc\x86\x76\x0d\xa3\xed\x29\xd3\x70\xf7\x03\xc3\xd7\xf1\xa0\x0d\x3f\xa2\x15\x86\xea\xae\xee\x71\x31\x8a\x31\x90\x04\xab\xba\xcc\xa3\x54\xbe\xcd\x5f\xee\xf5\xc6\xf3\xc1\x1c\x91\x5f\x24\x08\x5c\xeb\x62\xf2\x49\x0c\x32\x90\x44\xe3\x91\x49\xa4\x1e\xcc\x8f\xcd\x2a\x49\xa3\x07\xbf\x40\x15\x9f\x74\xa8\x30\x08\x8c\xc5\x3d\x77\xd0\x96\x2a\x74\xd6\xa6\x2e\x66\xac\xef\x64\x69\x27\xf1\xc9\xe8\x6a\x95\x58\xb7\x7a\xe0\x3a\xf3\x1a\x18\x4b\x6d\xc8\x97\xfa\x74\xf3\x60\x6f\x7d\xfb\xdf\xbe\x3a\xf2\x06\x48\xf5\xc0\xa8\x05\x26\xdc\x90\x71\x6f\xd4\x5d\x2d\x36\x50\xd7\xa4\xca\x55\xf6\x2d\x5c\x2b\x14\xd3\xb2\x16\xc7\xcf\xf8\x8e\x72\x15\x5f\xf8\x88\xed\x77\x6d\x0a\x3b\x3e\xe1\x47\xe9\x0b\x7e\x77\xf5\x19\x1a\x37\xe9\xb9\x64\x72\x43\xd3\xb9\x2e\xd9\xfa\xce\xf3\x4e\xcf\x36\xcf\x48\x1a\x5e\x0c\x09\xcc\xd2\xae\x77\xf6\x67\xb5\xd7\x53\xee\xb3\xed\xca\xef\xfe\x3b\x8c\x98\xe3\xd4\x06\x73\x94\x28\x18\x8b\xbf\xc0\x10\x28\x76\xdd\x30\x8a\xe8\xfa\x31\x5b\x2d\x77\xe1\x99\x26\x1c\xa5\x71\xff\x0e\x24\x3b\xf5\x70\x49\xd8\x39\x87\x43\xf6\xc1\xa9\x3f\xf8\x59\xb7\x20\xb9\x1d\xc0\xf4\xd6\x53\xc6\xe2\x17\x98\x12\xfb\xe1\x4f\x94\xac\xc0\x3d\x34\x92\xa3\x50\x24\xb0\x57\xcf\x47\xb2\x42\x37\x8a\xb1\x98\xe8\x55\x31\x02\xe6\x8e\xf6\xf8\x16\x3f\x38\x8e\x58\x91\x7a\xd1\xa4\xd8\x6e\x75\x5e\xa3\xe2\x55\xf6\x24\x35\x70\x00\xe1\x63\x19\x14\x5a\xb1\x73\x17\x07\x5c\x7b\xf3\x6c\x3b\x9e\xe0\x50\x01\xd1\x58\xd6\x15\x9a\xdf\x22\x99\xf5\xd0\x01\x94\x42\x99\x4a\x8b\xd4\x02\xe4\xc8\xb6\x54\xf4\x78\x01\x85\x80\x4e\xcf\xed\x4c\x0f\x44\x6c\x97\xce\xed\xeb\x75\xae\x1d\x39\x96\xf3\x71\xba\xa8\xd8\xab\xca\xf9\x90\xbf\x2a\x36\xed\xb5\x21\x1d\x39\x84\x94\xb0\x1b\x8b\x86\x93\x38\x90\x0d\x46\x8a\xb1\xe8\x35\x6c\xd6\xe0\xeb\xe2\x7e\x9e\x68\x69\x6f\xee\xc4\x74\x30\x82\x60\x7a\xc7\x30\xf2\xe7\x85\x02\xe2\xd9\xbc\x62\x34\xe5\x68\x92\xe6\xf8\xd3\x49\x3b\x73\x77\x27\x23\xd1\x24\xa6\x2b\x91\x2a\xdc\x7a\x68\x6c\x0e\x8f\x80\x29\x7b\xb4\xcb\xe3\x85\xb6\x47\x83\x4a\x5c\xd1\xb2\xa7\x6d\x1e\xf2\x1a\x1e\x00\xbf\x63\x9b\xac\x80\xf1\xeb\x20\x29\xc4\xe0\x2a\x90\x0f\x60\x07\xd3\xdd\x11\xdb\x99\xa7\x4f\xff\xf2\x59\xe4\x2d\xc6\xb8\x7c\xa1\x7e\xde\xd3\x69\x4e\xdb\xb7\x51\xc4\xf1\xd8\x27\xee\xe3\x4d\xbb\xe8\xbc\x06\x3e\xc4\x16\xe5\x5e\x15\x31\xc7\x38\x65\x5b\xf0\xbd\x78\xb5\xa9\x98\x2f\x48\xf7\x05\x79\xbe\xa0\xce\x7e\x96\x1e\xc0\x62\x24\xbd\x27\xf3\x7d\xd5\x1d\x5c\x00\xff\x54\xc4\xd1\x46\x9c\xdd\x20\xe1\x95\x52\xd5\x40\xa5\xfa\xda\x48\x4c\x1a\xad\x40\xd5\x6e\xb4\xc1\xfe\xb0\x8d\xcf\x7e\xba\xbc\x0d\xfc\x7c\xc0\xc7\x5a\x82\xb5\xa3\x17\xce\x52\x71\xdf\x72\x04\x23\x0e\x5f\xd1\x36\xb2\xdf\x15\xb5\x87\xe6\x9a\x3d\xe4\xf9\x29\x7b\x02\x81\x6c\x33\xeb\x4e\x17\xba\x02\x52\xbf\x38\xdb\x5a\xcb\xee\xb1\x41\xda\xa7\x6c\x9b\xb2\x44\x1b\x7e\xb9\x9c\xdc\xf9\xa8\x6f\xf9\x80\x06\xc7\xde\xdf\x06\xa3\x1f\x27\x81\xdc\x59\x5d\x87\xe2\x07\xa3\x2a\x9c\x94\x64\x7f\x34\x38\x08\xf4\x34\xd9\x3b\xff\x66\xa9\x93\x87\xf3\xcc\x84\xcd\x3a\x08\x91\xef\x6c\xa8\xd1\xdf\x0d\x5a\x4e\x13\x0b\xc0\x8c\xd7\xa8\xba\x5d\xee\xff\x05\x00\x00\xff\xff\xba\xf9\x5b\x4b\xf6\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
