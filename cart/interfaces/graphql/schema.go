// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcf\x6f\x1b\xb9\x15\xbe\xfb\xaf\x90\xd0\x8b\x0a\x04\x05\xda\xa3\x6e\xb6\x94\x04\xc2\xc6\x4e\x62\x6b\xd3\x43\x10\x18\xf4\xcc\x93\xc4\x86\x43\xce\x92\x1c\xdb\x83\x62\xff\xf7\x82\x1c\x72\x86\x3f\x67\x98\x14\xdd\x4b\xb7\x87\x6e\x44\x7e\xef\xf1\x91\xfc\xf8\xf8\xf1\x8d\x65\xdf\xc2\x6a\xc7\x9a\x06\x78\x05\x8f\x7b\xa8\x18\x47\x12\xea\x1d\xe2\x72\xf5\xef\xab\xd5\x6a\xb5\xaa\x10\x97\xdb\x09\xa2\x7a\xd6\xba\xa3\xb6\xe0\x3d\x10\xfc\x0c\x1c\x83\xd8\xae\xbe\x7a\xc0\x7d\x00\xe9\xd7\xdf\xb4\xe9\x19\xe2\xae\x9b\x7e\xc7\x6a\xd8\xd4\xe6\xa7\xfa\xb1\x5d\x3d\x48\x8e\xe9\x79\xfd\xd7\x20\x80\xc8\xd8\x7a\xbd\x26\xe4\x13\xea\x1b\xa0\xf2\x1e\x7e\xeb\x30\x87\xfa\x20\xa1\x11\x81\xf9\xe3\x27\x8e\x2b\xd3\xb5\x1e\x27\xf9\xd0\x35\x0d\xe2\x7d\x88\x35\xcd\xeb\xab\xdf\xaf\xae\xfc\xd5\x72\xbb\xcd\x62\xd5\x58\x54\xac\xa3\x32\x1c\xf1\xba\x6d\x09\x86\x7a\x6f\xbb\x35\x58\x74\x4d\xd8\xee\x98\xe9\x18\x03\xdc\x7b\x7c\x92\x3b\xc4\xeb\x2c\xee\x3d\x47\xb4\x3e\x32\x89\xc8\x3f\xb1\xbc\x2c\xc2\x35\xd2\x0e\xee\x59\x5c\x37\xaa\x29\x69\x77\x41\x22\x0e\xfb\x86\x31\x02\x88\xae\x47\xcf\xe8\x15\xa2\x65\xd7\x8d\xe9\x75\x34\xeb\x87\xeb\xed\xea\xb0\x1f\xbc\x00\x95\x58\xf6\x87\xfd\xc8\x02\xdd\xfa\x84\x09\xc1\xf4\x7c\x5d\xd7\x1c\x44\xb4\xcc\x43\xab\x06\xb6\x1d\xaf\x2e\x48\x00\x0f\x30\x9f\x80\x0b\x46\x0d\x83\xf3\xc4\xf5\xf8\x8a\xea\x1a\x4b\xcc\x28\x22\x7b\x24\x51\x3c\xa8\xd3\x39\x44\xd9\x0e\x24\x7c\x00\x02\x95\xea\x8b\x08\x18\xf4\x0f\x53\x03\xc2\xe8\x59\x1c\xd9\x75\x27\x2f\x6a\xf6\x95\xa2\xf8\xaf\x7a\x0a\xde\xfa\xa2\xb0\x3f\x5c\x24\x34\xec\xcf\x8e\x75\x2d\xa3\xea\x24\x45\x13\x9c\xba\xcc\x14\x6b\x38\xa1\x8e\xc8\x5d\xc7\x39\xd0\xaa\xf7\xfd\x49\xc5\x13\x3c\x9c\x24\xdf\xcf\xd1\xf6\x18\x37\xea\x9f\xbb\x81\x3a\x07\x6a\x12\x45\xcb\x59\xdd\x55\x32\x6c\xc6\xc2\x5b\x05\xa8\x83\x59\x9e\x47\x2e\x87\x34\x5c\x7b\xfc\x3d\xa2\xd7\x34\x5b\x2d\xec\x49\xc3\xee\x20\x03\x40\xd1\xd9\xfa\x9a\x3a\xbb\xb6\xdf\x4d\x61\x3f\x93\xb9\xfc\x84\xb5\x77\x8c\xd4\xc8\xc6\xec\xdb\x95\x05\xdc\x22\x4c\x1f\x2e\xb8\x6d\x31\x3d\xbf\xbd\x45\x98\xf8\x3b\x83\xc5\xdb\xa6\x95\x7d\xb0\x74\x17\x24\xac\xe3\x77\x8c\xcf\x46\x37\xda\xc5\xb3\x52\xf9\xf1\xb0\xdf\x60\xfd\x9f\xc5\x19\xad\xad\x83\x52\x43\x85\x1a\x8d\xf4\x16\x7d\x96\xfd\xa6\x41\xfc\x3b\xc8\x4f\x04\x55\xe0\x85\xfa\x66\xf5\x8c\x38\x46\x54\x86\x13\x38\x50\x39\x8d\xfc\xf6\x55\x02\xa7\x88\xdc\xc3\x09\x14\x8f\x61\xc3\xe1\xb4\x10\x81\xb5\xfe\xc2\xba\xea\x02\xfc\x01\x3d\x63\x7a\x8e\x52\xe6\x18\xa9\x66\x3d\x24\x12\xcb\xe3\xd0\x6a\x1c\x8a\xae\xb1\xdb\x96\x65\x9e\x8f\x51\xf9\x37\x7b\x11\x8c\xfb\x6a\x0d\x76\x4c\x44\x79\x17\x11\x62\xbb\x8f\x58\x92\x04\xa1\xec\x61\x78\xcf\x99\xc8\x8c\xe1\x41\x0a\x62\x72\xce\x57\x11\xda\xbf\x74\xe6\x4f\x6e\x73\xc7\xa8\xda\xa4\x7b\x20\xfa\xb6\x2f\x33\xfa\x41\x8b\xe9\x3e\x9b\x92\x62\xe2\x5c\x8c\xba\xc2\x30\xcb\x3f\x87\x96\xc2\x5a\x53\xdc\xf4\xc7\xbe\x85\x8d\xba\xe5\x42\xb6\xce\x67\xcf\x29\xe5\xed\x2e\x88\x9f\x21\x5a\xc4\x47\xd3\x6e\xc2\x9a\x42\x77\xb2\x57\x98\x09\xee\xa1\x41\x98\x62\x7a\x4e\x61\xd2\xa2\xc6\xd1\x47\x8e\x0a\x34\x52\x2a\x98\x83\x01\x8f\xe7\x69\x98\x89\x30\x3c\x9c\xb5\x79\x70\x40\xc6\x4e\x8e\x8b\x18\xae\x95\xb1\x19\x57\x79\xfd\x6d\x36\x78\x1b\x8f\x89\x1f\xcd\x10\x20\xc8\x53\xb3\x6e\xdd\x90\x0b\x5c\xdb\xac\x7b\xa0\x27\xe6\x51\x61\x76\x90\x71\x8e\x05\x23\x54\x05\x5e\x8f\xe8\xb5\xc0\x93\x32\xf4\x49\xad\x24\xf6\x76\xf5\x8e\x30\x24\xf3\x9e\xc1\x52\x24\xa9\x0f\x14\xe2\x9b\x73\x35\x0c\x07\x03\xbd\x1e\x9d\xc1\xc2\xb4\xac\x6c\xb2\x53\xd1\x39\xd6\x8c\xe8\x0b\x8b\xf1\x26\x38\x4c\x1a\x44\xff\x34\xcd\xe9\xab\x56\xb3\x08\x53\x09\xfc\x84\xaa\x68\x3b\x02\x99\x66\xc6\x3d\x23\x09\x2f\x28\xa5\x91\xbe\x20\xd2\x41\xbc\xbc\xe9\xb9\xec\x07\xc9\x15\x0d\x82\x9b\x96\x80\x6a\x12\x7f\x64\x38\xd1\x9b\xca\x3e\x69\xcc\xcf\xd9\x6b\x7f\x7c\x0b\x26\x8f\xee\xde\xed\x4d\x3c\x01\xed\x59\xbd\xe9\x0f\xf5\xc6\x3c\x01\xb2\x4f\x3e\x05\xcc\xcd\x20\x19\xb8\x3a\x7b\x99\xe0\x55\xd7\x98\xde\x92\xfc\xcd\xa4\xb4\xc0\x9f\x9b\x15\x96\xef\xd9\x05\x75\x5b\x26\x6e\x97\xb4\xed\x0f\xdc\xb6\x3f\x73\xd9\xfe\xf0\x5d\xfb\x83\xda\xe2\x27\xa4\xc5\x05\x09\xc3\xbe\xf9\xdb\xcd\xdd\x7c\x7b\xbb\x79\x49\x54\xb5\xbc\x30\xfe\xfd\x44\xd8\x8b\xdf\xda\x80\xbc\xb0\xda\x6f\xab\x10\xe7\x58\x89\x41\xb7\xd1\x72\xef\x03\xab\x50\xe2\xfd\xb7\x0f\xba\x8d\x8d\xc0\x1c\xea\x23\x6e\x60\xbb\x52\xff\x3f\x16\x35\xbc\x07\xe6\xe6\x3b\xf4\xae\xa2\xf0\xde\x7d\x1e\xf2\x17\xe8\x3d\x05\xa8\x10\x7f\x09\x60\xce\x5a\x88\xed\xaa\x41\xed\x57\x31\xa4\xc5\x7f\x09\x46\xff\x76\x8f\x5e\x6e\x41\x08\x74\x86\x02\xe3\x5b\xd4\x4e\x28\x3f\x6c\x07\x18\x86\x7f\x8b\xda\x28\x76\x07\x1e\xce\x61\x76\x47\xed\x72\xae\xcc\xb6\xc6\x37\x1a\x5a\x2c\x1b\x74\x02\x6e\x82\x12\x83\x27\xa8\x0a\xee\xdb\x84\x46\x90\x4a\x8e\xfb\xa1\xb4\x8a\xb9\xb9\x83\x2b\x67\x8f\x3d\xca\x57\x8d\x52\xc5\x26\xe7\x42\x70\x8f\xd1\x81\x56\x2a\xbd\x64\xc4\x80\xd7\xb1\x70\x2b\x87\x03\xce\x09\x82\x00\x6b\x68\xf9\xd4\xef\x50\xd3\x22\x7c\xd6\xea\x7b\x53\x39\x3f\x1c\x95\x50\x32\xcd\xa7\x41\x62\x9c\x30\x91\xc0\xe7\x54\x46\x6c\x5e\x32\xb7\x51\x0e\xbb\x01\xfa\xf9\xc0\x79\x44\xac\xfc\x2e\x82\x9e\x80\x0c\xa2\x24\xec\x32\x5b\x6a\x3b\xf3\xfa\x2c\x69\x8d\x85\x93\x87\xc3\x62\x1c\xe3\xf2\x23\xaf\x55\x86\x32\x6a\x68\x49\x00\x38\xbc\xc5\xf1\x5d\x37\xde\x71\x46\x7d\x79\xfc\xd1\x2d\x69\xf7\xae\x57\xb7\xca\x17\xbe\xd8\x83\x8c\xab\xcb\x01\x6d\x54\x0e\xd0\x9d\xa6\x22\x70\x9b\x29\x19\xb8\x51\xde\xa1\x26\xe8\x10\xac\xe3\x15\x84\x95\xb3\xdf\x64\xef\x94\xa8\x96\xf3\xa9\x8f\xd0\x7a\x2b\xc2\x14\xa6\xf0\xf1\x45\x17\x0e\x1a\xc2\xcd\xf6\x0e\xb3\xc0\xf4\x4c\x40\xb3\x64\xee\x4d\x3f\xa1\xb2\xc5\x08\xce\x5e\x96\xdc\x58\xc8\x52\x29\xad\x34\x31\x4d\xd7\x05\x67\x2f\x61\xc5\x58\xff\xce\x1d\xca\x21\x35\x1b\x3a\x3d\x23\xe9\x9c\x8b\xf4\x09\x39\x61\x2e\x24\xd5\x24\xc8\x62\x08\x4a\x42\x7c\x3e\xe2\xba\x26\x70\x17\xa1\x3c\xe9\x3d\x24\xfb\xd9\x78\x04\x22\x9d\x34\xd2\x20\x8b\x91\x1c\x20\x31\xb5\x18\x73\xc7\xe7\x62\x9e\x38\x6a\xd6\xed\x03\xa6\x31\x4b\x2b\xd6\xb4\x88\xf6\xd1\x70\x5e\x6e\xc3\x32\x06\x04\x98\x96\x09\x39\x66\xbf\x6c\xd4\xfa\x65\x39\xeb\x87\xc3\x19\x3b\x79\x34\x1d\x8f\xa2\x11\x5f\x88\x79\xc0\x44\x8e\xbc\x1d\x03\x02\xed\x85\xd1\x39\x76\x40\xa3\x8b\xaf\xd9\x98\x93\x44\x1d\x3e\x36\xd8\xc7\xf7\xf2\x37\x0b\x0d\x57\x0a\x48\x22\x4c\x42\xe4\x27\xbf\xd7\xe6\x4f\x2c\x24\xa6\xe7\x5d\x27\x24\x6b\x80\x27\x3e\x50\xbc\x4d\x40\xd2\xe1\xa6\x90\x41\xce\x9e\x99\xe6\x18\x99\x7d\x80\x21\x09\x1f\x4f\x37\x98\xcb\x4b\x90\x93\x91\x10\x2d\xe3\xc3\xc3\x9d\xf7\xe9\xce\xbb\xae\x79\x0a\x65\x35\x45\x03\x8f\x35\x0d\x67\x17\xde\x4f\xa2\x26\x20\x9d\x6a\x2a\x3d\xb7\x6b\x29\x39\x7e\xea\x24\x38\xc2\x95\x83\x00\xfe\x0c\xb5\xbe\x2d\x17\x0b\x42\x63\xed\x2e\xfb\x86\xc8\x89\xbe\x92\xf2\x4b\x72\xc8\xa9\x3e\x99\x1c\x73\x4e\xbf\xd8\xda\x5f\x36\xd8\x51\x80\x24\x13\xbf\x2d\x21\x66\x5f\x5e\xf7\x13\x62\xa1\xb6\xf8\x05\x11\x5c\xeb\x7d\xbc\x07\xd1\x11\xab\xa8\x2e\x48\x28\x1c\xa3\x6f\x39\x67\x53\x3a\x0b\xb4\xf7\x08\x30\xcf\x92\x5f\x20\x60\x0f\xd6\x3a\x48\xf9\x15\xee\x59\x0d\x8a\x52\x4a\x8b\x4c\x71\x68\x87\xd9\x72\x62\x02\xeb\x88\x23\x45\x93\x74\xba\xc8\x45\x99\x29\xfc\x29\xf5\x62\x98\x37\xbd\x4b\x99\xfa\x6d\x0f\x42\x30\x80\xff\x41\x67\x21\x0f\x3d\xfa\x6f\x9a\x77\x8c\x5b\xda\x9e\x18\x6f\x86\x9c\x31\xfc\x6f\xc9\x4c\x27\x8f\x95\xbe\x75\xed\x9a\x24\x0a\x2c\x8f\x0a\xea\x6c\xf5\x58\x68\x69\x39\xab\x40\x08\x47\xa5\xe6\xbe\xab\x9b\x8f\x82\x63\xd9\xdd\xe1\xca\xff\x78\xe8\x84\x03\xbb\x58\x18\x48\xad\x29\x10\x17\x3a\xb5\xd5\xbb\x11\x30\x6a\x3f\x0a\x1c\x91\x39\x9b\x79\xfa\x4d\x10\x13\x43\x93\x61\xbe\xf9\x80\xfb\x61\x78\x63\xcc\xb3\x21\x88\xf5\xa7\x3c\x8f\xeb\xe1\x4b\xeb\x52\xfa\x39\x69\xf9\x4f\xfd\xb6\xa8\xdf\xac\x6a\xfb\xfb\x76\x19\xf3\x8f\x1c\xe6\xff\x59\xe1\x69\x75\xe7\x64\xd2\x14\xa6\x40\xe1\x5d\x61\xda\x76\x72\x22\x77\xcc\xeb\x83\x06\x94\x10\xfb\x0f\xe4\x75\x01\xad\x0b\x58\x5d\x40\xea\x02\x4e\x17\x50\xba\x80\xd1\x05\x84\x2e\xe0\x73\x01\x9d\x0b\xd8\x5c\x40\xe6\x02\x2e\x17\x50\xb9\x80\xc9\xa5\x44\x86\x57\x09\xb4\xd6\xa2\x73\xf5\xb9\x9b\x3e\x9a\x78\x69\x7b\x9b\xf9\xcb\xc0\xc8\xc3\xad\x61\x4d\xe8\xe4\xba\xae\x8f\x4c\x59\x6c\xa2\x3a\xce\x61\xbf\x7e\x33\x55\x5b\xde\xac\x16\xff\x7a\x26\x88\xc0\x1b\x67\x0f\x04\x24\xb8\xa5\xe0\xe5\xbf\xc6\x59\xf6\xa7\x94\xdf\xf8\x47\x2c\x3a\xde\xff\xca\xe9\xaf\xad\x7a\x10\x29\xa7\x9f\x65\x5f\xe0\xd7\x59\x9e\xd2\x21\xf4\x5d\x3b\x8c\xe3\x67\xa6\x0d\x9a\x32\xd4\x76\x31\x7d\x45\x1f\x64\x63\x5c\x7e\xe0\x40\xb8\x6d\xc2\xaf\x93\x6f\xc2\xaf\x28\xd1\x68\x49\xe9\x97\x1a\x50\xbd\x6d\xfa\xe9\x51\xf4\x91\xdb\x57\xce\xa6\x2a\xda\xa0\x84\xcb\x7b\x68\xd8\x33\x8c\x7e\xce\xe6\x1f\x65\x1b\x9e\xf5\x37\xc5\xb8\x71\xcb\xc3\x8b\xfe\x7e\xbf\xfa\x4f\x00\x00\x00\xff\xff\x90\x65\x11\xc6\xa0\x2b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
