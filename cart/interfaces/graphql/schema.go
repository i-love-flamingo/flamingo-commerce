// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xdc\x38\xf2\xbd\xfb\x53\xc8\xc8\xa5\x7f\x40\xf0\x03\x76\x8f\x7d\x6b\x77\xdb\x41\x63\x62\x8f\xe3\xf4\x64\x0f\x81\x61\xd0\x52\x75\x37\x37\x14\xa9\x21\x29\xdb\xc2\x60\xbe\xfb\x82\x14\x29\xf1\x9f\x24\xc6\x8b\x9d\xcb\xee\x1c\x26\x30\xf9\x58\xac\x22\x1f\x8b\x8f\xa5\x96\x5d\x03\xc5\x96\xd5\x35\xf0\x12\x9e\x76\x50\x32\x8e\x24\x54\x5b\xc4\x65\xf1\xc7\x45\x51\x14\x45\x89\xb8\x5c\x8f\x10\xd5\x73\xa9\x3b\x2a\x0b\xde\x01\xc1\x2f\xc0\x31\x88\x75\xf1\xdd\x03\xee\x02\x48\x77\xf9\xa8\x87\x9e\x20\xee\xba\xea\xb6\xac\x82\x55\x65\xfe\x54\x7f\xac\x8b\xaf\x92\x63\x7a\xba\xfc\xbf\xc0\x81\x68\xf0\xc5\x9f\x17\x17\x7e\x28\x4e\x04\xb8\x5a\x17\xfb\x5d\xef\x34\x50\x89\x65\xb7\xdf\x0d\xa6\x75\xeb\x33\x26\x04\xd3\xd3\xa6\xaa\x38\x08\x11\x4c\x66\x5a\x35\xb0\x69\x79\x79\x46\x02\x78\x80\xb9\x07\x2e\x18\x35\xcb\x32\xbd\x1a\xde\x22\xa0\xaa\xc2\x12\x33\x8a\xc8\x0e\x49\x14\x4f\xea\x74\xf6\x5e\x36\xa8\xab\x81\xca\xaf\x40\xa0\x54\x7d\xc1\x90\xa7\xfb\xa0\xbf\x0f\x0d\x08\xa3\x27\x71\x60\x9b\x56\x9e\x55\xf4\xa5\x5a\xb7\xdf\x74\x08\x57\x8c\x11\x40\xb4\xb7\x8e\xc2\xfe\x70\x91\x50\xd3\x10\x0c\xd5\x96\xb5\x0d\xa3\x6a\x7b\xa2\x00\xc7\x2e\x13\x62\x05\x47\xd4\x12\xb9\x6d\x39\x07\x5a\x76\xbe\x3d\xc9\x24\x22\x58\x42\x1d\xd9\x39\xd8\x1e\x63\x06\x0b\x2f\x34\xa8\x42\xd7\x7b\xcf\x3e\xe1\xa3\xdc\x22\x5e\x45\xf6\x36\x7e\xbf\x4b\xc2\xf7\x70\xcf\x50\x2e\xb0\x61\x57\xc4\x0c\x7b\xbc\xb0\x80\x5b\x84\xe9\xd7\x33\x6e\x1a\x4c\x4f\xd7\xb7\x08\x13\x7f\x19\xb0\xb8\xae\x1b\xd9\x05\x21\x9d\x91\xb0\x86\x6f\x18\x9f\xf5\x6e\x18\x17\x47\xb5\x97\x50\xef\x77\x2b\xac\xff\x59\x8c\xe8\xd2\x1a\xc8\x1d\xa8\x50\xc3\x20\xbd\x69\x5f\x64\xb7\xaa\x11\xff\x01\xf2\x9e\xa0\x12\x3c\x57\x3f\x16\x2f\x88\x63\x44\x65\x18\xc0\x9e\xca\x71\xe6\xeb\x37\x09\x9c\x22\xf2\x00\x47\x50\xa4\x81\x15\x87\xe3\x82\x07\xfd\x3a\x4a\xa8\xb7\xac\xa5\x52\x1b\x34\x27\x86\xb3\xaa\x2d\xa5\xdb\x6c\x67\xfa\xc6\xda\xf2\x0c\xfc\x2b\x7a\xc1\xf4\xe4\x1e\xf9\x7b\x8e\x4b\x30\x51\x71\x44\x2b\x1d\x57\xdc\xaf\x01\xa2\xad\x0f\xe8\x0d\xc2\x8c\xf1\xa4\x1b\x87\x95\xd1\x94\x86\x44\xd6\x78\xea\x5b\x47\x63\x96\x26\x77\x20\xd3\x1e\xf9\x98\x7f\x60\x79\xde\x61\x51\xaa\xf0\x26\x42\x38\x23\x61\x07\x6c\x99\x50\x28\xff\xe4\x10\x62\xbb\x0f\x58\x92\x04\x81\x45\xfb\xac\x57\xe0\x13\x67\x62\x62\x0e\xb5\x0a\x0a\x72\x40\x6f\x9b\xba\x5f\xea\x34\xac\xb7\x94\x0c\x2e\x9e\x2b\x23\x38\xc7\x62\x16\xba\x77\xd3\xc2\xe6\x7d\xad\xef\x18\x55\xec\x7a\x00\xa2\x2f\x9a\xbc\x41\x3f\x39\xe2\x8c\xc4\x26\xcc\xaa\x89\x03\x6d\xb2\xdf\x70\x24\xfc\x04\x62\xcf\x9e\x9a\x5b\x5c\x75\x87\xae\x81\x95\xba\x0b\xc3\x63\x36\x9f\x63\x47\xae\x6f\xcf\x88\x9f\x20\x5a\xc4\x27\xd3\x6e\xdc\x1a\x5d\x77\xd2\x6e\x98\xc2\x1e\xa0\x46\x98\x62\x7a\x9a\xc2\x88\xb6\x0e\xad\xdc\x30\x5e\xaa\x0c\x3f\xb1\xc2\x9f\x06\x3f\xd5\x96\x2f\x8e\xb2\x2b\xb4\x21\x64\x58\xc5\xdf\x5b\xcc\xa1\xda\xf7\x37\x4f\x70\x85\xaa\x51\x7d\xd7\x65\x5a\x53\xb8\x10\xa3\x2f\x7a\xf3\x36\x1d\x89\x75\x11\x2c\xb5\x19\x32\xe4\xab\x47\x67\x94\x3d\x7d\xb3\x23\x5d\x90\x37\x7a\xdc\xf7\x70\x7b\xcd\xc8\x01\x70\xf9\x38\x1b\x8e\xf5\xcd\x44\x84\x66\x38\x1b\xdc\x09\xb3\x66\x5d\xc7\x33\x4c\xdb\x1b\x6e\x4f\x8f\xcc\x63\xef\xec\x24\x43\x8c\x19\x33\x94\x19\x56\x0f\xe8\x2d\xc3\x92\x1a\xe8\x9f\x43\x25\x48\xd7\xc5\x0d\x61\x48\x4e\x5b\x06\x4b\x1a\xad\x7e\xd2\xb9\xc1\xdd\xe0\xfe\x76\xf9\x1e\xd9\x79\x74\x2e\xeb\xfe\xc4\xa3\xb7\x83\xe3\x52\x78\x51\xaa\x31\x93\x01\xeb\x5b\xc8\xf8\xe5\x5f\x99\xc3\xdd\xbc\x1f\x6f\x57\xfd\xa7\x69\x4e\x8b\x1f\xcd\x35\x4c\x25\xf0\x23\x2a\xa3\x4d\x0b\x54\xaa\x3d\x44\x48\xc2\x2b\x4a\x49\xc4\x6f\x88\xb4\x10\x6f\x42\x3a\x96\x5d\xaf\x38\xa3\x49\x70\xdd\x10\x50\x4d\xe2\xaf\x74\x27\x7a\xa7\x18\xeb\x96\xe8\xb3\x42\x6c\x78\x5f\x25\x0f\xf8\xce\xed\x4d\x3c\xab\xec\x89\xbe\xea\xf6\xd5\xca\xbc\x80\x26\x9f\x51\x0a\x38\x15\x41\xd2\x71\x75\x42\x27\x9c\x57\x5d\xc3\xc3\x31\x29\xef\x1d\x8f\x85\x93\x20\x02\x7b\x6e\xee\x58\x56\x22\x0b\x7a\x2d\x4f\xa7\x2c\xc9\x94\x9f\x90\x11\xef\x51\x11\x3f\x2d\x22\x7e\x52\x34\xbd\x4f\x33\x3d\xb0\xd7\x25\x8d\x7b\x46\xc2\x70\x74\xb8\xdc\x67\xc9\xa4\x28\x62\xab\x0b\x5e\x42\x56\x2d\xaf\x8c\xff\x38\x12\xf6\xea\xb7\xd6\x20\xcf\xac\xf2\xdb\x4a\xc4\x39\x56\xa2\xda\x6d\xb4\x0c\xfd\xcc\x4a\x94\x78\x24\xef\x82\x6e\x33\x46\x28\x45\x70\xc0\x35\xac\x0b\xf5\xff\x21\x03\x7b\xaf\xf0\xd5\x0f\xe8\x5c\x41\xe5\x3d\x8e\x3d\xe4\x2f\xd0\x79\x4a\x5a\x21\x3e\x04\x30\x67\x2d\xc4\xba\xa8\x51\xf3\x5d\xf4\xc9\xf3\x9f\x82\xd1\xff\x7f\x40\xaf\xb7\x20\x04\x3a\x41\xc6\xe0\x5b\xd4\x8c\x28\xdf\x6d\x07\x18\xba\x7f\x8b\x9a\xc8\x77\x07\x1e\xc6\x30\xbb\xa3\x76\x39\x0b\x7b\xbb\x45\xb7\x23\x5a\xac\xad\xb4\x02\xae\x82\x3a\x8c\xa7\x15\x33\xee\xee\x84\xde\x90\xea\x59\xe3\xbb\xd2\x28\x7e\x4f\x1d\x6f\x39\x9b\x1c\x4c\xa5\x21\x75\x6a\x9c\x42\xc3\xd0\xed\x5c\x1b\xee\x61\xdb\xd3\x52\x25\xa1\x09\x61\xe1\x75\x2c\xdc\xdd\xe1\x84\xb6\xe2\x95\x4a\xbb\x01\xd6\xd0\xf2\xb9\xdb\xa2\xba\x41\xf8\xa4\x1f\x1f\xab\xd2\xf9\xc3\xd1\x12\x39\x61\x3e\xf7\x42\xe4\x88\x89\x04\x3e\xa7\x45\xd2\xc3\x45\x5b\x4f\x89\xf8\x9c\xd0\x87\x6a\xa5\xeb\xbf\x9f\x2e\x9c\x27\x56\xe1\x77\x11\xf4\x0c\xa4\x57\x36\x61\x97\xd9\x71\xdb\x39\x2d\x05\x93\xa3\xb1\x70\x92\x79\xf8\xf6\x61\x5c\xfe\xca\x2b\x95\xc0\x8c\xa4\x5a\x52\x11\x0e\xad\x71\x7c\x61\x0e\x17\xa5\x91\x70\xde\x3a\xea\x96\xb4\x79\xd7\xaa\x5b\x29\x0d\x0b\x31\x41\x42\xd6\x55\x9e\x26\xaa\xf2\xe8\x4e\x53\xe8\xb9\x9d\xa8\x04\xb9\x5e\xde\xa1\x3a\xe8\x10\xac\xe5\x25\x84\xd5\xc7\xdf\x65\xe7\x14\x76\x96\xd3\xad\x8f\xd0\xa2\x2d\xc2\x64\x66\xf8\xe1\xbd\x1b\x4e\x1a\xc2\xcd\xf6\xf6\x51\x60\x7a\x22\xa0\x59\x32\x57\x3a\x19\x51\x93\x35\x1f\xce\x5e\x97\xcc\x58\xc8\x9c\x8d\xe9\x4b\xfc\x3d\x99\x6d\xbc\x6f\x12\xa6\x8d\x34\x48\x1f\xdb\x3e\xb7\x1b\xc2\xbd\x20\xe9\x9c\x9c\xf4\x19\x3a\x62\x2e\x24\xd5\x34\x99\xc4\x10\x94\x84\xf8\x8c\xc5\x55\x45\xe0\x2e\x42\x79\x0a\xbf\xbf\x2d\x66\xfd\x11\x88\xb4\xd2\x68\x8b\x49\x8c\xe4\x00\x89\xd0\x62\xcc\x1d\x9f\xf3\x79\x64\xb1\x59\xb7\xcf\x98\xc6\x3c\x2e\x59\xdd\x20\xda\x45\xd3\x79\xd9\x0f\xcb\x18\x10\x60\x1a\x26\xe4\x90\x1f\x27\xbd\xd6\xcf\xdc\x59\x3b\x1c\x4e\xd8\xc9\xb4\x69\x7f\x14\x8d\xf8\x82\xcf\x3d\x26\x32\xe4\xed\x18\x10\x68\xce\x8c\xce\xb1\x03\x6a\x5d\x75\x9f\xf4\x39\x49\xd4\xfe\x93\x8e\xad\x04\x2c\x7f\x19\xd2\x70\x25\xa1\x24\xc2\x24\x44\xde\xfb\xbd\x36\xc3\x62\x21\x31\x3d\x6d\x5b\x21\x59\x0d\x3c\xf1\x19\xe8\x3a\x01\x49\xbb\x9b\x42\x06\x59\x7d\x26\xcc\xc1\x33\xfb\xce\x43\x12\x7e\x3d\x5e\x61\x2e\xcf\x41\xd6\x46\x42\x34\x8c\xf7\xf5\x01\xde\xa5\x3b\xef\xda\xfa\x39\xd4\xe5\x14\xf5\x3c\xd6\x34\x9c\x5d\x78\x3f\xcd\x1a\x87\x74\xaa\x29\x75\x6c\x1b\x29\x39\x7e\x6e\x25\x38\xca\x97\x83\x00\xfe\x02\x95\xbe\x4f\x17\xab\x53\x43\xed\x73\xf2\x11\x32\xa5\x1a\x73\x6a\x41\xc9\x29\xc7\xfa\x6e\x72\xce\x39\x85\x63\x6b\x9c\x93\xce\x0e\x12\x25\x99\xf9\x6d\x09\x76\xb2\x02\xfd\x30\x22\xe6\x9f\x6f\x4f\xdf\x10\xc1\x95\xde\xc7\x07\x10\x2d\xb1\x9a\xeb\x8c\x84\xc2\x31\x7a\xcd\x39\x1b\xd3\x59\x20\xde\x07\x80\x79\xd7\xfc\x02\x01\x7b\x3e\x60\x2d\x95\x94\x61\xe1\x1c\xd6\xa0\xf6\xa5\xd4\xca\xe8\x87\x36\xd8\x3f\x4e\x3e\x24\x1c\x4e\x80\x8b\x3f\x2e\x34\x97\x6c\x19\x33\x4a\x06\xba\x17\xa6\x1c\xfd\x30\x51\x89\x54\x1a\xc7\xb0\x6f\x7c\xdc\x32\xf5\xb7\x3d\x0c\x41\x4e\xf2\xbf\xe6\x2d\xe4\xa2\x27\xff\x61\x74\xc3\xb8\xa5\xee\x91\xf1\xba\xcf\x1b\xfd\x7f\x4b\xc3\x74\x02\x29\xf4\xcd\x6b\x97\x25\x51\xcb\x79\x52\x50\x67\xbb\x87\x9a\x4e\xc3\x59\x09\x42\x38\x5a\x76\xc2\x61\xfb\xa5\x76\x28\xba\x3b\x7c\xf9\x0f\x4f\x9d\x30\x60\x17\x0b\x03\xa9\x34\x0b\xe2\x9a\xaa\x1e\x75\x33\x00\x06\x85\x48\x81\x23\x32\x37\xc6\xa1\xe0\x94\x33\x96\x78\x85\x2e\x64\xa4\xd9\x6f\x3e\x95\x7f\xee\x5f\x22\xf3\x6c\x08\x7c\x7d\x97\xe5\x61\x3d\x7c\x01\x9e\x4b\x3f\x27\x35\xff\x4f\xc3\x2d\x6a\x38\xab\xdc\xfe\xb6\x5e\xc6\xfc\x7d\x0a\xf3\xdf\xac\xf2\xb4\xc2\x73\x32\x69\x0a\x93\xa1\xf2\x2e\x30\x6d\x5a\x39\x92\x3b\xe6\xf5\x5e\x03\x72\x88\xfd\x17\xf2\x3a\x83\xd6\x19\xac\xce\x20\x75\x06\xa7\x33\x28\x9d\xc1\xe8\x0c\x42\x67\xf0\x39\x83\xce\x19\x6c\xce\x20\x73\x06\x97\x33\xa8\x9c\xc1\xe4\x5c\x22\xc3\x9b\x04\x5a\x69\xe1\x59\x7c\x69\xc7\xef\x33\x5e\xda\x5e\x4f\xfc\xb0\x2f\xb2\x70\x6b\x58\x13\x1a\xd9\x54\xd5\x81\xa9\x11\xab\xa8\xda\xb3\xdf\x5d\x7e\x1c\x6b\x32\x1f\x8b\xc5\x9f\x4e\x05\x1e\x78\xf3\xec\x80\x80\x04\xb7\x9e\xbc\xfc\x53\xac\x65\x7b\x4a\xfc\x0d\xbf\x60\xd2\xfe\xfe\x5b\x46\x7f\x6b\xd4\xa3\x48\x19\xfd\x22\xbb\x0c\xbb\xce\xf2\xe4\x4e\xa1\xef\xda\x7e\x1e\x3f\x33\xad\xd0\x98\xa1\xd6\x8b\xe9\x2b\xfa\xf6\x1b\xe3\xa6\x27\x0e\x84\xdb\x2a\xfc\x10\xfa\x31\xfc\x14\x13\xcd\x96\x94\x7e\xa9\x09\x37\x95\xf3\xb3\x97\x95\x5b\x9e\x5d\xda\x9a\x8b\x3f\x2f\xfe\x15\x00\x00\xff\xff\xba\x76\xd5\x78\xb9\x2a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
