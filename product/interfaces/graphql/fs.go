// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4f\x6f\xeb\x36\x0c\xbf\x17\xe8\x77\xf0\xc3\x2e\x1d\xb0\x4f\xe0\x5b\x9b\xee\x0d\xc5\x5e\x1f\xba\x25\xdb\xe5\x61\x18\x18\x99\x71\x88\xc8\x92\x21\xd1\x6d\x8c\x61\xdf\x7d\xb0\x6c\xd9\x96\xac\x38\xd9\x71\xc0\x72\x8a\xc9\x1f\xff\x88\x22\x7f\x14\x29\x46\x73\x00\x81\xd9\x46\x57\x15\x1a\x81\x7f\xbe\x19\x5d\x34\x82\xb3\xbf\xee\xef\xb2\x2c\xcb\xf6\x60\xf1\x19\x18\xf2\x09\xf1\x04\x96\xc4\x00\xeb\x54\x9f\x7a\x24\x23\x58\x34\x11\x76\x80\xed\x46\xdd\x00\xb6\x35\x0a\x3a\x90\x00\x26\xad\xec\xd2\x60\x1b\xe8\x07\x23\xb2\x5b\x90\x08\x7b\x89\x79\xf6\xa4\xb5\x44\x50\xde\xdd\x20\x4f\x47\xf7\x56\x3e\xd1\xb6\xc6\x3c\xdb\xb2\x21\x55\x0e\xa2\x12\xf9\xa5\x40\xc5\x74\x20\x34\x91\xee\x08\xf6\x15\x0b\x82\x87\xd2\xe8\xa6\x1e\x95\x3f\x64\x8d\x85\x72\x72\xf4\x7d\x9c\x53\x89\x7c\xa3\x5d\x9c\xaf\x33\xfb\x74\x7f\xf7\xf7\xfd\xdd\xfd\x5d\x97\xed\x84\xd8\x52\x55\x4b\xf4\x77\xe4\x3e\x2a\x54\x6c\xff\xbf\xbf\xff\xc6\xfd\xc5\xb5\xf7\xd7\xc4\xc4\x5d\x55\x66\xbf\xe0\x0c\xc0\x6c\x68\xdf\x30\x5a\x8f\x89\x63\x3e\x8e\x88\xa1\xa2\x47\x6d\xf8\x19\xad\x30\x54\x77\x77\x10\x15\xa5\x98\x6b\x96\xf1\xaa\xee\x04\x41\x3a\xdf\xd2\x87\xfc\xa3\x3b\xa2\xb3\x00\x73\x42\x7e\x93\x20\x70\xa3\x8b\xf8\x7e\x0c\x32\x90\x44\xd3\xab\xe2\x68\x5e\xbb\x3d\x35\xf9\x32\x17\xaf\xfd\x0a\x55\x64\xdb\xeb\x85\x41\x60\x2c\x1e\xb9\x53\xee\xa8\xf2\x6d\xd2\xd4\x45\x52\xfe\x4e\x96\xf6\x12\x3f\x1b\x5d\xe5\x09\xf9\x4e\xcf\xf0\xbd\x66\x03\x8c\xa5\x36\xd4\x57\x7f\xaa\xc4\x20\x6f\xfb\xe9\xe8\x6a\xd1\xa1\x5f\x81\x94\xd7\xcc\x7a\x23\x02\x8f\xd9\x7b\xb1\xee\x6a\xf3\x0a\x75\x4d\xaa\xcc\xb3\x6f\xc3\x21\xc7\xfa\x5a\xd6\xe2\xf4\x05\xdf\x51\xe6\x71\x01\x4e\xd8\x7e\x68\x53\xd8\xc0\xaa\x9f\xb7\xaf\xf8\xe1\x4a\x36\x75\x76\xa2\x27\x17\x33\xee\x9b\xd2\xf5\xd0\xae\xef\xcc\xde\xf3\x7a\x6f\xcd\x79\xe4\xcd\x90\xc0\x6c\x39\x1b\x4e\xfe\xa2\x0e\x7a\x01\x7e\xb1\xdd\x95\xb8\xbf\xe3\x28\xf6\xa0\xda\xe0\x16\x25\x0a\xc6\xe2\x77\x30\x04\x8a\x5d\xa7\xcc\x83\xba\x86\xcd\xf2\x95\x36\x5d\x69\xd2\x79\x2a\x8f\xef\x40\xb2\x23\x1b\x97\x88\x4d\xb9\x1c\x8f\xe0\xdd\xf6\x96\x5f\x74\x0b\x92\xdb\x51\xbb\x3c\x7b\x8c\x58\xbb\x8d\x18\x3b\x12\xc5\x92\xfc\x0a\x3c\x40\x23\x39\x88\x47\x02\x47\xd2\x7d\x26\x2b\x74\xa3\x18\x8b\x98\xe2\x8a\x99\x26\x69\xec\x01\x3b\x3c\x73\x14\xb5\x22\xf5\xa6\x49\xb1\xdd\xe9\x6d\x8d\x8a\xf3\xec\xb3\xd4\xc0\x5e\x0b\xe7\x15\xad\xd0\x8a\x9d\xc7\x30\xe8\xa6\x17\x5f\xea\xd2\x09\xe1\x8b\x21\x1a\xcb\xba\x42\xf3\x53\xc0\xd0\x83\xee\x08\x4a\xa1\x4c\x90\x91\xd4\x02\xe4\x5c\x78\xf9\x16\xc2\x35\xe6\xc3\xba\x85\x60\x13\x9d\x11\xc0\x5d\x52\x5d\x8b\xdc\xe8\xde\xe1\xa3\x7d\x10\xe4\x8d\x8a\x7b\x0e\x5a\x8f\xfb\xa3\x62\xd3\xfe\x8b\xb8\x0e\xef\xe3\x4a\xd8\x07\x0c\xe3\x88\x11\x64\x83\x21\xbb\xac\xb8\x1e\x76\xb5\x77\x78\x7d\xe7\x4f\x44\x1c\xca\x3b\x22\x9e\xa4\x20\x98\xde\x71\x60\x87\x2b\xa4\x02\xe1\x0c\xdf\x32\xc2\x72\x36\x6e\x29\x83\x78\x1c\xd7\x8b\xe0\x48\x27\x9c\xd8\xc4\x8e\xa5\x0a\x77\xbd\x2e\x90\x0f\xcf\x8b\x05\x7e\xf6\x44\x88\xf6\xe3\x01\x0d\x2a\x71\x5b\x47\x4f\xef\x84\xb1\x9b\x71\x12\xfe\x8c\xed\x72\x8d\xcc\x01\xa9\xda\x8c\x4a\x6f\x70\x04\x3b\xca\x1e\x4e\xd8\x26\xde\x58\x4b\xcf\x31\xf0\x62\x94\x9b\x4e\x37\x32\x44\x62\xfc\x13\x2d\xde\x28\xe2\x88\x29\x12\x41\xc2\x15\xbe\x12\xa2\x06\x3e\x46\x22\xe5\x5e\x2f\x11\xca\x38\x66\xbc\xe0\x7f\xed\x9c\x8b\xb5\x70\x61\x07\x5c\xa3\xf9\xab\x2c\xdf\x8f\xdd\x13\x58\x0c\x19\x7c\x92\x3f\x56\x9d\xe9\x25\xed\x6f\x8a\x38\x5c\xb3\xc9\x7d\xe4\xdf\x42\x55\x0d\x54\xaa\x5f\x1b\x89\xcb\x36\x2c\x50\xb5\xaf\xda\xa0\x37\xb7\x91\xf5\x77\xd7\x37\xcb\x30\x48\x70\xde\x48\xb0\x36\x78\x48\xb9\x5a\xe3\x99\x51\x15\x6e\x62\xb3\x5f\x1a\x9c\x68\x31\xae\xff\x43\xff\x92\xa8\x17\xcf\xdd\x44\xe3\x3a\xdf\xff\x04\x00\x00\xff\xff\x21\xe1\xe3\x61\x69\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3945, mode: os.FileMode(438), modTime: time.Unix(1561706842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
