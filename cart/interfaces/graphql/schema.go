// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4f\x6f\xdc\xba\x11\xbf\xfb\x53\xc8\xdb\xcb\xbe\x20\x6d\xd0\x1e\x7d\x5b\xef\x26\xc1\x22\xb1\x93\xd8\x9b\xf4\x10\x18\x01\x2d\xcd\xee\x12\xa1\x44\x99\xa4\x6c\x0b\x45\xbe\x7b\xc1\x7f\x12\x49\x91\x92\x36\x79\x7d\xc0\x6b\xfb\x0e\x2f\x96\x38\x1c\x0e\xc9\x1f\x67\x7e\x33\xd4\x8a\xb6\x86\x6c\x4d\xcb\x12\x58\x0e\xdf\xd6\x88\x89\x6f\x1b\xc8\x29\x43\x02\x0a\xf9\x94\xfd\xeb\x2c\xcb\xb2\x2c\x47\x4c\x5c\x04\x72\xf2\x7f\xe7\xaa\xb5\xb0\x3d\x36\x40\xf0\x23\x30\x0c\xfc\x22\xfb\x9a\xd0\x6a\x64\xda\xf3\x3b\xd5\xf7\x00\x62\xd0\x74\xd9\xae\x69\x01\xcb\xc2\x3c\xca\x87\x8b\xec\x56\x30\x5c\x1d\xce\x7f\x0b\xcd\x18\xf4\xb6\x6a\x57\x84\x7c\x44\x6d\x09\x95\xb8\x81\x87\x06\x33\x28\xb6\x02\x4a\x1e\xf6\xff\xc8\x70\x6e\x9a\xce\xbb\xb9\xde\x36\x65\x89\x58\x1b\xca\x9a\xd7\xe7\x67\x3f\xce\xce\x22\x2b\x67\x9a\xcd\x9a\x15\x98\xe7\xb4\xa9\xc4\x60\xc4\x55\x5d\x13\x0c\xc5\xc6\xb6\xeb\x61\x79\x53\x86\x0d\x4e\x47\x65\x65\x20\xf7\x16\xef\xc5\x1a\xb1\x22\x29\xf7\x96\xa1\xaa\xd8\x51\x81\xc8\x3f\xb1\x38\x4e\x8a\x2b\x49\x3b\xb8\xd7\x63\x55\xca\x57\xd1\x7e\x47\xc4\x87\x66\x5f\x52\x4a\x00\x55\xdd\xc4\x76\xe8\x19\x06\xcb\xa0\x5e\x5a\x09\xb3\x53\xb7\x40\x20\x17\x98\x56\x52\xe2\xb6\x26\x58\x7c\x41\xa4\x01\x3d\xfe\x65\x7b\x05\xe2\x48\x0b\xbe\x2c\xf5\xbf\x17\xd9\x57\x83\x8a\xbb\xdf\x06\xc6\xc5\xb7\xc8\xc1\x34\x2e\x2e\xb2\xed\x46\xdb\x08\x95\xc0\xa2\xdd\x6e\x3a\x98\xa9\xb7\xf7\x98\x10\x5c\x1d\x56\x45\xc1\x80\x0f\xb7\x51\xbf\x56\x92\x75\xc3\xf2\x23\xe2\xc0\x06\xe8\x02\xc6\x69\x65\x4e\xc9\xc8\xe1\xf0\xce\x04\x2a\x0a\x2c\x17\x01\x91\x0d\x12\x28\x32\xae\xd3\xaa\x2d\xad\x83\xe5\x1b\x98\x11\xb4\xeb\xe9\x01\xa1\xd5\x81\xef\xe8\xaa\x11\x47\xb9\x02\xb9\x3c\x46\x9f\xd5\x2c\xbc\x1d\x44\x61\x7b\xb8\x50\x48\x23\x60\x4d\x9b\x9a\x56\xf2\xb8\x0e\xa7\xd8\xb7\x99\x49\x16\xb0\x47\x0d\x11\xeb\x86\x31\xa8\xf2\xd6\x57\x28\x24\x14\xb1\x3e\xae\x81\xa2\x9d\x6d\x32\x7a\xe4\x9f\x6b\x0d\xcf\x6d\x65\x1c\x52\xcd\x68\xd1\xe4\x22\x7c\x8d\xb9\xb7\x0e\x50\x04\xf3\x3c\x74\xe7\x25\x44\xd3\xb9\x77\x46\x76\xe8\x39\x7e\x22\xac\xd8\xbd\x12\xbb\x86\x84\x00\x1a\x9c\xdf\xaf\x51\x0f\x61\x05\x5c\x57\xf9\x53\x1e\xd2\x77\x8c\x1b\xa7\x97\x7b\x86\xce\xac\xc0\x15\xc2\xd5\xed\x11\xd7\x35\xae\x0e\xaf\xaf\x10\x26\xfe\xe6\x60\xfe\xba\xac\x45\x1b\x2c\xde\x11\x71\xab\xf8\x0d\x65\xa3\xe6\x75\xfd\x86\xd3\x92\x7e\x78\xbb\x59\x62\xf5\xcf\xf4\x94\xce\xad\x86\xd9\x3d\xa5\x58\xd7\x4b\x6d\xd3\x27\xd1\x2e\x4b\xc4\xbe\x83\xf8\x48\x50\x0e\x9e\xb1\x2f\xb3\x47\xc4\x30\xaa\x44\x38\x85\x6d\x25\xfa\xa1\x5f\x3f\x0b\x60\x15\x22\x37\xb0\x07\x09\x66\x58\x32\xd8\x4f\x99\x60\xbb\x7f\xa1\x4d\x7e\x04\x76\x8b\x1e\x71\x75\x18\xf8\xe6\xce\x54\xd9\x73\x07\x31\x17\xa3\xdf\x1a\x85\xbc\x29\xed\xce\x25\xe1\xe7\xcb\x48\x47\x9f\x8c\x38\x83\x0e\x6f\x19\xe5\x33\xa5\x26\x14\x5b\xd0\xd8\x3e\x6b\xca\x07\xa1\x03\x11\x62\x9b\x77\x58\x90\x08\x5a\xed\x59\x1b\xb5\xcb\x11\x99\x35\xdb\xee\xf8\xce\x5b\x1b\x2f\x6e\x8e\x3b\x86\xf2\x9a\x56\x72\xfb\x6f\x80\x28\xca\x32\xaf\xd3\x89\x3d\xfa\x90\xdc\x3b\xdd\xc8\xa1\xeb\xc8\x91\x01\xad\x7f\xc8\xed\xe9\x50\xc4\xe8\xb2\xdd\xb5\x35\x2c\x65\x3c\x0d\x0f\xc2\x84\x77\xee\x5d\xea\xfa\x88\xd8\x01\x06\xab\xf8\xcd\xbc\xef\x01\x31\x64\x37\xa1\x9f\xb9\x81\x12\xe1\x4a\xe2\x2c\x22\x13\x8f\xfb\x0e\xcb\x73\x28\xad\x21\x84\xe1\x24\xb4\xf0\xda\x08\x98\x99\x70\x03\xc4\xd1\x3e\xb7\x8e\x90\xe9\x27\xba\x55\x1c\x2c\x96\xee\xd3\x2d\xf3\xf9\xdd\xa8\xf1\xd6\x1e\x63\x3f\x1a\x41\x40\xe0\x04\x47\xd5\xba\x26\xcf\x50\x6d\x7d\xfa\xb6\xda\x53\x0f\x0b\xa3\x83\x74\x73\x9c\x31\x42\x3e\x43\xeb\x0e\x3d\xcf\xd0\x24\x3b\xfa\xa8\x96\x89\xc2\x45\xf6\x86\x50\x24\xd2\x9a\xc1\x42\x24\x41\x40\xd0\xf3\x9d\x13\x77\xf4\xc9\x40\xcf\x3b\x67\xb0\x81\xcb\xdf\xa1\xe7\xe4\x54\x94\xfb\x36\x23\xfa\xc4\xa5\x8b\x32\xdb\x9e\xe3\xa8\x47\xf3\x3a\x1e\xc8\x15\x8a\x70\x25\x80\xed\x51\x3e\xd8\x8e\x80\x08\x9a\x71\x0f\x48\xc0\x13\x8a\x91\x30\xc5\xbf\x13\x1b\x65\x39\xfa\x10\xd8\xc1\x28\xdf\x94\x58\x1a\xdf\x51\x71\x63\xda\x43\x83\x08\xde\xe3\x08\xb5\x8e\xf6\xfa\x64\xc5\x8d\x8d\xca\xbb\x24\x9c\x4e\x12\xb3\xe3\x9a\x8d\x61\x43\x74\xe9\xb4\x24\x40\xdc\xd0\xbd\xc6\x07\xdd\x68\x3e\x3c\xd8\x20\x5c\xd6\x04\xe4\x2b\xfe\x67\xd8\xca\x41\x36\x6e\x93\x61\xf3\x38\x4e\xe4\xba\x42\x42\xdc\x5f\x6e\xdc\xe6\x11\x13\xa2\x23\x4b\x87\x95\x1a\x5d\xb6\x75\xeb\x10\x3f\xf5\x89\x48\x30\xa8\x10\x38\x6d\xd3\x04\x65\x22\xeb\x98\x97\x74\x4c\xe5\x1c\x27\xd0\x94\x9f\x61\x29\x27\x93\x94\x13\x49\xd9\x4f\x70\xb2\x23\xe2\x06\x40\x13\xac\xc0\xdd\x7f\x4b\x0b\xbc\xe8\x23\xdf\x3c\x51\xf6\x7d\x4f\xe8\xd3\xf4\x59\xcf\x11\x63\xca\x51\xb9\x2f\x2d\xfe\xde\xd3\x1c\xc5\x52\xf3\x4d\xd0\x6e\x3a\x71\xcc\xa0\xd8\xe1\x12\x2e\x32\xf9\xff\x19\x75\x81\x75\xc3\x05\x2d\x57\x42\x30\x7c\xdf\x08\xc9\xa8\xc6\x27\x6d\x07\xcc\x92\xfe\x0c\x4d\x17\x3e\x1a\x0e\x97\x41\x95\xc4\x63\x6b\x73\x82\x79\x84\x81\x08\xc9\xf6\x7d\x63\x6a\xb9\xbf\xc9\x9c\x46\x8c\xa7\xe4\xaa\xf3\x48\x8e\x80\xd2\x95\xb7\x91\x92\x9d\xb0\xa5\x35\xfb\x7e\x5b\xe5\xf2\x9c\x26\x4d\x3c\x81\x16\x84\x23\x8e\x52\x92\x40\xd8\xf8\xa9\xfb\x76\x8d\xca\x1a\xe1\x83\xca\x00\x96\xb9\xf3\xe0\x10\x95\x59\x33\xbd\xd7\x34\x67\x8f\x89\x00\x36\xca\x74\x86\xfd\x67\xcd\xaf\x23\xe5\xae\x8d\xfe\xe1\x72\x72\x99\xcc\x6f\x22\xe8\x1e\x88\xa6\x46\x61\x93\xd9\x58\xdb\x98\x66\x89\xd1\xde\x98\x3b\x5e\x2d\x2c\x6b\x52\x26\x3e\xb0\x42\x1e\x77\xc3\xc9\xd2\x07\xce\x09\x5b\xce\x3e\xc6\xea\x02\x2e\x0b\xf4\x60\xa4\xde\x24\x06\x70\xf5\xba\x45\xcd\xb0\x2c\x11\x78\x30\x55\xf3\xa8\x07\x35\x0f\xd5\x68\xca\x1e\x57\x89\xba\x88\x6b\xe6\x35\x2a\x83\x06\x4e\x1b\x96\x43\x58\x24\x7c\x10\xad\x53\x8b\xf3\x7d\xd9\x3b\x68\xbd\xdc\x7e\x28\xa1\xc8\xcb\x40\xe6\x00\xc2\x2f\x87\x2e\xbf\x43\xeb\xa6\xa7\xfa\xaf\x2e\xb5\x0c\x07\x0d\xc5\xcd\x0e\xeb\x59\xe0\xea\x40\xe0\xe3\x84\xe7\x70\xa4\x92\xce\x89\xd1\xa7\x29\x35\x56\x64\xaa\x66\x78\xa2\x87\xfa\x8b\xd1\x1d\x16\xe0\xd5\x73\xf2\x68\x6a\x4f\x6e\x10\xf5\x88\x84\x73\x3a\xe2\xe7\x64\x8f\x19\x17\x95\xc2\x41\x52\x86\xa0\xa8\x88\x0f\x49\x5c\x14\x04\xae\x07\x52\x1e\x95\xd5\xa1\x61\xd4\x1e\x8e\x48\x23\x4c\xb4\x4d\xca\x08\x06\x10\x99\xda\x50\xe6\x9a\x8d\xd9\xdc\xc3\xd4\xac\xdb\x7b\x5c\x0d\x81\x9a\xd3\xb2\x46\x55\x3b\x18\xce\xf3\x70\x58\x0c\x05\x02\x99\x9a\x72\xd1\xf9\xc0\xa4\xd5\x2a\xcb\x1d\xd5\xc3\xe0\x80\x1d\x6f\x1a\xb7\x47\x02\x89\x4d\xd8\xac\x65\x06\x8a\xbc\x1d\x03\x02\xf5\x91\x56\x63\xe8\x80\x52\x95\x99\x93\x36\x27\x12\x35\x75\xbb\x62\x2b\x01\x33\xae\x69\x94\x3c\x22\x1b\x10\x08\x93\xe1\x55\xa0\xdf\x6c\xbd\x28\xe6\x02\x57\x07\x4d\xaf\x80\xc5\xa8\xd7\xeb\x88\x4c\xc2\xe4\x98\x68\xe0\xbb\xc7\xe6\xda\x19\x67\xb3\x1b\x24\xe0\xc3\xfe\x12\x33\x71\x0c\x9c\x33\xe2\xbc\xa6\x4c\x97\x12\x58\x1b\x6f\xbc\x6e\xca\xfb\x90\xaf\x56\x48\xa3\x59\x81\x71\x7c\xf9\x7d\x77\x6a\x43\x78\x40\x43\xa7\x69\xaa\xc6\x23\x07\xf6\x08\x85\x8a\xa8\xd3\xa5\xab\x50\x89\x19\x7b\xf1\x16\x44\xc6\x6b\xc8\xf1\x1e\xe7\x19\xb2\xcd\xd9\x7d\x9b\x7d\x87\x76\x61\x43\x46\xe8\xf5\x7d\xdd\xef\xa0\x55\xc1\x26\x31\xb4\x6d\x36\x43\xba\xaa\x8c\xbf\x54\x59\xf6\x44\xfd\xca\x96\x49\x93\x59\x47\x8a\x01\xcf\xa9\x74\x25\xd6\xac\x23\x50\xd1\x41\x47\x69\x9a\x2d\xb4\x26\xcd\xed\x78\x56\x34\xb8\xd9\x7a\x6d\x32\x5d\xbb\xe9\x25\x26\x52\xb6\x2f\x88\xe0\x42\x41\xf4\x06\x78\x43\x2c\x71\x3c\x22\x2e\xe5\x68\xf5\x9a\x31\xda\xfb\xeb\x20\x17\xe9\x04\xae\x80\x73\x74\x80\x77\xe1\xe6\x61\x45\xf7\xa4\x5e\xee\x3a\xa3\x48\x2d\xa0\xb7\x43\x29\x4c\x56\x23\x22\xb2\x0e\x05\x94\x48\x8f\xfb\xc3\x94\x95\x3f\xce\xa2\xc3\x7c\x12\xed\x0d\x70\xc1\x70\x3e\x58\x1a\xcc\x6d\x4b\xcf\x83\xfd\x85\x29\xd1\xf3\x8a\x10\xfa\xe4\xb4\x67\x3d\x53\xeb\x76\x6f\x83\xf7\x1d\x91\x74\x5a\xb5\x6e\xca\x9c\xb0\x3d\xe1\xb5\x25\x9d\x34\x27\xbd\x4f\xbc\xa9\x7c\xb6\x0e\x29\x58\x0d\xff\x22\x71\x4a\xbf\x9f\x90\xbe\xa1\xcc\x9e\xb2\x85\x69\xb1\xa1\x22\xdb\xcb\xb6\x02\x09\xa4\x5d\x83\x7c\xd4\xee\x5d\xff\x17\x0d\x24\x52\x9f\xd6\xd6\x6f\x6b\x46\xf7\x19\x6f\xf4\x11\xb0\x5f\x0d\xd8\x41\x5e\x66\x50\xd6\xa2\xcd\xf0\xbe\x1b\x16\x73\xe9\x25\x70\xb1\xb0\x0e\xc3\xa8\x89\x95\xa8\xe4\x70\x0e\xe8\xbb\x4a\xd5\xe2\xf6\x48\x9f\xb8\xd4\x2a\x8e\x90\x31\x78\x68\x80\x8b\xec\x09\xf1\x8c\x37\x79\x0e\x9c\xef\x1b\x42\x5a\xc9\xd1\xe5\x03\x98\xb1\xba\xc7\x9e\xea\x26\x72\x72\x73\x43\xde\x5d\x12\x39\x80\xfa\x39\x83\x67\x0f\x1d\x51\x60\xf7\xef\x0d\x06\x52\xf4\x0e\xbe\x37\x44\x9f\x17\x6e\xb6\x51\x4a\xa9\x93\x36\xcc\x94\x95\xf2\x37\x9d\x80\x61\x67\x8b\xb7\x50\x01\x43\x24\xa5\xf1\xa0\x9b\xc7\x74\x8e\x7b\x81\x5e\xc4\x4e\x65\x25\x23\x87\xc4\x8d\xdc\x3e\x35\x56\x56\xea\xe3\xfe\xb7\xec\xc3\x5e\x40\x95\x35\x1c\x0a\x09\xc9\x4c\x30\x54\x71\xa2\xac\x5a\x98\xda\x53\xdc\x7b\x2d\x56\x72\x6d\xd0\x77\x89\x3e\xad\x52\x65\xc6\x9e\x42\x41\x33\x7e\xa4\x4f\xf2\x5f\xa8\x0a\xf9\x8e\x65\x7f\xcd\x70\x95\xe5\x88\x43\x56\x51\x77\x34\xcd\x7d\xcc\x1a\x98\xef\x35\xde\xeb\x5c\x7b\xfc\x04\x06\xab\xfc\x5f\x36\x67\x35\xec\xb6\x80\x4a\xe8\xeb\x00\x69\x2f\xd2\xbe\x44\x41\xcf\x41\xa1\x9f\x1b\x8f\xa6\x5b\x8e\x9f\xfa\x7f\xca\x35\x99\x72\xd9\x44\xeb\xef\x17\xd3\x32\xff\x48\xc9\xfc\x2f\x27\x65\x2a\x21\x73\xc2\x6d\x4c\x66\x46\x52\x86\xab\xba\x11\x69\x40\x6f\x55\xf3\x1c\x54\xff\x81\xa0\x9e\x81\xe9\x19\x90\x9e\x81\xe8\x19\x80\x9e\x81\xe7\x19\x70\x9e\x81\xe6\x19\x60\x9e\x81\xe5\x19\x50\x9e\x81\xe4\x19\x40\x9e\x81\xe3\x19\x30\xfe\x15\x14\xdb\x6b\x12\x83\x66\x17\xc9\x8b\xcf\x15\x7e\x68\xa0\xa3\xa5\x2a\x1f\x92\xd1\x05\xeb\xa0\xd0\xaa\x00\x67\x5b\x17\x11\x0a\xeb\x85\x92\xee\xc2\x32\x41\x4b\x0b\xdf\x92\x44\x81\xa3\x3b\x6e\x1d\x3d\x6c\x48\xa1\x0d\x91\xc9\xb9\x89\xba\x01\x39\xcd\xee\xc1\x89\xb9\x47\xcc\x03\xab\xa7\xae\x77\x16\x1f\x6a\x5d\x00\xc8\xec\x25\x4e\xa6\xbf\xd1\xb5\x41\xdb\xbd\x24\x9b\xd3\x23\xb8\x42\x0b\xba\x98\x6b\xb1\x7e\xe1\x0b\x24\x20\x7b\x95\x09\x5c\x82\x5d\xab\xf0\xe2\x6c\xfc\x12\x2c\x92\x24\xfc\xb1\x9b\x7b\x62\xce\xe1\xb1\xfe\xb1\x8d\xe5\x7a\xff\x7f\x75\x7f\x67\x6f\x6b\x27\xb8\xd6\x3b\xf8\x9f\xda\xce\xd1\xd4\xab\x08\x16\xfb\xcf\x99\x7b\x7d\xae\xe5\x3a\x58\xe0\xd8\x85\xd5\xab\xc6\xbf\x79\xa9\xd8\xef\x69\xc9\x98\x13\xf4\x8d\x38\xcd\x17\xa2\x2a\x7b\xf1\xc2\x56\x51\x5f\xbc\x98\x7f\x74\x66\x60\x2f\x94\x1c\x03\x5f\xd2\xd3\xdb\x8a\x9e\x3b\xad\x19\x65\xbd\x89\xa0\xe1\x54\x46\x5d\xc5\xe9\xf9\x86\xb7\xfb\x5f\x47\xac\x3c\xbf\x53\x26\xc0\xb3\x90\x09\x8d\xc2\xd0\xa7\xa6\xff\xe6\x25\x71\xff\xb8\x8e\xfc\x8a\xc7\x6b\x3c\x8f\xf4\x36\xf8\xa7\x83\xef\xaf\xc2\x4a\x9c\xd9\x8b\xb1\xba\x54\xc6\x40\x34\xac\xea\x00\x6b\x6e\x10\xe5\xa1\x64\x5d\x8d\x4a\x26\x66\x02\x58\xc9\xad\x6b\x43\xba\x36\x95\x3d\x34\x48\xfd\x4c\xc3\x38\x33\xc8\x72\xf5\xdb\x01\xa1\xbe\xda\xc9\x50\xa5\xa3\xdd\x01\x3f\x42\x15\x80\x6c\xcc\xa6\x65\xea\x1e\x34\xfa\xed\xf7\xcb\xf8\x06\x0e\x8a\xc8\xb1\x7a\xdc\x60\xcb\xae\x0c\xbd\x8c\xee\xda\xaa\x28\x76\x54\xfe\x35\x34\x70\xbb\x39\x7f\xd9\x5f\xa7\xce\x35\x69\x72\xa7\x37\x40\x40\x80\xfc\xd3\xc2\xf8\xd4\x9f\x60\x8d\x6b\xde\x0a\x28\xbb\xef\xf3\xd5\x1c\x7e\x27\xf5\xda\x61\x4a\xf5\x9f\x44\x3b\x63\x04\x67\xf1\xe6\x0c\xb6\x58\x15\x05\x7f\xa5\x07\xe1\x0a\x63\xb6\x8e\x68\x6f\x4a\x0d\x50\x5d\x3c\xc6\x80\xa7\x55\xf8\x01\x77\x89\xfa\x10\x3f\xc5\xec\x06\xc6\x0e\x2b\x9d\xe9\xe5\x09\x2a\x7a\xcb\xf0\x3b\xc1\x97\xa1\x6b\x1d\x8c\x16\xad\x09\xc6\x06\x5c\xd5\x35\x69\xfb\xeb\x86\x0f\xcc\x5e\x1f\x2c\xf3\xf9\x1b\x1d\xd1\x7b\x03\x25\x7d\x84\x4e\xd9\xc1\xfc\x71\x02\x7a\x92\x4a\x7b\x6b\x97\xee\x87\x26\xf3\x95\xfa\x20\xa1\x15\xbc\x2a\x1b\x22\x70\x4d\xa0\xfb\x4c\xd7\xc2\x05\x78\x1a\x1c\x01\x2f\x05\xbe\xec\xd9\xbf\x7e\x91\xfc\xf1\x98\x9b\xa8\xa8\x1f\xc4\x8d\xcb\x49\xb4\xdc\xc5\x00\xfe\xcb\xb6\x07\x8c\x65\xc9\xfd\xe7\xa4\x61\x11\x92\xe1\xff\xb0\x6f\x36\x3b\xb2\xa1\x48\x52\x1b\x3e\x79\x2c\x95\x58\x48\x7c\xbd\x25\xe9\x43\xb3\xe6\xdc\x5d\x00\x1a\x3d\xe8\xc1\x97\x29\x27\xc6\xf7\xd3\x3d\x53\xca\x4a\x2f\x22\xe2\x19\x3b\x88\x21\xf8\x52\x66\x59\xc4\x2c\x1e\x21\x3b\x33\xec\xff\x71\xf6\xef\x00\x00\x00\xff\xff\x72\xd7\xe2\x40\x7c\x3c\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
