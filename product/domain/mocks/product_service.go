// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "flamingo.me/flamingo-commerce/v3/product/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

type ProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductService) EXPECT() *ProductService_Expecter {
	return &ProductService_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, marketplaceCode
func (_m *ProductService) Get(ctx context.Context, marketplaceCode string) (domain.BasicProduct, error) {
	ret := _m.Called(ctx, marketplaceCode)

	var r0 domain.BasicProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.BasicProduct, error)); ok {
		return rf(ctx, marketplaceCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.BasicProduct); ok {
		r0 = rf(ctx, marketplaceCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BasicProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, marketplaceCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ProductService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - marketplaceCode string
func (_e *ProductService_Expecter) Get(ctx interface{}, marketplaceCode interface{}) *ProductService_Get_Call {
	return &ProductService_Get_Call{Call: _e.mock.On("Get", ctx, marketplaceCode)}
}

func (_c *ProductService_Get_Call) Run(run func(ctx context.Context, marketplaceCode string)) *ProductService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductService_Get_Call) Return(_a0 domain.BasicProduct, _a1 error) *ProductService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_Get_Call) RunAndReturn(run func(context.Context, string) (domain.BasicProduct, error)) *ProductService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
