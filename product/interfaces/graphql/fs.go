// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6e\x1b\xbd\x11\x7f\xd7\x29\x68\xf9\x41\x36\xaa\x4f\x07\xf0\x9b\xac\x38\xad\x11\x3b\x71\x23\x27\x2d\x10\x04\xc6\x68\x77\xb4\x22\xc2\x25\xb7\x24\xd7\xf1\x36\xc8\xad\x7a\x82\x9e\xac\x18\x92\xbb\xda\x7f\x94\xec\x26\xf8\x80\x00\x31\x90\x00\x26\x87\x33\xc3\x99\xdf\xfc\x66\xb8\xe6\xd2\xa2\xde\x42\x82\x6c\xa5\xf2\x1c\x75\x82\x0f\x77\x5a\xa5\x65\x62\xd9\xb7\x09\x63\x8c\xd9\xaa\xc0\x0b\xb6\xb6\x9a\xcb\xec\xc4\xad\xe4\xa0\xbf\xa0\xbd\x13\x90\xe0\x4a\xa5\xbd\x4d\x9e\xa2\xb4\x7c\xcb\x51\xf7\x0e\x61\xca\xe1\x62\x60\xe4\xe1\x96\xd6\x4f\xe6\x4e\xa6\xd0\x3c\xc1\x11\x99\x3b\x5a\xbf\x96\x5b\x15\xe4\x2c\xb7\xa2\x67\x36\x01\x8b\x99\xd2\x1c\xcd\xc8\xf9\x55\xb3\xe9\x85\x53\x34\x89\xe6\x85\xe5\x4a\x76\xb5\x98\x9d\xd2\xf6\x55\x6c\x37\x47\x3b\x7e\x03\x0b\x5e\x40\xa8\x0a\x84\xad\x46\x64\x6e\xfc\x8e\x17\x03\x6b\x35\xdf\x94\x76\xd4\xd7\x65\xb3\xe9\x85\x37\x90\x66\xa3\x82\x97\x6e\xe3\x64\xf2\x7d\x32\x99\x4e\xa7\x93\x25\x33\x3c\x2f\x04\xb2\xc2\xef\xcf\x99\xdd\x81\x65\x3b\x30\x4c\x2a\xf6\x08\x9a\xc3\x46\x60\xcb\x36\x03\x99\x32\xbb\x43\x8d\x5b\xa5\x91\x84\x34\x0a\xa0\x5b\x33\xab\x98\xa2\x9d\x5a\x97\x71\x16\x08\x08\x43\x37\xd6\xce\x6a\x0d\x19\xf7\x4b\x8e\xd2\x9a\xdf\x70\xfa\xc5\xe1\x94\x28\xb9\xe5\x59\xa9\x1d\x6c\x02\x10\x58\x8a\x5b\x2e\xd1\x10\x6e\x58\xa1\x8c\xe1\xb4\xe9\xc0\x45\xf7\x33\x4c\x6d\x19\xd4\xc2\x0b\x76\x6d\x99\x92\xa2\x22\x55\x16\xb8\x34\x13\x2e\xb7\x4a\xe7\x1e\x64\xb0\x51\xa5\x6d\x14\x3b\x1d\x04\x9b\x4d\xd9\x80\x16\x12\xcb\x1f\xb1\xde\x62\xdc\x1a\x14\xdb\xc5\x01\x2c\xae\x5a\x2e\xff\x46\xe4\x2f\x82\xc8\x06\x3d\x6b\x14\x98\x38\x18\x5d\xb0\x4f\x83\x63\x1f\x07\x62\x27\x9f\x5f\x86\x68\x39\x00\x94\x61\x4a\x22\x61\x36\x07\xe9\x50\x9a\x68\xb4\xb8\xc7\xa2\x63\x50\x18\x54\xc2\x23\x4f\xd1\x2c\xd8\x52\x08\x96\x82\x05\xcf\x9b\x54\x14\xca\xe9\xeb\x5a\x99\x10\xcd\x4a\x65\x5d\xc9\xd0\xbf\xb6\x36\x57\x22\x20\x8c\x6a\x4a\x84\x0d\x4b\x84\xdb\xff\xfe\xc7\x30\x2a\x35\x2e\x33\xc3\xce\x3c\x35\x37\x4e\x12\x5f\xef\x90\x19\xc8\xbb\xba\xcf\x0f\x14\xca\xd2\xb9\xf8\xd1\xab\xf8\x91\x4a\x99\xde\xef\xb0\x5f\x2e\x14\x50\xf2\x68\xd6\xf6\x66\xb6\x67\x85\x35\xa2\xbf\xf3\x2c\xdc\xe1\xb6\x7b\x7e\xc6\xb6\x4a\x3b\x0d\x75\xa2\x7a\x06\xa6\xbf\x8b\xf4\xcf\x2e\xd2\x43\x79\x86\xc4\x96\x20\xea\x64\x4d\xf7\x45\x3d\xc8\x6c\x0f\x3b\xab\x38\xe6\x3d\xc6\xe1\x11\xb8\xe8\xf4\x9f\x7d\xab\x99\xfe\x14\xf2\x20\x1f\x1e\x51\x72\x94\x89\x33\x52\xa0\xb6\x15\x15\x32\x24\x09\x1a\x53\xdf\xaf\xcd\x1a\x02\x36\x28\x0c\x43\x30\x5c\x54\xde\x0b\xd8\x97\xd3\x71\x5f\x96\x11\xe1\x97\xd0\xd9\x92\x65\x5a\x95\x85\x6b\xb7\x4d\xa6\x16\xec\x6a\x91\x2d\xd8\xcc\xf0\x7f\xe3\x2c\x56\xf9\x43\xbb\xa1\xb6\x93\x41\x7e\xdc\x45\x7b\x29\x23\xce\x0b\x7d\x9f\x77\x1a\xbf\x2f\x59\xa2\xcb\xda\x9f\xda\x9d\xdb\xd9\x9c\xcd\x6e\xe8\xbf\x7f\xde\xcc\x7c\xbc\x54\xf1\x82\x4c\x3d\xbc\x73\xd2\x9f\xdd\xc5\xaf\xc0\x54\x7f\x58\xf5\x47\x48\x4f\x3b\x63\x29\x37\x85\x80\x6a\xef\xc0\x08\xac\xa0\xdf\x03\x9e\x41\x90\xff\x77\xb0\x1e\x41\x94\x2d\x29\x97\x37\x19\xee\xee\xe2\x05\x63\x59\x7c\x7e\xe2\x42\x60\x82\x4b\x23\x0e\x18\x0b\x76\x8c\xc8\xa2\xaa\xd6\x74\x20\x64\x7a\xea\x53\x75\xa0\x46\x9b\x41\xcf\x27\x3e\x07\x9b\xec\xdc\x68\x48\x7d\xd5\xe9\x5b\x38\x15\xaf\xb0\x40\x99\x72\x99\x51\xab\xe2\x5b\xff\xe6\xa0\xe6\x3b\xc8\x06\x53\x9a\x5a\xe5\x9c\x71\xcb\x2c\x11\x25\xe5\x95\xcb\x44\x94\x29\xb6\x1b\x42\xe0\x5f\xb2\xba\x41\xd3\x36\x8d\x2c\x29\xb5\x46\x52\xd5\xf2\xa0\xbe\x4c\x38\xfe\x92\x90\x84\x1e\x79\x32\x77\xf9\xbb\x1e\x04\x81\x4c\x96\x32\x45\x2d\x2a\xba\xe1\x11\x58\x1d\x33\x13\x72\x19\x6d\x6d\xe4\x03\x31\xb1\xcb\xac\xc3\x4d\x03\x28\x3f\x84\xa4\x14\xb1\x56\x18\x44\x35\x00\x3c\xca\x32\x7f\x29\x26\x82\x5f\xce\x76\x4c\xb3\x9b\xda\x5d\xf2\xf1\x09\x92\x16\x11\xb0\xbf\x30\x10\xa2\xa6\xf4\xee\x99\x36\xee\xc9\xc2\x72\x75\x7f\xfd\xf1\x2a\x70\x4d\x23\x15\x46\x1e\xbb\x03\x39\xc2\xc8\xe7\x0c\x9f\xb8\xb1\x66\x3e\x82\xc3\x1f\x70\xe5\x76\x79\xbf\xfa\x9b\xf7\xe4\xad\x6a\xa4\x7e\xb2\xa9\x85\xb7\xf5\xf6\xdd\x83\x37\x47\x09\xfe\x87\x86\xa2\xc0\x40\xa7\x01\xfd\x86\xe5\xc0\x65\x3d\x5f\x54\xee\xed\x4e\xea\xf7\x03\x47\xf4\x4d\xd4\x48\x34\xe0\xe2\x32\x3e\x9d\x54\xf7\x08\x06\x75\x18\x11\x84\xb8\x60\x6c\x84\xa5\x7b\xc2\x9e\x9b\x69\x02\x19\xa1\x09\xf7\x54\xf4\xe7\x62\x3e\xba\x93\xde\xbb\x2f\x58\x7d\x55\x3a\x35\x64\xd7\xfd\x7c\x0a\xd8\xf7\x36\xc2\x04\x33\x6a\x86\x9b\x63\x76\xea\xd3\xdf\xda\x73\x1e\xf3\x34\x37\x2e\xba\x1f\xfa\xdc\x11\x04\x2d\xb9\xcc\x2e\x0e\x1e\xb9\xf2\x42\xee\xd0\xf7\xc9\x61\x57\xf6\xfa\xa3\x23\x76\x8a\x5b\x28\x45\x97\xb4\x78\x12\x68\x9a\x9b\x57\xdc\x24\xaa\x94\x16\xd3\x0b\x76\xa9\x94\x40\x90\xe1\x5c\x6b\x63\xec\x68\xbd\x7f\x8f\x4f\xb6\x37\x61\x72\x79\xa7\xb8\xb4\xe6\x5e\xad\x0b\x24\xbe\x7c\x2d\x14\xd8\xfa\x6d\xfc\x14\xdf\xa4\x57\x8c\x53\x37\x3e\x3c\xaf\xfc\xb6\xe7\xb1\xf5\x4e\x7d\xf5\x94\xed\x22\x14\xbe\x46\xb1\xc2\x29\x77\x91\xc6\xf4\x48\x22\xdb\xa1\x6e\x53\x94\x3b\x14\xa6\xd3\x20\xda\x92\x9c\x33\xa4\xc1\xe4\x96\x0b\x34\x4b\x99\xde\x2a\x1d\x5e\x14\x91\xe7\x8d\xeb\xe3\x87\xd4\x79\x46\x4c\x2a\x96\x80\x64\x1b\xf4\xea\xc3\x3d\x94\x66\x39\x19\x9a\x1e\xce\x65\x14\x27\xed\xb8\xd5\xc3\x47\x69\xac\xca\x51\xff\x95\x86\x87\xde\xfb\x63\x07\x52\xa2\x18\xce\xda\x42\x25\x20\xba\x8d\x24\x56\x8a\x29\xaf\x6b\xd1\x95\xff\xb0\xf8\x9d\xc8\xb5\xc5\x3c\x4c\xac\x19\x5a\xb7\x74\x56\x1a\xc8\xf6\x36\xce\x63\xcf\x2c\x77\xf4\x88\x07\x24\xd3\xa9\x08\xf7\xd3\x05\x69\x8e\xf7\x7e\xab\xbd\x1c\x7c\xe8\x4b\x87\xb7\x5a\x7f\x59\xe3\x16\x29\x75\xcf\x89\xcc\xfe\x49\x54\x87\xa7\x5e\x78\x83\x15\xcd\xb2\x0d\x51\xf5\x5f\x57\x23\x6f\x80\x7a\x37\x48\xef\xc0\x34\x4b\x67\x5f\xb0\x6a\x07\x31\x14\x75\x1d\xea\xa8\x5c\xdc\xc8\xe0\xa8\xb9\xac\xde\x60\x45\x0a\xda\x7e\x9f\x1f\xf3\xf4\x78\x68\xa2\xe3\x31\xad\xdc\x0c\x27\xd4\x91\xa1\xb5\x94\xdc\x0e\xf1\xeb\x6a\xb0\x13\xe4\xa8\x33\xdd\xde\x14\xf5\xa8\x00\xbb\xeb\xae\x48\xc8\x07\x32\x1a\x47\xc7\xc5\xae\x8d\x23\xd5\xdb\x62\xa7\x48\xfd\x1f\xe1\xeb\x23\x74\xed\x87\x8b\x4b\x30\xd8\xe1\xe2\xfd\xf2\x32\xa7\x83\x91\xcd\x0f\x92\x37\xfa\xe2\x2d\x25\x7c\xdd\xc8\x0b\xe0\x99\x7c\x5f\x0a\x1c\x00\x3e\x45\x59\x11\x95\xd6\x87\x4d\xf7\xec\xe9\xf3\xdb\x83\x2f\x58\x78\x5a\x09\x30\xa6\x53\x98\xa7\x91\x3f\x41\x20\xe8\x64\x77\xa7\x55\xae\x68\x20\xa8\x29\xec\xd4\x81\x7e\xcd\x33\x89\xe9\x07\x2d\xce\xe8\x5d\x7c\xc1\xae\xa5\xa5\x6a\xa9\xb5\x9e\x0e\xbe\xe3\x9c\x46\xb3\xd9\xb3\x53\xf3\xd3\xc8\x67\x20\xba\x88\xec\xa5\xa9\xd4\x3d\xa4\x9f\xc6\x3f\x47\x8d\xdd\xe8\x00\x35\x79\xf1\xf7\x68\x4a\x61\x9b\xe1\xc6\xff\xe5\x66\xa4\xa6\x43\xc2\xb6\x90\x60\x77\xdf\xab\x79\x78\x4d\x1b\x27\x9f\xc3\x1b\xb2\xcc\x32\x34\x83\xe7\x7a\x10\x5d\x37\xbb\x41\xa9\x71\xeb\xb7\xdd\x4f\x54\x41\x78\xff\x85\x6a\x07\xc6\x3f\x33\x30\x75\xc6\x7a\x93\x4b\x51\xdf\xfb\x78\x64\xe2\x31\xf1\x9f\x4b\x0e\x77\x32\x27\x53\x87\x83\x6b\x33\x86\x4c\x27\x73\xc4\x4c\x87\x64\x0e\x11\xdc\xf7\xc9\x04\x9f\x2c\xd2\xa8\x43\xda\xfe\x5e\xa2\xae\xa7\xd1\xbe\xe6\xb3\xd8\x23\x70\x7e\xe4\xe3\xda\x48\x2b\x18\x35\x10\x42\x79\x66\x02\x78\xfe\x55\x62\x27\x00\x21\x6b\x61\x63\xac\xc1\xb4\x61\x47\x77\xfb\x5f\x00\x00\x00\xff\xff\x91\x32\xe8\x2a\x4b\x1e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
