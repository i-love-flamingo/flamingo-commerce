// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x30\xf0\xe5\xfb\x2e\xd9\xdd\xc7\xb6\x28\x50\x6c\x43\xb7\x06\xd8\x25\x08\x0a\xc5\x7a\xb3\xb5\xca\x52\x2a\x51\x6d\xb3\x21\xff\x7d\x90\xe5\x38\x8e\x63\x2f\x39\x85\x7e\xe4\xa3\xdf\x23\x69\x65\x76\x81\xe9\xd6\x36\x0d\x5c\x89\xe7\x15\x84\x2b\xeb\xe7\xcf\xd8\xff\x10\x3a\xe0\x5e\x69\x86\xa3\x3f\x19\x11\xd1\x4b\x41\x2b\x76\xca\x54\x8b\x36\x7c\x2b\x68\xdd\xc5\x9b\xec\x90\x65\xd3\x4c\x4f\x78\x0d\xf0\xdc\x51\xec\x44\x85\x95\xfa\x8d\x82\x4e\xbf\x07\xc3\x3d\x36\x7c\x3e\xc4\xbc\x75\x7c\xb3\x3f\x47\x53\xef\x1e\xbe\x53\x0e\x25\x2b\x6b\x8a\x0b\xf8\xe5\x4c\x8d\x6f\x13\xd6\xff\x96\xbc\xd8\xb4\x95\xaf\x01\x6e\xd4\xf6\x48\x7c\xc8\xb2\x7c\x5a\xf2\x17\xf5\x86\xf4\xf7\x24\x3e\xbf\xc2\x96\x1f\xb2\x8c\xf7\x3b\x5c\x90\x7d\x05\x8b\xce\xbc\x71\xf9\x70\x18\xd6\xa9\x4a\x19\xa1\xbf\x77\x39\x43\x6c\x6c\xec\x83\xe1\x04\x98\xd0\x7c\x13\x15\x7c\x31\x01\x3c\xc1\x07\xcd\x1d\xd4\x03\xd1\xe8\xc7\x5d\x74\x79\xc6\xc5\x55\x9f\x90\x96\x62\x52\xd3\x29\xa9\x53\xa6\xc5\x16\xfa\x7c\xbb\x7e\x2a\x68\x79\xfe\xc8\x43\xa3\x64\xc8\x82\x6e\xac\xd5\x10\x66\x31\xdf\x21\x54\x15\xfc\xa0\x03\xe3\x83\x8b\x4b\xdb\x6a\x55\xd5\x5a\x55\x35\x9f\x3a\xc5\xb9\x4e\x72\x26\x47\x8e\xb3\xac\x55\x34\x67\xbd\x19\x67\xdd\xd9\x32\x34\x30\x4c\xf4\x89\x1e\x1d\x35\x62\xbf\x05\xbd\x83\xa4\x35\x4c\x06\x90\x6d\x25\x09\x23\x89\x6b\x50\x63\x65\xd0\xf0\x09\x61\x4b\x42\x4a\x12\x04\x59\x21\x46\x5c\x2b\x4f\x76\xfb\x0b\x25\x2f\x97\xcb\x48\xf3\xae\xb4\x26\x0f\xa4\x97\xf0\x6d\xcf\xb8\x22\x49\xdb\xd4\xf2\x24\xa1\x39\xdd\x8b\x12\xf1\x95\xa5\x6d\x84\x32\xcb\x36\xbc\xb5\x5a\xa7\xa3\xe9\xf8\x7a\xdb\xe6\xc6\xdb\x27\x6c\xda\x95\xcd\x72\x7c\x30\xa2\x96\xe8\x58\xbb\x7c\x47\x83\x46\xa5\xff\xf9\xe1\x45\x14\x73\xdf\x89\xff\xa7\x90\xe8\xfb\x24\xe9\xe0\xd4\xae\xf1\x5f\x1c\xe5\x6c\xa7\xab\x95\x8b\x28\xfd\x6f\x00\x00\x00\xff\xff\x47\xc1\x96\x09\x38\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
