// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xef\x6e\xdb\x38\x12\xff\xee\xa7\x60\x7c\x1f\x9c\xe0\x5c\x3f\x40\xbe\x39\x6e\x7a\x17\x34\x69\x73\x75\xae\xbb\x40\x51\x04\x63\x69\x2c\x11\xa5\x48\x2d\x49\xa5\xd1\x16\x7d\xab\x7d\x82\x7d\xb2\xc5\x90\xd4\x7f\xc9\x4e\xb6\xc5\x02\x05\x6a\xa0\x05\x4a\x0e\x67\x86\x33\xbf\xf9\xcd\x50\xe5\xd2\xa2\xde\x43\x84\x6c\xa3\xb2\x0c\x75\x84\xf7\xb7\x5a\xc5\x45\x64\xd9\x97\x19\x63\x8c\xd9\x32\xc7\x73\xb6\xb5\x9a\xcb\xe4\xc4\xad\x64\xa0\x3f\xa1\xbd\x15\x10\xe1\x46\xc5\xbd\x4d\x1e\xa3\xb4\x7c\xcf\x51\xf7\x0e\x61\xcc\xe1\x7c\x60\xe4\xfe\x86\xd6\x4f\x96\x4e\x26\xd7\x3c\xc2\x11\x99\x5b\x5a\xbf\x92\x7b\x15\xe4\x2c\xb7\xa2\x67\x36\x02\x8b\x89\xd2\x1c\xcd\xc8\xf9\x4d\xbd\xe9\x85\x63\x34\x91\xe6\xb9\xe5\x4a\x76\xb5\x98\x54\x69\xfb\x72\x6a\x37\x43\x3b\x7e\x03\x0b\x5e\x40\xa8\x12\x84\x2d\x47\x64\xae\xfd\x8e\x17\x03\x6b\x35\xdf\x15\x76\xd4\xd7\x75\xbd\xe9\x85\x77\x10\x27\xa3\x82\x17\x6e\xe3\x64\xf6\x75\x36\x9b\xcf\xe7\xb3\x35\x33\x3c\xcb\x05\xb2\xdc\xef\x2f\x99\x4d\xc1\xb2\x14\x0c\x93\x8a\x3d\x80\xe6\xb0\x13\xd8\xb2\xcd\x40\xc6\xcc\xa6\xa8\x71\xaf\x34\x92\x90\x46\x01\x74\x6b\x66\x15\x53\xb4\x53\xe9\x32\xce\x02\x01\x61\xe8\xc6\xd6\x59\xad\x20\xe3\xfe\x91\xa1\xb4\xe6\x27\x9c\x7e\x70\x38\x45\x4a\xee\x79\x52\x68\x07\x9b\x00\x04\x16\xe3\x9e\x4b\x34\x84\x1b\x96\x2b\x63\x38\x6d\x3a\x70\xd1\xfd\x0c\x53\x7b\x06\x95\xf0\x8a\x5d\x59\xa6\xa4\x28\x49\x95\x05\x2e\xcd\x8c\xcb\xbd\xd2\x99\x07\x19\xec\x54\x61\x6b\xc5\x4e\x07\xc1\x66\x57\xd4\xa0\x85\xc8\xf2\x07\xac\xb6\x18\xb7\x06\xc5\x7e\x75\x00\x8b\x9b\x96\xcb\x3f\x11\xf9\x83\x20\xb2\x46\xcf\x16\x05\x46\x0e\x46\xe7\xec\xc3\xe0\xd8\xfb\x81\xd8\xc9\xc7\xe7\x21\x5a\x0e\x00\x65\x98\x92\x48\x98\xcd\x40\x3a\x94\x46\x1a\x2d\x36\x58\x74\x0c\x0a\x83\x4a\x78\xe0\x31\x9a\x15\x5b\x0b\xc1\x62\xb0\xe0\x79\x93\x8a\x42\x39\x7d\x5d\x2b\x33\xa2\x59\xa9\xac\x2b\x19\xfa\xd3\xd6\xe6\x4a\x04\x84\x51\x75\x89\xb0\x61\x89\x70\xfb\xe7\x1f\x86\x51\xa9\x71\x99\x18\x76\xea\xa9\xb9\x76\x92\xf8\x3a\x45\x66\x20\xeb\xea\x3e\x3b\x50\x28\x6b\xe7\xe2\x7b\xaf\xe2\x5b\x2a\x65\x7e\x97\x62\xbf\x5c\x28\xa0\xe4\xd1\xa2\xed\xcd\xa2\x61\x85\x2d\xa2\xbf\xf3\x22\xdc\xe1\xa6\x7b\x7e\xc1\xf6\x4a\x3b\x0d\x55\xa2\x7a\x06\xe6\x3f\x8b\xf4\x9f\x2e\xd2\x43\x79\x86\xc8\x16\x20\xaa\x64\xcd\x9b\xa2\x1e\x64\xb6\x87\x9d\xcd\x34\xe6\x3d\xc6\xe1\x01\xb8\xe8\xf4\x9f\xa6\xd5\xcc\xbf\x0b\x79\x90\x0f\x0f\x28\x39\xca\xc8\x19\xc9\x51\xdb\x92\x0a\x19\xa2\x08\x8d\xa9\xee\xd7\x66\x0d\x01\x3b\x14\x86\x21\x18\x2e\x4a\xef\x05\x34\xe5\x74\xdc\x97\xf5\x84\xf0\x73\xe8\x6c\xcd\x12\xad\x8a\xdc\xb5\xdb\x3a\x53\x2b\x76\xb9\x4a\x56\x6c\x61\xf8\xef\xb8\x98\xaa\xfc\xa1\xdd\x50\xdb\xd1\x20\x3f\xee\xa2\xbd\x94\x11\xe7\x85\xbe\xcf\x3b\x8d\xdf\x97\x2c\xd1\x65\xe5\x4f\xe5\xce\xcd\x62\xc9\x16\xd7\xf4\xd7\xaf\xd7\x0b\x1f\x2f\x95\x3f\x23\x53\xf7\x6f\x9d\xf4\x47\x77\xf1\x4b\x30\xe5\x0b\xab\x5e\x84\xf4\xb4\x33\x16\x73\x93\x0b\x28\x1b\x07\x46\x60\x05\xfd\x1e\xf0\x04\x82\xfc\xdb\xc1\x7a\x00\x51\xb4\xa4\x5c\xde\x64\xb8\xbb\x8b\x17\x8c\x65\xf1\xe9\x89\x0b\x81\x09\x2e\x8d\x38\x60\x2c\xd8\x31\x22\x9b\x54\xb5\xa5\x03\x21\xd3\x73\x9f\xaa\x03\x35\x5a\x0f\x7a\x3e\xf1\x19\xd8\x28\x75\xa3\x21\xf5\x55\xa7\x6f\xe5\x54\xbc\xc4\x1c\x65\xcc\x65\x42\xad\x8a\xef\xfd\x9b\x83\x9a\xef\x20\x1b\x4c\x69\x6a\x95\x4b\xc6\x2d\xb3\x44\x94\x94\x57\x2e\x23\x51\xc4\xd8\x6e\x08\x81\x7f\xc9\xea\x0e\x4d\xdb\x34\xb2\xa8\xd0\x1a\x49\x55\xcb\x83\xea\x32\xe1\xf8\x73\x42\x12\x7a\xe4\xc9\xd2\xe5\xef\x6a\x10\x04\x32\x59\xc8\x18\xb5\x28\xe9\x86\x47\x60\x75\xcc\x4c\xc8\xe5\x64\x6b\x23\x1f\x88\x89\x5d\x66\x1d\x6e\x6a\x40\xf9\x21\x24\xa6\x88\xb5\xc2\x20\xca\x01\xe0\x51\x16\xd9\x73\x31\x11\xfc\x72\xb6\xa7\x34\xbb\xa9\xdd\x25\x1f\x1f\x21\x6a\x11\x01\xfb\x37\x03\x21\x2a\x4a\xef\x9e\x69\xe3\x9e\x2c\xac\x37\x77\x57\xef\x2f\x03\xd7\xd4\x52\x61\xe4\xb1\x29\xc8\x11\x46\x3e\x63\xf8\xc8\x8d\x35\xcb\x11\x1c\x7e\x83\x2b\x37\xeb\xbb\xcd\x7f\xbd\x27\x6f\x54\x2d\xf5\x9d\x4d\xad\xbc\xad\x37\x6f\xef\xbd\x39\x4a\xf0\x2f\x1a\xf2\x1c\x03\x9d\x06\xf4\x1b\x96\x01\x97\xd5\x7c\x51\xba\xb7\x3b\xa9\x6f\x06\x8e\xc9\x37\x51\x2d\x51\x83\x8b\xcb\xe9\xe9\xa4\xbc\x43\x30\xa8\xc3\x88\x20\xc4\x39\x63\x23\x2c\xdd\x13\xf6\xdc\x4c\x13\xc8\x08\x4d\xb8\xa7\xa2\x3f\x37\xe5\xa3\x3b\xe9\xbd\xfb\x84\xe5\x67\xa5\x63\x43\x76\xdd\xef\x43\xc0\xbe\xb7\x11\x26\x98\x51\x33\xdc\x1c\xb3\x53\x9d\xfe\xd2\x9e\xf3\x98\xa7\xb9\x71\xd1\x66\xe8\x73\x47\x10\xb4\xe4\x32\x39\x3f\x78\xe4\xd2\x0b\xb9\x43\x5f\x67\x87\x5d\x69\xf4\x4f\x8e\xd8\x31\xee\xa1\x10\x5d\xd2\xe2\x51\xa0\x69\x6e\x5e\x72\x13\xa9\x42\x5a\x8c\xcf\xd9\x85\x52\x02\x41\x86\x73\xad\x8d\xb1\xa3\xd5\xfe\x1d\x3e\xda\xde\x84\xc9\xe5\xad\xe2\xd2\x9a\x3b\xb5\xcd\x91\xf8\xf2\x95\x50\x60\xab\xb7\xf1\xe3\xf4\x26\xbd\x62\x9c\xba\xf1\xe1\x79\xe3\xb7\x3d\x8f\x6d\x53\xf5\xd9\x53\xb6\x8b\x50\xf8\x1a\xc5\x72\xa7\xdc\x45\x1a\xe3\x23\x89\x6c\x87\xba\x4d\x51\xee\x50\x98\x4e\x83\x68\x4b\x72\xc9\x90\x06\x93\x1b\x2e\xd0\xac\x65\x7c\xa3\x74\x78\x51\x4c\x3c\x6f\x5c\x1f\x3f\xa4\xce\x33\x62\x54\xb2\x08\x24\xdb\xa1\x57\x1f\xee\xa1\x34\xcb\xc8\xd0\xfc\x70\x2e\x27\x71\xd2\x8e\x5b\x35\x7c\x14\xc6\xaa\x0c\xf5\x7f\x68\x78\xe8\xbd\x3f\x52\x90\x12\xc5\x70\xd6\x16\x2a\x02\xd1\x6d\x24\x53\xa5\x18\xf3\xaa\x16\x5d\xf9\x0f\x8b\xdf\x89\x5c\x59\xcc\xc2\xc4\x9a\xa0\x75\x4b\xa7\x85\x81\xa4\xb1\x71\x36\xf5\xcc\x72\x47\x8f\x78\x40\x32\x9d\x8a\x70\xbf\x2e\x48\x33\xbc\xf3\x5b\xed\xe5\xe0\x43\x5f\x3a\xbc\xd5\xfa\xcb\x1a\xf7\x48\xa9\x7b\x4a\x64\x9a\x27\x51\x15\x9e\x6a\xe1\x35\x96\x34\xcb\xd6\x44\xd5\x7f\x5d\x8d\xbc\x01\xaa\xdd\x20\x9d\x82\xa9\x97\x4e\x3f\x61\xd9\x0e\x62\x28\xea\x2a\xd4\x93\x72\xd3\x46\x06\x47\xcd\x45\xf9\x1a\x4b\x52\xd0\xf6\xfb\xec\x98\xa7\xc7\x43\x33\x39\x1e\xd3\xca\xf5\x70\x42\x1d\x19\x5a\x0b\xc9\xed\x10\xbf\xae\x06\x3b\x41\x9e\x74\xa6\xdb\x9b\x26\x3d\xca\xc1\xa6\xdd\x15\x09\xd9\x40\x46\xe3\xe8\xb8\xd8\xb5\x71\xa4\x7a\x5b\xec\x34\x51\xff\x47\xf8\xfa\x08\x5d\xfb\xe1\xe2\x02\x0c\x76\xb8\xb8\x59\x5e\x67\x74\x70\x62\xf3\xff\x92\xd7\xfa\xa6\x5b\x4a\xf8\xba\x91\xe5\xc0\x13\xf9\xae\x10\x38\x00\x7c\x8c\xb2\x24\x2a\xad\x0e\x9b\xee\xd9\x7f\x3d\xbd\x3d\xf8\x82\x85\xc7\x8d\x00\x63\x9e\x50\x98\x5b\x04\x1d\xa5\xef\xd0\x14\xc2\xd6\xad\xdd\xff\xbf\xc5\x08\xa2\x83\xbb\x7b\x88\xb0\xbb\xef\xd5\xdc\xbf\xa2\x8d\x93\x8f\xe1\x05\x55\x24\x09\x9a\xc1\x63\x35\x88\x6e\xeb\xdd\xa0\xd4\xb8\xf5\x9b\xee\x07\x9a\x20\xdc\x7c\x9f\x49\xc1\xf8\x21\x1b\x63\x67\xac\xd5\xb7\x27\xef\xe8\x1f\xff\x87\x79\xd9\xc9\x34\x9c\xfc\x8a\x6b\x33\x16\x6a\x27\x76\xc4\x52\xa7\x6a\x0e\x55\xec\xd7\xd9\x0c\x1f\x2d\x52\xef\x26\x6d\xff\x2b\x50\x57\xe3\x55\x5f\xf3\xe9\xd4\xab\x66\x79\xe4\x6b\xd1\x08\xb7\x8d\x1a\x08\x91\x3e\x35\x01\x0f\xbf\x15\xd8\x09\x40\x48\x44\xd8\x18\x63\xcc\x36\x92\xe8\x6e\x7f\x05\x00\x00\xff\xff\xae\x0b\xc8\xda\x1c\x1d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
