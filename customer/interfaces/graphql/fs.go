// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xd4\x40\x0c\xbd\xe7\x2b\xdc\xbd\x00\x12\xea\x07\xe4\x04\x6d\x39\xac\x54\x55\xd0\x85\x13\x42\xdb\x21\xe3\x24\x16\x13\x4f\xe4\x71\xd4\x46\x68\xff\x1d\xed\x64\x68\x3b\x9b\xa4\xda\x5e\xba\xf2\x7b\x7e\xf6\xb3\x9d\xd1\xb1\x47\xb8\xf6\x5d\x87\x52\xe1\xfe\x7a\x08\xea\x3b\x94\xfd\x4e\x8d\x0e\x61\x7f\x8f\x61\x70\x0a\x7f\x0b\x00\x00\x0a\xb7\xbe\x69\xd0\x6e\xb9\x84\x2b\xef\x1d\x1a\xbe\x88\xc0\x10\x50\xb6\x37\x25\xec\x54\x88\x9b\x8b\xe2\x50\x14\x2b\xb2\xb9\x9e\x7d\x4e\x81\x4f\x16\x7b\xc1\xca\x28\xda\xf7\x82\x26\x78\x2e\x61\xf3\x23\x20\x3c\x4c\xe2\x0f\x50\x13\x3a\x7b\xb9\xf9\xb0\x58\xf1\xcd\xf6\x7a\x94\xe0\xd9\xb8\x1b\xa3\xa6\x5c\x68\xea\x6b\xc4\x8f\xe8\xc4\x37\xd6\x0a\x86\x80\xa1\x84\x9f\x73\xf6\xe7\x09\xbd\xf8\x15\xb9\x16\x6b\x33\x38\xdd\xb5\xd4\xf7\xc4\x4d\x02\x97\xaa\xfc\xcf\x7b\x9d\x76\x45\xce\x9d\x99\xb5\x3e\xd3\x97\xf6\xd3\x5c\x1b\x64\x8b\x52\x1e\x7f\x66\x03\xaa\x49\x82\xde\x99\x0e\xcb\x3c\xee\xcc\x73\x38\x8b\x77\x64\xad\xc3\x09\xc9\xe2\x86\xf8\x4b\x67\xc8\x9d\xe8\xf4\x82\x35\x3d\x4d\x75\x33\xe0\x37\x89\xb6\xd6\x8c\x11\xfa\x4e\x1d\x4e\x61\x36\x4a\xc7\xbd\x90\x8e\xe7\xdc\x4e\x1a\x45\x32\x29\xd8\x90\xe7\x6b\x6f\x31\x15\x84\x79\xdd\xca\x0f\xac\x32\xce\x48\x39\xa7\xeb\x0d\x8f\xb9\xc8\x09\x27\xa8\x20\xea\x8c\xb2\xc0\xb9\x93\x53\xd6\x6b\x8e\xb1\x96\x26\xcb\xc9\xcb\x2d\x71\xbc\xb2\x44\x9a\x4e\x4a\xd1\x61\xdf\x7a\x3e\x31\x96\x8f\xda\x07\x9d\x7b\x3f\x71\x16\xe7\x3a\xff\x9b\x9d\x04\xa7\xdd\xaf\x70\x8e\xe7\xb1\x40\xc9\x38\x98\xce\x61\xad\xd6\xa1\x28\xf0\x49\x91\x2d\xc4\xe5\x7e\x1b\x50\xc6\xb4\xc8\xcd\x66\x13\xff\xdf\xa3\x0e\xc2\x01\xb4\x45\x70\xf1\x43\x06\x62\x08\xf1\x1d\x82\xda\x4b\x04\xaa\x41\x04\x59\x21\x60\x08\xe4\x39\x13\x58\x7b\xc4\x96\x3e\xab\xec\x79\x3b\xa3\x8d\x2a\x25\xae\x35\x02\x5e\xc0\x30\xa0\x88\x17\xa0\x1a\x48\x81\x02\xb0\xd7\x17\x8d\xcb\x28\xbf\xad\x61\xf4\x03\x58\xcf\xef\x14\x1e\x0d\x2b\xa8\x87\xd6\xb0\x75\x18\x75\xa3\xc2\x47\xa8\x5a\xac\xfe\xc0\x23\x69\xbb\xda\xfc\xb4\xbb\xcb\xb7\x47\xb0\xe4\x3d\x99\x3e\x14\xff\x02\x00\x00\xff\xff\xba\x37\x80\x04\xfb\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
