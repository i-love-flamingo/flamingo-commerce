// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x30\xee\x25\x05\x8a\xfe\x00\xdf\x12\xb7\x7d\x11\x34\x2e\xf2\xd6\xde\xbd\x14\x41\x30\xa6\xc6\x32\x11\x8a\xd4\x92\xa3\x24\xc2\x62\xff\xfb\x82\x1f\x92\x45\x51\xb2\xbd\xb7\x3d\x6c\x4e\xf1\xcc\x33\x1f\x1c\x0e\x9f\x19\x09\x45\x68\xf6\xc0\x91\xad\x74\x55\xa1\xe1\xf8\xfc\x68\x74\xd1\x70\x62\x7f\x5e\x31\xc6\xd8\x0e\x2c\x7e\x01\x82\xe5\x11\x70\x07\x56\xf0\x88\x72\xaa\x6b\x0f\x24\x04\x8b\x66\x04\x8d\xa8\x6d\xaf\x0b\x58\x5b\x23\x17\x7b\xc1\x81\x84\x56\x36\xc7\x6f\x12\x7d\xb0\x11\x76\x03\x12\x61\x27\x71\xc9\xee\xb4\x96\x08\x2a\x3a\x8b\xe2\xe9\xd0\x9d\x51\x4c\xb2\xad\x71\xc9\x36\x64\x84\x2a\x83\xa4\x44\xba\x2f\x50\x91\xd8\x0b\x34\xa9\xea\x00\x76\x8d\x85\x80\x9b\xd2\xe8\xa6\xee\x75\x9f\x58\x63\xa1\x3c\xba\xf9\x38\xca\xa7\x44\xba\xd0\x6c\x9c\xab\x37\xbb\xbe\xfa\xeb\xea\xca\xe5\x79\x54\x6f\x44\x55\x4b\xec\xee\xc5\xff\xa8\x50\x91\xfd\xef\xce\xfe\xbd\x77\x36\x2e\x78\xbc\x1a\x12\xe4\x8a\x31\xf8\x1b\x66\x0f\x44\x46\xec\x1a\x42\xdb\x41\xc6\xe1\x6e\x7b\x44\xa8\xe3\x41\x1b\xfa\x82\x96\x1b\x51\xbb\xba\xa7\xc5\x28\x86\x8a\x2c\x58\xe5\x32\x4f\x52\xf9\x35\x7d\xb8\xa7\xab\x80\x07\xf3\x82\xf4\x28\x81\xe3\x4a\x17\xa3\x2b\x31\x48\x20\x24\x9a\xa0\x19\x45\xea\x94\x9b\x97\x66\x99\xa5\xd1\x29\x7f\x40\x95\x5a\x7a\x2d\x37\x08\x84\xc5\x2d\x39\xd5\x56\x54\xe8\xa5\x4d\x5d\x4c\x48\x5f\x85\x15\x3b\x89\xdf\x8c\xae\x96\x99\x74\xab\x7b\xac\x17\xaf\x80\xb0\xd4\x46\x84\x52\x1f\x4f\x1e\xe5\x6d\x68\xff\xeb\x27\x0f\x5e\x83\x50\x9d\x62\xd0\x02\x23\x6c\xcc\xb8\x13\x6a\x57\x8b\x35\xd4\xb5\x50\xe5\x92\xfd\x8a\xc7\x8a\xc5\xb4\xa4\xf9\xcb\x03\xbe\xa2\x5c\xa6\x07\x7e\xc1\xf6\x4d\x9b\xc2\x0e\x2d\xc2\x53\xfa\x81\x6f\xbe\x3e\x7d\xe3\x66\x3d\x97\xbd\xdc\xd8\x74\xbe\x4b\xb6\xa1\xf3\x82\xd3\x93\xcd\x33\xa0\x86\x47\x23\x38\xb2\xbc\xeb\xbd\xfc\x5e\xed\xf5\x18\x7b\x6f\x5d\xf9\xfd\xbf\xfd\x13\xf3\x98\xda\xe0\x06\x25\x72\xc2\xe2\x77\x30\x02\x14\xf9\x6e\x18\x44\xf4\xfd\xc8\x96\xf3\x5d\x78\xa2\x09\x07\x69\xdc\xbe\x82\x90\x8e\x3d\x7c\x12\x76\xca\x61\x9f\x7d\x74\x1a\x0c\x1f\x74\x0b\x92\xda\x5e\x99\x9f\x7a\x8c\xf0\xc6\x8b\xc4\xfa\x2b\x18\x25\x54\xe9\xb4\x6c\xaf\x0d\xa3\x03\x32\xde\x18\x83\x8a\x58\x1d\xbc\x2c\xf2\x98\x03\xab\xd9\xa8\x03\xcc\xec\xcd\x8f\x13\xec\x48\x27\x63\xd0\x02\xf7\xd0\x48\x4a\x82\x09\x8e\x1d\x6b\x7f\x11\x96\xeb\x46\x11\x16\x23\x9e\x2c\x06\x8a\x29\xd3\x4e\xbf\xc5\x77\x4a\x23\x56\x42\x3d\x6a\xa1\xc8\x6e\xf5\xa6\x46\x45\x4b\xf6\x4d\x6a\xa0\xa8\x84\xf7\x79\x25\xd7\x8a\xbc\xbb\x34\xe0\x2a\x88\xfd\x33\x58\x4c\x54\xdf\x1e\xf4\x9b\xf5\xf5\xf7\xa5\x02\x55\xf8\x1f\xb5\x8f\xc3\x10\x8c\xc2\x62\x71\xb2\x8c\x43\x6f\xa1\x90\x8b\x6d\xe7\x4e\xef\xbd\xb7\x1c\xf9\x89\xe1\xe7\xf2\x33\x5b\x0b\x89\xf6\x56\x15\x6b\x6d\x70\x31\x73\x09\xde\xdb\x2b\xc8\xe6\xa4\xbb\xd0\x3d\xbc\x65\x1c\x14\xdb\x61\x70\x1f\x4f\xa1\x0d\xab\x5c\xa0\xc5\xe9\x4b\x9d\x68\x97\x63\x01\xe3\xd1\x78\x63\x49\x57\x68\xfe\x97\x0c\xc0\xa0\x3a\x80\x52\x28\x73\xd2\x97\x9a\x83\x1c\xc8\xe6\xda\x32\x5d\x0d\x62\x40\x3f\x69\xed\xc4\xeb\x4c\xd0\x3e\x9d\xeb\xa7\xcb\x5c\x7b\x70\x3a\x68\x87\xe9\xa2\xa2\xc0\xf7\xa7\x43\x7e\x55\x64\xda\x4b\x43\x7a\x70\x0c\x29\x61\x37\xa4\x73\x3f\x7c\xdc\xed\x26\x5c\x3e\xeb\x35\xee\x3c\xd1\xd7\xd9\xcd\x69\x34\xe5\x3a\xb1\x1b\x73\xbd\x10\x38\x89\x57\x8c\x64\x7c\x9a\xc2\x21\x65\xcd\x0b\x48\x53\x0e\xb8\x66\x0a\x3f\xe6\xa2\x68\xb6\x90\xff\x90\x28\x53\xfc\x89\x48\x03\x8f\x27\xea\xec\x87\x49\xc2\x8b\xf9\x62\x24\x2a\xdc\x06\xd5\x50\x1c\x57\xc1\x31\x7a\xb0\xd1\xa5\x6b\xcd\x1e\xdd\xbb\xbd\xe0\x79\x1c\x77\xba\x98\x57\xbf\x06\x7e\xc7\x36\x5b\x04\x86\x3b\x62\x56\x8a\xde\x55\x04\x1f\xc0\xf6\xa2\x9b\x17\x6c\x27\x16\xe0\x6e\xff\x9d\xc5\xcd\xc6\xc8\x2c\xed\x5d\xfb\x1d\x5b\x67\x3f\xcc\xfa\xe3\x99\x3c\xcf\x96\xa5\x63\xa8\x8c\x7f\x9c\xe4\x21\x7f\x74\x13\xef\xb0\x51\x82\x72\xfe\xba\xe0\x75\xa6\x2b\xde\x6c\x26\x35\xd0\x21\x95\x28\xbf\xce\xa6\x18\xe3\x47\xdb\x8c\xef\xd9\x3a\x8c\xa7\xf9\x0c\xcd\x9f\x99\xcf\x67\xc6\x73\xa0\x8a\x3b\xb0\x98\xcc\xde\xa3\xf8\xb6\x72\x86\x33\xca\xdf\x94\xa0\x64\x15\x9b\x5c\x21\xe2\x7a\x5c\xd5\x20\x4a\xf5\xb3\x91\x98\xf5\x76\x81\xaa\x75\x13\xb3\x33\xb6\xa9\xed\x87\xf3\xeb\x40\x78\x92\xf0\xbe\x92\x60\xed\x60\xb5\x9e\x2b\xee\xf3\x06\xc1\xf0\xc3\x4f\xb4\x8d\xec\x46\x61\xa4\x9f\xa9\xf7\x15\xf3\xfc\xc0\xbe\x01\x47\xb2\xcc\x7a\xeb\x42\x57\x20\xd4\x67\x2f\x5b\x69\xe9\xb6\x5c\xa1\x43\xca\xb6\x29\x4b\xb4\xf1\x93\xf9\xe8\x2e\x44\x7d\xde\xf4\xda\xe8\x38\xf8\x5b\x63\xf2\x55\x1c\xc1\x4e\xea\x49\x04\xdf\x09\xdd\x36\xe3\xce\xf3\xff\x06\xfb\xf9\x33\x4e\xf6\x26\x2c\xcb\x75\xf6\xc5\x36\xf1\xa8\x27\x1d\xc4\xc8\x37\x36\xd6\xe8\x8f\x06\x2d\xe5\x89\x45\xc5\x84\xd7\xa4\xba\x2e\xf7\xbf\x03\x00\x00\xff\xff\x0e\xe3\xc4\x6c\x6f\x12\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
