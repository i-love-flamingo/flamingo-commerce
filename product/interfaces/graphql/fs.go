// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x8e\xe3\xb6\x0f\xbe\xe7\x29\x3c\xf8\x5d\xe6\x07\xf4\x09\x7c\x9b\xc9\x74\x8b\x41\x37\x8b\x74\x93\xf6\xb2\x18\x14\x8c\xcc\x38\x42\x64\xc9\x95\xe8\xd9\x31\x8a\x7d\xf7\xc2\x92\xec\xe8\x8f\x9d\xe4\xd8\x43\x73\xda\xe5\xf7\x89\xa4\x68\xf2\x13\x87\x4b\x42\x7d\x04\x86\xc5\x5a\x35\x0d\x6a\x86\x7f\x6e\xb5\xaa\x3a\x46\xc5\xdf\xab\xa2\x28\x8a\x03\x18\x7c\x01\x82\xf2\x42\x78\x06\xc3\x99\x67\x0d\xd0\x83\x25\x12\x82\x41\x9d\x50\x3d\x6b\x3f\x61\x8e\x6b\x5a\x64\xfc\xc8\x19\x10\x57\xd2\xe4\xfc\x5d\x84\xbb\x33\xdc\xec\x40\x20\x1c\x04\x96\xc5\xb3\x52\x02\x41\x7a\x67\xde\x3c\x1f\x7a\x3c\xe4\x93\xec\x5b\x2c\x8b\x1d\x69\x2e\x6b\x67\xa9\x91\x5e\x2b\x94\xc4\x8f\x1c\x75\x0c\x9d\xc0\x6c\xb0\xe2\xf0\x58\x6b\xd5\xb5\x13\xf6\x53\xd1\x19\xa8\x2f\x6e\xfe\x9f\xe4\x53\x23\xdd\x79\x2c\xcd\xd5\x1e\x7b\x58\xfd\x58\xad\x86\x3c\x2f\xf0\x8e\x37\xad\xc0\xf1\xbb\xd8\xff\x34\x28\xc9\xfc\xf7\xcd\xfe\xbd\xdf\x2c\x2d\xb8\xff\x34\xc4\x69\x28\x46\xf0\x0b\xb3\x07\x22\xcd\x0f\x1d\xa1\x19\x29\x69\xb8\xa7\x89\xe1\xea\x78\x52\x9a\x5e\xd0\x30\xcd\xdb\xa1\xee\x71\x31\xaa\x10\xc8\x82\x35\x43\xe6\x51\x2a\xdf\xe6\x2f\xf7\xb6\x72\x7c\xd0\x67\xa4\xad\x00\x86\x6b\x55\x25\x9f\x44\x23\x01\x17\xa8\x1d\x92\x44\x1a\xc1\xdd\xb9\x2b\xb3\x34\x46\xf0\x0b\x34\xf1\x49\x8b\x32\x8d\x40\x58\x3d\xd1\x00\xed\x79\x83\xd6\xda\xb5\xd5\x8c\xf5\x9d\x1b\x7e\x10\xf8\x49\xab\xa6\xcc\xac\x7b\x35\x71\xad\x79\x0d\x84\xb5\xd2\xdc\x95\xfa\x72\x73\x6f\xef\x5d\xfb\x3f\xbc\x59\xf2\x06\xb8\x1c\x81\xa0\x05\x12\xae\xcf\x78\x34\xaa\xa1\x16\x1b\x68\x5b\x2e\xeb\xb2\xf8\xe6\xaf\xe5\x8b\x69\x48\xb1\xf3\x67\x7c\x47\x51\xc6\x17\x3e\x63\xff\x5d\xe9\xca\x84\x27\xdc\x28\x7d\xc1\xef\xb6\x3e\x53\xe3\x66\x3d\x97\x4d\xae\x6f\x3a\xdb\x25\x7b\xd7\x79\xce\xe9\xd5\xe6\x09\xa4\x61\xab\x39\xc3\x22\xef\x7a\x6b\x7f\x95\x47\x95\x72\x5f\xcd\x50\x7e\xfb\xcf\x69\xc4\x2c\xa7\xd5\xb8\x43\x81\x8c\xb0\xfa\x03\x34\x07\x49\xb6\x1b\x82\x88\xb6\x1f\x8b\x72\xb9\x0b\xaf\x34\x61\x90\xc6\xd3\x3b\x70\x31\xa8\x87\x4d\xc2\xcc\x39\x9c\xb2\xf7\x4e\xdd\xc1\xcf\xaa\x07\x41\xfd\x04\xe6\xb7\x4e\x19\x8b\x5f\x20\x25\x8e\xc3\x9f\x29\x59\x85\x47\xe8\x04\x45\xa1\x38\xc3\x51\x3d\x5f\xb8\x61\xaa\x93\x84\x55\xa2\x57\x55\x00\xcc\x1d\x1d\xf1\x3d\x7e\x50\x1c\xb1\xe1\x72\xab\xb8\x24\xb3\x57\xbb\x16\x25\x95\xc5\x27\xa1\x80\x3c\x08\x1f\xcb\x20\x53\x92\xac\xbb\x38\xe0\xda\x99\x67\xdb\xf1\x02\xfb\x0a\xb0\xce\x90\x6a\x50\xff\x12\xc9\xac\x83\x4e\x20\x25\x8a\x5c\x5a\x84\x62\x20\x02\xdb\x52\xd1\xe3\x07\xc8\x07\xb4\x7a\x6e\x66\x7a\x20\x62\xdb\x74\x1e\xde\xee\x73\x6d\xc9\xb1\x9c\x87\xe9\xa2\x24\xa7\x2a\xd7\x43\xfe\x2c\x49\xf7\xf7\x86\xb4\x64\x1f\x52\xc0\x21\x14\x0d\x2b\x71\x20\x3a\x8c\x14\x63\xd1\xab\x7f\x59\xbd\xaf\x9b\xef\x73\xa2\xa5\xa3\x79\x10\xd3\xc9\x08\x8c\xf8\x3b\xfa\x91\xbf\x2e\x14\x10\xcf\xe6\x1d\xa3\x29\x82\x49\x9a\xe3\xa7\x93\x76\xe5\xee\x56\x46\xa2\x49\xcc\x9f\x44\xde\xe0\xde\x41\xa1\xd9\x2f\x01\x29\x3b\x78\xcb\xe3\x07\xed\x88\x1a\x25\xbb\xa3\x65\x2f\xaf\xb9\xcf\x6b\x5a\x00\x7e\xc5\x3e\x7b\x02\xc2\xed\x20\x2b\xc4\xe4\xca\x93\x4f\x60\x26\xd3\xe3\x19\xfb\x99\xd5\x67\xdc\x7c\x16\x79\x8b\x31\x6e\x5f\x68\x9c\xf7\x7c\x9a\xf3\xf6\xed\x24\xa7\x78\xec\x33\xf7\xf1\x4b\xbb\xe8\xbc\x05\x3a\xc5\x16\x69\xb7\x8a\x98\xa3\xad\xb2\x2d\xf8\x5e\xbc\x5a\x2a\xe6\x0b\xd2\x7d\x43\x9e\x6f\xa8\xb3\x9b\xa5\x67\x30\x18\x49\xef\xc5\xfc\xd4\x0c\x07\x17\xc0\xdf\x25\xa7\xe8\x45\x9c\x7d\x41\xfc\x96\xd2\xb4\xc0\x6b\xf9\xb5\x13\x98\x35\x5a\x85\xb2\xdf\x28\x8d\xe3\x61\x13\x9f\xfd\xdf\xed\xd7\xc0\xcd\x07\x7c\xac\x05\x18\x13\x6c\x38\xf9\x9f\x36\x08\x9a\x9d\x36\x38\xed\x2a\x7f\x75\x38\xec\x58\xc9\x7a\x6c\x21\xa5\x79\xcd\x25\x88\xdf\x3c\x25\x80\xda\x69\x40\xdd\xef\x55\xba\x14\x64\xd7\x6c\xa1\xbe\xac\xd3\x81\xfd\x2b\x9a\x4e\x90\x47\x06\xfb\xd2\x87\xf7\x39\x3a\xbe\xcf\xb2\x75\xd0\xdc\x20\xfa\x1a\x9a\xe9\x62\xe5\xdc\x6d\x87\x68\xf8\x41\x28\x2b\xab\x45\x85\xbd\x93\x77\x9e\x7a\x7c\x74\x4b\x4f\x9b\x6d\xde\x33\x23\xba\xfa\xb1\xfa\x27\x00\x00\xff\xff\xb0\xc7\xef\xd4\xd3\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
