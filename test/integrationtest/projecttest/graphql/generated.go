// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"math/big"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"flamingo.me/flamingo-commerce/v3/cart/domain/cart"
	"flamingo.me/flamingo-commerce/v3/cart/domain/placeorder"
	"flamingo.me/flamingo-commerce/v3/cart/domain/validation"
	"flamingo.me/flamingo-commerce/v3/cart/interfaces/controller/forms"
	"flamingo.me/flamingo-commerce/v3/cart/interfaces/graphql/dto"
	domain3 "flamingo.me/flamingo-commerce/v3/category/domain"
	"flamingo.me/flamingo-commerce/v3/category/interfaces/graphql/categorydto"
	"flamingo.me/flamingo-commerce/v3/checkout/application"
	"flamingo.me/flamingo-commerce/v3/checkout/domain/placeorder/process"
	dto1 "flamingo.me/flamingo-commerce/v3/checkout/interfaces/graphql/dto"
	domain5 "flamingo.me/flamingo-commerce/v3/customer/domain"
	"flamingo.me/flamingo-commerce/v3/customer/interfaces/graphql/dtocustomer"
	"flamingo.me/flamingo-commerce/v3/price/domain"
	domain1 "flamingo.me/flamingo-commerce/v3/product/domain"
	graphql1 "flamingo.me/flamingo-commerce/v3/product/interfaces/graphql"
	graphqlproductdto "flamingo.me/flamingo-commerce/v3/product/interfaces/graphql/product/dto"
	domain2 "flamingo.me/flamingo-commerce/v3/search/domain"
	"flamingo.me/flamingo-commerce/v3/search/interfaces/graphql/searchdto"
	domain4 "flamingo.me/form/domain"
	graphql2 "flamingo.me/graphql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Commerce_Cart_AdditionalData() Commerce_Cart_AdditionalDataResolver
	Commerce_Cart_Cart() Commerce_Cart_CartResolver
	Commerce_Cart_DefaultPaymentSelection() Commerce_Cart_DefaultPaymentSelectionResolver
	Commerce_Cart_DeliveryInfo() Commerce_Cart_DeliveryInfoResolver
	Commerce_Cart_Item() Commerce_Cart_ItemResolver
	Commerce_Cart_ShippingItem() Commerce_Cart_ShippingItemResolver
	Commerce_Product_PriceInfo() Commerce_Product_PriceInfoResolver
	Commerce_Search_Meta() Commerce_Search_MetaResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	Deprecated func(ctx context.Context, obj interface{}, next graphql.Resolver, reason *string) (res interface{}, err error)
	Include    func(ctx context.Context, obj interface{}, next graphql.Resolver, ifArg bool) (res interface{}, err error)
	Skip       func(ctx context.Context, obj interface{}, next graphql.Resolver, ifArg bool) (res interface{}, err error)
}

type ComplexityRoot struct {
	CommerceCartAdditionalData struct {
		CustomAttributes func(childComplexity int) int
		ReservedOrderID  func(childComplexity int) int
	}

	CommerceCartAddress struct {
		AdditionalAddressLines func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		Country                func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		Email                  func(childComplexity int) int
		Firstname              func(childComplexity int) int
		Lastname               func(childComplexity int) int
		MiddleName             func(childComplexity int) int
		PostCode               func(childComplexity int) int
		RegionCode             func(childComplexity int) int
		Salutation             func(childComplexity int) int
		State                  func(childComplexity int) int
		Street                 func(childComplexity int) int
		StreetNr               func(childComplexity int) int
		Telephone              func(childComplexity int) int
		Title                  func(childComplexity int) int
		Vat                    func(childComplexity int) int
	}

	CommerceCartAddressForm struct {
		AddressLine1 func(childComplexity int) int
		AddressLine2 func(childComplexity int) int
		City         func(childComplexity int) int
		Company      func(childComplexity int) int
		Country      func(childComplexity int) int
		CountryCode  func(childComplexity int) int
		Email        func(childComplexity int) int
		Firstname    func(childComplexity int) int
		Lastname     func(childComplexity int) int
		MiddleName   func(childComplexity int) int
		PhoneNumber  func(childComplexity int) int
		PostCode     func(childComplexity int) int
		RegionCode   func(childComplexity int) int
		Salutation   func(childComplexity int) int
		State        func(childComplexity int) int
		Street       func(childComplexity int) int
		StreetNr     func(childComplexity int) int
		Title        func(childComplexity int) int
		Vat          func(childComplexity int) int
	}

	CommerceCartAppliedDiscount struct {
		Applied       func(childComplexity int) int
		CampaignCode  func(childComplexity int) int
		CouponCode    func(childComplexity int) int
		IsItemRelated func(childComplexity int) int
		Label         func(childComplexity int) int
		SortOrder     func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	CommerceCartAppliedDiscounts struct {
		ByCampaignCode func(childComplexity int, campaignCode string) int
		ByType         func(childComplexity int, filterType string) int
		Items          func(childComplexity int) int
	}

	CommerceCartAppliedGiftCard struct {
		Applied      func(childComplexity int) int
		Code         func(childComplexity int) int
		HasRemaining func(childComplexity int) int
		Remaining    func(childComplexity int) int
	}

	CommerceCartBillingAddressForm struct {
		FormData       func(childComplexity int) int
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	CommerceCartCart struct {
		AdditionalData                  func(childComplexity int) int
		AllShippingTitles               func(childComplexity int) int
		AppliedCouponCodes              func(childComplexity int) int
		AppliedGiftCards                func(childComplexity int) int
		AuthenticatedUserID             func(childComplexity int) int
		BelongsToAuthenticatedUser      func(childComplexity int) int
		BillingAddress                  func(childComplexity int) int
		DefaultCurrency                 func(childComplexity int) int
		Deliveries                      func(childComplexity int) int
		EntityID                        func(childComplexity int) int
		GetByExternalReference          func(childComplexity int, ref string) int
		GetByItemID                     func(childComplexity int, itemID string) int
		GetCartTeaser                   func(childComplexity int) int
		GetDeliveryByCode               func(childComplexity int, deliveryCode string) int
		GetDeliveryByItemID             func(childComplexity int, itemID string) int
		GetDeliveryCodes                func(childComplexity int) int
		GetMainShippingEMail            func(childComplexity int) int
		GetPaymentReference             func(childComplexity int) int
		GetTotalItemsByType             func(childComplexity int, typeCode string) int
		GetTotalQty                     func(childComplexity int, marketPlaceCode string, variantCode string) int
		GetVoucherSavings               func(childComplexity int) int
		GrandTotal                      func(childComplexity int) int
		GrandTotalCharges               func(childComplexity int) int
		HasAppliedCouponCode            func(childComplexity int) int
		HasAppliedGiftCards             func(childComplexity int) int
		HasDeliveryForCode              func(childComplexity int, deliveryCode string) int
		HasRemainingGiftCards           func(childComplexity int) int
		HasShippingCosts                func(childComplexity int) int
		ID                              func(childComplexity int) int
		IsEmpty                         func(childComplexity int) int
		IsPaymentSelected               func(childComplexity int) int
		ItemCount                       func(childComplexity int) int
		PaymentSelection                func(childComplexity int) int
		ProductCount                    func(childComplexity int) int
		Purchaser                       func(childComplexity int) int
		SubTotalGross                   func(childComplexity int) int
		SubTotalGrossWithDiscounts      func(childComplexity int) int
		SubTotalNet                     func(childComplexity int) int
		SubTotalNetWithDiscounts        func(childComplexity int) int
		SumItemRelatedDiscountAmount    func(childComplexity int) int
		SumNonItemRelatedDiscountAmount func(childComplexity int) int
		SumShippingGross                func(childComplexity int) int
		SumShippingGrossWithDiscounts   func(childComplexity int) int
		SumShippingNet                  func(childComplexity int) int
		SumShippingNetWithDiscounts     func(childComplexity int) int
		SumTotalDiscountAmount          func(childComplexity int) int
		SumTotalTaxAmount               func(childComplexity int) int
		Totalitems                      func(childComplexity int) int
	}

	CommerceCartCouponCode struct {
		Code func(childComplexity int) int
	}

	CommerceCartCustomAttributes struct {
		Get func(childComplexity int, key string) int
	}

	CommerceCartDecoratedCart struct {
		Cart                       func(childComplexity int) int
		CartSummary                func(childComplexity int) int
		DecoratedDeliveries        func(childComplexity int) int
		GetAllPaymentRequiredItems func(childComplexity int) int
		GetDecoratedDeliveryByCode func(childComplexity int, deliveryCode string) int
	}

	CommerceCartDecoratedDelivery struct {
		DecoratedItems func(childComplexity int) int
		Delivery       func(childComplexity int) int
	}

	CommerceCartDecoratedItem struct {
		Item    func(childComplexity int) int
		Product func(childComplexity int) int
	}

	CommerceCartDefaultPaymentSelection struct {
		CartSplit  func(childComplexity int) int
		Gateway    func(childComplexity int) int
		TotalValue func(childComplexity int) int
	}

	CommerceCartDelivery struct {
		Cartitems                       func(childComplexity int) int
		DeliveryInfo                    func(childComplexity int) int
		GrandTotal                      func(childComplexity int) int
		HasItems                        func(childComplexity int) int
		ShippingItem                    func(childComplexity int) int
		SubTotalGross                   func(childComplexity int) int
		SubTotalGrossWithDiscounts      func(childComplexity int) int
		SubTotalNet                     func(childComplexity int) int
		SubTotalNetWithDiscounts        func(childComplexity int) int
		SumItemRelatedDiscountAmount    func(childComplexity int) int
		SumNonItemRelatedDiscountAmount func(childComplexity int) int
		SumTotalDiscountAmount          func(childComplexity int) int
		SumTotalTaxAmount               func(childComplexity int) int
	}

	CommerceCartDeliveryAddressForm struct {
		Carrier           func(childComplexity int) int
		DeliveryCode      func(childComplexity int) int
		DesiredTime       func(childComplexity int) int
		FormData          func(childComplexity int) int
		Method            func(childComplexity int) int
		Processed         func(childComplexity int) int
		UseBillingAddress func(childComplexity int) int
		ValidationInfo    func(childComplexity int) int
	}

	CommerceCartDeliveryInfo struct {
		AdditionalData   func(childComplexity int) int
		Carrier          func(childComplexity int) int
		Code             func(childComplexity int) int
		DeliveryLocation func(childComplexity int) int
		DesiredTime      func(childComplexity int) int
		Method           func(childComplexity int) int
		Workflow         func(childComplexity int) int
	}

	CommerceCartDeliveryLocation struct {
		Address           func(childComplexity int) int
		Code              func(childComplexity int) int
		Type              func(childComplexity int) int
		UseBillingAddress func(childComplexity int) int
	}

	CommerceCartExistingCustomerData struct {
		ID func(childComplexity int) int
	}

	CommerceCartFormError struct {
		DefaultLabel func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	CommerceCartFormFieldError struct {
		DefaultLabel func(childComplexity int) int
		FieldName    func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	CommerceCartFormValidationInfo struct {
		FieldErrors   func(childComplexity int) int
		GeneralErrors func(childComplexity int) int
	}

	CommerceCartItem struct {
		AdditionalDataKeys     func(childComplexity int) int
		AdditionalDataValues   func(childComplexity int) int
		AppliedDiscounts       func(childComplexity int) int
		ExternalReference      func(childComplexity int) int
		GetAdditionalData      func(childComplexity int, key string) int
		HasAdditionalDataKey   func(childComplexity int, key string) int
		ID                     func(childComplexity int) int
		MarketplaceCode        func(childComplexity int) int
		ProductName            func(childComplexity int) int
		Qty                    func(childComplexity int) int
		RowPriceGross          func(childComplexity int) int
		RowPriceNet            func(childComplexity int) int
		SinglePriceGross       func(childComplexity int) int
		SinglePriceNet         func(childComplexity int) int
		SourceID               func(childComplexity int) int
		VariantMarketPlaceCode func(childComplexity int) int
	}

	CommerceCartItemValidationError struct {
		ErrorMessageKey func(childComplexity int) int
		ItemID          func(childComplexity int) int
	}

	CommerceCartKeyValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CommerceCartPaymentSelectionSplit struct {
		Charge    func(childComplexity int) int
		Qualifier func(childComplexity int) int
	}

	CommerceCartPaymentSelectionSplitQualifier struct {
		ChargeReference func(childComplexity int) int
		ChargeType      func(childComplexity int) int
		Method          func(childComplexity int) int
	}

	CommerceCartPerson struct {
		Address              func(childComplexity int) int
		ExistingCustomerData func(childComplexity int) int
		PersonalDetails      func(childComplexity int) int
	}

	CommerceCartPersonalDetails struct {
		DateOfBirth     func(childComplexity int) int
		Nationality     func(childComplexity int) int
		PassportCountry func(childComplexity int) int
		PassportNumber  func(childComplexity int) int
	}

	CommerceCartPlacedOrderInfo struct {
		DeliveryCode func(childComplexity int) int
		OrderNumber  func(childComplexity int) int
	}

	CommerceCartPricedCartItem struct {
		Amount func(childComplexity int) int
		ItemID func(childComplexity int) int
	}

	CommerceCartPricedItems struct {
		CartItems     func(childComplexity int) int
		ShippingItems func(childComplexity int) int
		TotalItems    func(childComplexity int) int
	}

	CommerceCartPricedShippingItem struct {
		Amount           func(childComplexity int) int
		DeliveryInfoCode func(childComplexity int) int
	}

	CommerceCartPricedTotalItem struct {
		Amount func(childComplexity int) int
		Code   func(childComplexity int) int
	}

	CommerceCartQtyRestrictionResult struct {
		IsRestricted        func(childComplexity int) int
		MaxAllowed          func(childComplexity int) int
		RemainingDifference func(childComplexity int) int
		RestrictorName      func(childComplexity int) int
	}

	CommerceCartSelectedPaymentResult struct {
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	CommerceCartShippingItem struct {
		AppliedDiscounts         func(childComplexity int) int
		PriceGross               func(childComplexity int) int
		PriceNet                 func(childComplexity int) int
		Tax                      func(childComplexity int) int
		TaxAmount                func(childComplexity int) int
		Title                    func(childComplexity int) int
		TotalWithDiscountInclTax func(childComplexity int) int
	}

	CommerceCartSummary struct {
		Discounts                                        func(childComplexity int) int
		HasAppliedDiscounts                              func(childComplexity int) int
		SumAppliedDiscounts                              func(childComplexity int) int
		SumAppliedGiftCards                              func(childComplexity int) int
		SumGrandTotalWithGiftCards                       func(childComplexity int) int
		SumPaymentSelectionCartSplitValueAmountByMethods func(childComplexity int, methods []string) int
		SumTaxes                                         func(childComplexity int) int
		SumTotalDiscountWithGiftCardsAmount              func(childComplexity int) int
	}

	CommerceCartTax struct {
		Amount func(childComplexity int) int
		Rate   func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	CommerceCartTaxes struct {
		GetByType func(childComplexity int, taxType string) int
		Items     func(childComplexity int) int
	}

	CommerceCartTeaser struct {
		DeliveryCodes func(childComplexity int) int
		ItemCount     func(childComplexity int) int
		ProductCount  func(childComplexity int) int
	}

	CommerceCartTotalitem struct {
		Code  func(childComplexity int) int
		Price func(childComplexity int) int
		Title func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	CommerceCartUpdateDeliveryShippingOptionsResult struct {
		Processed func(childComplexity int) int
	}

	CommerceCartValidationResult struct {
		CommonErrorMessageKey func(childComplexity int) int
		HasCommonError        func(childComplexity int) int
		ItemResults           func(childComplexity int) int
	}

	CommerceCategoryData struct {
		Active     func(childComplexity int) int
		Attributes func(childComplexity int) int
		Code       func(childComplexity int) int
		Name       func(childComplexity int) int
		Path       func(childComplexity int) int
		Promoted   func(childComplexity int) int
	}

	CommerceCategoryTree struct {
		Active        func(childComplexity int) int
		Code          func(childComplexity int) int
		DocumentCount func(childComplexity int) int
		HasChilds     func(childComplexity int) int
		Name          func(childComplexity int) int
		Path          func(childComplexity int) int
		SubTrees      func(childComplexity int) int
	}

	CommerceCategoryAttribute struct {
		Code   func(childComplexity int) int
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	CommerceCategoryAttributeValue struct {
		Label func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CommerceCategoryAttributes struct {
		All func(childComplexity int) int
		Get func(childComplexity int, code string) int
		Has func(childComplexity int, code string) int
	}

	CommerceCategorySearchResult struct {
		Category            func(childComplexity int) int
		ProductSearchResult func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderContext struct {
		Cart       func(childComplexity int) int
		OrderInfos func(childComplexity int) int
		State      func(childComplexity int) int
		UUID       func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderPaymentInfo struct {
		Amount          func(childComplexity int) int
		Gateway         func(childComplexity int) int
		Method          func(childComplexity int) int
		PaymentProvider func(childComplexity int) int
		Title           func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateFormParameter struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStatePaymentRequestAPI struct {
		CompleteURL           func(childComplexity int) int
		Details               func(childComplexity int) int
		MerchantValidationURL func(childComplexity int) int
		MethodData            func(childComplexity int) int
		Options               func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailed struct {
		Name   func(childComplexity int) int
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailedReasonCanceledByCustomer struct {
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailedReasonCartValidationError struct {
		Reason           func(childComplexity int) int
		ValidationResult func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailedReasonError struct {
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentCanceledByCustomer struct {
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentError struct {
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStatePostRedirect struct {
		Name       func(childComplexity int) int
		Parameters func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateRedirect struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateShowHTML struct {
		HTML func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateShowIframe struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateShowWalletPayment struct {
		Name              func(childComplexity int) int
		PaymentMethod     func(childComplexity int) int
		PaymentRequestAPI func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateSuccess struct {
		Name func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateWait struct {
		Name func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateWaitForCustomer struct {
		Name func(childComplexity int) int
	}

	CommerceCheckoutPlacedOrderInfos struct {
		Email            func(childComplexity int) int
		PaymentInfos     func(childComplexity int) int
		PlacedOrderInfos func(childComplexity int) int
	}

	CommerceCheckoutStartPlaceOrderResult struct {
		UUID func(childComplexity int) int
	}

	CommerceCustomerAddress struct {
		AdditionalAddressLines func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		DefaultBilling         func(childComplexity int) int
		DefaultShipping        func(childComplexity int) int
		Email                  func(childComplexity int) int
		Firstname              func(childComplexity int) int
		ID                     func(childComplexity int) int
		Lastname               func(childComplexity int) int
		PostCode               func(childComplexity int) int
		Prefix                 func(childComplexity int) int
		RegionCode             func(childComplexity int) int
		State                  func(childComplexity int) int
		Street                 func(childComplexity int) int
		StreetNr               func(childComplexity int) int
		Telephone              func(childComplexity int) int
	}

	CommerceCustomerPersonData struct {
		Birthday    func(childComplexity int) int
		FirstName   func(childComplexity int) int
		Gender      func(childComplexity int) int
		LastName    func(childComplexity int) int
		MainEmail   func(childComplexity int) int
		MiddleName  func(childComplexity int) int
		Nationality func(childComplexity int) int
		Prefix      func(childComplexity int) int
	}

	CommerceCustomerResult struct {
		Addresses              func(childComplexity int) int
		DefaultBillingAddress  func(childComplexity int) int
		DefaultShippingAddress func(childComplexity int) int
		GetAddress             func(childComplexity int, id string) int
		ID                     func(childComplexity int) int
		PersonalData           func(childComplexity int) int
	}

	CommerceCustomerStatusResult struct {
		IsLoggedIn func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	CommercePrice struct {
		Currency    func(childComplexity int) int
		FloatAmount func(childComplexity int) int
	}

	CommercePriceCharge struct {
		Price     func(childComplexity int) int
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	CommercePriceChargeQualifier struct {
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CommercePriceCharges struct {
		GetByChargeQualifierForced func(childComplexity int, qualifier domain.ChargeQualifier) int
		GetByTypeForced            func(childComplexity int, ctype string) int
		HasChargeQualifier         func(childComplexity int, qualifier domain.ChargeQualifier) int
		HasType                    func(childComplexity int, ctype string) int
		Items                      func(childComplexity int) int
	}

	CommerceProductActiveVariantProduct struct {
		ActiveVariationSelections func(childComplexity int) int
		Attributes                func(childComplexity int) int
		AvailablePrices           func(childComplexity int) int
		Badges                    func(childComplexity int) int
		Categories                func(childComplexity int) int
		Description               func(childComplexity int) int
		Identifier                func(childComplexity int) int
		Loyalty                   func(childComplexity int) int
		MarketPlaceCode           func(childComplexity int) int
		Media                     func(childComplexity int) int
		Meta                      func(childComplexity int) int
		Price                     func(childComplexity int) int
		ShortDescription          func(childComplexity int) int
		Title                     func(childComplexity int) int
		Type                      func(childComplexity int) int
		VariantMarketPlaceCode    func(childComplexity int) int
		VariationSelections       func(childComplexity int) int
	}

	CommerceProductActiveVariationSelection struct {
		Code  func(childComplexity int) int
		Label func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CommerceProductAttribute struct {
		Code      func(childComplexity int) int
		CodeLabel func(childComplexity int) int
		Label     func(childComplexity int) int
		UnitCode  func(childComplexity int) int
		Values    func(childComplexity int) int
	}

	CommerceProductAttributes struct {
		Attribute       func(childComplexity int, key string) int
		AttributeKeys   func(childComplexity int) int
		Attributes      func(childComplexity int) int
		AttributesByKey func(childComplexity int, keys []string) int
		HasAttribute    func(childComplexity int, key string) int
	}

	CommerceProductBadge struct {
		Code  func(childComplexity int) int
		Label func(childComplexity int) int
	}

	CommerceProductBadges struct {
		All   func(childComplexity int) int
		First func(childComplexity int) int
	}

	CommerceProductCategories struct {
		All  func(childComplexity int) int
		Main func(childComplexity int) int
	}

	CommerceProductCategoryTeaser struct {
		Code   func(childComplexity int) int
		Name   func(childComplexity int) int
		Parent func(childComplexity int) int
		Path   func(childComplexity int) int
	}

	CommerceProductConfigurableProduct struct {
		Attributes          func(childComplexity int) int
		AvailablePrices     func(childComplexity int) int
		Badges              func(childComplexity int) int
		Categories          func(childComplexity int) int
		Description         func(childComplexity int) int
		Identifier          func(childComplexity int) int
		Loyalty             func(childComplexity int) int
		MarketPlaceCode     func(childComplexity int) int
		Media               func(childComplexity int) int
		Meta                func(childComplexity int) int
		Price               func(childComplexity int) int
		ShortDescription    func(childComplexity int) int
		Title               func(childComplexity int) int
		Type                func(childComplexity int) int
		VariationSelections func(childComplexity int) int
	}

	CommerceProductLoyalty struct {
		Earning func(childComplexity int) int
		Price   func(childComplexity int) int
	}

	CommerceProductLoyaltyEarningInfo struct {
		Default func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	CommerceProductLoyaltyPriceInfo struct {
		Context          func(childComplexity int) int
		Default          func(childComplexity int) int
		DiscountText     func(childComplexity int) int
		Discounted       func(childComplexity int) int
		IsDiscounted     func(childComplexity int) int
		MaxPointsToSpent func(childComplexity int) int
		MinPointsToSpent func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	CommerceProductMedia struct {
		All      func(childComplexity int) int
		GetMedia func(childComplexity int, usage string) int
	}

	CommerceProductMediaItem struct {
		MimeType  func(childComplexity int) int
		Reference func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		Usage     func(childComplexity int) int
	}

	CommerceProductMeta struct {
		Keywords func(childComplexity int) int
	}

	CommerceProductPriceContext struct {
		ChannelCode   func(childComplexity int) int
		CustomerGroup func(childComplexity int) int
		DeliveryCode  func(childComplexity int) int
		Locale        func(childComplexity int) int
	}

	CommerceProductPriceInfo struct {
		ActiveBase        func(childComplexity int) int
		ActiveBaseAmount  func(childComplexity int) int
		ActiveBaseUnit    func(childComplexity int) int
		CampaignRules     func(childComplexity int) int
		Context           func(childComplexity int) int
		Default           func(childComplexity int) int
		DenyMoreDiscounts func(childComplexity int) int
		DiscountText      func(childComplexity int) int
		Discounted        func(childComplexity int) int
		IsDiscounted      func(childComplexity int) int
		TaxClass          func(childComplexity int) int
	}

	CommerceProductSearchResult struct {
		Facets           func(childComplexity int) int
		HasSelectedFacet func(childComplexity int) int
		Products         func(childComplexity int) int
		Promotion        func(childComplexity int) int
		SearchMeta       func(childComplexity int) int
		Suggestions      func(childComplexity int) int
	}

	CommerceProductSimpleProduct struct {
		Attributes       func(childComplexity int) int
		AvailablePrices  func(childComplexity int) int
		Badges           func(childComplexity int) int
		Categories       func(childComplexity int) int
		Description      func(childComplexity int) int
		Identifier       func(childComplexity int) int
		Loyalty          func(childComplexity int) int
		MarketPlaceCode  func(childComplexity int) int
		Media            func(childComplexity int) int
		Meta             func(childComplexity int) int
		Price            func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	CommerceProductVariationSelection struct {
		Code    func(childComplexity int) int
		Label   func(childComplexity int) int
		Options func(childComplexity int) int
	}

	CommerceProductVariationSelectionOption struct {
		Label   func(childComplexity int) int
		State   func(childComplexity int) int
		Variant func(childComplexity int) int
	}

	CommerceProductVariationSelectionOptionVariant struct {
		MarketPlaceCode func(childComplexity int) int
	}

	CommerceSearchListFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	CommerceSearchListFacetItem struct {
		Count    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	CommerceSearchMeta struct {
		NumPages      func(childComplexity int) int
		NumResults    func(childComplexity int) int
		OriginalQuery func(childComplexity int) int
		Page          func(childComplexity int) int
		Query         func(childComplexity int) int
		SortOptions   func(childComplexity int) int
	}

	CommerceSearchPromotion struct {
		Content func(childComplexity int) int
		Media   func(childComplexity int) int
		Title   func(childComplexity int) int
		URL     func(childComplexity int) int
	}

	CommerceSearchPromotionMedia struct {
		MimeType  func(childComplexity int) int
		Reference func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		Usage     func(childComplexity int) int
	}

	CommerceSearchRangeFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	CommerceSearchRangeFacetItem struct {
		Count       func(childComplexity int) int
		Label       func(childComplexity int) int
		Max         func(childComplexity int) int
		Min         func(childComplexity int) int
		Selected    func(childComplexity int) int
		SelectedMax func(childComplexity int) int
		SelectedMin func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	CommerceSearchSortOption struct {
		Field    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
	}

	CommerceSearchSuggestion struct {
		Highlight func(childComplexity int) int
		Text      func(childComplexity int) int
	}

	CommerceSearchTreeFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	CommerceSearchTreeFacetItem struct {
		Active   func(childComplexity int) int
		Count    func(childComplexity int) int
		Items    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Mutation struct {
		CommerceCartAddToCart                      func(childComplexity int, marketplaceCode string, qty int, deliveryCode string) int
		CommerceCartApplyCouponCodeOrGiftCard      func(childComplexity int, code string) int
		CommerceCartClean                          func(childComplexity int) int
		CommerceCartDeleteCartDelivery             func(childComplexity int, deliveryCode string) int
		CommerceCartDeleteItem                     func(childComplexity int, itemID string, deliveryCode string) int
		CommerceCartRemoveCouponCode               func(childComplexity int, couponCode string) int
		CommerceCartRemoveGiftCard                 func(childComplexity int, giftCardCode string) int
		CommerceCartUpdateAdditionalData           func(childComplexity int, additionalData []*dto.KeyValue) int
		CommerceCartUpdateBillingAddress           func(childComplexity int, addressForm *forms.AddressForm) int
		CommerceCartUpdateDeliveriesAdditionalData func(childComplexity int, data []*dto.DeliveryAdditionalData) int
		CommerceCartUpdateDeliveryAddresses        func(childComplexity int, deliveryAdresses []*forms.DeliveryForm) int
		CommerceCartUpdateDeliveryShippingOptions  func(childComplexity int, shippingOptions []*dto.DeliveryShippingOption) int
		CommerceCartUpdateItemQty                  func(childComplexity int, itemID string, deliveryCode string, qty int) int
		CommerceCartUpdateSelectedPayment          func(childComplexity int, gateway string, method string) int
		CommerceCheckoutCancelPlaceOrder           func(childComplexity int) int
		CommerceCheckoutClearPlaceOrder            func(childComplexity int) int
		CommerceCheckoutRefreshPlaceOrder          func(childComplexity int) int
		CommerceCheckoutRefreshPlaceOrderBlocking  func(childComplexity int) int
		CommerceCheckoutStartPlaceOrder            func(childComplexity int, returnURL string) int
		Flamingo                                   func(childComplexity int) int
	}

	Query struct {
		CommerceCartDecoratedCart        func(childComplexity int) int
		CommerceCartQtyRestriction       func(childComplexity int, marketplaceCode string, variantCode *string, deliveryCode string) int
		CommerceCartValidator            func(childComplexity int) int
		CommerceCategory                 func(childComplexity int, categoryCode string, categorySearchRequest *searchdto.CommerceSearchRequest) int
		CommerceCategoryTree             func(childComplexity int, activeCategoryCode string) int
		CommerceCheckoutActivePlaceOrder func(childComplexity int) int
		CommerceCheckoutCurrentContext   func(childComplexity int) int
		CommerceCustomer                 func(childComplexity int) int
		CommerceCustomerStatus           func(childComplexity int) int
		CommerceProduct                  func(childComplexity int, marketPlaceCode string, variantMarketPlaceCode *string) int
		CommerceProductSearch            func(childComplexity int, searchRequest searchdto.CommerceSearchRequest) int
		Flamingo                         func(childComplexity int) int
	}
}

type Commerce_Cart_AdditionalDataResolver interface {
	CustomAttributes(ctx context.Context, obj *cart.AdditionalData) (*dto.CustomAttributes, error)
}
type Commerce_Cart_CartResolver interface {
	GetDeliveryByCode(ctx context.Context, obj *cart.Cart, deliveryCode string) (*cart.Delivery, error)
}
type Commerce_Cart_DefaultPaymentSelectionResolver interface {
	CartSplit(ctx context.Context, obj *cart.DefaultPaymentSelection) ([]*dto.PaymentSelectionSplit, error)
}
type Commerce_Cart_DeliveryInfoResolver interface {
	AdditionalData(ctx context.Context, obj *cart.DeliveryInfo) (*dto.CustomAttributes, error)
}
type Commerce_Cart_ItemResolver interface {
	AppliedDiscounts(ctx context.Context, obj *cart.Item) (*dto.CartAppliedDiscounts, error)
}
type Commerce_Cart_ShippingItemResolver interface {
	AppliedDiscounts(ctx context.Context, obj *cart.ShippingItem) (*dto.CartAppliedDiscounts, error)
}
type Commerce_Product_PriceInfoResolver interface {
	ActiveBase(ctx context.Context, obj *domain1.PriceInfo) (*domain.Price, error)
}
type Commerce_Search_MetaResolver interface {
	SortOptions(ctx context.Context, obj *domain2.SearchMeta) ([]*searchdto.CommerceSearchSortOption, error)
}
type MutationResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceCartAddToCart(ctx context.Context, marketplaceCode string, qty int, deliveryCode string) (*dto.DecoratedCart, error)
	CommerceCartDeleteCartDelivery(ctx context.Context, deliveryCode string) (*dto.DecoratedCart, error)
	CommerceCartDeleteItem(ctx context.Context, itemID string, deliveryCode string) (*dto.DecoratedCart, error)
	CommerceCartUpdateItemQty(ctx context.Context, itemID string, deliveryCode string, qty int) (*dto.DecoratedCart, error)
	CommerceCartUpdateBillingAddress(ctx context.Context, addressForm *forms.AddressForm) (*dto.BillingAddressForm, error)
	CommerceCartUpdateSelectedPayment(ctx context.Context, gateway string, method string) (*dto.SelectedPaymentResult, error)
	CommerceCartApplyCouponCodeOrGiftCard(ctx context.Context, code string) (*dto.DecoratedCart, error)
	CommerceCartRemoveGiftCard(ctx context.Context, giftCardCode string) (*dto.DecoratedCart, error)
	CommerceCartRemoveCouponCode(ctx context.Context, couponCode string) (*dto.DecoratedCart, error)
	CommerceCartUpdateDeliveryAddresses(ctx context.Context, deliveryAdresses []*forms.DeliveryForm) ([]*dto.DeliveryAddressForm, error)
	CommerceCartUpdateDeliveryShippingOptions(ctx context.Context, shippingOptions []*dto.DeliveryShippingOption) (*dto.UpdateShippingOptionsResult, error)
	CommerceCartClean(ctx context.Context) (bool, error)
	CommerceCartUpdateAdditionalData(ctx context.Context, additionalData []*dto.KeyValue) (*dto.DecoratedCart, error)
	CommerceCartUpdateDeliveriesAdditionalData(ctx context.Context, data []*dto.DeliveryAdditionalData) (*dto.DecoratedCart, error)
	CommerceCheckoutStartPlaceOrder(ctx context.Context, returnURL string) (*dto1.StartPlaceOrderResult, error)
	CommerceCheckoutCancelPlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutClearPlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutRefreshPlaceOrder(ctx context.Context) (*dto1.PlaceOrderContext, error)
	CommerceCheckoutRefreshPlaceOrderBlocking(ctx context.Context) (*dto1.PlaceOrderContext, error)
}
type QueryResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceProduct(ctx context.Context, marketPlaceCode string, variantMarketPlaceCode *string) (graphqlproductdto.Product, error)
	CommerceProductSearch(ctx context.Context, searchRequest searchdto.CommerceSearchRequest) (*graphql1.SearchResultDTO, error)
	CommerceCustomerStatus(ctx context.Context) (*dtocustomer.CustomerStatusResult, error)
	CommerceCustomer(ctx context.Context) (*dtocustomer.CustomerResult, error)
	CommerceCartDecoratedCart(ctx context.Context) (*dto.DecoratedCart, error)
	CommerceCartValidator(ctx context.Context) (*validation.Result, error)
	CommerceCartQtyRestriction(ctx context.Context, marketplaceCode string, variantCode *string, deliveryCode string) (*validation.RestrictionResult, error)
	CommerceCheckoutActivePlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutCurrentContext(ctx context.Context) (*dto1.PlaceOrderContext, error)
	CommerceCategoryTree(ctx context.Context, activeCategoryCode string) (domain3.Tree, error)
	CommerceCategory(ctx context.Context, categoryCode string, categorySearchRequest *searchdto.CommerceSearchRequest) (*categorydto.CategorySearchResult, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Commerce_Cart_AdditionalData.customAttributes":
		if e.complexity.CommerceCartAdditionalData.CustomAttributes == nil {
			break
		}

		return e.complexity.CommerceCartAdditionalData.CustomAttributes(childComplexity), true

	case "Commerce_Cart_AdditionalData.reservedOrderID":
		if e.complexity.CommerceCartAdditionalData.ReservedOrderID == nil {
			break
		}

		return e.complexity.CommerceCartAdditionalData.ReservedOrderID(childComplexity), true

	case "Commerce_Cart_Address.additionalAddressLines":
		if e.complexity.CommerceCartAddress.AdditionalAddressLines == nil {
			break
		}

		return e.complexity.CommerceCartAddress.AdditionalAddressLines(childComplexity), true

	case "Commerce_Cart_Address.city":
		if e.complexity.CommerceCartAddress.City == nil {
			break
		}

		return e.complexity.CommerceCartAddress.City(childComplexity), true

	case "Commerce_Cart_Address.company":
		if e.complexity.CommerceCartAddress.Company == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Company(childComplexity), true

	case "Commerce_Cart_Address.country":
		if e.complexity.CommerceCartAddress.Country == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Country(childComplexity), true

	case "Commerce_Cart_Address.countryCode":
		if e.complexity.CommerceCartAddress.CountryCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.CountryCode(childComplexity), true

	case "Commerce_Cart_Address.email":
		if e.complexity.CommerceCartAddress.Email == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Email(childComplexity), true

	case "Commerce_Cart_Address.firstname":
		if e.complexity.CommerceCartAddress.Firstname == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Firstname(childComplexity), true

	case "Commerce_Cart_Address.lastname":
		if e.complexity.CommerceCartAddress.Lastname == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Lastname(childComplexity), true

	case "Commerce_Cart_Address.middleName":
		if e.complexity.CommerceCartAddress.MiddleName == nil {
			break
		}

		return e.complexity.CommerceCartAddress.MiddleName(childComplexity), true

	case "Commerce_Cart_Address.postCode":
		if e.complexity.CommerceCartAddress.PostCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.PostCode(childComplexity), true

	case "Commerce_Cart_Address.regionCode":
		if e.complexity.CommerceCartAddress.RegionCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.RegionCode(childComplexity), true

	case "Commerce_Cart_Address.salutation":
		if e.complexity.CommerceCartAddress.Salutation == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Salutation(childComplexity), true

	case "Commerce_Cart_Address.state":
		if e.complexity.CommerceCartAddress.State == nil {
			break
		}

		return e.complexity.CommerceCartAddress.State(childComplexity), true

	case "Commerce_Cart_Address.street":
		if e.complexity.CommerceCartAddress.Street == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Street(childComplexity), true

	case "Commerce_Cart_Address.streetNr":
		if e.complexity.CommerceCartAddress.StreetNr == nil {
			break
		}

		return e.complexity.CommerceCartAddress.StreetNr(childComplexity), true

	case "Commerce_Cart_Address.telephone":
		if e.complexity.CommerceCartAddress.Telephone == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Telephone(childComplexity), true

	case "Commerce_Cart_Address.title":
		if e.complexity.CommerceCartAddress.Title == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Title(childComplexity), true

	case "Commerce_Cart_Address.vat":
		if e.complexity.CommerceCartAddress.Vat == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Vat(childComplexity), true

	case "Commerce_Cart_AddressForm.addressLine1":
		if e.complexity.CommerceCartAddressForm.AddressLine1 == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.AddressLine1(childComplexity), true

	case "Commerce_Cart_AddressForm.addressLine2":
		if e.complexity.CommerceCartAddressForm.AddressLine2 == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.AddressLine2(childComplexity), true

	case "Commerce_Cart_AddressForm.city":
		if e.complexity.CommerceCartAddressForm.City == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.City(childComplexity), true

	case "Commerce_Cart_AddressForm.company":
		if e.complexity.CommerceCartAddressForm.Company == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Company(childComplexity), true

	case "Commerce_Cart_AddressForm.country":
		if e.complexity.CommerceCartAddressForm.Country == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Country(childComplexity), true

	case "Commerce_Cart_AddressForm.countryCode":
		if e.complexity.CommerceCartAddressForm.CountryCode == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.CountryCode(childComplexity), true

	case "Commerce_Cart_AddressForm.email":
		if e.complexity.CommerceCartAddressForm.Email == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Email(childComplexity), true

	case "Commerce_Cart_AddressForm.firstname":
		if e.complexity.CommerceCartAddressForm.Firstname == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Firstname(childComplexity), true

	case "Commerce_Cart_AddressForm.lastname":
		if e.complexity.CommerceCartAddressForm.Lastname == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Lastname(childComplexity), true

	case "Commerce_Cart_AddressForm.middleName":
		if e.complexity.CommerceCartAddressForm.MiddleName == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.MiddleName(childComplexity), true

	case "Commerce_Cart_AddressForm.phoneNumber":
		if e.complexity.CommerceCartAddressForm.PhoneNumber == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.PhoneNumber(childComplexity), true

	case "Commerce_Cart_AddressForm.postCode":
		if e.complexity.CommerceCartAddressForm.PostCode == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.PostCode(childComplexity), true

	case "Commerce_Cart_AddressForm.regionCode":
		if e.complexity.CommerceCartAddressForm.RegionCode == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.RegionCode(childComplexity), true

	case "Commerce_Cart_AddressForm.salutation":
		if e.complexity.CommerceCartAddressForm.Salutation == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Salutation(childComplexity), true

	case "Commerce_Cart_AddressForm.state":
		if e.complexity.CommerceCartAddressForm.State == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.State(childComplexity), true

	case "Commerce_Cart_AddressForm.street":
		if e.complexity.CommerceCartAddressForm.Street == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Street(childComplexity), true

	case "Commerce_Cart_AddressForm.streetNr":
		if e.complexity.CommerceCartAddressForm.StreetNr == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.StreetNr(childComplexity), true

	case "Commerce_Cart_AddressForm.title":
		if e.complexity.CommerceCartAddressForm.Title == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Title(childComplexity), true

	case "Commerce_Cart_AddressForm.vat":
		if e.complexity.CommerceCartAddressForm.Vat == nil {
			break
		}

		return e.complexity.CommerceCartAddressForm.Vat(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.applied":
		if e.complexity.CommerceCartAppliedDiscount.Applied == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Applied(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.campaignCode":
		if e.complexity.CommerceCartAppliedDiscount.CampaignCode == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.CampaignCode(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.couponCode":
		if e.complexity.CommerceCartAppliedDiscount.CouponCode == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.CouponCode(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.isItemRelated":
		if e.complexity.CommerceCartAppliedDiscount.IsItemRelated == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.IsItemRelated(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.label":
		if e.complexity.CommerceCartAppliedDiscount.Label == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Label(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.sortOrder":
		if e.complexity.CommerceCartAppliedDiscount.SortOrder == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.SortOrder(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.type":
		if e.complexity.CommerceCartAppliedDiscount.Type == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Type(childComplexity), true

	case "Commerce_Cart_AppliedDiscounts.byCampaignCode":
		if e.complexity.CommerceCartAppliedDiscounts.ByCampaignCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartAppliedDiscounts.ByCampaignCode(childComplexity, args["campaignCode"].(string)), true

	case "Commerce_Cart_AppliedDiscounts.byType":
		if e.complexity.CommerceCartAppliedDiscounts.ByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_AppliedDiscounts_byType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartAppliedDiscounts.ByType(childComplexity, args["filterType"].(string)), true

	case "Commerce_Cart_AppliedDiscounts.items":
		if e.complexity.CommerceCartAppliedDiscounts.Items == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscounts.Items(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.applied":
		if e.complexity.CommerceCartAppliedGiftCard.Applied == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Applied(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.code":
		if e.complexity.CommerceCartAppliedGiftCard.Code == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Code(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.hasRemaining":
		if e.complexity.CommerceCartAppliedGiftCard.HasRemaining == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.HasRemaining(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.remaining":
		if e.complexity.CommerceCartAppliedGiftCard.Remaining == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Remaining(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.formData":
		if e.complexity.CommerceCartBillingAddressForm.FormData == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.FormData(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.processed":
		if e.complexity.CommerceCartBillingAddressForm.Processed == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.Processed(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.validationInfo":
		if e.complexity.CommerceCartBillingAddressForm.ValidationInfo == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.ValidationInfo(childComplexity), true

	case "Commerce_Cart_Cart.additionalData":
		if e.complexity.CommerceCartCart.AdditionalData == nil {
			break
		}

		return e.complexity.CommerceCartCart.AdditionalData(childComplexity), true

	case "Commerce_Cart_Cart.allShippingTitles":
		if e.complexity.CommerceCartCart.AllShippingTitles == nil {
			break
		}

		return e.complexity.CommerceCartCart.AllShippingTitles(childComplexity), true

	case "Commerce_Cart_Cart.appliedCouponCodes":
		if e.complexity.CommerceCartCart.AppliedCouponCodes == nil {
			break
		}

		return e.complexity.CommerceCartCart.AppliedCouponCodes(childComplexity), true

	case "Commerce_Cart_Cart.appliedGiftCards":
		if e.complexity.CommerceCartCart.AppliedGiftCards == nil {
			break
		}

		return e.complexity.CommerceCartCart.AppliedGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.authenticatedUserID":
		if e.complexity.CommerceCartCart.AuthenticatedUserID == nil {
			break
		}

		return e.complexity.CommerceCartCart.AuthenticatedUserID(childComplexity), true

	case "Commerce_Cart_Cart.belongsToAuthenticatedUser":
		if e.complexity.CommerceCartCart.BelongsToAuthenticatedUser == nil {
			break
		}

		return e.complexity.CommerceCartCart.BelongsToAuthenticatedUser(childComplexity), true

	case "Commerce_Cart_Cart.billingAddress":
		if e.complexity.CommerceCartCart.BillingAddress == nil {
			break
		}

		return e.complexity.CommerceCartCart.BillingAddress(childComplexity), true

	case "Commerce_Cart_Cart.defaultCurrency":
		if e.complexity.CommerceCartCart.DefaultCurrency == nil {
			break
		}

		return e.complexity.CommerceCartCart.DefaultCurrency(childComplexity), true

	case "Commerce_Cart_Cart.deliveries":
		if e.complexity.CommerceCartCart.Deliveries == nil {
			break
		}

		return e.complexity.CommerceCartCart.Deliveries(childComplexity), true

	case "Commerce_Cart_Cart.entityID":
		if e.complexity.CommerceCartCart.EntityID == nil {
			break
		}

		return e.complexity.CommerceCartCart.EntityID(childComplexity), true

	case "Commerce_Cart_Cart.getByExternalReference":
		if e.complexity.CommerceCartCart.GetByExternalReference == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getByExternalReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetByExternalReference(childComplexity, args["ref"].(string)), true

	case "Commerce_Cart_Cart.getByItemID":
		if e.complexity.CommerceCartCart.GetByItemID == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getByItemID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetByItemID(childComplexity, args["itemID"].(string)), true

	case "Commerce_Cart_Cart.getCartTeaser":
		if e.complexity.CommerceCartCart.GetCartTeaser == nil {
			break
		}

		return e.complexity.CommerceCartCart.GetCartTeaser(childComplexity), true

	case "Commerce_Cart_Cart.getDeliveryByCode":
		if e.complexity.CommerceCartCart.GetDeliveryByCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetDeliveryByCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_Cart.getDeliveryByItemID":
		if e.complexity.CommerceCartCart.GetDeliveryByItemID == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getDeliveryByItemID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetDeliveryByItemID(childComplexity, args["itemID"].(string)), true

	case "Commerce_Cart_Cart.getDeliveryCodes":
		if e.complexity.CommerceCartCart.GetDeliveryCodes == nil {
			break
		}

		return e.complexity.CommerceCartCart.GetDeliveryCodes(childComplexity), true

	case "Commerce_Cart_Cart.getMainShippingEMail":
		if e.complexity.CommerceCartCart.GetMainShippingEMail == nil {
			break
		}

		return e.complexity.CommerceCartCart.GetMainShippingEMail(childComplexity), true

	case "Commerce_Cart_Cart.getPaymentReference":
		if e.complexity.CommerceCartCart.GetPaymentReference == nil {
			break
		}

		return e.complexity.CommerceCartCart.GetPaymentReference(childComplexity), true

	case "Commerce_Cart_Cart.getTotalItemsByType":
		if e.complexity.CommerceCartCart.GetTotalItemsByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getTotalItemsByType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetTotalItemsByType(childComplexity, args["typeCode"].(string)), true

	case "Commerce_Cart_Cart.getTotalQty":
		if e.complexity.CommerceCartCart.GetTotalQty == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getTotalQty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.GetTotalQty(childComplexity, args["marketPlaceCode"].(string), args["variantCode"].(string)), true

	case "Commerce_Cart_Cart.getVoucherSavings":
		if e.complexity.CommerceCartCart.GetVoucherSavings == nil {
			break
		}

		return e.complexity.CommerceCartCart.GetVoucherSavings(childComplexity), true

	case "Commerce_Cart_Cart.grandTotal":
		if e.complexity.CommerceCartCart.GrandTotal == nil {
			break
		}

		return e.complexity.CommerceCartCart.GrandTotal(childComplexity), true

	case "Commerce_Cart_Cart.grandTotalCharges":
		if e.complexity.CommerceCartCart.GrandTotalCharges == nil {
			break
		}

		return e.complexity.CommerceCartCart.GrandTotalCharges(childComplexity), true

	case "Commerce_Cart_Cart.hasAppliedCouponCode":
		if e.complexity.CommerceCartCart.HasAppliedCouponCode == nil {
			break
		}

		return e.complexity.CommerceCartCart.HasAppliedCouponCode(childComplexity), true

	case "Commerce_Cart_Cart.hasAppliedGiftCards":
		if e.complexity.CommerceCartCart.HasAppliedGiftCards == nil {
			break
		}

		return e.complexity.CommerceCartCart.HasAppliedGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.hasDeliveryForCode":
		if e.complexity.CommerceCartCart.HasDeliveryForCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_hasDeliveryForCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCart.HasDeliveryForCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_Cart.hasRemainingGiftCards":
		if e.complexity.CommerceCartCart.HasRemainingGiftCards == nil {
			break
		}

		return e.complexity.CommerceCartCart.HasRemainingGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.hasShippingCosts":
		if e.complexity.CommerceCartCart.HasShippingCosts == nil {
			break
		}

		return e.complexity.CommerceCartCart.HasShippingCosts(childComplexity), true

	case "Commerce_Cart_Cart.id":
		if e.complexity.CommerceCartCart.ID == nil {
			break
		}

		return e.complexity.CommerceCartCart.ID(childComplexity), true

	case "Commerce_Cart_Cart.isEmpty":
		if e.complexity.CommerceCartCart.IsEmpty == nil {
			break
		}

		return e.complexity.CommerceCartCart.IsEmpty(childComplexity), true

	case "Commerce_Cart_Cart.isPaymentSelected":
		if e.complexity.CommerceCartCart.IsPaymentSelected == nil {
			break
		}

		return e.complexity.CommerceCartCart.IsPaymentSelected(childComplexity), true

	case "Commerce_Cart_Cart.itemCount":
		if e.complexity.CommerceCartCart.ItemCount == nil {
			break
		}

		return e.complexity.CommerceCartCart.ItemCount(childComplexity), true

	case "Commerce_Cart_Cart.paymentSelection":
		if e.complexity.CommerceCartCart.PaymentSelection == nil {
			break
		}

		return e.complexity.CommerceCartCart.PaymentSelection(childComplexity), true

	case "Commerce_Cart_Cart.productCount":
		if e.complexity.CommerceCartCart.ProductCount == nil {
			break
		}

		return e.complexity.CommerceCartCart.ProductCount(childComplexity), true

	case "Commerce_Cart_Cart.purchaser":
		if e.complexity.CommerceCartCart.Purchaser == nil {
			break
		}

		return e.complexity.CommerceCartCart.Purchaser(childComplexity), true

	case "Commerce_Cart_Cart.subTotalGross":
		if e.complexity.CommerceCartCart.SubTotalGross == nil {
			break
		}

		return e.complexity.CommerceCartCart.SubTotalGross(childComplexity), true

	case "Commerce_Cart_Cart.subTotalGrossWithDiscounts":
		if e.complexity.CommerceCartCart.SubTotalGrossWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartCart.SubTotalGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.subTotalNet":
		if e.complexity.CommerceCartCart.SubTotalNet == nil {
			break
		}

		return e.complexity.CommerceCartCart.SubTotalNet(childComplexity), true

	case "Commerce_Cart_Cart.subTotalNetWithDiscounts":
		if e.complexity.CommerceCartCart.SubTotalNetWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartCart.SubTotalNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.sumItemRelatedDiscountAmount":
		if e.complexity.CommerceCartCart.SumItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.sumNonItemRelatedDiscountAmount":
		if e.complexity.CommerceCartCart.SumNonItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumNonItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.sumShippingGross":
		if e.complexity.CommerceCartCart.SumShippingGross == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumShippingGross(childComplexity), true

	case "Commerce_Cart_Cart.sumShippingGrossWithDiscounts":
		if e.complexity.CommerceCartCart.SumShippingGrossWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumShippingGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.sumShippingNet":
		if e.complexity.CommerceCartCart.SumShippingNet == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumShippingNet(childComplexity), true

	case "Commerce_Cart_Cart.sumShippingNetWithDiscounts":
		if e.complexity.CommerceCartCart.SumShippingNetWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumShippingNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.sumTotalDiscountAmount":
		if e.complexity.CommerceCartCart.SumTotalDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumTotalDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.sumTotalTaxAmount":
		if e.complexity.CommerceCartCart.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.CommerceCartCart.SumTotalTaxAmount(childComplexity), true

	case "Commerce_Cart_Cart.totalitems":
		if e.complexity.CommerceCartCart.Totalitems == nil {
			break
		}

		return e.complexity.CommerceCartCart.Totalitems(childComplexity), true

	case "Commerce_Cart_CouponCode.code":
		if e.complexity.CommerceCartCouponCode.Code == nil {
			break
		}

		return e.complexity.CommerceCartCouponCode.Code(childComplexity), true

	case "Commerce_Cart_CustomAttributes.get":
		if e.complexity.CommerceCartCustomAttributes.Get == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_CustomAttributes_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartCustomAttributes.Get(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_DecoratedCart.cart":
		if e.complexity.CommerceCartDecoratedCart.Cart == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedCart.Cart(childComplexity), true

	case "Commerce_Cart_DecoratedCart.cartSummary":
		if e.complexity.CommerceCartDecoratedCart.CartSummary == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedCart.CartSummary(childComplexity), true

	case "Commerce_Cart_DecoratedCart.decoratedDeliveries":
		if e.complexity.CommerceCartDecoratedCart.DecoratedDeliveries == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedCart.DecoratedDeliveries(childComplexity), true

	case "Commerce_Cart_DecoratedCart.getAllPaymentRequiredItems":
		if e.complexity.CommerceCartDecoratedCart.GetAllPaymentRequiredItems == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedCart.GetAllPaymentRequiredItems(childComplexity), true

	case "Commerce_Cart_DecoratedCart.getDecoratedDeliveryByCode":
		if e.complexity.CommerceCartDecoratedCart.GetDecoratedDeliveryByCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartDecoratedCart.GetDecoratedDeliveryByCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_DecoratedDelivery.decoratedItems":
		if e.complexity.CommerceCartDecoratedDelivery.DecoratedItems == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedDelivery.DecoratedItems(childComplexity), true

	case "Commerce_Cart_DecoratedDelivery.delivery":
		if e.complexity.CommerceCartDecoratedDelivery.Delivery == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedDelivery.Delivery(childComplexity), true

	case "Commerce_Cart_DecoratedItem.item":
		if e.complexity.CommerceCartDecoratedItem.Item == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedItem.Item(childComplexity), true

	case "Commerce_Cart_DecoratedItem.product":
		if e.complexity.CommerceCartDecoratedItem.Product == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedItem.Product(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.cartSplit":
		if e.complexity.CommerceCartDefaultPaymentSelection.CartSplit == nil {
			break
		}

		return e.complexity.CommerceCartDefaultPaymentSelection.CartSplit(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.gateway":
		if e.complexity.CommerceCartDefaultPaymentSelection.Gateway == nil {
			break
		}

		return e.complexity.CommerceCartDefaultPaymentSelection.Gateway(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.totalValue":
		if e.complexity.CommerceCartDefaultPaymentSelection.TotalValue == nil {
			break
		}

		return e.complexity.CommerceCartDefaultPaymentSelection.TotalValue(childComplexity), true

	case "Commerce_Cart_Delivery.cartitems":
		if e.complexity.CommerceCartDelivery.Cartitems == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.Cartitems(childComplexity), true

	case "Commerce_Cart_Delivery.deliveryInfo":
		if e.complexity.CommerceCartDelivery.DeliveryInfo == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.DeliveryInfo(childComplexity), true

	case "Commerce_Cart_Delivery.grandTotal":
		if e.complexity.CommerceCartDelivery.GrandTotal == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.GrandTotal(childComplexity), true

	case "Commerce_Cart_Delivery.hasItems":
		if e.complexity.CommerceCartDelivery.HasItems == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.HasItems(childComplexity), true

	case "Commerce_Cart_Delivery.shippingItem":
		if e.complexity.CommerceCartDelivery.ShippingItem == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.ShippingItem(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalGross":
		if e.complexity.CommerceCartDelivery.SubTotalGross == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalGross(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalGrossWithDiscounts":
		if e.complexity.CommerceCartDelivery.SubTotalGrossWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalNet":
		if e.complexity.CommerceCartDelivery.SubTotalNet == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalNet(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalNetWithDiscounts":
		if e.complexity.CommerceCartDelivery.SubTotalNetWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Delivery.sumItemRelatedDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Delivery.sumNonItemRelatedDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumNonItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumNonItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Delivery.sumTotalDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumTotalDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumTotalDiscountAmount(childComplexity), true

	case "Commerce_Cart_Delivery.sumTotalTaxAmount":
		if e.complexity.CommerceCartDelivery.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumTotalTaxAmount(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.carrier":
		if e.complexity.CommerceCartDeliveryAddressForm.Carrier == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.Carrier(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.deliveryCode":
		if e.complexity.CommerceCartDeliveryAddressForm.DeliveryCode == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.DeliveryCode(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.desiredTime":
		if e.complexity.CommerceCartDeliveryAddressForm.DesiredTime == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.DesiredTime(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.formData":
		if e.complexity.CommerceCartDeliveryAddressForm.FormData == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.FormData(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.method":
		if e.complexity.CommerceCartDeliveryAddressForm.Method == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.Method(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.processed":
		if e.complexity.CommerceCartDeliveryAddressForm.Processed == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.Processed(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.useBillingAddress":
		if e.complexity.CommerceCartDeliveryAddressForm.UseBillingAddress == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.UseBillingAddress(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.validationInfo":
		if e.complexity.CommerceCartDeliveryAddressForm.ValidationInfo == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryAddressForm.ValidationInfo(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.additionalData":
		if e.complexity.CommerceCartDeliveryInfo.AdditionalData == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.AdditionalData(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.carrier":
		if e.complexity.CommerceCartDeliveryInfo.Carrier == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Carrier(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.code":
		if e.complexity.CommerceCartDeliveryInfo.Code == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Code(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.deliveryLocation":
		if e.complexity.CommerceCartDeliveryInfo.DeliveryLocation == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.DeliveryLocation(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.desiredTime":
		if e.complexity.CommerceCartDeliveryInfo.DesiredTime == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.DesiredTime(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.method":
		if e.complexity.CommerceCartDeliveryInfo.Method == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Method(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.workflow":
		if e.complexity.CommerceCartDeliveryInfo.Workflow == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Workflow(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.address":
		if e.complexity.CommerceCartDeliveryLocation.Address == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Address(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.code":
		if e.complexity.CommerceCartDeliveryLocation.Code == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Code(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.type":
		if e.complexity.CommerceCartDeliveryLocation.Type == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Type(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.useBillingAddress":
		if e.complexity.CommerceCartDeliveryLocation.UseBillingAddress == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.UseBillingAddress(childComplexity), true

	case "Commerce_Cart_ExistingCustomerData.id":
		if e.complexity.CommerceCartExistingCustomerData.ID == nil {
			break
		}

		return e.complexity.CommerceCartExistingCustomerData.ID(childComplexity), true

	case "Commerce_Cart_Form_Error.defaultLabel":
		if e.complexity.CommerceCartFormError.DefaultLabel == nil {
			break
		}

		return e.complexity.CommerceCartFormError.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_Error.messageKey":
		if e.complexity.CommerceCartFormError.MessageKey == nil {
			break
		}

		return e.complexity.CommerceCartFormError.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_FieldError.defaultLabel":
		if e.complexity.CommerceCartFormFieldError.DefaultLabel == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_FieldError.fieldName":
		if e.complexity.CommerceCartFormFieldError.FieldName == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.FieldName(childComplexity), true

	case "Commerce_Cart_Form_FieldError.messageKey":
		if e.complexity.CommerceCartFormFieldError.MessageKey == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.fieldErrors":
		if e.complexity.CommerceCartFormValidationInfo.FieldErrors == nil {
			break
		}

		return e.complexity.CommerceCartFormValidationInfo.FieldErrors(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.generalErrors":
		if e.complexity.CommerceCartFormValidationInfo.GeneralErrors == nil {
			break
		}

		return e.complexity.CommerceCartFormValidationInfo.GeneralErrors(childComplexity), true

	case "Commerce_Cart_Item.additionalDataKeys":
		if e.complexity.CommerceCartItem.AdditionalDataKeys == nil {
			break
		}

		return e.complexity.CommerceCartItem.AdditionalDataKeys(childComplexity), true

	case "Commerce_Cart_Item.additionalDataValues":
		if e.complexity.CommerceCartItem.AdditionalDataValues == nil {
			break
		}

		return e.complexity.CommerceCartItem.AdditionalDataValues(childComplexity), true

	case "Commerce_Cart_Item.appliedDiscounts":
		if e.complexity.CommerceCartItem.AppliedDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartItem.AppliedDiscounts(childComplexity), true

	case "Commerce_Cart_Item.externalReference":
		if e.complexity.CommerceCartItem.ExternalReference == nil {
			break
		}

		return e.complexity.CommerceCartItem.ExternalReference(childComplexity), true

	case "Commerce_Cart_Item.getAdditionalData":
		if e.complexity.CommerceCartItem.GetAdditionalData == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Item_getAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartItem.GetAdditionalData(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_Item.hasAdditionalDataKey":
		if e.complexity.CommerceCartItem.HasAdditionalDataKey == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Item_hasAdditionalDataKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartItem.HasAdditionalDataKey(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_Item.id":
		if e.complexity.CommerceCartItem.ID == nil {
			break
		}

		return e.complexity.CommerceCartItem.ID(childComplexity), true

	case "Commerce_Cart_Item.marketplaceCode":
		if e.complexity.CommerceCartItem.MarketplaceCode == nil {
			break
		}

		return e.complexity.CommerceCartItem.MarketplaceCode(childComplexity), true

	case "Commerce_Cart_Item.productName":
		if e.complexity.CommerceCartItem.ProductName == nil {
			break
		}

		return e.complexity.CommerceCartItem.ProductName(childComplexity), true

	case "Commerce_Cart_Item.qty":
		if e.complexity.CommerceCartItem.Qty == nil {
			break
		}

		return e.complexity.CommerceCartItem.Qty(childComplexity), true

	case "Commerce_Cart_Item.rowPriceGross":
		if e.complexity.CommerceCartItem.RowPriceGross == nil {
			break
		}

		return e.complexity.CommerceCartItem.RowPriceGross(childComplexity), true

	case "Commerce_Cart_Item.rowPriceNet":
		if e.complexity.CommerceCartItem.RowPriceNet == nil {
			break
		}

		return e.complexity.CommerceCartItem.RowPriceNet(childComplexity), true

	case "Commerce_Cart_Item.singlePriceGross":
		if e.complexity.CommerceCartItem.SinglePriceGross == nil {
			break
		}

		return e.complexity.CommerceCartItem.SinglePriceGross(childComplexity), true

	case "Commerce_Cart_Item.singlePriceNet":
		if e.complexity.CommerceCartItem.SinglePriceNet == nil {
			break
		}

		return e.complexity.CommerceCartItem.SinglePriceNet(childComplexity), true

	case "Commerce_Cart_Item.sourceID":
		if e.complexity.CommerceCartItem.SourceID == nil {
			break
		}

		return e.complexity.CommerceCartItem.SourceID(childComplexity), true

	case "Commerce_Cart_Item.variantMarketPlaceCode":
		if e.complexity.CommerceCartItem.VariantMarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceCartItem.VariantMarketPlaceCode(childComplexity), true

	case "Commerce_Cart_ItemValidationError.errorMessageKey":
		if e.complexity.CommerceCartItemValidationError.ErrorMessageKey == nil {
			break
		}

		return e.complexity.CommerceCartItemValidationError.ErrorMessageKey(childComplexity), true

	case "Commerce_Cart_ItemValidationError.itemID":
		if e.complexity.CommerceCartItemValidationError.ItemID == nil {
			break
		}

		return e.complexity.CommerceCartItemValidationError.ItemID(childComplexity), true

	case "Commerce_Cart_KeyValue.key":
		if e.complexity.CommerceCartKeyValue.Key == nil {
			break
		}

		return e.complexity.CommerceCartKeyValue.Key(childComplexity), true

	case "Commerce_Cart_KeyValue.value":
		if e.complexity.CommerceCartKeyValue.Value == nil {
			break
		}

		return e.complexity.CommerceCartKeyValue.Value(childComplexity), true

	case "Commerce_Cart_PaymentSelection_Split.charge":
		if e.complexity.CommerceCartPaymentSelectionSplit.Charge == nil {
			break
		}

		return e.complexity.CommerceCartPaymentSelectionSplit.Charge(childComplexity), true

	case "Commerce_Cart_PaymentSelection_Split.qualifier":
		if e.complexity.CommerceCartPaymentSelectionSplit.Qualifier == nil {
			break
		}

		return e.complexity.CommerceCartPaymentSelectionSplit.Qualifier(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.reference":
		if e.complexity.CommerceCartPaymentSelectionSplitQualifier.ChargeReference == nil {
			break
		}

		return e.complexity.CommerceCartPaymentSelectionSplitQualifier.ChargeReference(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.type":
		if e.complexity.CommerceCartPaymentSelectionSplitQualifier.ChargeType == nil {
			break
		}

		return e.complexity.CommerceCartPaymentSelectionSplitQualifier.ChargeType(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.method":
		if e.complexity.CommerceCartPaymentSelectionSplitQualifier.Method == nil {
			break
		}

		return e.complexity.CommerceCartPaymentSelectionSplitQualifier.Method(childComplexity), true

	case "Commerce_Cart_Person.address":
		if e.complexity.CommerceCartPerson.Address == nil {
			break
		}

		return e.complexity.CommerceCartPerson.Address(childComplexity), true

	case "Commerce_Cart_Person.existingCustomerData":
		if e.complexity.CommerceCartPerson.ExistingCustomerData == nil {
			break
		}

		return e.complexity.CommerceCartPerson.ExistingCustomerData(childComplexity), true

	case "Commerce_Cart_Person.personalDetails":
		if e.complexity.CommerceCartPerson.PersonalDetails == nil {
			break
		}

		return e.complexity.CommerceCartPerson.PersonalDetails(childComplexity), true

	case "Commerce_Cart_PersonalDetails.dateOfBirth":
		if e.complexity.CommerceCartPersonalDetails.DateOfBirth == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.DateOfBirth(childComplexity), true

	case "Commerce_Cart_PersonalDetails.nationality":
		if e.complexity.CommerceCartPersonalDetails.Nationality == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.Nationality(childComplexity), true

	case "Commerce_Cart_PersonalDetails.passportCountry":
		if e.complexity.CommerceCartPersonalDetails.PassportCountry == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.PassportCountry(childComplexity), true

	case "Commerce_Cart_PersonalDetails.passportNumber":
		if e.complexity.CommerceCartPersonalDetails.PassportNumber == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.PassportNumber(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.deliveryCode":
		if e.complexity.CommerceCartPlacedOrderInfo.DeliveryCode == nil {
			break
		}

		return e.complexity.CommerceCartPlacedOrderInfo.DeliveryCode(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.orderNumber":
		if e.complexity.CommerceCartPlacedOrderInfo.OrderNumber == nil {
			break
		}

		return e.complexity.CommerceCartPlacedOrderInfo.OrderNumber(childComplexity), true

	case "Commerce_Cart_PricedCartItem.amount":
		if e.complexity.CommerceCartPricedCartItem.Amount == nil {
			break
		}

		return e.complexity.CommerceCartPricedCartItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedCartItem.itemID":
		if e.complexity.CommerceCartPricedCartItem.ItemID == nil {
			break
		}

		return e.complexity.CommerceCartPricedCartItem.ItemID(childComplexity), true

	case "Commerce_Cart_PricedItems.cartItems":
		if e.complexity.CommerceCartPricedItems.CartItems == nil {
			break
		}

		return e.complexity.CommerceCartPricedItems.CartItems(childComplexity), true

	case "Commerce_Cart_PricedItems.shippingItems":
		if e.complexity.CommerceCartPricedItems.ShippingItems == nil {
			break
		}

		return e.complexity.CommerceCartPricedItems.ShippingItems(childComplexity), true

	case "Commerce_Cart_PricedItems.totalItems":
		if e.complexity.CommerceCartPricedItems.TotalItems == nil {
			break
		}

		return e.complexity.CommerceCartPricedItems.TotalItems(childComplexity), true

	case "Commerce_Cart_PricedShippingItem.amount":
		if e.complexity.CommerceCartPricedShippingItem.Amount == nil {
			break
		}

		return e.complexity.CommerceCartPricedShippingItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedShippingItem.deliveryInfoCode":
		if e.complexity.CommerceCartPricedShippingItem.DeliveryInfoCode == nil {
			break
		}

		return e.complexity.CommerceCartPricedShippingItem.DeliveryInfoCode(childComplexity), true

	case "Commerce_Cart_PricedTotalItem.amount":
		if e.complexity.CommerceCartPricedTotalItem.Amount == nil {
			break
		}

		return e.complexity.CommerceCartPricedTotalItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedTotalItem.code":
		if e.complexity.CommerceCartPricedTotalItem.Code == nil {
			break
		}

		return e.complexity.CommerceCartPricedTotalItem.Code(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.isRestricted":
		if e.complexity.CommerceCartQtyRestrictionResult.IsRestricted == nil {
			break
		}

		return e.complexity.CommerceCartQtyRestrictionResult.IsRestricted(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.maxAllowed":
		if e.complexity.CommerceCartQtyRestrictionResult.MaxAllowed == nil {
			break
		}

		return e.complexity.CommerceCartQtyRestrictionResult.MaxAllowed(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.remainingDifference":
		if e.complexity.CommerceCartQtyRestrictionResult.RemainingDifference == nil {
			break
		}

		return e.complexity.CommerceCartQtyRestrictionResult.RemainingDifference(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.restrictorName":
		if e.complexity.CommerceCartQtyRestrictionResult.RestrictorName == nil {
			break
		}

		return e.complexity.CommerceCartQtyRestrictionResult.RestrictorName(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.processed":
		if e.complexity.CommerceCartSelectedPaymentResult.Processed == nil {
			break
		}

		return e.complexity.CommerceCartSelectedPaymentResult.Processed(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.validationInfo":
		if e.complexity.CommerceCartSelectedPaymentResult.ValidationInfo == nil {
			break
		}

		return e.complexity.CommerceCartSelectedPaymentResult.ValidationInfo(childComplexity), true

	case "Commerce_Cart_ShippingItem.appliedDiscounts":
		if e.complexity.CommerceCartShippingItem.AppliedDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.AppliedDiscounts(childComplexity), true

	case "Commerce_Cart_ShippingItem.priceGross":
		if e.complexity.CommerceCartShippingItem.PriceGross == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.PriceGross(childComplexity), true

	case "Commerce_Cart_ShippingItem.priceNet":
		if e.complexity.CommerceCartShippingItem.PriceNet == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.PriceNet(childComplexity), true

	case "Commerce_Cart_ShippingItem.tax":
		if e.complexity.CommerceCartShippingItem.Tax == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.Tax(childComplexity), true

	case "Commerce_Cart_ShippingItem.taxAmount":
		if e.complexity.CommerceCartShippingItem.TaxAmount == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.TaxAmount(childComplexity), true

	case "Commerce_Cart_ShippingItem.title":
		if e.complexity.CommerceCartShippingItem.Title == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.Title(childComplexity), true

	case "Commerce_Cart_ShippingItem.totalWithDiscountInclTax":
		if e.complexity.CommerceCartShippingItem.TotalWithDiscountInclTax == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.TotalWithDiscountInclTax(childComplexity), true

	case "Commerce_Cart_Summary.discounts":
		if e.complexity.CommerceCartSummary.Discounts == nil {
			break
		}

		return e.complexity.CommerceCartSummary.Discounts(childComplexity), true

	case "Commerce_Cart_Summary.hasAppliedDiscounts":
		if e.complexity.CommerceCartSummary.HasAppliedDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartSummary.HasAppliedDiscounts(childComplexity), true

	case "Commerce_Cart_Summary.sumAppliedDiscounts":
		if e.complexity.CommerceCartSummary.SumAppliedDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartSummary.SumAppliedDiscounts(childComplexity), true

	case "Commerce_Cart_Summary.sumAppliedGiftCards":
		if e.complexity.CommerceCartSummary.SumAppliedGiftCards == nil {
			break
		}

		return e.complexity.CommerceCartSummary.SumAppliedGiftCards(childComplexity), true

	case "Commerce_Cart_Summary.sumGrandTotalWithGiftCards":
		if e.complexity.CommerceCartSummary.SumGrandTotalWithGiftCards == nil {
			break
		}

		return e.complexity.CommerceCartSummary.SumGrandTotalWithGiftCards(childComplexity), true

	case "Commerce_Cart_Summary.sumPaymentSelectionCartSplitValueAmountByMethods":
		if e.complexity.CommerceCartSummary.SumPaymentSelectionCartSplitValueAmountByMethods == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartSummary.SumPaymentSelectionCartSplitValueAmountByMethods(childComplexity, args["methods"].([]string)), true

	case "Commerce_Cart_Summary.sumTaxes":
		if e.complexity.CommerceCartSummary.SumTaxes == nil {
			break
		}

		return e.complexity.CommerceCartSummary.SumTaxes(childComplexity), true

	case "Commerce_Cart_Summary.sumTotalDiscountWithGiftCardsAmount":
		if e.complexity.CommerceCartSummary.SumTotalDiscountWithGiftCardsAmount == nil {
			break
		}

		return e.complexity.CommerceCartSummary.SumTotalDiscountWithGiftCardsAmount(childComplexity), true

	case "Commerce_Cart_Tax.amount":
		if e.complexity.CommerceCartTax.Amount == nil {
			break
		}

		return e.complexity.CommerceCartTax.Amount(childComplexity), true

	case "Commerce_Cart_Tax.rate":
		if e.complexity.CommerceCartTax.Rate == nil {
			break
		}

		return e.complexity.CommerceCartTax.Rate(childComplexity), true

	case "Commerce_Cart_Tax.type":
		if e.complexity.CommerceCartTax.Type == nil {
			break
		}

		return e.complexity.CommerceCartTax.Type(childComplexity), true

	case "Commerce_Cart_Taxes.getByType":
		if e.complexity.CommerceCartTaxes.GetByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Taxes_getByType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartTaxes.GetByType(childComplexity, args["taxType"].(string)), true

	case "Commerce_Cart_Taxes.items":
		if e.complexity.CommerceCartTaxes.Items == nil {
			break
		}

		return e.complexity.CommerceCartTaxes.Items(childComplexity), true

	case "Commerce_Cart_Teaser.DeliveryCodes":
		if e.complexity.CommerceCartTeaser.DeliveryCodes == nil {
			break
		}

		return e.complexity.CommerceCartTeaser.DeliveryCodes(childComplexity), true

	case "Commerce_Cart_Teaser.ItemCount":
		if e.complexity.CommerceCartTeaser.ItemCount == nil {
			break
		}

		return e.complexity.CommerceCartTeaser.ItemCount(childComplexity), true

	case "Commerce_Cart_Teaser.productCount":
		if e.complexity.CommerceCartTeaser.ProductCount == nil {
			break
		}

		return e.complexity.CommerceCartTeaser.ProductCount(childComplexity), true

	case "Commerce_Cart_Totalitem.code":
		if e.complexity.CommerceCartTotalitem.Code == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Code(childComplexity), true

	case "Commerce_Cart_Totalitem.price":
		if e.complexity.CommerceCartTotalitem.Price == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Price(childComplexity), true

	case "Commerce_Cart_Totalitem.title":
		if e.complexity.CommerceCartTotalitem.Title == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Title(childComplexity), true

	case "Commerce_Cart_Totalitem.type":
		if e.complexity.CommerceCartTotalitem.Type == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Type(childComplexity), true

	case "Commerce_Cart_UpdateDeliveryShippingOptions_Result.processed":
		if e.complexity.CommerceCartUpdateDeliveryShippingOptionsResult.Processed == nil {
			break
		}

		return e.complexity.CommerceCartUpdateDeliveryShippingOptionsResult.Processed(childComplexity), true

	case "Commerce_Cart_ValidationResult.commonErrorMessageKey":
		if e.complexity.CommerceCartValidationResult.CommonErrorMessageKey == nil {
			break
		}

		return e.complexity.CommerceCartValidationResult.CommonErrorMessageKey(childComplexity), true

	case "Commerce_Cart_ValidationResult.hasCommonError":
		if e.complexity.CommerceCartValidationResult.HasCommonError == nil {
			break
		}

		return e.complexity.CommerceCartValidationResult.HasCommonError(childComplexity), true

	case "Commerce_Cart_ValidationResult.itemResults":
		if e.complexity.CommerceCartValidationResult.ItemResults == nil {
			break
		}

		return e.complexity.CommerceCartValidationResult.ItemResults(childComplexity), true

	case "Commerce_CategoryData.active":
		if e.complexity.CommerceCategoryData.Active == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Active(childComplexity), true

	case "Commerce_CategoryData.attributes":
		if e.complexity.CommerceCategoryData.Attributes == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Attributes(childComplexity), true

	case "Commerce_CategoryData.code":
		if e.complexity.CommerceCategoryData.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Code(childComplexity), true

	case "Commerce_CategoryData.name":
		if e.complexity.CommerceCategoryData.Name == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Name(childComplexity), true

	case "Commerce_CategoryData.path":
		if e.complexity.CommerceCategoryData.Path == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Path(childComplexity), true

	case "Commerce_CategoryData.promoted":
		if e.complexity.CommerceCategoryData.Promoted == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Promoted(childComplexity), true

	case "Commerce_CategoryTree.active":
		if e.complexity.CommerceCategoryTree.Active == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Active(childComplexity), true

	case "Commerce_CategoryTree.code":
		if e.complexity.CommerceCategoryTree.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Code(childComplexity), true

	case "Commerce_CategoryTree.documentCount":
		if e.complexity.CommerceCategoryTree.DocumentCount == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.DocumentCount(childComplexity), true

	case "Commerce_CategoryTree.hasChilds":
		if e.complexity.CommerceCategoryTree.HasChilds == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.HasChilds(childComplexity), true

	case "Commerce_CategoryTree.name":
		if e.complexity.CommerceCategoryTree.Name == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Name(childComplexity), true

	case "Commerce_CategoryTree.path":
		if e.complexity.CommerceCategoryTree.Path == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Path(childComplexity), true

	case "Commerce_CategoryTree.subTrees":
		if e.complexity.CommerceCategoryTree.SubTrees == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.SubTrees(childComplexity), true

	case "Commerce_Category_Attribute.code":
		if e.complexity.CommerceCategoryAttribute.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Code(childComplexity), true

	case "Commerce_Category_Attribute.label":
		if e.complexity.CommerceCategoryAttribute.Label == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Label(childComplexity), true

	case "Commerce_Category_Attribute.values":
		if e.complexity.CommerceCategoryAttribute.Values == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Values(childComplexity), true

	case "Commerce_Category_AttributeValue.label":
		if e.complexity.CommerceCategoryAttributeValue.Label == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributeValue.Label(childComplexity), true

	case "Commerce_Category_AttributeValue.value":
		if e.complexity.CommerceCategoryAttributeValue.Value == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributeValue.Value(childComplexity), true

	case "Commerce_Category_Attributes.all":
		if e.complexity.CommerceCategoryAttributes.All == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributes.All(childComplexity), true

	case "Commerce_Category_Attributes.get":
		if e.complexity.CommerceCategoryAttributes.Get == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCategoryAttributes.Get(childComplexity, args["code"].(string)), true

	case "Commerce_Category_Attributes.has":
		if e.complexity.CommerceCategoryAttributes.Has == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_has_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCategoryAttributes.Has(childComplexity, args["code"].(string)), true

	case "Commerce_Category_SearchResult.category":
		if e.complexity.CommerceCategorySearchResult.Category == nil {
			break
		}

		return e.complexity.CommerceCategorySearchResult.Category(childComplexity), true

	case "Commerce_Category_SearchResult.productSearchResult":
		if e.complexity.CommerceCategorySearchResult.ProductSearchResult == nil {
			break
		}

		return e.complexity.CommerceCategorySearchResult.ProductSearchResult(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.cart":
		if e.complexity.CommerceCheckoutPlaceOrderContext.Cart == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.Cart(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.orderInfos":
		if e.complexity.CommerceCheckoutPlaceOrderContext.OrderInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.OrderInfos(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.state":
		if e.complexity.CommerceCheckoutPlaceOrderContext.State == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.State(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.uuid":
		if e.complexity.CommerceCheckoutPlaceOrderContext.UUID == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.UUID(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.amount":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Amount == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Amount(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.gateway":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Gateway == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Gateway(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.method":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Method == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Method(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.paymentProvider":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.PaymentProvider == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.PaymentProvider(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.title":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Title == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Title(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_Form_Parameter.key":
		if e.complexity.CommerceCheckoutPlaceOrderStateFormParameter.Key == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateFormParameter.Key(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_Form_Parameter.value":
		if e.complexity.CommerceCheckoutPlaceOrderStateFormParameter.Value == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateFormParameter.Value(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.completeURL":
		if e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.CompleteURL == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.CompleteURL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.details":
		if e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.Details == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.Details(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.merchantValidationURL":
		if e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.MerchantValidationURL == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.MerchantValidationURL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.methodData":
		if e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.MethodData == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.MethodData(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.options":
		if e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.Options == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStatePaymentRequestAPI.Options(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Failed.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailed.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailed.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Failed.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailed.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailed.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCanceledByCustomer.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCanceledByCustomer.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCartValidationError.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCartValidationError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.validationResult":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCartValidationError.ValidationResult == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonCartValidationError.ValidationResult(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_Error.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonError.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentCanceledByCustomer.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentCanceledByCustomer.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentError.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFailedReasonPaymentError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.Parameters":
		if e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.Parameters == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.Parameters(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.URL":
		if e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.URL == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStatePostRedirect.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Redirect.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateRedirect.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateRedirect.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Redirect.URL":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateRedirect.URL == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateRedirect.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowHTML.HTML":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowHTML.HTML == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowHTML.HTML(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowHTML.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowHTML.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowHTML.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowIframe.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowIframe.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowIframe.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowIframe.URL":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowIframe.URL == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowIframe.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.paymentMethod":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.PaymentMethod == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.PaymentMethod(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.paymentRequestAPI":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.PaymentRequestAPI == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateShowWalletPayment.PaymentRequestAPI(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Success.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Wait.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateWait.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateWait.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_WaitForCustomer.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateWaitForCustomer.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateWaitForCustomer.Name(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.email":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.Email == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.Email(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.paymentInfos":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.PaymentInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.PaymentInfos(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.placedOrderInfos":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.PlacedOrderInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.PlacedOrderInfos(childComplexity), true

	case "Commerce_Checkout_StartPlaceOrder_Result.uuid":
		if e.complexity.CommerceCheckoutStartPlaceOrderResult.UUID == nil {
			break
		}

		return e.complexity.CommerceCheckoutStartPlaceOrderResult.UUID(childComplexity), true

	case "Commerce_Customer_Address.additionalAddressLines":
		if e.complexity.CommerceCustomerAddress.AdditionalAddressLines == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.AdditionalAddressLines(childComplexity), true

	case "Commerce_Customer_Address.city":
		if e.complexity.CommerceCustomerAddress.City == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.City(childComplexity), true

	case "Commerce_Customer_Address.company":
		if e.complexity.CommerceCustomerAddress.Company == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Company(childComplexity), true

	case "Commerce_Customer_Address.countryCode":
		if e.complexity.CommerceCustomerAddress.CountryCode == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.CountryCode(childComplexity), true

	case "Commerce_Customer_Address.defaultBilling":
		if e.complexity.CommerceCustomerAddress.DefaultBilling == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.DefaultBilling(childComplexity), true

	case "Commerce_Customer_Address.defaultShipping":
		if e.complexity.CommerceCustomerAddress.DefaultShipping == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.DefaultShipping(childComplexity), true

	case "Commerce_Customer_Address.email":
		if e.complexity.CommerceCustomerAddress.Email == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Email(childComplexity), true

	case "Commerce_Customer_Address.firstName":
		if e.complexity.CommerceCustomerAddress.Firstname == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Firstname(childComplexity), true

	case "Commerce_Customer_Address.id":
		if e.complexity.CommerceCustomerAddress.ID == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.ID(childComplexity), true

	case "Commerce_Customer_Address.lastName":
		if e.complexity.CommerceCustomerAddress.Lastname == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Lastname(childComplexity), true

	case "Commerce_Customer_Address.postCode":
		if e.complexity.CommerceCustomerAddress.PostCode == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.PostCode(childComplexity), true

	case "Commerce_Customer_Address.prefix":
		if e.complexity.CommerceCustomerAddress.Prefix == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Prefix(childComplexity), true

	case "Commerce_Customer_Address.regionCode":
		if e.complexity.CommerceCustomerAddress.RegionCode == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.RegionCode(childComplexity), true

	case "Commerce_Customer_Address.state":
		if e.complexity.CommerceCustomerAddress.State == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.State(childComplexity), true

	case "Commerce_Customer_Address.street":
		if e.complexity.CommerceCustomerAddress.Street == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Street(childComplexity), true

	case "Commerce_Customer_Address.streetNumber":
		if e.complexity.CommerceCustomerAddress.StreetNr == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.StreetNr(childComplexity), true

	case "Commerce_Customer_Address.telephone":
		if e.complexity.CommerceCustomerAddress.Telephone == nil {
			break
		}

		return e.complexity.CommerceCustomerAddress.Telephone(childComplexity), true

	case "Commerce_Customer_PersonData.birthday":
		if e.complexity.CommerceCustomerPersonData.Birthday == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.Birthday(childComplexity), true

	case "Commerce_Customer_PersonData.firstName":
		if e.complexity.CommerceCustomerPersonData.FirstName == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.FirstName(childComplexity), true

	case "Commerce_Customer_PersonData.gender":
		if e.complexity.CommerceCustomerPersonData.Gender == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.Gender(childComplexity), true

	case "Commerce_Customer_PersonData.lastName":
		if e.complexity.CommerceCustomerPersonData.LastName == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.LastName(childComplexity), true

	case "Commerce_Customer_PersonData.mainEmail":
		if e.complexity.CommerceCustomerPersonData.MainEmail == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.MainEmail(childComplexity), true

	case "Commerce_Customer_PersonData.middleName":
		if e.complexity.CommerceCustomerPersonData.MiddleName == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.MiddleName(childComplexity), true

	case "Commerce_Customer_PersonData.nationality":
		if e.complexity.CommerceCustomerPersonData.Nationality == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.Nationality(childComplexity), true

	case "Commerce_Customer_PersonData.prefix":
		if e.complexity.CommerceCustomerPersonData.Prefix == nil {
			break
		}

		return e.complexity.CommerceCustomerPersonData.Prefix(childComplexity), true

	case "Commerce_Customer_Result.addresses":
		if e.complexity.CommerceCustomerResult.Addresses == nil {
			break
		}

		return e.complexity.CommerceCustomerResult.Addresses(childComplexity), true

	case "Commerce_Customer_Result.defaultBillingAddress":
		if e.complexity.CommerceCustomerResult.DefaultBillingAddress == nil {
			break
		}

		return e.complexity.CommerceCustomerResult.DefaultBillingAddress(childComplexity), true

	case "Commerce_Customer_Result.defaultShippingAddress":
		if e.complexity.CommerceCustomerResult.DefaultShippingAddress == nil {
			break
		}

		return e.complexity.CommerceCustomerResult.DefaultShippingAddress(childComplexity), true

	case "Commerce_Customer_Result.getAddress":
		if e.complexity.CommerceCustomerResult.GetAddress == nil {
			break
		}

		args, err := ec.field_Commerce_Customer_Result_getAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCustomerResult.GetAddress(childComplexity, args["id"].(string)), true

	case "Commerce_Customer_Result.id":
		if e.complexity.CommerceCustomerResult.ID == nil {
			break
		}

		return e.complexity.CommerceCustomerResult.ID(childComplexity), true

	case "Commerce_Customer_Result.personalData":
		if e.complexity.CommerceCustomerResult.PersonalData == nil {
			break
		}

		return e.complexity.CommerceCustomerResult.PersonalData(childComplexity), true

	case "Commerce_Customer_Status_Result.isLoggedIn":
		if e.complexity.CommerceCustomerStatusResult.IsLoggedIn == nil {
			break
		}

		return e.complexity.CommerceCustomerStatusResult.IsLoggedIn(childComplexity), true

	case "Commerce_Customer_Status_Result.userID":
		if e.complexity.CommerceCustomerStatusResult.UserID == nil {
			break
		}

		return e.complexity.CommerceCustomerStatusResult.UserID(childComplexity), true

	case "Commerce_Price.currency":
		if e.complexity.CommercePrice.Currency == nil {
			break
		}

		return e.complexity.CommercePrice.Currency(childComplexity), true

	case "Commerce_Price.amount":
		if e.complexity.CommercePrice.FloatAmount == nil {
			break
		}

		return e.complexity.CommercePrice.FloatAmount(childComplexity), true

	case "Commerce_Price_Charge.price":
		if e.complexity.CommercePriceCharge.Price == nil {
			break
		}

		return e.complexity.CommercePriceCharge.Price(childComplexity), true

	case "Commerce_Price_Charge.reference":
		if e.complexity.CommercePriceCharge.Reference == nil {
			break
		}

		return e.complexity.CommercePriceCharge.Reference(childComplexity), true

	case "Commerce_Price_Charge.type":
		if e.complexity.CommercePriceCharge.Type == nil {
			break
		}

		return e.complexity.CommercePriceCharge.Type(childComplexity), true

	case "Commerce_Price_Charge.value":
		if e.complexity.CommercePriceCharge.Value == nil {
			break
		}

		return e.complexity.CommercePriceCharge.Value(childComplexity), true

	case "Commerce_Price_ChargeQualifier.reference":
		if e.complexity.CommercePriceChargeQualifier.Reference == nil {
			break
		}

		return e.complexity.CommercePriceChargeQualifier.Reference(childComplexity), true

	case "Commerce_Price_ChargeQualifier.type":
		if e.complexity.CommercePriceChargeQualifier.Type == nil {
			break
		}

		return e.complexity.CommercePriceChargeQualifier.Type(childComplexity), true

	case "Commerce_Price_Charges.getByChargeQualifierForced":
		if e.complexity.CommercePriceCharges.GetByChargeQualifierForced == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_getByChargeQualifierForced_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommercePriceCharges.GetByChargeQualifierForced(childComplexity, args["qualifier"].(domain.ChargeQualifier)), true

	case "Commerce_Price_Charges.getByTypeForced":
		if e.complexity.CommercePriceCharges.GetByTypeForced == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_getByTypeForced_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommercePriceCharges.GetByTypeForced(childComplexity, args["ctype"].(string)), true

	case "Commerce_Price_Charges.hasChargeQualifier":
		if e.complexity.CommercePriceCharges.HasChargeQualifier == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_hasChargeQualifier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommercePriceCharges.HasChargeQualifier(childComplexity, args["qualifier"].(domain.ChargeQualifier)), true

	case "Commerce_Price_Charges.hasType":
		if e.complexity.CommercePriceCharges.HasType == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_hasType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommercePriceCharges.HasType(childComplexity, args["ctype"].(string)), true

	case "Commerce_Price_Charges.items":
		if e.complexity.CommercePriceCharges.Items == nil {
			break
		}

		return e.complexity.CommercePriceCharges.Items(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.activeVariationSelections":
		if e.complexity.CommerceProductActiveVariantProduct.ActiveVariationSelections == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.ActiveVariationSelections(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.attributes":
		if e.complexity.CommerceProductActiveVariantProduct.Attributes == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Attributes(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.availablePrices":
		if e.complexity.CommerceProductActiveVariantProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.badges":
		if e.complexity.CommerceProductActiveVariantProduct.Badges == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Badges(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.categories":
		if e.complexity.CommerceProductActiveVariantProduct.Categories == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Categories(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.description":
		if e.complexity.CommerceProductActiveVariantProduct.Description == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Description(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.identifier":
		if e.complexity.CommerceProductActiveVariantProduct.Identifier == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Identifier(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.loyalty":
		if e.complexity.CommerceProductActiveVariantProduct.Loyalty == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Loyalty(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.marketPlaceCode":
		if e.complexity.CommerceProductActiveVariantProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.media":
		if e.complexity.CommerceProductActiveVariantProduct.Media == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Media(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.meta":
		if e.complexity.CommerceProductActiveVariantProduct.Meta == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Meta(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.price":
		if e.complexity.CommerceProductActiveVariantProduct.Price == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Price(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.shortDescription":
		if e.complexity.CommerceProductActiveVariantProduct.ShortDescription == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.title":
		if e.complexity.CommerceProductActiveVariantProduct.Title == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Title(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.type":
		if e.complexity.CommerceProductActiveVariantProduct.Type == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.Type(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.variantMarketPlaceCode":
		if e.complexity.CommerceProductActiveVariantProduct.VariantMarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.VariantMarketPlaceCode(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.variationSelections":
		if e.complexity.CommerceProductActiveVariantProduct.VariationSelections == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariantProduct.VariationSelections(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.code":
		if e.complexity.CommerceProductActiveVariationSelection.Code == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariationSelection.Code(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.label":
		if e.complexity.CommerceProductActiveVariationSelection.Label == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariationSelection.Label(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.value":
		if e.complexity.CommerceProductActiveVariationSelection.Value == nil {
			break
		}

		return e.complexity.CommerceProductActiveVariationSelection.Value(childComplexity), true

	case "Commerce_Product_Attribute.code":
		if e.complexity.CommerceProductAttribute.Code == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.Code(childComplexity), true

	case "Commerce_Product_Attribute.codeLabel":
		if e.complexity.CommerceProductAttribute.CodeLabel == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.CodeLabel(childComplexity), true

	case "Commerce_Product_Attribute.label":
		if e.complexity.CommerceProductAttribute.Label == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.Label(childComplexity), true

	case "Commerce_Product_Attribute.unitCode":
		if e.complexity.CommerceProductAttribute.UnitCode == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.UnitCode(childComplexity), true

	case "Commerce_Product_Attribute.values":
		if e.complexity.CommerceProductAttribute.Values == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.Values(childComplexity), true

	case "Commerce_Product_Attributes.getAttribute":
		if e.complexity.CommerceProductAttributes.Attribute == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_getAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductAttributes.Attribute(childComplexity, args["key"].(string)), true

	case "Commerce_Product_Attributes.attributeKeys":
		if e.complexity.CommerceProductAttributes.AttributeKeys == nil {
			break
		}

		return e.complexity.CommerceProductAttributes.AttributeKeys(childComplexity), true

	case "Commerce_Product_Attributes.attributes":
		if e.complexity.CommerceProductAttributes.Attributes == nil {
			break
		}

		return e.complexity.CommerceProductAttributes.Attributes(childComplexity), true

	case "Commerce_Product_Attributes.getAttributesByKey":
		if e.complexity.CommerceProductAttributes.AttributesByKey == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_getAttributesByKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductAttributes.AttributesByKey(childComplexity, args["keys"].([]string)), true

	case "Commerce_Product_Attributes.hasAttribute":
		if e.complexity.CommerceProductAttributes.HasAttribute == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_hasAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductAttributes.HasAttribute(childComplexity, args["key"].(string)), true

	case "Commerce_Product_Badge.code":
		if e.complexity.CommerceProductBadge.Code == nil {
			break
		}

		return e.complexity.CommerceProductBadge.Code(childComplexity), true

	case "Commerce_Product_Badge.label":
		if e.complexity.CommerceProductBadge.Label == nil {
			break
		}

		return e.complexity.CommerceProductBadge.Label(childComplexity), true

	case "Commerce_Product_Badges.all":
		if e.complexity.CommerceProductBadges.All == nil {
			break
		}

		return e.complexity.CommerceProductBadges.All(childComplexity), true

	case "Commerce_Product_Badges.first":
		if e.complexity.CommerceProductBadges.First == nil {
			break
		}

		return e.complexity.CommerceProductBadges.First(childComplexity), true

	case "Commerce_Product_Categories.all":
		if e.complexity.CommerceProductCategories.All == nil {
			break
		}

		return e.complexity.CommerceProductCategories.All(childComplexity), true

	case "Commerce_Product_Categories.main":
		if e.complexity.CommerceProductCategories.Main == nil {
			break
		}

		return e.complexity.CommerceProductCategories.Main(childComplexity), true

	case "Commerce_Product_CategoryTeaser.code":
		if e.complexity.CommerceProductCategoryTeaser.Code == nil {
			break
		}

		return e.complexity.CommerceProductCategoryTeaser.Code(childComplexity), true

	case "Commerce_Product_CategoryTeaser.name":
		if e.complexity.CommerceProductCategoryTeaser.Name == nil {
			break
		}

		return e.complexity.CommerceProductCategoryTeaser.Name(childComplexity), true

	case "Commerce_Product_CategoryTeaser.parent":
		if e.complexity.CommerceProductCategoryTeaser.Parent == nil {
			break
		}

		return e.complexity.CommerceProductCategoryTeaser.Parent(childComplexity), true

	case "Commerce_Product_CategoryTeaser.path":
		if e.complexity.CommerceProductCategoryTeaser.Path == nil {
			break
		}

		return e.complexity.CommerceProductCategoryTeaser.Path(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.attributes":
		if e.complexity.CommerceProductConfigurableProduct.Attributes == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Attributes(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.availablePrices":
		if e.complexity.CommerceProductConfigurableProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.badges":
		if e.complexity.CommerceProductConfigurableProduct.Badges == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Badges(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.categories":
		if e.complexity.CommerceProductConfigurableProduct.Categories == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Categories(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.description":
		if e.complexity.CommerceProductConfigurableProduct.Description == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Description(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.identifier":
		if e.complexity.CommerceProductConfigurableProduct.Identifier == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Identifier(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.loyalty":
		if e.complexity.CommerceProductConfigurableProduct.Loyalty == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Loyalty(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.marketPlaceCode":
		if e.complexity.CommerceProductConfigurableProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.media":
		if e.complexity.CommerceProductConfigurableProduct.Media == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Media(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.meta":
		if e.complexity.CommerceProductConfigurableProduct.Meta == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Meta(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.price":
		if e.complexity.CommerceProductConfigurableProduct.Price == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Price(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.shortDescription":
		if e.complexity.CommerceProductConfigurableProduct.ShortDescription == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.title":
		if e.complexity.CommerceProductConfigurableProduct.Title == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Title(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.type":
		if e.complexity.CommerceProductConfigurableProduct.Type == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.Type(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.variationSelections":
		if e.complexity.CommerceProductConfigurableProduct.VariationSelections == nil {
			break
		}

		return e.complexity.CommerceProductConfigurableProduct.VariationSelections(childComplexity), true

	case "Commerce_Product_Loyalty.earning":
		if e.complexity.CommerceProductLoyalty.Earning == nil {
			break
		}

		return e.complexity.CommerceProductLoyalty.Earning(childComplexity), true

	case "Commerce_Product_Loyalty.price":
		if e.complexity.CommerceProductLoyalty.Price == nil {
			break
		}

		return e.complexity.CommerceProductLoyalty.Price(childComplexity), true

	case "Commerce_Product_Loyalty_EarningInfo.default":
		if e.complexity.CommerceProductLoyaltyEarningInfo.Default == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyEarningInfo.Default(childComplexity), true

	case "Commerce_Product_Loyalty_EarningInfo.type":
		if e.complexity.CommerceProductLoyaltyEarningInfo.Type == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyEarningInfo.Type(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.context":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Context == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Context(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.default":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Default == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Default(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.discountText":
		if e.complexity.CommerceProductLoyaltyPriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.DiscountText(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.discounted":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Discounted == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Discounted(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.isDiscounted":
		if e.complexity.CommerceProductLoyaltyPriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.maxPointsToSpent":
		if e.complexity.CommerceProductLoyaltyPriceInfo.MaxPointsToSpent == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.MaxPointsToSpent(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.minPointsToSpent":
		if e.complexity.CommerceProductLoyaltyPriceInfo.MinPointsToSpent == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.MinPointsToSpent(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.type":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Type == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Type(childComplexity), true

	case "Commerce_Product_Media.all":
		if e.complexity.CommerceProductMedia.All == nil {
			break
		}

		return e.complexity.CommerceProductMedia.All(childComplexity), true

	case "Commerce_Product_Media.getMedia":
		if e.complexity.CommerceProductMedia.GetMedia == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Media_getMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductMedia.GetMedia(childComplexity, args["usage"].(string)), true

	case "Commerce_Product_MediaItem.mimeType":
		if e.complexity.CommerceProductMediaItem.MimeType == nil {
			break
		}

		return e.complexity.CommerceProductMediaItem.MimeType(childComplexity), true

	case "Commerce_Product_MediaItem.reference":
		if e.complexity.CommerceProductMediaItem.Reference == nil {
			break
		}

		return e.complexity.CommerceProductMediaItem.Reference(childComplexity), true

	case "Commerce_Product_MediaItem.title":
		if e.complexity.CommerceProductMediaItem.Title == nil {
			break
		}

		return e.complexity.CommerceProductMediaItem.Title(childComplexity), true

	case "Commerce_Product_MediaItem.type":
		if e.complexity.CommerceProductMediaItem.Type == nil {
			break
		}

		return e.complexity.CommerceProductMediaItem.Type(childComplexity), true

	case "Commerce_Product_MediaItem.usage":
		if e.complexity.CommerceProductMediaItem.Usage == nil {
			break
		}

		return e.complexity.CommerceProductMediaItem.Usage(childComplexity), true

	case "Commerce_Product_Meta.keywords":
		if e.complexity.CommerceProductMeta.Keywords == nil {
			break
		}

		return e.complexity.CommerceProductMeta.Keywords(childComplexity), true

	case "Commerce_Product_PriceContext.channelCode":
		if e.complexity.CommerceProductPriceContext.ChannelCode == nil {
			break
		}

		return e.complexity.CommerceProductPriceContext.ChannelCode(childComplexity), true

	case "Commerce_Product_PriceContext.customerGroup":
		if e.complexity.CommerceProductPriceContext.CustomerGroup == nil {
			break
		}

		return e.complexity.CommerceProductPriceContext.CustomerGroup(childComplexity), true

	case "Commerce_Product_PriceContext.deliveryCode":
		if e.complexity.CommerceProductPriceContext.DeliveryCode == nil {
			break
		}

		return e.complexity.CommerceProductPriceContext.DeliveryCode(childComplexity), true

	case "Commerce_Product_PriceContext.locale":
		if e.complexity.CommerceProductPriceContext.Locale == nil {
			break
		}

		return e.complexity.CommerceProductPriceContext.Locale(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBase":
		if e.complexity.CommerceProductPriceInfo.ActiveBase == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBase(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBaseAmount":
		if e.complexity.CommerceProductPriceInfo.ActiveBaseAmount == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBaseAmount(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBaseUnit":
		if e.complexity.CommerceProductPriceInfo.ActiveBaseUnit == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBaseUnit(childComplexity), true

	case "Commerce_Product_PriceInfo.campaignRules":
		if e.complexity.CommerceProductPriceInfo.CampaignRules == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.CampaignRules(childComplexity), true

	case "Commerce_Product_PriceInfo.context":
		if e.complexity.CommerceProductPriceInfo.Context == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.Context(childComplexity), true

	case "Commerce_Product_PriceInfo.default":
		if e.complexity.CommerceProductPriceInfo.Default == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.Default(childComplexity), true

	case "Commerce_Product_PriceInfo.denyMoreDiscounts":
		if e.complexity.CommerceProductPriceInfo.DenyMoreDiscounts == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.DenyMoreDiscounts(childComplexity), true

	case "Commerce_Product_PriceInfo.discountText":
		if e.complexity.CommerceProductPriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.DiscountText(childComplexity), true

	case "Commerce_Product_PriceInfo.discounted":
		if e.complexity.CommerceProductPriceInfo.Discounted == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.Discounted(childComplexity), true

	case "Commerce_Product_PriceInfo.isDiscounted":
		if e.complexity.CommerceProductPriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_Product_PriceInfo.taxClass":
		if e.complexity.CommerceProductPriceInfo.TaxClass == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.TaxClass(childComplexity), true

	case "Commerce_Product_SearchResult.facets":
		if e.complexity.CommerceProductSearchResult.Facets == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Facets(childComplexity), true

	case "Commerce_Product_SearchResult.hasSelectedFacet":
		if e.complexity.CommerceProductSearchResult.HasSelectedFacet == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.HasSelectedFacet(childComplexity), true

	case "Commerce_Product_SearchResult.products":
		if e.complexity.CommerceProductSearchResult.Products == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Products(childComplexity), true

	case "Commerce_Product_SearchResult.promotion":
		if e.complexity.CommerceProductSearchResult.Promotion == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Promotion(childComplexity), true

	case "Commerce_Product_SearchResult.searchMeta":
		if e.complexity.CommerceProductSearchResult.SearchMeta == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.SearchMeta(childComplexity), true

	case "Commerce_Product_SearchResult.suggestions":
		if e.complexity.CommerceProductSearchResult.Suggestions == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Suggestions(childComplexity), true

	case "Commerce_Product_SimpleProduct.attributes":
		if e.complexity.CommerceProductSimpleProduct.Attributes == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Attributes(childComplexity), true

	case "Commerce_Product_SimpleProduct.availablePrices":
		if e.complexity.CommerceProductSimpleProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_SimpleProduct.badges":
		if e.complexity.CommerceProductSimpleProduct.Badges == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Badges(childComplexity), true

	case "Commerce_Product_SimpleProduct.categories":
		if e.complexity.CommerceProductSimpleProduct.Categories == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Categories(childComplexity), true

	case "Commerce_Product_SimpleProduct.description":
		if e.complexity.CommerceProductSimpleProduct.Description == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Description(childComplexity), true

	case "Commerce_Product_SimpleProduct.identifier":
		if e.complexity.CommerceProductSimpleProduct.Identifier == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Identifier(childComplexity), true

	case "Commerce_Product_SimpleProduct.loyalty":
		if e.complexity.CommerceProductSimpleProduct.Loyalty == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Loyalty(childComplexity), true

	case "Commerce_Product_SimpleProduct.marketPlaceCode":
		if e.complexity.CommerceProductSimpleProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_SimpleProduct.media":
		if e.complexity.CommerceProductSimpleProduct.Media == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Media(childComplexity), true

	case "Commerce_Product_SimpleProduct.meta":
		if e.complexity.CommerceProductSimpleProduct.Meta == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Meta(childComplexity), true

	case "Commerce_Product_SimpleProduct.price":
		if e.complexity.CommerceProductSimpleProduct.Price == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Price(childComplexity), true

	case "Commerce_Product_SimpleProduct.shortDescription":
		if e.complexity.CommerceProductSimpleProduct.ShortDescription == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_SimpleProduct.title":
		if e.complexity.CommerceProductSimpleProduct.Title == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Title(childComplexity), true

	case "Commerce_Product_SimpleProduct.type":
		if e.complexity.CommerceProductSimpleProduct.Type == nil {
			break
		}

		return e.complexity.CommerceProductSimpleProduct.Type(childComplexity), true

	case "Commerce_Product_VariationSelection.code":
		if e.complexity.CommerceProductVariationSelection.Code == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelection.Code(childComplexity), true

	case "Commerce_Product_VariationSelection.label":
		if e.complexity.CommerceProductVariationSelection.Label == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelection.Label(childComplexity), true

	case "Commerce_Product_VariationSelection.options":
		if e.complexity.CommerceProductVariationSelection.Options == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelection.Options(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.label":
		if e.complexity.CommerceProductVariationSelectionOption.Label == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelectionOption.Label(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.state":
		if e.complexity.CommerceProductVariationSelectionOption.State == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelectionOption.State(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.variant":
		if e.complexity.CommerceProductVariationSelectionOption.Variant == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelectionOption.Variant(childComplexity), true

	case "Commerce_Product_VariationSelection_OptionVariant.marketPlaceCode":
		if e.complexity.CommerceProductVariationSelectionOptionVariant.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductVariationSelectionOptionVariant.MarketPlaceCode(childComplexity), true

	case "Commerce_Search_ListFacet.hasSelectedItem":
		if e.complexity.CommerceSearchListFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.CommerceSearchListFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_ListFacet.items":
		if e.complexity.CommerceSearchListFacet.Items == nil {
			break
		}

		return e.complexity.CommerceSearchListFacet.Items(childComplexity), true

	case "Commerce_Search_ListFacet.label":
		if e.complexity.CommerceSearchListFacet.Label == nil {
			break
		}

		return e.complexity.CommerceSearchListFacet.Label(childComplexity), true

	case "Commerce_Search_ListFacet.name":
		if e.complexity.CommerceSearchListFacet.Name == nil {
			break
		}

		return e.complexity.CommerceSearchListFacet.Name(childComplexity), true

	case "Commerce_Search_ListFacet.position":
		if e.complexity.CommerceSearchListFacet.Position == nil {
			break
		}

		return e.complexity.CommerceSearchListFacet.Position(childComplexity), true

	case "Commerce_Search_ListFacetItem.count":
		if e.complexity.CommerceSearchListFacetItem.Count == nil {
			break
		}

		return e.complexity.CommerceSearchListFacetItem.Count(childComplexity), true

	case "Commerce_Search_ListFacetItem.label":
		if e.complexity.CommerceSearchListFacetItem.Label == nil {
			break
		}

		return e.complexity.CommerceSearchListFacetItem.Label(childComplexity), true

	case "Commerce_Search_ListFacetItem.selected":
		if e.complexity.CommerceSearchListFacetItem.Selected == nil {
			break
		}

		return e.complexity.CommerceSearchListFacetItem.Selected(childComplexity), true

	case "Commerce_Search_ListFacetItem.value":
		if e.complexity.CommerceSearchListFacetItem.Value == nil {
			break
		}

		return e.complexity.CommerceSearchListFacetItem.Value(childComplexity), true

	case "Commerce_Search_Meta.numPages":
		if e.complexity.CommerceSearchMeta.NumPages == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.NumPages(childComplexity), true

	case "Commerce_Search_Meta.numResults":
		if e.complexity.CommerceSearchMeta.NumResults == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.NumResults(childComplexity), true

	case "Commerce_Search_Meta.originalQuery":
		if e.complexity.CommerceSearchMeta.OriginalQuery == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.OriginalQuery(childComplexity), true

	case "Commerce_Search_Meta.page":
		if e.complexity.CommerceSearchMeta.Page == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.Page(childComplexity), true

	case "Commerce_Search_Meta.query":
		if e.complexity.CommerceSearchMeta.Query == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.Query(childComplexity), true

	case "Commerce_Search_Meta.sortOptions":
		if e.complexity.CommerceSearchMeta.SortOptions == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.SortOptions(childComplexity), true

	case "Commerce_Search_Promotion.content":
		if e.complexity.CommerceSearchPromotion.Content == nil {
			break
		}

		return e.complexity.CommerceSearchPromotion.Content(childComplexity), true

	case "Commerce_Search_Promotion.media":
		if e.complexity.CommerceSearchPromotion.Media == nil {
			break
		}

		return e.complexity.CommerceSearchPromotion.Media(childComplexity), true

	case "Commerce_Search_Promotion.title":
		if e.complexity.CommerceSearchPromotion.Title == nil {
			break
		}

		return e.complexity.CommerceSearchPromotion.Title(childComplexity), true

	case "Commerce_Search_Promotion.url":
		if e.complexity.CommerceSearchPromotion.URL == nil {
			break
		}

		return e.complexity.CommerceSearchPromotion.URL(childComplexity), true

	case "Commerce_Search_PromotionMedia.mimeType":
		if e.complexity.CommerceSearchPromotionMedia.MimeType == nil {
			break
		}

		return e.complexity.CommerceSearchPromotionMedia.MimeType(childComplexity), true

	case "Commerce_Search_PromotionMedia.reference":
		if e.complexity.CommerceSearchPromotionMedia.Reference == nil {
			break
		}

		return e.complexity.CommerceSearchPromotionMedia.Reference(childComplexity), true

	case "Commerce_Search_PromotionMedia.title":
		if e.complexity.CommerceSearchPromotionMedia.Title == nil {
			break
		}

		return e.complexity.CommerceSearchPromotionMedia.Title(childComplexity), true

	case "Commerce_Search_PromotionMedia.type":
		if e.complexity.CommerceSearchPromotionMedia.Type == nil {
			break
		}

		return e.complexity.CommerceSearchPromotionMedia.Type(childComplexity), true

	case "Commerce_Search_PromotionMedia.usage":
		if e.complexity.CommerceSearchPromotionMedia.Usage == nil {
			break
		}

		return e.complexity.CommerceSearchPromotionMedia.Usage(childComplexity), true

	case "Commerce_Search_RangeFacet.hasSelectedItem":
		if e.complexity.CommerceSearchRangeFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_RangeFacet.items":
		if e.complexity.CommerceSearchRangeFacet.Items == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacet.Items(childComplexity), true

	case "Commerce_Search_RangeFacet.label":
		if e.complexity.CommerceSearchRangeFacet.Label == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacet.Label(childComplexity), true

	case "Commerce_Search_RangeFacet.name":
		if e.complexity.CommerceSearchRangeFacet.Name == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacet.Name(childComplexity), true

	case "Commerce_Search_RangeFacet.position":
		if e.complexity.CommerceSearchRangeFacet.Position == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacet.Position(childComplexity), true

	case "Commerce_Search_RangeFacetItem.count":
		if e.complexity.CommerceSearchRangeFacetItem.Count == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Count(childComplexity), true

	case "Commerce_Search_RangeFacetItem.label":
		if e.complexity.CommerceSearchRangeFacetItem.Label == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Label(childComplexity), true

	case "Commerce_Search_RangeFacetItem.max":
		if e.complexity.CommerceSearchRangeFacetItem.Max == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Max(childComplexity), true

	case "Commerce_Search_RangeFacetItem.min":
		if e.complexity.CommerceSearchRangeFacetItem.Min == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Min(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selected":
		if e.complexity.CommerceSearchRangeFacetItem.Selected == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Selected(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selectedMax":
		if e.complexity.CommerceSearchRangeFacetItem.SelectedMax == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.SelectedMax(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selectedMin":
		if e.complexity.CommerceSearchRangeFacetItem.SelectedMin == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.SelectedMin(childComplexity), true

	case "Commerce_Search_RangeFacetItem.value":
		if e.complexity.CommerceSearchRangeFacetItem.Value == nil {
			break
		}

		return e.complexity.CommerceSearchRangeFacetItem.Value(childComplexity), true

	case "Commerce_Search_SortOption.field":
		if e.complexity.CommerceSearchSortOption.Field == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.Field(childComplexity), true

	case "Commerce_Search_SortOption.label":
		if e.complexity.CommerceSearchSortOption.Label == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.Label(childComplexity), true

	case "Commerce_Search_SortOption.selected":
		if e.complexity.CommerceSearchSortOption.Selected == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.Selected(childComplexity), true

	case "Commerce_Search_Suggestion.highlight":
		if e.complexity.CommerceSearchSuggestion.Highlight == nil {
			break
		}

		return e.complexity.CommerceSearchSuggestion.Highlight(childComplexity), true

	case "Commerce_Search_Suggestion.text":
		if e.complexity.CommerceSearchSuggestion.Text == nil {
			break
		}

		return e.complexity.CommerceSearchSuggestion.Text(childComplexity), true

	case "Commerce_Search_TreeFacet.hasSelectedItem":
		if e.complexity.CommerceSearchTreeFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_TreeFacet.items":
		if e.complexity.CommerceSearchTreeFacet.Items == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacet.Items(childComplexity), true

	case "Commerce_Search_TreeFacet.label":
		if e.complexity.CommerceSearchTreeFacet.Label == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacet.Label(childComplexity), true

	case "Commerce_Search_TreeFacet.name":
		if e.complexity.CommerceSearchTreeFacet.Name == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacet.Name(childComplexity), true

	case "Commerce_Search_TreeFacet.position":
		if e.complexity.CommerceSearchTreeFacet.Position == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacet.Position(childComplexity), true

	case "Commerce_Search_TreeFacetItem.active":
		if e.complexity.CommerceSearchTreeFacetItem.Active == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Active(childComplexity), true

	case "Commerce_Search_TreeFacetItem.count":
		if e.complexity.CommerceSearchTreeFacetItem.Count == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Count(childComplexity), true

	case "Commerce_Search_TreeFacetItem.items":
		if e.complexity.CommerceSearchTreeFacetItem.Items == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Items(childComplexity), true

	case "Commerce_Search_TreeFacetItem.label":
		if e.complexity.CommerceSearchTreeFacetItem.Label == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Label(childComplexity), true

	case "Commerce_Search_TreeFacetItem.selected":
		if e.complexity.CommerceSearchTreeFacetItem.Selected == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Selected(childComplexity), true

	case "Commerce_Search_TreeFacetItem.value":
		if e.complexity.CommerceSearchTreeFacetItem.Value == nil {
			break
		}

		return e.complexity.CommerceSearchTreeFacetItem.Value(childComplexity), true

	case "Mutation.Commerce_Cart_AddToCart":
		if e.complexity.Mutation.CommerceCartAddToCart == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_AddToCart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartAddToCart(childComplexity, args["marketplaceCode"].(string), args["qty"].(int), args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_ApplyCouponCodeOrGiftCard":
		if e.complexity.Mutation.CommerceCartApplyCouponCodeOrGiftCard == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartApplyCouponCodeOrGiftCard(childComplexity, args["code"].(string)), true

	case "Mutation.Commerce_Cart_Clean":
		if e.complexity.Mutation.CommerceCartClean == nil {
			break
		}

		return e.complexity.Mutation.CommerceCartClean(childComplexity), true

	case "Mutation.Commerce_Cart_DeleteCartDelivery":
		if e.complexity.Mutation.CommerceCartDeleteCartDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_DeleteCartDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartDeleteCartDelivery(childComplexity, args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_DeleteItem":
		if e.complexity.Mutation.CommerceCartDeleteItem == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_DeleteItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartDeleteItem(childComplexity, args["itemID"].(string), args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_RemoveCouponCode":
		if e.complexity.Mutation.CommerceCartRemoveCouponCode == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_RemoveCouponCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartRemoveCouponCode(childComplexity, args["couponCode"].(string)), true

	case "Mutation.Commerce_Cart_RemoveGiftCard":
		if e.complexity.Mutation.CommerceCartRemoveGiftCard == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_RemoveGiftCard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartRemoveGiftCard(childComplexity, args["giftCardCode"].(string)), true

	case "Mutation.Commerce_Cart_UpdateAdditionalData":
		if e.complexity.Mutation.CommerceCartUpdateAdditionalData == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateAdditionalData(childComplexity, args["additionalData"].([]*dto.KeyValue)), true

	case "Mutation.Commerce_Cart_UpdateBillingAddress":
		if e.complexity.Mutation.CommerceCartUpdateBillingAddress == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateBillingAddress(childComplexity, args["addressForm"].(*forms.AddressForm)), true

	case "Mutation.Commerce_Cart_UpdateDeliveriesAdditionalData":
		if e.complexity.Mutation.CommerceCartUpdateDeliveriesAdditionalData == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveriesAdditionalData(childComplexity, args["data"].([]*dto.DeliveryAdditionalData)), true

	case "Mutation.Commerce_Cart_UpdateDeliveryAddresses":
		if e.complexity.Mutation.CommerceCartUpdateDeliveryAddresses == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveryAddresses(childComplexity, args["deliveryAdresses"].([]*forms.DeliveryForm)), true

	case "Mutation.Commerce_Cart_UpdateDeliveryShippingOptions":
		if e.complexity.Mutation.CommerceCartUpdateDeliveryShippingOptions == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveryShippingOptions(childComplexity, args["shippingOptions"].([]*dto.DeliveryShippingOption)), true

	case "Mutation.Commerce_Cart_UpdateItemQty":
		if e.complexity.Mutation.CommerceCartUpdateItemQty == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateItemQty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateItemQty(childComplexity, args["itemID"].(string), args["deliveryCode"].(string), args["qty"].(int)), true

	case "Mutation.Commerce_Cart_UpdateSelectedPayment":
		if e.complexity.Mutation.CommerceCartUpdateSelectedPayment == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateSelectedPayment(childComplexity, args["gateway"].(string), args["method"].(string)), true

	case "Mutation.Commerce_Checkout_CancelPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_ClearPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutClearPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutClearPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_RefreshPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_RefreshPlaceOrderBlocking":
		if e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrderBlocking == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrderBlocking(childComplexity), true

	case "Mutation.Commerce_Checkout_StartPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutStartPlaceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCheckoutStartPlaceOrder(childComplexity, args["returnUrl"].(string)), true

	case "Mutation.flamingo":
		if e.complexity.Mutation.Flamingo == nil {
			break
		}

		return e.complexity.Mutation.Flamingo(childComplexity), true

	case "Query.Commerce_Cart_DecoratedCart":
		if e.complexity.Query.CommerceCartDecoratedCart == nil {
			break
		}

		return e.complexity.Query.CommerceCartDecoratedCart(childComplexity), true

	case "Query.Commerce_Cart_QtyRestriction":
		if e.complexity.Query.CommerceCartQtyRestriction == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Cart_QtyRestriction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCartQtyRestriction(childComplexity, args["marketplaceCode"].(string), args["variantCode"].(*string), args["deliveryCode"].(string)), true

	case "Query.Commerce_Cart_Validator":
		if e.complexity.Query.CommerceCartValidator == nil {
			break
		}

		return e.complexity.Query.CommerceCartValidator(childComplexity), true

	case "Query.Commerce_Category":
		if e.complexity.Query.CommerceCategory == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategory(childComplexity, args["categoryCode"].(string), args["categorySearchRequest"].(*searchdto.CommerceSearchRequest)), true

	case "Query.Commerce_CategoryTree":
		if e.complexity.Query.CommerceCategoryTree == nil {
			break
		}

		args, err := ec.field_Query_Commerce_CategoryTree_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategoryTree(childComplexity, args["activeCategoryCode"].(string)), true

	case "Query.Commerce_Checkout_ActivePlaceOrder":
		if e.complexity.Query.CommerceCheckoutActivePlaceOrder == nil {
			break
		}

		return e.complexity.Query.CommerceCheckoutActivePlaceOrder(childComplexity), true

	case "Query.Commerce_Checkout_CurrentContext":
		if e.complexity.Query.CommerceCheckoutCurrentContext == nil {
			break
		}

		return e.complexity.Query.CommerceCheckoutCurrentContext(childComplexity), true

	case "Query.Commerce_Customer":
		if e.complexity.Query.CommerceCustomer == nil {
			break
		}

		return e.complexity.Query.CommerceCustomer(childComplexity), true

	case "Query.Commerce_Customer_Status":
		if e.complexity.Query.CommerceCustomerStatus == nil {
			break
		}

		return e.complexity.Query.CommerceCustomerStatus(childComplexity), true

	case "Query.Commerce_Product":
		if e.complexity.Query.CommerceProduct == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProduct(childComplexity, args["marketPlaceCode"].(string), args["variantMarketPlaceCode"].(*string)), true

	case "Query.Commerce_Product_Search":
		if e.complexity.Query.CommerceProductSearch == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_Search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProductSearch(childComplexity, args["searchRequest"].(searchdto.CommerceSearchRequest)), true

	case "Query.flamingo":
		if e.complexity.Query.Flamingo == nil {
			break
		}

		return e.complexity.Query.Flamingo(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graphql/schema/schema.graphql", Input: `type Query { flamingo: String }
type Mutation { flamingo: String }
scalar Time
scalar Map
scalar Date`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_price_interfaces_graphql-Service.graphql", Input: `type Commerce_Price{
    amount: Float
    currency: String!
}

type Commerce_Price_Charge {
    price: Commerce_Price!
    value: Commerce_Price!
    type: String!
    reference: String!
}

type Commerce_Price_ChargeQualifier {
    type: String!
    reference: String!
}

input Commerce_Price_ChargeQualifierInput {
    type: String!
    reference: String!
}

type Commerce_Price_Charges {
    items: [Commerce_Price_Charge!]
    hasType(ctype: String): Boolean
    hasChargeQualifier(qualifier: Commerce_Price_ChargeQualifierInput!): Boolean
    getByChargeQualifierForced(qualifier: Commerce_Price_ChargeQualifierInput!): Commerce_Price_Charge
    getByTypeForced(ctype: String): Commerce_Price_Charge
}`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_search_interfaces_graphql-Service.graphql", Input: `input Commerce_Search_KeyValueFilter {
    k: String!
    v: [String!]
}

input Commerce_Search_Request {
    pageSize:           Int
    page:               Int
    sortBy:             String
    keyValueFilters:    [Commerce_Search_KeyValueFilter!]
    query:              String
}

#input Commerce_Search_LiveSearchRequest {
#    query:              String
#}

type Commerce_Search_Meta {
    query:          String!
    originalQuery:  String!
    page:           Int!
    numPages:       Int!
    numResults:     Int!
    sortOptions:    [Commerce_Search_SortOption!]
}

type Commerce_Search_SortOption {
    label: String!
    field: String!
    selected: Boolean!
}

interface Commerce_Search_Facet {
    name: String!
    label: String!
    position: Int!
    items: [Commerce_Search_FacetItem!]!
    hasSelectedItem: Boolean!
}

interface Commerce_Search_FacetItem {
    label: String!
    value: String!
    selected: Boolean!
    count: Int!
}

type Commerce_Search_ListFacet implements Commerce_Search_Facet {
    name: String!
    label: String!
    position: Int!
    items: [Commerce_Search_ListFacetItem!]!
    hasSelectedItem: Boolean!
}

type Commerce_Search_ListFacetItem implements Commerce_Search_FacetItem {
    label: String!
    value: String!
    selected: Boolean!
    count: Int!
}

type Commerce_Search_TreeFacet implements Commerce_Search_Facet {
    name: String!
    label: String!
    position: Int!
    items: [Commerce_Search_TreeFacetItem!]!
    hasSelectedItem: Boolean!
}

type Commerce_Search_TreeFacetItem implements Commerce_Search_FacetItem {
    label: String!
    value: String!
    selected: Boolean!
    count: Int!
    active: Boolean!
    items: [Commerce_Search_TreeFacetItem!]
}

type Commerce_Search_RangeFacet implements Commerce_Search_Facet {
    name: String!
    label: String!
    position: Int!
    items: [Commerce_Search_RangeFacetItem!]!
    hasSelectedItem: Boolean!
}

type Commerce_Search_RangeFacetItem implements Commerce_Search_FacetItem {
    label: String!
    value: String!
    selected: Boolean!
    count: Int!
    min: Int!
    max: Int!
    selectedMin: Int!
    selectedMax: Int!
}

type Commerce_Search_Suggestion {
    text:      String!
    highlight: String!
}

type Commerce_Search_Promotion {
    title: String!
    content: String!
    url: String!
    media: Commerce_Search_PromotionMedia
}

type Commerce_Search_PromotionMedia {
    type:      String!
    mimeType:  String!
    usage:     String!
    title:     String!
    reference: String!
}

#type Commerce_Search_Result {
#    hits: []Commerce_Search_Document  / Or maybe we dont need hits and the modules need to add a edge to this object... we will see
#    searchMeta:     Commerce_Search_Meta!
    # Facets: domain.FacetCollection
#    suggestions:    [Commerce_Search_Suggestion]
#}


#extend type Query {
#    Commerce_Search(searchRequest: Commerce_Search_Request): Commerce_Search_Result
#    Commerce_Search_LiveSearch(searchRequest: Commerce_Search_LiveSearchRequest): Commerce_Search_ResultCommerce_Search_LiveSearchRequest!
#}
`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_product_interfaces_graphql-Service.graphql", Input: `interface Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    badges: Commerce_Product_Badges!
}

"""
A simple product, that has no variable attributes and therefore no relation to other products
"""
type Commerce_Product_SimpleProduct implements Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    badges: Commerce_Product_Badges!
}

"""
A configurable product defines the possible variations of a product. It only contains
information about product variants but has no active variant itself.
"""
type Commerce_Product_ConfigurableProduct implements Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    variationSelections: [Commerce_Product_VariationSelection!]
    badges: Commerce_Product_Badges!
}

"""
An active variant is one of many concrete variants that a configurable provides. All data relates to one active variant
and not the the configurable. It also contains information about it´s siblings (other variants on the same configurable)
"""
type Commerce_Product_ActiveVariantProduct implements Commerce_Product {
    type: String!
    "The marketPlaceCode of the 'configurable' product. See also 'variantMarketPlaceCode' for the variant marketPlaceCode"
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    "The marketPlaceCode of the actual variant"
    variantMarketPlaceCode: String!
    "Contains information about other available product variations"
    variationSelections: [Commerce_Product_VariationSelection!]
    "Convenience property to access the active variant labels easily"
    activeVariationSelections: [Commerce_Product_ActiveVariationSelection!]
    badges: Commerce_Product_Badges!
}

"A group of attributes. E.g. 'size'"
type Commerce_Product_VariationSelection {
    code: String!
    label: String!
    "All possiblie variations for that attribute. E.g. 'M', 'L', 'XL'"
    options: [Commerce_Product_VariationSelection_Option]
}

"Easy-to-access property to display attribute information about an active variant"
type Commerce_Product_ActiveVariationSelection {
    code: String!
    label: String!
    value: String!
}

"An option for a group of attributes"
type Commerce_Product_VariationSelection_Option {
    label: String!
    state: Commerce_Product_VariationSelection_OptionState!
    """
    Contains information about a product that matches this option.
    Depending on if there is an active variant or not, it tries to include the variant,
    that best matches the current option.
    """
    variant: Commerce_Product_VariationSelection_OptionVariant!,
}

"Information about the underlying variant"
type Commerce_Product_VariationSelection_OptionVariant {
    marketPlaceCode: String!
}

"The state of an option related to the currently active variant"
enum Commerce_Product_VariationSelection_OptionState {
    "The currently active variant has this exact attribute + all other active variant attributes"
    ACTIVE
    "A variant (other than the active variant) exists, that matches this exact attribute + all other active variant attributes"
    MATCH
    "No variant exists, that matches this exact attribute + all other active variant attributes."
    NO_MATCH
}

"Wrapper that includes main category and all categories"
type Commerce_Product_Categories {
    main: Commerce_Product_CategoryTeaser!
    all:   [Commerce_Product_CategoryTeaser!]
}

"Meta information about the product"
type Commerce_Product_Meta {
    keywords:        [String!]
}

"Loyalty information about this product"
type Commerce_Product_Loyalty {
    price:      Commerce_Product_Loyalty_PriceInfo
    earning:    Commerce_Product_Loyalty_EarningInfo
}

type Commerce_Product_Loyalty_PriceInfo {
    type: String!
    default: Commerce_Price!
    isDiscounted: Boolean!
    discounted: Commerce_Price!
    discountText: String!
    minPointsToSpent: Float!
    maxPointsToSpent: Float!
    context: Commerce_Product_PriceContext!
}

"Shows the type and the points earned"
type Commerce_Product_Loyalty_EarningInfo {
    "The type of the LoyaltyEarningInfo, e.g. MilesAndMore"
    type: String!
    "The value of the LoyaltyEarningInfo, currency can be e.g. points or miles"
    default: Commerce_Price!
}

type Commerce_Product_PriceContext {
    customerGroup: String!
    deliveryCode: String!
    channelCode: String!
    locale: String!
}

type Commerce_Product_Media {
    all: [Commerce_Product_MediaItem!]
    getMedia(usage: String!): Commerce_Product_MediaItem!
}

type Commerce_Product_MediaItem {
    type:      String!
    mimeType:  String!
    usage:     String!
    title:     String!
    reference: String!
}

type Commerce_Product_Attributes {
    attributeKeys: [String!]
    attributes: [Commerce_Product_Attribute!]
    hasAttribute(key: String!): Boolean
    getAttribute(key: String!): Commerce_Product_Attribute
    getAttributesByKey(keys: [String!]): [Commerce_Product_Attribute!]
}

type Commerce_Product_Attribute {
    code: String!
    codeLabel: String!
    label: String!
    unitCode: String!
    values: [String!]
}

type Commerce_Product_CategoryTeaser {
    code: String!
    path: String!
    name: String!
    parent: Commerce_Product_CategoryTeaser
}

type Commerce_Product_PriceInfo {
    default: Commerce_Price!
    discounted: Commerce_Price!
    discountText: String!
    activeBase: Commerce_Price!
    activeBaseAmount: Float!
    activeBaseUnit: String!
    isDiscounted: Boolean!
    campaignRules: [String!]
    denyMoreDiscounts: Boolean!
    context: Commerce_Product_PriceContext!
    taxClass: String!
}


type Commerce_Product_SearchResult {
    products: [Commerce_Product!]
    facets: [Commerce_Search_Facet!]!
    suggestions: [Commerce_Search_Suggestion!]
    searchMeta: Commerce_Search_Meta!
    hasSelectedFacet: Boolean!
    promotion: Commerce_Search_Promotion
}

type Commerce_Product_Badges {
    all: [Commerce_Product_Badge!]
    first: Commerce_Product_Badge
}

type Commerce_Product_Badge {
    code:  String!
    label: String!
}

extend type Query {
    Commerce_Product(marketPlaceCode: String!, variantMarketPlaceCode: String): Commerce_Product
    Commerce_Product_Search(searchRequest: Commerce_Search_Request!): Commerce_Product_SearchResult!
}
`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_customer_interfaces_graphql-Service.graphql", Input: `type Commerce_Customer_Status_Result {
    isLoggedIn: Boolean!
    userID: String!
}

type Commerce_Customer_Result {
    id: String!
    "Customers personal data"
    personalData: Commerce_Customer_PersonData!
    "Get a specific address from the customer"
    getAddress(id: ID!): Commerce_Customer_Address
    "Addresses that the customer provided, can be used for billing / shipping"
    addresses: [Commerce_Customer_Address!]
    "The default shipping address of the customer, null if there is none"
    defaultShippingAddress: Commerce_Customer_Address
    "The default billing address of the customer, null if there is none"
    defaultBillingAddress: Commerce_Customer_Address
}

type Commerce_Customer_PersonData {
    gender:     String!
    firstName:  String!
    lastName:   String!
    middleName: String!
    mainEmail:  String!
    prefix:      String!
    birthday:    Date
    nationality: String!
}

type Commerce_Customer_Address {
    id:                     ID!
    additionalAddressLines: [String!]
    city:                   String!
    company:                String!
    countryCode:            String!
    "Flag if this address should be used as the default billing address"
    defaultBilling:         Boolean!
    "Flag if this address should be used as the default shipping address"
    defaultShipping:        Boolean!
    firstName:              String!
    lastName:               String!
    postCode:               String!
    prefix:                 String!
    regionCode:             String!
    street:                 String!
    streetNumber:           String!
    state:                  String!
    telephone:              String!
    email:                  String!
}

extend type Query {
    """
    Returns the logged in status for the current session
    """
    Commerce_Customer_Status: Commerce_Customer_Status_Result
    """
    Returns the logged in customer for the current session or an error if it is not logged in.
    If you don't want to handle the error, check with Commerce_Customer_Status first.
    """
    Commerce_Customer: Commerce_Customer_Result
}
`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_cart_interfaces_graphql-Service.graphql", Input: `type Commerce_Cart_DecoratedCart {
    cart: Commerce_Cart_Cart!
    decoratedDeliveries: [Commerce_Cart_DecoratedDelivery!]
    getDecoratedDeliveryByCode(deliveryCode: String!): Commerce_Cart_DecoratedDelivery
    getAllPaymentRequiredItems: Commerce_Cart_PricedItems!
    cartSummary: Commerce_Cart_Summary!
}

type Commerce_Cart_Summary {
    discounts: Commerce_Cart_AppliedDiscounts!
    sumAppliedDiscounts: Commerce_Price
    sumAppliedGiftCards: Commerce_Price
    sumGrandTotalWithGiftCards: Commerce_Price
    sumTotalDiscountWithGiftCardsAmount: Commerce_Price
    hasAppliedDiscounts: Boolean!
    sumTaxes: Commerce_Cart_Taxes
    sumPaymentSelectionCartSplitValueAmountByMethods(methods: [String!]): Commerce_Price
}

type Commerce_Cart_Cart {
    id: ID!
    entityID: String!
    billingAddress: Commerce_Cart_Address
    purchaser: Commerce_Cart_Person
    deliveries: [Commerce_Cart_Delivery!]
    additionalData: Commerce_Cart_AdditionalData!
    paymentSelection: Commerce_Cart_PaymentSelection
    belongsToAuthenticatedUser: Boolean!
    authenticatedUserID: String!
    appliedCouponCodes: [Commerce_Cart_CouponCode!]
    defaultCurrency: String!
    totalitems: [Commerce_Cart_Totalitem!]
    itemCount: Int!
    productCount: Int!
    isPaymentSelected: Boolean!
    grandTotal: Commerce_Price!
    sumTotalTaxAmount: Commerce_Price!
    subTotalNet: Commerce_Price!
    appliedGiftCards: [Commerce_Cart_AppliedGiftCard!]
    getDeliveryByCode(deliveryCode: String!): Commerce_Cart_Delivery
    getDeliveryCodes: [String!]

    getMainShippingEMail: String!
    isEmpty: Boolean!
    hasDeliveryForCode(deliveryCode: String!): Boolean!

    getDeliveryByItemID(itemID: String!): Commerce_Cart_Delivery!
    getByItemID(itemID: String!): Commerce_Cart_Item!
    getTotalQty(marketPlaceCode: String!, variantCode: String!): Int
    getByExternalReference(ref: String!): Commerce_Cart_Item!

    getVoucherSavings: Commerce_Price!
    getCartTeaser: Commerce_Cart_Teaser!

    sumShippingNet: Commerce_Price!
    sumShippingNetWithDiscounts: Commerce_Price!
    sumShippingGross: Commerce_Price!
    sumShippingGrossWithDiscounts: Commerce_Price!

    hasShippingCosts: Boolean!
    allShippingTitles: [String!]

    subTotalGross: Commerce_Price!
    subTotalGrossWithDiscounts: Commerce_Price!
    subTotalNetWithDiscounts: Commerce_Price!
    sumTotalDiscountAmount: Commerce_Price!
    sumNonItemRelatedDiscountAmount: Commerce_Price!
    sumItemRelatedDiscountAmount: Commerce_Price!
    hasAppliedCouponCode: Boolean!

    getPaymentReference: String!
    getTotalItemsByType(typeCode: String!): [Commerce_Cart_Totalitem!]
    grandTotalCharges: Commerce_Price_Charges!

    hasAppliedGiftCards: Boolean!
    hasRemainingGiftCards: Boolean!
}

type Commerce_Cart_PricedItems {
    cartItems:  [Commerce_Cart_PricedCartItem!]
    shippingItems:  [Commerce_Cart_PricedShippingItem!]
    totalItems: [Commerce_Cart_PricedTotalItem!]
}

type Commerce_Cart_PricedCartItem {
    amount: Commerce_Price!
    itemID: String!
}

type Commerce_Cart_PricedShippingItem {
    amount: Commerce_Price!
    deliveryInfoCode: String!
}

type Commerce_Cart_PricedTotalItem {
    amount: Commerce_Price!
    code: String!
}

type Commerce_Cart_Tax {
    amount: Commerce_Price!
    type: String!
    rate: Float
}

type Commerce_Cart_Taxes {
    items: [Commerce_Cart_Tax]!
    getByType(taxType: String): Commerce_Cart_Tax!
}

type Commerce_Cart_Teaser {
    productCount:  Int
    ItemCount:     Int
    DeliveryCodes: [String]
}

interface Commerce_Cart_PaymentSelection {
    gateway: String!
    totalValue: Commerce_Price!
    cartSplit: [Commerce_Cart_PaymentSelection_Split!]
}

type Commerce_Cart_PaymentSelection_Split {
    qualifier: Commerce_Cart_PaymentSelection_SplitQualifier!
    charge: Commerce_Price_Charge!
}

type Commerce_Cart_PaymentSelection_SplitQualifier {
    type: String!
    method: String!
    reference: String!
}

type Commerce_Cart_DefaultPaymentSelection implements Commerce_Cart_PaymentSelection {
    gateway: String!
    totalValue: Commerce_Price!
    cartSplit: [Commerce_Cart_PaymentSelection_Split!]
}

type Commerce_Cart_DecoratedDelivery {
    delivery: Commerce_Cart_Delivery!
    decoratedItems: [Commerce_Cart_DecoratedItem!]
}

type Commerce_Cart_Delivery {
    deliveryInfo: Commerce_Cart_DeliveryInfo
    cartitems: [Commerce_Cart_Item!]
    shippingItem: Commerce_Cart_ShippingItem
    subTotalGross: Commerce_Price
    grandTotal: Commerce_Price
    sumTotalTaxAmount: Commerce_Price
    subTotalNet: Commerce_Price
    sumTotalDiscountAmount: Commerce_Price
    sumNonItemRelatedDiscountAmount: Commerce_Price
    sumItemRelatedDiscountAmount: Commerce_Price
    subTotalGrossWithDiscounts: Commerce_Price
    subTotalNetWithDiscounts: Commerce_Price!
    hasItems: Boolean!
}

type Commerce_Cart_DeliveryInfo {
    code: String!
    workflow: String!
    method: String!
    carrier: String!
    deliveryLocation: Commerce_Cart_DeliveryLocation
    desiredTime: Time
    additionalData: Commerce_Cart_CustomAttributes!
}

type Commerce_Cart_DeliveryLocation  {
    type: String!
    address: Commerce_Cart_Address
    useBillingAddress: Boolean!
    code: String!
}

type Commerce_Cart_ShippingItem {
    title: String!
    priceNet: Commerce_Price!
    taxAmount: Commerce_Price!
    priceGross: Commerce_Price!
    appliedDiscounts: Commerce_Cart_AppliedDiscounts!
    totalWithDiscountInclTax: Commerce_Price!
    tax: Commerce_Cart_Tax!
}

type Commerce_Cart_AppliedDiscounts {
    items: [Commerce_Cart_AppliedDiscount!]
    byCampaignCode(campaignCode: String):  Commerce_Cart_AppliedDiscounts!
    byType(filterType: String): Commerce_Cart_AppliedDiscounts!
}

type Commerce_Cart_AppliedDiscount {
    campaignCode:  String!
    couponCode:    String!
    label:         String!
    applied:       Commerce_Price!
    type:          String!
    isItemRelated: Boolean!
    sortOrder:     Int!
}

type Commerce_Cart_DecoratedItem {
    item: Commerce_Cart_Item
    product: Commerce_Product
}

type Commerce_Cart_Item {
    id: ID!
    externalReference: String!
    marketplaceCode: String!
    variantMarketPlaceCode: String!
    productName: String!
    sourceID: String!
    qty: Int!
    additionalDataKeys: [String!]
    additionalDataValues: [String!]
    getAdditionalData(key: String!): String
    hasAdditionalDataKey(key: String!): Boolean
    singlePriceGross: Commerce_Price!
    singlePriceNet: Commerce_Price!
    rowPriceGross: Commerce_Price!
    rowPriceNet: Commerce_Price!
    appliedDiscounts: Commerce_Cart_AppliedDiscounts!
    #    rowTaxes: Commerce_Taxes!
}

type Commerce_Cart_Address {
    vat:                    String!
    firstname:              String!
    lastname:               String!
    middleName:             String!
    title:                  String!
    salutation:             String!
    street:                 String!
    streetNr:               String!
    additionalAddressLines: [String!]
    company:                String!
    city:                   String!
    postCode:               String!
    state:                  String!
    regionCode:             String!
    country:                String!
    countryCode:            String!
    telephone:              String!
    email:                  String!
}

type Commerce_Cart_Person {
    address: Commerce_Cart_Address
    personalDetails: Commerce_Cart_PersonalDetails!
    existingCustomerData: Commerce_Cart_ExistingCustomerData
}

type Commerce_Cart_ExistingCustomerData {
    id: ID!
}

type Commerce_Cart_PersonalDetails {
    dateOfBirth: String!
    passportCountry: String!
    passportNumber: String!
    nationality: String!
}

type Commerce_Cart_AdditionalData {
    customAttributes: Commerce_Cart_CustomAttributes!
    reservedOrderID: String!
}

type Commerce_Cart_CustomAttributes {
    "Get specific attribute by key"
    get(key: String!): Commerce_Cart_KeyValue
}

type Commerce_Cart_KeyValue {
    key: String!
    value: String!
}

type Commerce_Cart_Totalitem {
    code: String!
    title: String!
    price: Commerce_Price!
    type: String!
}

type Commerce_Cart_CouponCode {
    code: String!
}

type Commerce_Cart_AppliedGiftCard {
    code: String!
    applied: Commerce_Price!
    remaining: Commerce_Price!
    hasRemaining: Boolean!
}

type Commerce_Cart_ValidationResult {
    hasCommonError:        Boolean!
    commonErrorMessageKey: String!
    itemResults:           [Commerce_Cart_ItemValidationError!]
}

type Commerce_Cart_ItemValidationError {
    itemID:          String!
    errorMessageKey: String!
}


type Commerce_Cart_QtyRestrictionResult {
    isRestricted:        Boolean!
    maxAllowed:          Int!
    remainingDifference: Int!
    restrictorName:      String!
}

type Commerce_Cart_PlacedOrderInfo {
    orderNumber:    String!
    deliveryCode:   String!
}

type Commerce_Cart_BillingAddressForm {
    "Billing address form data"
    formData:       Commerce_Cart_AddressForm
    "Validation of supplied billing address, empty if address is valid"
    validationInfo: Commerce_Cart_Form_ValidationInfo
    "Shows if the request was successfully processed"
    processed: Boolean
}

type Commerce_Cart_SelectedPaymentResult {
    validationInfo: Commerce_Cart_Form_ValidationInfo
    processed: Boolean
}

type Commerce_Cart_Form_ValidationInfo {
    "Field specific validation errors"
    fieldErrors: [Commerce_Cart_Form_FieldError!]
    "General validation errors"
    generalErrors: [Commerce_Cart_Form_Error!]
}

type Commerce_Cart_Form_Error {
    "A key of the error message. Often used for translation"
    messageKey: String!
    "A speaking error label. Often used to show to end user - in case no translation exists"
    defaultLabel: String!
}

type Commerce_Cart_Form_FieldError {
    "A key of the error message. Often used for translation"
    messageKey: String!
    "A speaking error label. Often used to show to end user - in case no translation exists"
    defaultLabel: String!
    "Identifier for a form field"
    fieldName: String!
}

type Commerce_Cart_AddressForm {
    vat:                    String!
    firstname:              String!
    lastname:               String!
    middleName:             String!
    title:                  String!
    salutation:             String!
    street:                 String!
    streetNr:               String!
    addressLine1:           String!
    addressLine2:           String!
    company:                String!
    city:                   String!
    postCode:               String!
    state:                  String!
    regionCode:             String!
    country:                String!
    countryCode:            String!
    phoneNumber:            String!
    email:                  String!
}

input Commerce_Cart_AddressFormInput {
    vat:                    String
    firstname:              String!
    lastname:               String!
    middleName:             String
    title:                  String
    salutation:             String
    street:                 String
    streetNr:               String
    addressLine1:           String
    addressLine2:           String
    company:                String
    city:                   String
    postCode:               String
    state:                  String
    regionCode:             String
    country:                String
    countryCode:            String
    phoneNumber:            String
    email:                  String!
}

input Commerce_Cart_DeliveryAddressInput {
    "Unique delivery code to identify the delivery"
    deliveryCode: String!
    "Delivery address form data"
    deliveryAddress: Commerce_Cart_AddressFormInput
    "Should the data of the billing address be used for this delivery"
    useBillingAddress: Boolean!
    "Optional Shipping Method"
    method: String
    "Optional Shipping Method"
    carrier: String
    "Optional desired delivery date / time"
    desiredTime: Time
}

type Commerce_Cart_DeliveryAddressForm {
    "Unique delivery code to identify the delivery"
    deliveryCode: String!
    "Delivery address form data"
    formData:       Commerce_Cart_AddressForm
    "Shows if the data of the billing address should be used for this delivery"
    useBillingAddress: Boolean!
    "Shipping Method"
    method: String
    "Shipping Carrier"
    carrier: String
    "Optional desired delivery date / time"
    desiredTime: Time

    "Validation of supplied delivery address, empty if address is valid"
    validationInfo: Commerce_Cart_Form_ValidationInfo
    "Shows if the request was successfully processed"
    processed: Boolean
}

type Commerce_Cart_UpdateDeliveryShippingOptions_Result {
    "Shows if the request was successfully processed"
    processed: Boolean
}

input Commerce_Cart_DeliveryShippingOptionInput {
    "Unique delivery code to identify an **existing** delivery"
    deliveryCode: String!
    "Shipping Method"
    method: String!
    "Shipping Carrier"
    carrier: String!
}

input Commerce_Cart_KeyValueInput {
    key: String!
    value: String!
}

input Commerce_Cart_DeliveryAdditionalDataInput {
    deliveryCode: String!
    additionalData: [Commerce_Cart_KeyValueInput!]!
}

extend type Query {
    Commerce_Cart_DecoratedCart: Commerce_Cart_DecoratedCart!
    Commerce_Cart_Validator: Commerce_Cart_ValidationResult!
    "Commerce_Cart_QtyRestriction returns if the product is restricted in terms of the allowed quantity for the current cart and the given delivery"
    Commerce_Cart_QtyRestriction(marketplaceCode: String!, variantCode: String, deliveryCode: String!): Commerce_Cart_QtyRestrictionResult!
}

extend type Mutation {
    Commerce_Cart_AddToCart(marketplaceCode: ID!, qty: Int!, deliveryCode: String!): Commerce_Cart_DecoratedCart!
    Commerce_Cart_DeleteCartDelivery(deliveryCode: String!): Commerce_Cart_DecoratedCart!
    Commerce_Cart_DeleteItem(itemID: ID!, deliveryCode: String!): Commerce_Cart_DecoratedCart!
    Commerce_Cart_UpdateItemQty(itemID: ID!, deliveryCode: String!, qty: Int!): Commerce_Cart_DecoratedCart!
    "Adds/Updates the Billing Address of the current cart"
    Commerce_Cart_UpdateBillingAddress(addressForm: Commerce_Cart_AddressFormInput): Commerce_Cart_BillingAddressForm!
    Commerce_Cart_UpdateSelectedPayment(gateway: String!, method: String!): Commerce_Cart_SelectedPaymentResult!
    Commerce_Cart_ApplyCouponCodeOrGiftCard(code: String!): Commerce_Cart_DecoratedCart
    Commerce_Cart_RemoveGiftCard(giftCardCode: String!): Commerce_Cart_DecoratedCart
    Commerce_Cart_RemoveCouponCode(couponCode: String!): Commerce_Cart_DecoratedCart
    "Adds/Updates one/multiple Delivery Addresses"
    Commerce_Cart_UpdateDeliveryAddresses(deliveryAdresses: [Commerce_Cart_DeliveryAddressInput!]): [Commerce_Cart_DeliveryAddressForm]!
    "Adds/Updates one/multiple Delivery Addresses"
    Commerce_Cart_UpdateDeliveryShippingOptions(shippingOptions: [Commerce_Cart_DeliveryShippingOptionInput!]): Commerce_Cart_UpdateDeliveryShippingOptions_Result!
    "Cleans current cart"
    Commerce_Cart_Clean: Boolean!
    "Adds/Updates additional data for the cart"
    Commerce_Cart_UpdateAdditionalData(additionalData: [Commerce_Cart_KeyValueInput!]!): Commerce_Cart_DecoratedCart!
    "Adds/Updates additional data for the given deliveries"
    Commerce_Cart_UpdateDeliveriesAdditionalData(data: [Commerce_Cart_DeliveryAdditionalDataInput!]!): Commerce_Cart_DecoratedCart!
}
`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_checkout_interfaces_graphql-Service.graphql", Input: `type Commerce_Checkout_StartPlaceOrder_Result {
    uuid: String!
}
# Commerce_Checkout_PlaceOrderContext represents the result of the current (running) place order mutation
type Commerce_Checkout_PlaceOrderContext {
    # The Cart that is going to be placed
    cart: Commerce_Cart_DecoratedCart
    # The placed order in case order is already placed
    orderInfos: Commerce_Checkout_PlacedOrderInfos
    # State depending on the state of payment and place order - state may contain additional infos
    state: Commerce_Checkout_PlaceOrderState_State!
    # A unique id for the process
    uuid: String!
}


# Commerce_Checkout_PlacedOrderInfos - infos about the placed orders - typically shown on a suceess page
type Commerce_Checkout_PlacedOrderInfos {
    paymentInfos:        [Commerce_Checkout_PlaceOrderPaymentInfo!]
    placedOrderInfos:    [Commerce_Cart_PlacedOrderInfo!]
    email:               String!
}

type  Commerce_Checkout_PlaceOrderPaymentInfo {
    gateway:         String!
    paymentProvider: String!
    method:          String!
    amount:          Commerce_Price!
    title:           String!
}


interface Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Wait implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_WaitForCustomer implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Success implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Failed implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    reason: Commerce_Checkout_PlaceOrderState_State_FailedReason!
}

type Commerce_Checkout_PlaceOrderState_State_ShowIframe implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
}

type Commerce_Checkout_PlaceOrderState_State_ShowHTML implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    HTML: String!
}

type Commerce_Checkout_PlaceOrderState_State_Redirect implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
}

type Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    "Wallet payment method that was chosen previously"
    paymentMethod: String!
    "Information needed to create a payment using the PaymentRequest API"
    paymentRequestAPI: Commerce_Checkout_PlaceOrderState_PaymentRequestAPI!
}

type Commerce_Checkout_PlaceOrderState_PaymentRequestAPI {
    "Contains the JSON encoded method data for the PaymentRequest API"
    methodData: String!
    "Contains the JSON encoded details for the PaymentRequest API"
    details: String!
    "Contains the JSON encoded options for the PaymentRequest API"
    options: String!
    "Optional endpoint used for obtaining a merchant session, not set if the wallet payment doesn't require a merchant validation"
    merchantValidationURL: String
    "Endpoint to sent completed payment to"
    completeURL: String!
}

type Commerce_Checkout_PlaceOrderState_State_PostRedirect implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
    Parameters: [Commerce_Checkout_PlaceOrderState_Form_Parameter!]
}

interface Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}


type Commerce_Checkout_PlaceOrderState_State_FailedReason_Error implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
    validationResult: Commerce_Cart_ValidationResult!
}

type Commerce_Checkout_PlaceOrderState_Form_Parameter {
    key: String!
    value: [String!]
}

extend type Query {
    # Is there a active place order process
    Commerce_Checkout_ActivePlaceOrder: Boolean!
    Commerce_Checkout_CurrentContext: Commerce_Checkout_PlaceOrderContext!
}

extend type Mutation {
    # Starts a new process and will replace existing ones
    Commerce_Checkout_StartPlaceOrder(returnUrl: String!): Commerce_Checkout_StartPlaceOrder_Result!
    # Cancels to current running place order process, possible if state is not final
    Commerce_Checkout_CancelPlaceOrder: Boolean!
    # Clears the last stored place order process
    Commerce_Checkout_ClearPlaceOrder: Boolean!
    # Gets the last stored place order state and ensures that the state machine proceeds, non blocking
    Commerce_Checkout_RefreshPlaceOrder: Commerce_Checkout_PlaceOrderContext!
    # Gets the most recent place order state by waiting for the state machine to proceed, therefore blocking
    Commerce_Checkout_RefreshPlaceOrderBlocking: Commerce_Checkout_PlaceOrderContext!
}
`, BuiltIn: false},
	{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_category_interfaces_graphql-Service.graphql", Input: `type Commerce_Category_Attributes {
    get(code: String!): Commerce_Category_Attribute
    has(code: String!): Boolean
    all: [Commerce_Category_Attribute!]
}

type Commerce_Category_Attribute {
    code: String!
    label: String!
    values: [Commerce_Category_AttributeValue!]
}

type Commerce_Category_AttributeValue {
    value: String!
    label: String!
}

interface Commerce_Category {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    promoted: Boolean!
    attributes: Commerce_Category_Attributes!
}

type Commerce_CategoryData implements Commerce_Category {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    promoted: Boolean!
    attributes: Commerce_Category_Attributes!
}

interface Commerce_Tree {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    subTrees: [Commerce_Tree]
    hasChilds: Boolean!
    documentCount: Int!
}

type Commerce_CategoryTree implements Commerce_Tree{
    code: String!
    name: String!
    path: String!
    active: Boolean!
    subTrees: [Commerce_Tree]
    hasChilds: Boolean!
    documentCount: Int!
}

type Commerce_Category_SearchResult {
    category:               Commerce_Category!
    productSearchResult:    Commerce_Product_SearchResult!
}

extend type Query {
    Commerce_CategoryTree(activeCategoryCode: String!): Commerce_Tree!
    Commerce_Category(categoryCode: String!, categorySearchRequest: Commerce_Search_Request): Commerce_Category_SearchResult
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_deprecated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["reason"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reason"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["reason"] = arg0
	return args, nil
}

func (ec *executionContext) dir_include_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["if"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("if"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["if"] = arg0
	return args, nil
}

func (ec *executionContext) dir_skip_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["if"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("if"))
		arg0, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["if"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["campaignCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("campaignCode"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["campaignCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_AppliedDiscounts_byType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["filterType"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("filterType"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getByExternalReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ref"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ref"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ref"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getByItemID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("itemID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getDeliveryByItemID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("itemID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getTotalItemsByType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["typeCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("typeCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["typeCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getTotalQty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketPlaceCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("marketPlaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketPlaceCode"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["variantCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("variantCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_hasDeliveryForCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_CustomAttributes_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Item_getAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Item_hasAdditionalDataKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["methods"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("methods"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["methods"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Taxes_getByType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["taxType"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("taxType"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taxType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_has_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Customer_Result_getAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_getByChargeQualifierForced_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.ChargeQualifier
	if tmp, ok := rawArgs["qualifier"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("qualifier"))
		arg0, err = ec.unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qualifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_getByTypeForced_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ctype"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ctype"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ctype"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_hasChargeQualifier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.ChargeQualifier
	if tmp, ok := rawArgs["qualifier"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("qualifier"))
		arg0, err = ec.unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qualifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_hasType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ctype"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("ctype"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ctype"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_getAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_getAttributesByKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["keys"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("keys"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keys"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_hasAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Media_getMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["usage"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("usage"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usage"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_AddToCart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketplaceCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("marketplaceCode"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketplaceCode"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["qty"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("qty"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qty"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_DeleteCartDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_DeleteItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("itemID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_RemoveCouponCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["couponCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("couponCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["couponCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_RemoveGiftCard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["giftCardCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("giftCardCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["giftCardCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.KeyValue
	if tmp, ok := rawArgs["additionalData"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("additionalData"))
		arg0, err = ec.unmarshalNCommerce_Cart_KeyValueInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["additionalData"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *forms.AddressForm
	if tmp, ok := rawArgs["addressForm"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressForm"))
		arg0, err = ec.unmarshalOCommerce_Cart_AddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addressForm"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.DeliveryAdditionalData
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("data"))
		arg0, err = ec.unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalDataᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*forms.DeliveryForm
	if tmp, ok := rawArgs["deliveryAdresses"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryAdresses"))
		arg0, err = ec.unmarshalOCommerce_Cart_DeliveryAddressInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryFormᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryAdresses"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.DeliveryShippingOption
	if tmp, ok := rawArgs["shippingOptions"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("shippingOptions"))
		arg0, err = ec.unmarshalOCommerce_Cart_DeliveryShippingOptionInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOptionᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shippingOptions"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateItemQty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("itemID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["qty"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("qty"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qty"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gateway"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("gateway"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gateway"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["method"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("method"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["method"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["returnUrl"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("returnUrl"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["returnUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Cart_QtyRestriction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketplaceCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("marketplaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketplaceCode"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["variantCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("variantCode"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_CategoryTree_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activeCategoryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("activeCategoryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activeCategoryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["categoryCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("categoryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryCode"] = arg0
	var arg1 *searchdto.CommerceSearchRequest
	if tmp, ok := rawArgs["categorySearchRequest"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("categorySearchRequest"))
		arg1, err = ec.unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySearchRequest"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_Search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 searchdto.CommerceSearchRequest
	if tmp, ok := rawArgs["searchRequest"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("searchRequest"))
		arg0, err = ec.unmarshalNCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketPlaceCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("marketPlaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketPlaceCode"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["variantMarketPlaceCode"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("variantMarketPlaceCode"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantMarketPlaceCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

func (ec *executionContext) _fieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) interface{} {
	fc := graphql.GetFieldContext(ctx)
	for _, d := range fc.Field.Directives {
		switch d.Name {
		case "include":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_include_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Include == nil {
					return nil, errors.New("directive include is not implemented")
				}
				return ec.directives.Include(ctx, obj, n, args["if"].(bool))
			}
		case "skip":
			rawArgs := d.ArgumentMap(ec.Variables)
			args, err := ec.dir_skip_args(ctx, rawArgs)
			if err != nil {
				ec.Error(ctx, err)
				return nil
			}
			n := next
			next = func(ctx context.Context) (interface{}, error) {
				if ec.directives.Skip == nil {
					return nil, errors.New("directive skip is not implemented")
				}
				return ec.directives.Skip(ctx, obj, n, args["if"].(bool))
			}
		}
	}
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Commerce_Cart_AdditionalData_customAttributes(ctx context.Context, field graphql.CollectedField, obj *cart.AdditionalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AdditionalData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_AdditionalData().CustomAttributes(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CustomAttributes)
	fc.Result = res
	return ec.marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AdditionalData_reservedOrderID(ctx context.Context, field graphql.CollectedField, obj *cart.AdditionalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AdditionalData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedOrderID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_vat(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_firstname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_lastname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_middleName(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_title(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_salutation(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_street(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_streetNr(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalAddressLines, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_company(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_city(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_postCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_state(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_regionCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_country(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_countryCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_telephone(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Address_email(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_vat(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_firstname(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_lastname(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_middleName(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_title(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_salutation(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_street(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_streetNr(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_addressLine1(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_addressLine2(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_company(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_city(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_postCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_state(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_regionCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_country(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_countryCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AddressForm_email(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_campaignCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_couponCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CouponCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_label(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_type(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_isItemRelated(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsItemRelated, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_sortOrder(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOrder, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_items(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscounts",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedDiscount)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscounts",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByCampaignCode(args["campaignCode"].(string)), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_byType(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedDiscounts",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_AppliedDiscounts_byType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByType(args["filterType"].(string)), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_code(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_remaining(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remaining, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_hasRemaining(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_AppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRemaining(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_formData(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormData, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(forms.AddressForm)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_processed(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_id(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_entityID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_billingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_purchaser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purchaser, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Person)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Person2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_deliveries(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliveries, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Delivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Delivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_additionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalData, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.AdditionalData)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_paymentSelection(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSelection, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.PaymentSelection)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongsToAuthenticatedUser, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_authenticatedUserID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticatedUserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_appliedCouponCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedCouponCodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.CouponCode)
	fc.Result = res
	return ec.marshalOCommerce_Cart_CouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_defaultCurrency(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCurrency, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_totalitems(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totalitems, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Totalitem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_itemCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_productCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_isPaymentSelected(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPaymentSelected(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_appliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedGiftCards, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedGiftCard)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getDeliveryByCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_Cart().GetDeliveryByCode(rctx, obj, args["deliveryCode"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Delivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryCodes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getMainShippingEMail(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetMainShippingEMail(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_isEmpty(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEmpty(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_hasDeliveryForCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_hasDeliveryForCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasDeliveryForCode(args["deliveryCode"].(string)), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryByItemID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getDeliveryByItemID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryByItemID(args["itemID"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Delivery)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getByItemID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getByItemID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByItemID(args["itemID"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Item)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getTotalQty(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getTotalQty_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTotalQty(args["marketPlaceCode"].(string), args["variantCode"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getByExternalReference(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getByExternalReference_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByExternalReference(args["ref"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Item)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getVoucherSavings(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetVoucherSavings(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getCartTeaser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetCartTeaser(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Teaser)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Teaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumShippingNet(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumShippingNet(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumShippingNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumShippingNetWithDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumShippingGross(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumShippingGross(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumShippingGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumShippingGrossWithDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_hasShippingCosts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasShippingCosts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_allShippingTitles(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllShippingTitles(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalGross(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGross(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGrossWithDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNetWithDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumTotalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalDiscountAmount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumNonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumNonItemRelatedDiscountAmount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_sumItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumItemRelatedDiscountAmount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_hasAppliedCouponCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedCouponCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getPaymentReference(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPaymentReference(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_getTotalItemsByType(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Cart_getTotalItemsByType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTotalItemsByType(args["typeCode"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Totalitem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_grandTotalCharges(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotalCharges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Charges)
	fc.Result = res
	return ec.marshalNCommerce_Price_Charges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharges(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_hasAppliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedGiftCards(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Cart_hasRemainingGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRemainingGiftCards(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_CouponCode_code(ctx context.Context, field graphql.CollectedField, obj *cart.CouponCode) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_CouponCode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_CustomAttributes_get(ctx context.Context, field graphql.CollectedField, obj *dto.CustomAttributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_CustomAttributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_CustomAttributes_get_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get(args["key"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.KeyValue)
	fc.Result = res
	return ec.marshalOCommerce_Cart_KeyValue2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_cart(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Cart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedDeliveries(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.DecoratedDelivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDecoratedDeliveryByCode(args["deliveryCode"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedDelivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAllPaymentRequiredItems(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.PricedItems)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PricedItems2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedItems(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_cartSummary(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartSummary(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.CartSummary)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Summary2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartSummary(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery_delivery(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedDelivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Delivery)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery_decoratedItems(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedDelivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedItems, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.DecoratedCartItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedItem_item(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCartItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.Item)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DecoratedItem_product(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCartItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DecoratedItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_gateway(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DefaultPaymentSelection",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_totalValue(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DefaultPaymentSelection",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalValue(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DefaultPaymentSelection",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_DefaultPaymentSelection().CartSplit(rctx, obj)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.PaymentSelectionSplit)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PaymentSelection_Split2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_deliveryInfo(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_cartitems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cartitems, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Item)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Item2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_shippingItem(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingItem, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.ShippingItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalGross(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGross(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_sumTotalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalDiscountAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_sumNonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumNonItemRelatedDiscountAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_sumItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumItemRelatedDiscountAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGrossWithDiscounts(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNetWithDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Delivery_hasItems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Delivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasItems(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_formData(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormData, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(forms.AddressForm)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseBillingAddress, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_method(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_carrier(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_desiredTime(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredTime, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_processed(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_workflow(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workflow, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_method(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_carrier(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_deliveryLocation(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryLocation, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryLocation)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_desiredTime(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredTime, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_additionalData(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_DeliveryInfo().AdditionalData(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CustomAttributes)
	fc.Result = res
	return ec.marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_type(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_address(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_useBillingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseBillingAddress, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_DeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ExistingCustomerData_id(ctx context.Context, field graphql.CollectedField, obj *cart.ExistingCustomerData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ExistingCustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_Error_messageKey(ctx context.Context, field graphql.CollectedField, obj *domain4.Error) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_Error",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_Error_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *domain4.Error) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_Error",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_messageKey(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_fieldName(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx context.Context, field graphql.CollectedField, obj *dto.ValidationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_ValidationInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldErrors, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.FieldError)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_generalErrors(ctx context.Context, field graphql.CollectedField, obj *dto.ValidationInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Form_ValidationInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralErrors, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain4.Error)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_id(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_externalReference(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalReference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_marketplaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketplaceCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantMarketPlaceCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_productName(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_sourceID(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_qty(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_additionalDataKeys(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataKeys(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_additionalDataValues(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataValues(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_getAdditionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Item_getAdditionalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAdditionalData(args["key"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_hasAdditionalDataKey(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Item_hasAdditionalDataKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAdditionalDataKey(args["key"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_singlePriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceGross, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_singlePriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceNet, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_rowPriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceGross, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_rowPriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceNet, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Item_appliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Item",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_Item().AppliedDiscounts(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ItemValidationError_itemID(ctx context.Context, field graphql.CollectedField, obj *validation.ItemValidationError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ItemValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ItemValidationError_errorMessageKey(ctx context.Context, field graphql.CollectedField, obj *validation.ItemValidationError) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ItemValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessageKey, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_KeyValue_key(ctx context.Context, field graphql.CollectedField, obj *dto.KeyValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_KeyValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_KeyValue_value(ctx context.Context, field graphql.CollectedField, obj *dto.KeyValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_KeyValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split_qualifier(ctx context.Context, field graphql.CollectedField, obj *dto.PaymentSelectionSplit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PaymentSelection_Split",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qualifier, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.SplitQualifier)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PaymentSelection_SplitQualifier2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐSplitQualifier(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split_charge(ctx context.Context, field graphql.CollectedField, obj *dto.PaymentSelectionSplit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PaymentSelection_Split",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charge, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeReference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Person_address(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Person",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Person_personalDetails(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Person",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalDetails, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.PersonalDetails)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Person_existingCustomerData(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Person",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingCustomerData, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.ExistingCustomerData)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_passportCountry(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportCountry, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_passportNumber(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNumber, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_nationality(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_orderNumber(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PlacedOrderInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PlacedOrderInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedCartItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedCartItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedCartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedCartItem_itemID(ctx context.Context, field graphql.CollectedField, obj *dto.PricedCartItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedCartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedItems_cartItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedItems",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartItems(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedCartItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedCartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedItems_shippingItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedItems",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingItems(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedShippingItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedShippingItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedItems_totalItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedItems",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalItems(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedTotalItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedTotalItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx context.Context, field graphql.CollectedField, obj *dto.PricedShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryInfoCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedTotalItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedTotalItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem_code(ctx context.Context, field graphql.CollectedField, obj *dto.PricedTotalItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_PricedTotalItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_isRestricted(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_QtyRestrictionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRestricted, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_QtyRestrictionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxAllowed, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_QtyRestrictionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainingDifference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_restrictorName(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_QtyRestrictionResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictorName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.SelectedPaymentResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_SelectedPaymentResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_processed(ctx context.Context, field graphql.CollectedField, obj *dto.SelectedPaymentResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_SelectedPaymentResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_title(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_priceNet(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceNet, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_taxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxAmount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_priceGross(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceGross, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_appliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_ShippingItem().AppliedDiscounts(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalWithDiscountInclTax(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_tax(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_discounts(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumAppliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumAppliedDiscounts(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumAppliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumAppliedGiftCards(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumGrandTotalWithGiftCards(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumGrandTotalWithGiftCards(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalDiscountWithGiftCardsAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_hasAppliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedDiscounts(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumTaxes(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTaxes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Taxes)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Taxes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐTaxes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Summary",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumPaymentSelectionCartSplitValueAmountByMethods(args["methods"].([]string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Tax_amount(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Tax",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Tax_type(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Tax",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Tax_rate(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Tax",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*big.Float)
	fc.Result = res
	return ec.marshalOFloat2ᚖmathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Taxes_items(ctx context.Context, field graphql.CollectedField, obj *dto.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Taxes",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Taxes_getByType(ctx context.Context, field graphql.CollectedField, obj *dto.Taxes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Taxes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_Taxes_getByType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByType(args["taxType"].(string)), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Teaser_productCount(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Teaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Teaser_ItemCount(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Teaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCount, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Teaser_DeliveryCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Teaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCodes, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Totalitem_code(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Totalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Totalitem_title(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Totalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Totalitem_price(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Totalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Totalitem_type(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_Totalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx context.Context, field graphql.CollectedField, obj *dto.UpdateShippingOptionsResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_UpdateDeliveryShippingOptions_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_hasCommonError(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ValidationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasCommonError, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ValidationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonErrorMessageKey, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_itemResults(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Cart_ValidationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemResults, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]validation.ItemValidationError)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ItemValidationError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_code(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_name(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_path(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_active(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_promoted(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promoted(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_attributes(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_code(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_name(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_path(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_active(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_subTrees(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTrees(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.Tree)
	fc.Result = res
	return ec.marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_hasChilds(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChilds(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_documentCount(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentCount(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_values(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.AttributeValue)
	fc.Result = res
	return ec.marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_AttributeValue_value(ctx context.Context, field graphql.CollectedField, obj *domain3.AttributeValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_AttributeValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_AttributeValue_label(ctx context.Context, field graphql.CollectedField, obj *domain3.AttributeValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_AttributeValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_get(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Category_Attributes_get_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get(args["code"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain3.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_has(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Category_Attributes_has_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Has(args["code"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_all(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_SearchResult_category(ctx context.Context, field graphql.CollectedField, obj *categorydto.CategorySearchResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Category)
	fc.Result = res
	return ec.marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_SearchResult_productSearchResult(ctx context.Context, field graphql.CollectedField, obj *categorydto.CategorySearchResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Category_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductSearchResult, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.SearchResultDTO)
	fc.Result = res
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_cart(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_orderInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderInfos, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto1.PlacedOrderInfos)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_state(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto1.State)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_uuid(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentProvider, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx context.Context, field graphql.CollectedField, obj *dto1.FormParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_Form_Parameter",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx context.Context, field graphql.CollectedField, obj *dto1.FormParameter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_Form_Parameter",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodData, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantValidationURL, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompleteURL, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Failed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Failed",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx context.Context, field graphql.CollectedField, obj *dto1.Failed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Failed",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(process.FailedReason)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_State_FailedReason2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐFailedReason(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField, obj *process.CanceledByCustomerReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx context.Context, field graphql.CollectedField, obj *process.CartValidationErrorReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx context.Context, field graphql.CollectedField, obj *process.CartValidationErrorReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationResult, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(validation.Result)
	fc.Result = res
	return ec.marshalNCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx context.Context, field graphql.CollectedField, obj *process.ErrorOccurredReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_Error",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField, obj *process.PaymentCanceledByCustomerReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx context.Context, field graphql.CollectedField, obj *process.PaymentErrorOccurredReason) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parameters, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto1.FormParameter)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlaceOrderState_Form_Parameter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Redirect) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Redirect",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.Redirect) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Redirect",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowHTML) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowHTML",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowHTML) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowHTML",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTML, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowIframe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowIframe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowIframe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowIframe",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRequestAPI, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto1.PaymentRequestAPI)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_PaymentRequestAPI2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPaymentRequestAPI(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Success) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Success",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Wait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Wait",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx context.Context, field graphql.CollectedField, obj *dto1.WaitForCustomer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_WaitForCustomer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentInfos, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]application.PlaceOrderPaymentInfo)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacedOrderInfos, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]placeorder.PlacedOrderInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_email(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx context.Context, field graphql.CollectedField, obj *dto1.StartPlaceOrderResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Checkout_StartPlaceOrder_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_id(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalAddressLines, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_city(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_company(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_countryCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_defaultBilling(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBilling, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_defaultShipping(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultShipping, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_firstName(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_lastName(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_postCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_prefix(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_regionCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_street(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_streetNumber(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_state(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_telephone(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Address_email(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Address",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_gender(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_firstName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_lastName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_middleName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_mainEmail(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainEmail, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_prefix(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_birthday(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalODate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_PersonData_nationality(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_PersonData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_id(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_personalData(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalData, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain5.PersonData)
	fc.Result = res
	return ec.marshalNCommerce_Customer_PersonData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐPersonData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_getAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Customer_Result_getAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAddress(args["id"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_addresses(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_defaultShippingAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultShippingAddress, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Result_defaultBillingAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBillingAddress, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Status_Result_isLoggedIn(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerStatusResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Status_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLoggedIn, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Customer_Status_Result_userID(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerStatusResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Customer_Status_Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_amount(ctx context.Context, field graphql.CollectedField, obj *domain.Price) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FloatAmount(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_currency(ctx context.Context, field graphql.CollectedField, obj *domain.Price) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charge_price(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charge_value(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charge_type(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charge_reference(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_ChargeQualifier_type(ctx context.Context, field graphql.CollectedField, obj *domain.ChargeQualifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_ChargeQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_ChargeQualifier_reference(ctx context.Context, field graphql.CollectedField, obj *domain.ChargeQualifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_ChargeQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charges_items(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charges_hasType(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Price_Charges_hasType_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasType(args["ctype"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charges_hasChargeQualifier(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Price_Charges_hasChargeQualifier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChargeQualifier(args["qualifier"].(domain.ChargeQualifier)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charges_getByChargeQualifierForced(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Price_Charges_getByChargeQualifierForced_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByChargeQualifierForced(args["qualifier"].(domain.ChargeQualifier)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_Charges_getByTypeForced(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Price_Charges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Price_Charges_getByTypeForced_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByTypeForced(args["ctype"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantMarketPlaceCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_variationSelections(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariationSelections(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariationSelection)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveVariationSelections(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.ActiveVariationSelection)
	fc.Result = res
	return ec.marshalOCommerce_Product_ActiveVariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariantProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_value(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ActiveVariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attribute_codeLabel(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeLabel, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attribute_unitCode(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attribute_values(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attributes_attributeKeys(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttributeKeys(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attributes_attributes(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attributes_hasAttribute(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Product_Attributes_hasAttribute_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAttribute(args["key"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attributes_getAttribute(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Product_Attributes_getAttribute_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute(args["key"].(string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Attributes_getAttributesByKey(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Product_Attributes_getAttributesByKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttributesByKey(args["keys"].([]string)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Badge_code(ctx context.Context, field graphql.CollectedField, obj *domain1.Badge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Badge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Badge_label(ctx context.Context, field graphql.CollectedField, obj *domain1.Badge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Badge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Badges_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductBadges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Badges",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Badge)
	fc.Result = res
	return ec.marshalOCommerce_Product_Badge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Badges_first(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductBadges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Badges",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.First(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.Badge)
	fc.Result = res
	return ec.marshalOCommerce_Product_Badge2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Categories_main(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductCategories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Categories",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Main, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Categories_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductCategories) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Categories",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalOCommerce_Product_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_code(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_path(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_name(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_parent(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalOCommerce_Product_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_variationSelections(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariationSelections(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariationSelection)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_ConfigurableProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductLoyalty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.LoyaltyPriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_Loyalty_PriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_earning(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductLoyalty) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Earning, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.LoyaltyEarningInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_Loyalty_EarningInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyEarningInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo_type(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyEarningInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_EarningInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyEarningInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_EarningInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_type(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPointsToSpent, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	fc.Result = res
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPointsToSpent, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*big.Float)
	fc.Result = res
	return ec.marshalNFloat2ᚖmathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_context(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Loyalty_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceContext)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Media_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMedia) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Media)
	fc.Result = res
	return ec.marshalOCommerce_Product_MediaItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Media_getMedia(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMedia) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Media",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Product_Media_getMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetMedia(args["usage"].(string)), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain1.Media)
	fc.Result = res
	return ec.marshalNCommerce_Product_MediaItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_MediaItem_type(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_MediaItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_MediaItem_mimeType(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_MediaItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_MediaItem_usage(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_MediaItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usage, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_MediaItem_title(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_MediaItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_MediaItem_reference(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_MediaItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_Meta_keywords(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceContext_customerGroup(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerGroup, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceContext_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceContext_channelCode(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelCode, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceContext_locale(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBase(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Product_PriceInfo().ActiveBase(rctx, obj)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBaseAmount(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseAmount, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	fc.Result = res
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBaseUnit(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseUnit, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_campaignRules(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignRules, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_denyMoreDiscounts(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DenyMoreDiscounts, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_context(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceContext)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_PriceInfo_taxClass(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_PriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxClass, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_products(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_facets(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facets(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]searchdto.CommerceSearchFacet)
	fc.Result = res
	return ec.marshalNCommerce_Search_Facet2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_suggestions(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggestions(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain2.Suggestion)
	fc.Result = res
	return ec.marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_searchMeta(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchMeta(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.SearchMeta)
	fc.Result = res
	return ec.marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_hasSelectedFacet(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedFacet(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_promotion(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotion(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*searchdto.PromotionDTO)
	fc.Result = res
	return ec.marshalOCommerce_Search_Promotion2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐPromotionDTO(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_options(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariationSelectionOption)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariationSelection_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection_Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_state(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection_Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariationSelectionOptionState)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_variant(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection_Option",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variant, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariationSelectionOptionVariant)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariationSelection_OptionVariant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionVariant(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOptionVariant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Product_VariationSelection_OptionVariant",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchListFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_ListFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_ListFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_query(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_originalQuery(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalQuery, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_page(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_numPages(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumPages, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_numResults(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumResults, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_sortOptions(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Search_Meta().SortOptions(rctx, obj)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchSortOption)
	fc.Result = res
	return ec.marshalOCommerce_Search_SortOption2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Promotion_title(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Promotion",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Promotion_content(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Promotion",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Promotion_url(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Promotion",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Promotion_media(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Promotion",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain2.Media)
	fc.Result = res
	return ec.marshalOCommerce_Search_PromotionMedia2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_type(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_PromotionMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_mimeType(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_PromotionMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_usage(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_PromotionMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usage, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_title(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_PromotionMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_reference(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_PromotionMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchRangeFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_RangeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_min(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_max(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selectedMin(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedMin(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selectedMax(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_RangeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedMax(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_field(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Suggestion_text(ctx context.Context, field graphql.CollectedField, obj *domain2.Suggestion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Suggestion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Suggestion_highlight(ctx context.Context, field graphql.CollectedField, obj *domain2.Suggestion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_Suggestion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Highlight, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchTreeFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacet",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_active(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Commerce_Search_TreeFacetItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchTreeFacetItem)
	fc.Result = res
	return ec.marshalOCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_flamingo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Flamingo(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_AddToCart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_AddToCart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartAddToCart(rctx, args["marketplaceCode"].(string), args["qty"].(int), args["deliveryCode"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_DeleteCartDelivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_DeleteCartDelivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartDeleteCartDelivery(rctx, args["deliveryCode"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_DeleteItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_DeleteItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartDeleteItem(rctx, args["itemID"].(string), args["deliveryCode"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateItemQty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateItemQty_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateItemQty(rctx, args["itemID"].(string), args["deliveryCode"].(string), args["qty"].(int))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateBillingAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateBillingAddress(rctx, args["addressForm"].(*forms.AddressForm))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BillingAddressForm)
	fc.Result = res
	return ec.marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateSelectedPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateSelectedPayment(rctx, args["gateway"].(string), args["method"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SelectedPaymentResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartApplyCouponCodeOrGiftCard(rctx, args["code"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_RemoveGiftCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_RemoveGiftCard_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartRemoveGiftCard(rctx, args["giftCardCode"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_RemoveCouponCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_RemoveCouponCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartRemoveCouponCode(rctx, args["couponCode"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveryAddresses(rctx, args["deliveryAdresses"].([]*forms.DeliveryForm))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto.DeliveryAddressForm)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DeliveryAddressForm2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveryShippingOptions(rctx, args["shippingOptions"].([]*dto.DeliveryShippingOption))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.UpdateShippingOptionsResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_Clean(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartClean(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateAdditionalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateAdditionalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateAdditionalData(rctx, args["additionalData"].([]*dto.KeyValue))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveriesAdditionalData(rctx, args["data"].([]*dto.DeliveryAdditionalData))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_StartPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutStartPlaceOrder(rctx, args["returnUrl"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.StartPlaceOrderResult)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_StartPlaceOrder_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_CancelPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutCancelPlaceOrder(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_ClearPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutClearPlaceOrder(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutRefreshPlaceOrder(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutRefreshPlaceOrderBlocking(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_flamingo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Flamingo(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Product_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProduct(rctx, args["marketPlaceCode"].(string), args["variantMarketPlaceCode"].(*string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Product_Search(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Product_Search_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProductSearch(rctx, args["searchRequest"].(searchdto.CommerceSearchRequest))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.SearchResultDTO)
	fc.Result = res
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Customer_Status(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCustomerStatus(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dtocustomer.CustomerStatusResult)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Status_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerStatusResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Customer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCustomer(rctx)
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dtocustomer.CustomerResult)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Cart_DecoratedCart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartDecoratedCart(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Cart_Validator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartValidator(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*validation.Result)
	fc.Result = res
	return ec.marshalNCommerce_Cart_ValidationResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Cart_QtyRestriction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Cart_QtyRestriction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartQtyRestriction(rctx, args["marketplaceCode"].(string), args["variantCode"].(*string), args["deliveryCode"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*validation.RestrictionResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_QtyRestrictionResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Checkout_ActivePlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCheckoutActivePlaceOrder(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Checkout_CurrentContext(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCheckoutCurrentContext(rctx)
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_CategoryTree(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_CategoryTree_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategoryTree(rctx, args["activeCategoryCode"].(string))
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Tree)
	fc.Result = res
	return ec.marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategory(rctx, args["categoryCode"].(string), args["categorySearchRequest"].(*searchdto.CommerceSearchRequest))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*categorydto.CategorySearchResult)
	fc.Result = res
	return ec.marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋcategorydtoᚐCategorySearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})

	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp := ec._fieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})

	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCommerce_Cart_AddressFormInput(ctx context.Context, obj interface{}) (forms.AddressForm, error) {
	var it forms.AddressForm
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vat":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("vat"))
			it.Vat, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstname":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("firstname"))
			it.Firstname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastname":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("lastname"))
			it.Lastname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "middleName":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("middleName"))
			it.MiddleName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("title"))
			it.Title, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "salutation":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("salutation"))
			it.Salutation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("street"))
			it.Street, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetNr":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("streetNr"))
			it.StreetNr, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLine1":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressLine1"))
			it.AddressLine1, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLine2":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("addressLine2"))
			it.AddressLine2, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("company"))
			it.Company, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("city"))
			it.City, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("postCode"))
			it.PostCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("state"))
			it.State, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "regionCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("regionCode"))
			it.RegionCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("country"))
			it.Country, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("countryCode"))
			it.CountryCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryAdditionalDataInput(ctx context.Context, obj interface{}) (dto.DeliveryAdditionalData, error) {
	var it dto.DeliveryAdditionalData
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
			it.DeliveryCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "additionalData":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("additionalData"))
			it.AdditionalData, err = ec.unmarshalNCommerce_Cart_KeyValueInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryAddressInput(ctx context.Context, obj interface{}) (forms.DeliveryForm, error) {
	var it forms.DeliveryForm
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
			it.LocationCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deliveryAddress":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryAddress"))
			it.DeliveryAddress, err = ec.unmarshalOCommerce_Cart_AddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, v)
			if err != nil {
				return it, err
			}
		case "useBillingAddress":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("useBillingAddress"))
			it.UseBillingAddress, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("method"))
			it.ShippingMethod, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrier":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("carrier"))
			it.ShippingCarrier, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "desiredTime":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("desiredTime"))
			it.DesiredTime, err = ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryShippingOptionInput(ctx context.Context, obj interface{}) (dto.DeliveryShippingOption, error) {
	var it dto.DeliveryShippingOption
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("deliveryCode"))
			it.DeliveryCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "method":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("method"))
			it.Method, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "carrier":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("carrier"))
			it.Carrier, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_KeyValueInput(ctx context.Context, obj interface{}) (dto.KeyValue, error) {
	var it dto.KeyValue
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("key"))
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Price_ChargeQualifierInput(ctx context.Context, obj interface{}) (domain.ChargeQualifier, error) {
	var it domain.ChargeQualifier
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "reference":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("reference"))
			it.Reference, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_KeyValueFilter(ctx context.Context, obj interface{}) (searchdto.CommerceSearchKeyValueFilter, error) {
	var it searchdto.CommerceSearchKeyValueFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "k":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("k"))
			it.K, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "v":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("v"))
			it.V, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_Request(ctx context.Context, obj interface{}) (searchdto.CommerceSearchRequest, error) {
	var it searchdto.CommerceSearchRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "pageSize":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("pageSize"))
			it.PageSize, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("page"))
			it.Page, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("sortBy"))
			it.SortBy, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyValueFilters":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("keyValueFilters"))
			it.KeyValueFilters, err = ec.unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilterᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error

			ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithField("query"))
			it.Query, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Commerce_Cart_PaymentSelection(ctx context.Context, sel ast.SelectionSet, obj cart.PaymentSelection) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case cart.DefaultPaymentSelection:
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, &obj)
	case *cart.DefaultPaymentSelection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Category(ctx context.Context, sel ast.SelectionSet, obj domain3.Category) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case domain3.CategoryData:
		return ec._Commerce_CategoryData(ctx, sel, &obj)
	case *domain3.CategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_CategoryData(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State(ctx context.Context, sel ast.SelectionSet, obj dto1.State) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *dto1.Wait:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Wait(ctx, sel, obj)
	case *dto1.WaitForCustomer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_WaitForCustomer(ctx, sel, obj)
	case *dto1.Success:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Success(ctx, sel, obj)
	case *dto1.Failed:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Failed(ctx, sel, obj)
	case *dto1.ShowIframe:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe(ctx, sel, obj)
	case *dto1.ShowHTML:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML(ctx, sel, obj)
	case *dto1.Redirect:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Redirect(ctx, sel, obj)
	case *dto1.ShowWalletPayment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment(ctx, sel, obj)
	case *dto1.PostRedirect:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason(ctx context.Context, sel ast.SelectionSet, obj process.FailedReason) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case process.ErrorOccurredReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx, sel, &obj)
	case *process.ErrorOccurredReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx, sel, obj)
	case process.PaymentErrorOccurredReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx, sel, &obj)
	case *process.PaymentErrorOccurredReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx, sel, obj)
	case process.CanceledByCustomerReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx, sel, &obj)
	case *process.CanceledByCustomerReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx, sel, obj)
	case process.PaymentCanceledByCustomerReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx, sel, &obj)
	case *process.PaymentCanceledByCustomerReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx, sel, obj)
	case process.CartValidationErrorReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx, sel, &obj)
	case *process.CartValidationErrorReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Product(ctx context.Context, sel ast.SelectionSet, obj graphqlproductdto.Product) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphqlproductdto.SimpleProduct:
		return ec._Commerce_Product_SimpleProduct(ctx, sel, &obj)
	case *graphqlproductdto.SimpleProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_SimpleProduct(ctx, sel, obj)
	case graphqlproductdto.ConfigurableProduct:
		return ec._Commerce_Product_ConfigurableProduct(ctx, sel, &obj)
	case *graphqlproductdto.ConfigurableProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_ConfigurableProduct(ctx, sel, obj)
	case graphqlproductdto.ActiveVariantProduct:
		return ec._Commerce_Product_ActiveVariantProduct(ctx, sel, &obj)
	case *graphqlproductdto.ActiveVariantProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_ActiveVariantProduct(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Search_Facet(ctx context.Context, sel ast.SelectionSet, obj searchdto.CommerceSearchFacet) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *searchdto.CommerceSearchListFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_ListFacet(ctx, sel, obj)
	case *searchdto.CommerceSearchTreeFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_TreeFacet(ctx, sel, obj)
	case *searchdto.CommerceSearchRangeFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_RangeFacet(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Search_FacetItem(ctx context.Context, sel ast.SelectionSet, obj searchdto.CommerceSearchFacetItem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *searchdto.CommerceSearchListFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_ListFacetItem(ctx, sel, obj)
	case *searchdto.CommerceSearchTreeFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_TreeFacetItem(ctx, sel, obj)
	case *searchdto.CommerceSearchRangeFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_RangeFacetItem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Tree(ctx context.Context, sel ast.SelectionSet, obj domain3.Tree) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case domain3.TreeData:
		return ec._Commerce_CategoryTree(ctx, sel, &obj)
	case *domain3.TreeData:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_CategoryTree(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commerce_Cart_AdditionalDataImplementors = []string{"Commerce_Cart_AdditionalData"}

func (ec *executionContext) _Commerce_Cart_AdditionalData(ctx context.Context, sel ast.SelectionSet, obj *cart.AdditionalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AdditionalDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AdditionalData")
		case "customAttributes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_AdditionalData_customAttributes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "reservedOrderID":
			out.Values[i] = ec._Commerce_Cart_AdditionalData_reservedOrderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_AddressImplementors = []string{"Commerce_Cart_Address"}

func (ec *executionContext) _Commerce_Cart_Address(ctx context.Context, sel ast.SelectionSet, obj *cart.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Address")
		case "vat":
			out.Values[i] = ec._Commerce_Cart_Address_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_Cart_Address_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_Cart_Address_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Cart_Address_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_Address_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_Cart_Address_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Cart_Address_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_Cart_Address_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalAddressLines":
			out.Values[i] = ec._Commerce_Cart_Address_additionalAddressLines(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Commerce_Cart_Address_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_Cart_Address_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Cart_Address_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Cart_Address_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Cart_Address_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_Cart_Address_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Cart_Address_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "telephone":
			out.Values[i] = ec._Commerce_Cart_Address_telephone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Cart_Address_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_AddressFormImplementors = []string{"Commerce_Cart_AddressForm"}

func (ec *executionContext) _Commerce_Cart_AddressForm(ctx context.Context, sel ast.SelectionSet, obj *forms.AddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AddressForm")
		case "vat":
			out.Values[i] = ec._Commerce_Cart_AddressForm_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_Cart_AddressForm_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_Cart_AddressForm_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Cart_AddressForm_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_AddressForm_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_Cart_AddressForm_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Cart_AddressForm_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_Cart_AddressForm_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addressLine1":
			out.Values[i] = ec._Commerce_Cart_AddressForm_addressLine1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addressLine2":
			out.Values[i] = ec._Commerce_Cart_AddressForm_addressLine2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "company":
			out.Values[i] = ec._Commerce_Cart_AddressForm_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_Cart_AddressForm_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Cart_AddressForm_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_Cart_AddressForm_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._Commerce_Cart_AddressForm_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Cart_AddressForm_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_AppliedDiscountImplementors = []string{"Commerce_Cart_AppliedDiscount"}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedDiscount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedDiscountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedDiscount")
		case "campaignCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_campaignCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "couponCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_couponCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isItemRelated":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_isItemRelated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sortOrder":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_sortOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_AppliedDiscountsImplementors = []string{"Commerce_Cart_AppliedDiscounts"}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts(ctx context.Context, sel ast.SelectionSet, obj *dto.CartAppliedDiscounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedDiscountsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedDiscounts")
		case "items":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_items(ctx, field, obj)
		case "byCampaignCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "byType":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_byType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_AppliedGiftCardImplementors = []string{"Commerce_Cart_AppliedGiftCard"}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedGiftCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedGiftCardImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedGiftCard")
		case "code":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remaining":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_remaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasRemaining":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_hasRemaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_BillingAddressFormImplementors = []string{"Commerce_Cart_BillingAddressForm"}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm(ctx context.Context, sel ast.SelectionSet, obj *dto.BillingAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_BillingAddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_BillingAddressForm")
		case "formData":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_formData(ctx, field, obj)
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_CartImplementors = []string{"Commerce_Cart_Cart"}

func (ec *executionContext) _Commerce_Cart_Cart(ctx context.Context, sel ast.SelectionSet, obj *cart.Cart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CartImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Cart")
		case "id":
			out.Values[i] = ec._Commerce_Cart_Cart_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "entityID":
			out.Values[i] = ec._Commerce_Cart_Cart_entityID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "billingAddress":
			out.Values[i] = ec._Commerce_Cart_Cart_billingAddress(ctx, field, obj)
		case "purchaser":
			out.Values[i] = ec._Commerce_Cart_Cart_purchaser(ctx, field, obj)
		case "deliveries":
			out.Values[i] = ec._Commerce_Cart_Cart_deliveries(ctx, field, obj)
		case "additionalData":
			out.Values[i] = ec._Commerce_Cart_Cart_additionalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "paymentSelection":
			out.Values[i] = ec._Commerce_Cart_Cart_paymentSelection(ctx, field, obj)
		case "belongsToAuthenticatedUser":
			out.Values[i] = ec._Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "authenticatedUserID":
			out.Values[i] = ec._Commerce_Cart_Cart_authenticatedUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "appliedCouponCodes":
			out.Values[i] = ec._Commerce_Cart_Cart_appliedCouponCodes(ctx, field, obj)
		case "defaultCurrency":
			out.Values[i] = ec._Commerce_Cart_Cart_defaultCurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalitems":
			out.Values[i] = ec._Commerce_Cart_Cart_totalitems(ctx, field, obj)
		case "itemCount":
			out.Values[i] = ec._Commerce_Cart_Cart_itemCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "productCount":
			out.Values[i] = ec._Commerce_Cart_Cart_productCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isPaymentSelected":
			out.Values[i] = ec._Commerce_Cart_Cart_isPaymentSelected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "grandTotal":
			out.Values[i] = ec._Commerce_Cart_Cart_grandTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_sumTotalTaxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subTotalNet":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "appliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_appliedGiftCards(ctx, field, obj)
		case "getDeliveryByCode":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_Cart_getDeliveryByCode(ctx, field, obj)
				return res
			})
		case "getDeliveryCodes":
			out.Values[i] = ec._Commerce_Cart_Cart_getDeliveryCodes(ctx, field, obj)
		case "getMainShippingEMail":
			out.Values[i] = ec._Commerce_Cart_Cart_getMainShippingEMail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isEmpty":
			out.Values[i] = ec._Commerce_Cart_Cart_isEmpty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hasDeliveryForCode":
			out.Values[i] = ec._Commerce_Cart_Cart_hasDeliveryForCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getDeliveryByItemID":
			out.Values[i] = ec._Commerce_Cart_Cart_getDeliveryByItemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getByItemID":
			out.Values[i] = ec._Commerce_Cart_Cart_getByItemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getTotalQty":
			out.Values[i] = ec._Commerce_Cart_Cart_getTotalQty(ctx, field, obj)
		case "getByExternalReference":
			out.Values[i] = ec._Commerce_Cart_Cart_getByExternalReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getVoucherSavings":
			out.Values[i] = ec._Commerce_Cart_Cart_getVoucherSavings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getCartTeaser":
			out.Values[i] = ec._Commerce_Cart_Cart_getCartTeaser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumShippingNet":
			out.Values[i] = ec._Commerce_Cart_Cart_sumShippingNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumShippingNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_sumShippingNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumShippingGross":
			out.Values[i] = ec._Commerce_Cart_Cart_sumShippingGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumShippingGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_sumShippingGrossWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hasShippingCosts":
			out.Values[i] = ec._Commerce_Cart_Cart_hasShippingCosts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "allShippingTitles":
			out.Values[i] = ec._Commerce_Cart_Cart_allShippingTitles(ctx, field, obj)
		case "subTotalGross":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subTotalGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subTotalNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumTotalDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_sumTotalDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumNonItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_sumNonItemRelatedDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sumItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_sumItemRelatedDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hasAppliedCouponCode":
			out.Values[i] = ec._Commerce_Cart_Cart_hasAppliedCouponCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getPaymentReference":
			out.Values[i] = ec._Commerce_Cart_Cart_getPaymentReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "getTotalItemsByType":
			out.Values[i] = ec._Commerce_Cart_Cart_getTotalItemsByType(ctx, field, obj)
		case "grandTotalCharges":
			out.Values[i] = ec._Commerce_Cart_Cart_grandTotalCharges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hasAppliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_hasAppliedGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "hasRemainingGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_hasRemainingGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_CouponCodeImplementors = []string{"Commerce_Cart_CouponCode"}

func (ec *executionContext) _Commerce_Cart_CouponCode(ctx context.Context, sel ast.SelectionSet, obj *cart.CouponCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CouponCodeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_CouponCode")
		case "code":
			out.Values[i] = ec._Commerce_Cart_CouponCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_CustomAttributesImplementors = []string{"Commerce_Cart_CustomAttributes"}

func (ec *executionContext) _Commerce_Cart_CustomAttributes(ctx context.Context, sel ast.SelectionSet, obj *dto.CustomAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CustomAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_CustomAttributes")
		case "get":
			out.Values[i] = ec._Commerce_Cart_CustomAttributes_get(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DecoratedCartImplementors = []string{"Commerce_Cart_DecoratedCart"}

func (ec *executionContext) _Commerce_Cart_DecoratedCart(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedCart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedCartImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedCart")
		case "cart":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_cart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decoratedDeliveries":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field, obj)
		case "getDecoratedDeliveryByCode":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field, obj)
		case "getAllPaymentRequiredItems":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cartSummary":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_cartSummary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DecoratedDeliveryImplementors = []string{"Commerce_Cart_DecoratedDelivery"}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedDelivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedDeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedDelivery")
		case "delivery":
			out.Values[i] = ec._Commerce_Cart_DecoratedDelivery_delivery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decoratedItems":
			out.Values[i] = ec._Commerce_Cart_DecoratedDelivery_decoratedItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DecoratedItemImplementors = []string{"Commerce_Cart_DecoratedItem"}

func (ec *executionContext) _Commerce_Cart_DecoratedItem(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedCartItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedItem")
		case "item":
			out.Values[i] = ec._Commerce_Cart_DecoratedItem_item(ctx, field, obj)
		case "product":
			out.Values[i] = ec._Commerce_Cart_DecoratedItem_product(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DefaultPaymentSelectionImplementors = []string{"Commerce_Cart_DefaultPaymentSelection", "Commerce_Cart_PaymentSelection"}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection(ctx context.Context, sel ast.SelectionSet, obj *cart.DefaultPaymentSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DefaultPaymentSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DefaultPaymentSelection")
		case "gateway":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "totalValue":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_totalValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "cartSplit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DeliveryImplementors = []string{"Commerce_Cart_Delivery"}

func (ec *executionContext) _Commerce_Cart_Delivery(ctx context.Context, sel ast.SelectionSet, obj *cart.Delivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Delivery")
		case "deliveryInfo":
			out.Values[i] = ec._Commerce_Cart_Delivery_deliveryInfo(ctx, field, obj)
		case "cartitems":
			out.Values[i] = ec._Commerce_Cart_Delivery_cartitems(ctx, field, obj)
		case "shippingItem":
			out.Values[i] = ec._Commerce_Cart_Delivery_shippingItem(ctx, field, obj)
		case "subTotalGross":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalGross(ctx, field, obj)
		case "grandTotal":
			out.Values[i] = ec._Commerce_Cart_Delivery_grandTotal(ctx, field, obj)
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field, obj)
		case "subTotalNet":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalNet(ctx, field, obj)
		case "sumTotalDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_sumTotalDiscountAmount(ctx, field, obj)
		case "sumNonItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_sumNonItemRelatedDiscountAmount(ctx, field, obj)
		case "sumItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_sumItemRelatedDiscountAmount(ctx, field, obj)
		case "subTotalGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field, obj)
		case "subTotalNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasItems":
			out.Values[i] = ec._Commerce_Cart_Delivery_hasItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DeliveryAddressFormImplementors = []string{"Commerce_Cart_DeliveryAddressForm"}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, obj *dto.DeliveryAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryAddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryAddressForm")
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "formData":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_formData(ctx, field, obj)
		case "useBillingAddress":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_method(ctx, field, obj)
		case "carrier":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_carrier(ctx, field, obj)
		case "desiredTime":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_desiredTime(ctx, field, obj)
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DeliveryInfoImplementors = []string{"Commerce_Cart_DeliveryInfo"}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryInfo")
		case "code":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "workflow":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_workflow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "carrier":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_carrier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deliveryLocation":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_deliveryLocation(ctx, field, obj)
		case "desiredTime":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_desiredTime(ctx, field, obj)
		case "additionalData":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_DeliveryInfo_additionalData(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DeliveryLocationImplementors = []string{"Commerce_Cart_DeliveryLocation"}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryLocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryLocation")
		case "type":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_address(ctx, field, obj)
		case "useBillingAddress":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_useBillingAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ExistingCustomerDataImplementors = []string{"Commerce_Cart_ExistingCustomerData"}

func (ec *executionContext) _Commerce_Cart_ExistingCustomerData(ctx context.Context, sel ast.SelectionSet, obj *cart.ExistingCustomerData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ExistingCustomerDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ExistingCustomerData")
		case "id":
			out.Values[i] = ec._Commerce_Cart_ExistingCustomerData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_ErrorImplementors = []string{"Commerce_Cart_Form_Error"}

func (ec *executionContext) _Commerce_Cart_Form_Error(ctx context.Context, sel ast.SelectionSet, obj *domain4.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_ErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_Error")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_Error_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_Error_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_FieldErrorImplementors = []string{"Commerce_Cart_Form_FieldError"}

func (ec *executionContext) _Commerce_Cart_Form_FieldError(ctx context.Context, sel ast.SelectionSet, obj *dto.FieldError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_FieldErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_FieldError")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fieldName":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_fieldName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_ValidationInfoImplementors = []string{"Commerce_Cart_Form_ValidationInfo"}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo(ctx context.Context, sel ast.SelectionSet, obj *dto.ValidationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_ValidationInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_ValidationInfo")
		case "fieldErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field, obj)
		case "generalErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ItemImplementors = []string{"Commerce_Cart_Item"}

func (ec *executionContext) _Commerce_Cart_Item(ctx context.Context, sel ast.SelectionSet, obj *cart.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Item")
		case "id":
			out.Values[i] = ec._Commerce_Cart_Item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "externalReference":
			out.Values[i] = ec._Commerce_Cart_Item_externalReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "marketplaceCode":
			out.Values[i] = ec._Commerce_Cart_Item_marketplaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "variantMarketPlaceCode":
			out.Values[i] = ec._Commerce_Cart_Item_variantMarketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "productName":
			out.Values[i] = ec._Commerce_Cart_Item_productName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sourceID":
			out.Values[i] = ec._Commerce_Cart_Item_sourceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "qty":
			out.Values[i] = ec._Commerce_Cart_Item_qty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "additionalDataKeys":
			out.Values[i] = ec._Commerce_Cart_Item_additionalDataKeys(ctx, field, obj)
		case "additionalDataValues":
			out.Values[i] = ec._Commerce_Cart_Item_additionalDataValues(ctx, field, obj)
		case "getAdditionalData":
			out.Values[i] = ec._Commerce_Cart_Item_getAdditionalData(ctx, field, obj)
		case "hasAdditionalDataKey":
			out.Values[i] = ec._Commerce_Cart_Item_hasAdditionalDataKey(ctx, field, obj)
		case "singlePriceGross":
			out.Values[i] = ec._Commerce_Cart_Item_singlePriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "singlePriceNet":
			out.Values[i] = ec._Commerce_Cart_Item_singlePriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rowPriceGross":
			out.Values[i] = ec._Commerce_Cart_Item_rowPriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "rowPriceNet":
			out.Values[i] = ec._Commerce_Cart_Item_rowPriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "appliedDiscounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_Item_appliedDiscounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ItemValidationErrorImplementors = []string{"Commerce_Cart_ItemValidationError"}

func (ec *executionContext) _Commerce_Cart_ItemValidationError(ctx context.Context, sel ast.SelectionSet, obj *validation.ItemValidationError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ItemValidationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ItemValidationError")
		case "itemID":
			out.Values[i] = ec._Commerce_Cart_ItemValidationError_itemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "errorMessageKey":
			out.Values[i] = ec._Commerce_Cart_ItemValidationError_errorMessageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_KeyValueImplementors = []string{"Commerce_Cart_KeyValue"}

func (ec *executionContext) _Commerce_Cart_KeyValue(ctx context.Context, sel ast.SelectionSet, obj *dto.KeyValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_KeyValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_KeyValue")
		case "key":
			out.Values[i] = ec._Commerce_Cart_KeyValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Cart_KeyValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PaymentSelection_SplitImplementors = []string{"Commerce_Cart_PaymentSelection_Split"}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split(ctx context.Context, sel ast.SelectionSet, obj *dto.PaymentSelectionSplit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PaymentSelection_SplitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PaymentSelection_Split")
		case "qualifier":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_Split_qualifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "charge":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_Split_charge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PaymentSelection_SplitQualifierImplementors = []string{"Commerce_Cart_PaymentSelection_SplitQualifier"}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier(ctx context.Context, sel ast.SelectionSet, obj *cart.SplitQualifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PaymentSelection_SplitQualifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PaymentSelection_SplitQualifier")
		case "type":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PersonImplementors = []string{"Commerce_Cart_Person"}

func (ec *executionContext) _Commerce_Cart_Person(ctx context.Context, sel ast.SelectionSet, obj *cart.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PersonImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Person")
		case "address":
			out.Values[i] = ec._Commerce_Cart_Person_address(ctx, field, obj)
		case "personalDetails":
			out.Values[i] = ec._Commerce_Cart_Person_personalDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "existingCustomerData":
			out.Values[i] = ec._Commerce_Cart_Person_existingCustomerData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PersonalDetailsImplementors = []string{"Commerce_Cart_PersonalDetails"}

func (ec *executionContext) _Commerce_Cart_PersonalDetails(ctx context.Context, sel ast.SelectionSet, obj *cart.PersonalDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PersonalDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PersonalDetails")
		case "dateOfBirth":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_dateOfBirth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passportCountry":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_passportCountry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passportNumber":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_passportNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nationality":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PlacedOrderInfoImplementors = []string{"Commerce_Cart_PlacedOrderInfo"}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, obj *placeorder.PlacedOrderInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PlacedOrderInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PlacedOrderInfo")
		case "orderNumber":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_orderNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PricedCartItemImplementors = []string{"Commerce_Cart_PricedCartItem"}

func (ec *executionContext) _Commerce_Cart_PricedCartItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedCartItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedCartItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedCartItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedCartItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "itemID":
			out.Values[i] = ec._Commerce_Cart_PricedCartItem_itemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PricedItemsImplementors = []string{"Commerce_Cart_PricedItems"}

func (ec *executionContext) _Commerce_Cart_PricedItems(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedItemsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedItems")
		case "cartItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_cartItems(ctx, field, obj)
		case "shippingItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_shippingItems(ctx, field, obj)
		case "totalItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_totalItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PricedShippingItemImplementors = []string{"Commerce_Cart_PricedShippingItem"}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedShippingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedShippingItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedShippingItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedShippingItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryInfoCode":
			out.Values[i] = ec._Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PricedTotalItemImplementors = []string{"Commerce_Cart_PricedTotalItem"}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedTotalItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedTotalItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedTotalItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedTotalItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_Cart_PricedTotalItem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_QtyRestrictionResultImplementors = []string{"Commerce_Cart_QtyRestrictionResult"}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult(ctx context.Context, sel ast.SelectionSet, obj *validation.RestrictionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_QtyRestrictionResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_QtyRestrictionResult")
		case "isRestricted":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_isRestricted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxAllowed":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remainingDifference":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restrictorName":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_restrictorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_SelectedPaymentResultImplementors = []string{"Commerce_Cart_SelectedPaymentResult"}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, obj *dto.SelectedPaymentResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_SelectedPaymentResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_SelectedPaymentResult")
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ShippingItemImplementors = []string{"Commerce_Cart_ShippingItem"}

func (ec *executionContext) _Commerce_Cart_ShippingItem(ctx context.Context, sel ast.SelectionSet, obj *cart.ShippingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ShippingItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ShippingItem")
		case "title":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "priceNet":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_priceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxAmount":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_taxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "priceGross":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_priceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "appliedDiscounts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_ShippingItem_appliedDiscounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "totalWithDiscountInclTax":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "tax":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_tax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_SummaryImplementors = []string{"Commerce_Cart_Summary"}

func (ec *executionContext) _Commerce_Cart_Summary(ctx context.Context, sel ast.SelectionSet, obj *dto.CartSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_SummaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Summary")
		case "discounts":
			out.Values[i] = ec._Commerce_Cart_Summary_discounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sumAppliedDiscounts":
			out.Values[i] = ec._Commerce_Cart_Summary_sumAppliedDiscounts(ctx, field, obj)
		case "sumAppliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_Summary_sumAppliedGiftCards(ctx, field, obj)
		case "sumGrandTotalWithGiftCards":
			out.Values[i] = ec._Commerce_Cart_Summary_sumGrandTotalWithGiftCards(ctx, field, obj)
		case "sumTotalDiscountWithGiftCardsAmount":
			out.Values[i] = ec._Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx, field, obj)
		case "hasAppliedDiscounts":
			out.Values[i] = ec._Commerce_Cart_Summary_hasAppliedDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sumTaxes":
			out.Values[i] = ec._Commerce_Cart_Summary_sumTaxes(ctx, field, obj)
		case "sumPaymentSelectionCartSplitValueAmountByMethods":
			out.Values[i] = ec._Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_TaxImplementors = []string{"Commerce_Cart_Tax"}

func (ec *executionContext) _Commerce_Cart_Tax(ctx context.Context, sel ast.SelectionSet, obj *cart.Tax) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TaxImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Tax")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_Tax_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_Tax_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rate":
			out.Values[i] = ec._Commerce_Cart_Tax_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_TaxesImplementors = []string{"Commerce_Cart_Taxes"}

func (ec *executionContext) _Commerce_Cart_Taxes(ctx context.Context, sel ast.SelectionSet, obj *dto.Taxes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TaxesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Taxes")
		case "items":
			out.Values[i] = ec._Commerce_Cart_Taxes_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getByType":
			out.Values[i] = ec._Commerce_Cart_Taxes_getByType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_TeaserImplementors = []string{"Commerce_Cart_Teaser"}

func (ec *executionContext) _Commerce_Cart_Teaser(ctx context.Context, sel ast.SelectionSet, obj *cart.Teaser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TeaserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Teaser")
		case "productCount":
			out.Values[i] = ec._Commerce_Cart_Teaser_productCount(ctx, field, obj)
		case "ItemCount":
			out.Values[i] = ec._Commerce_Cart_Teaser_ItemCount(ctx, field, obj)
		case "DeliveryCodes":
			out.Values[i] = ec._Commerce_Cart_Teaser_DeliveryCodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_TotalitemImplementors = []string{"Commerce_Cart_Totalitem"}

func (ec *executionContext) _Commerce_Cart_Totalitem(ctx context.Context, sel ast.SelectionSet, obj *cart.Totalitem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TotalitemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Totalitem")
		case "code":
			out.Values[i] = ec._Commerce_Cart_Totalitem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_Totalitem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Cart_Totalitem_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_Totalitem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_UpdateDeliveryShippingOptions_ResultImplementors = []string{"Commerce_Cart_UpdateDeliveryShippingOptions_Result"}

func (ec *executionContext) _Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx context.Context, sel ast.SelectionSet, obj *dto.UpdateShippingOptionsResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_UpdateDeliveryShippingOptions_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_UpdateDeliveryShippingOptions_Result")
		case "processed":
			out.Values[i] = ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ValidationResultImplementors = []string{"Commerce_Cart_ValidationResult"}

func (ec *executionContext) _Commerce_Cart_ValidationResult(ctx context.Context, sel ast.SelectionSet, obj *validation.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ValidationResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ValidationResult")
		case "hasCommonError":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_hasCommonError(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commonErrorMessageKey":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "itemResults":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_itemResults(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CategoryDataImplementors = []string{"Commerce_CategoryData", "Commerce_Category"}

func (ec *executionContext) _Commerce_CategoryData(ctx context.Context, sel ast.SelectionSet, obj *domain3.CategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_CategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryData")
		case "code":
			out.Values[i] = ec._Commerce_CategoryData_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryData_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryData_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryData_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promoted":
			out.Values[i] = ec._Commerce_CategoryData_promoted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_CategoryData_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CategoryTreeImplementors = []string{"Commerce_CategoryTree", "Commerce_Tree"}

func (ec *executionContext) _Commerce_CategoryTree(ctx context.Context, sel ast.SelectionSet, obj *domain3.TreeData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_CategoryTreeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryTree")
		case "code":
			out.Values[i] = ec._Commerce_CategoryTree_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryTree_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryTree_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryTree_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subTrees":
			out.Values[i] = ec._Commerce_CategoryTree_subTrees(ctx, field, obj)
		case "hasChilds":
			out.Values[i] = ec._Commerce_CategoryTree_hasChilds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "documentCount":
			out.Values[i] = ec._Commerce_CategoryTree_documentCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributeImplementors = []string{"Commerce_Category_Attribute"}

func (ec *executionContext) _Commerce_Category_Attribute(ctx context.Context, sel ast.SelectionSet, obj *domain3.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attribute")
		case "code":
			out.Values[i] = ec._Commerce_Category_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_Category_Attribute_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributeValueImplementors = []string{"Commerce_Category_AttributeValue"}

func (ec *executionContext) _Commerce_Category_AttributeValue(ctx context.Context, sel ast.SelectionSet, obj *domain3.AttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_AttributeValue")
		case "value":
			out.Values[i] = ec._Commerce_Category_AttributeValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_AttributeValue_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributesImplementors = []string{"Commerce_Category_Attributes"}

func (ec *executionContext) _Commerce_Category_Attributes(ctx context.Context, sel ast.SelectionSet, obj domain3.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attributes")
		case "get":
			out.Values[i] = ec._Commerce_Category_Attributes_get(ctx, field, obj)
		case "has":
			out.Values[i] = ec._Commerce_Category_Attributes_has(ctx, field, obj)
		case "all":
			out.Values[i] = ec._Commerce_Category_Attributes_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_SearchResultImplementors = []string{"Commerce_Category_SearchResult"}

func (ec *executionContext) _Commerce_Category_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *categorydto.CategorySearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_SearchResult")
		case "category":
			out.Values[i] = ec._Commerce_Category_SearchResult_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productSearchResult":
			out.Values[i] = ec._Commerce_Category_SearchResult_productSearchResult(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderContextImplementors = []string{"Commerce_Checkout_PlaceOrderContext"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext(ctx context.Context, sel ast.SelectionSet, obj *dto1.PlaceOrderContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderContextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderContext")
		case "cart":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_cart(ctx, field, obj)
		case "orderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uuid":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderPaymentInfoImplementors = []string{"Commerce_Checkout_PlaceOrderPaymentInfo"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, obj *application.PlaceOrderPaymentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderPaymentInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderPaymentInfo")
		case "gateway":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentProvider":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_Form_ParameterImplementors = []string{"Commerce_Checkout_PlaceOrderState_Form_Parameter"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter(ctx context.Context, sel ast.SelectionSet, obj *dto1.FormParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_Form_ParameterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_Form_Parameter")
		case "key":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_PaymentRequestAPIImplementors = []string{"Commerce_Checkout_PlaceOrderState_PaymentRequestAPI"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI(ctx context.Context, sel ast.SelectionSet, obj *dto1.PaymentRequestAPI) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_PaymentRequestAPIImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_PaymentRequestAPI")
		case "methodData":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "details":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "merchantValidationURL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx, field, obj)
		case "completeURL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Failed", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed(ctx context.Context, sel ast.SelectionSet, obj *dto1.Failed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Failed")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx context.Context, sel ast.SelectionSet, obj *process.CanceledByCustomerReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx context.Context, sel ast.SelectionSet, obj *process.CartValidationErrorReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx, field, obj)
		case "validationResult":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_ErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_Error", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx context.Context, sel ast.SelectionSet, obj *process.ErrorOccurredReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_ErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_Error")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx context.Context, sel ast.SelectionSet, obj *process.PaymentCanceledByCustomerReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx context.Context, sel ast.SelectionSet, obj *process.PaymentErrorOccurredReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_PostRedirectImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_PostRedirect", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect(ctx context.Context, sel ast.SelectionSet, obj *dto1.PostRedirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_PostRedirectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_PostRedirect")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Parameters":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_RedirectImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Redirect", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect(ctx context.Context, sel ast.SelectionSet, obj *dto1.Redirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_RedirectImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Redirect")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowHTMLImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowHTML", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowHTML) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowHTMLImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowHTML")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "HTML":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowIframeImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowIframe", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowIframe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowIframeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowIframe")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowWalletPaymentImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowWalletPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowWalletPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentMethod":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentRequestAPI":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_SuccessImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Success", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success(ctx context.Context, sel ast.SelectionSet, obj *dto1.Success) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_SuccessImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Success")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Success_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_WaitImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Wait", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait(ctx context.Context, sel ast.SelectionSet, obj *dto1.Wait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_WaitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Wait")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_WaitForCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_WaitForCustomer", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_WaitForCustomer(ctx context.Context, sel ast.SelectionSet, obj *dto1.WaitForCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_WaitForCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_WaitForCustomer")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlacedOrderInfosImplementors = []string{"Commerce_Checkout_PlacedOrderInfos"}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, obj *dto1.PlacedOrderInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlacedOrderInfosImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlacedOrderInfos")
		case "paymentInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx, field, obj)
		case "placedOrderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_StartPlaceOrder_ResultImplementors = []string{"Commerce_Checkout_StartPlaceOrder_Result"}

func (ec *executionContext) _Commerce_Checkout_StartPlaceOrder_Result(ctx context.Context, sel ast.SelectionSet, obj *dto1.StartPlaceOrderResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_StartPlaceOrder_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_StartPlaceOrder_Result")
		case "uuid":
			out.Values[i] = ec._Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Customer_AddressImplementors = []string{"Commerce_Customer_Address"}

func (ec *executionContext) _Commerce_Customer_Address(ctx context.Context, sel ast.SelectionSet, obj *domain5.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_AddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Address")
		case "id":
			out.Values[i] = ec._Commerce_Customer_Address_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalAddressLines":
			out.Values[i] = ec._Commerce_Customer_Address_additionalAddressLines(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Commerce_Customer_Address_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "company":
			out.Values[i] = ec._Commerce_Customer_Address_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Customer_Address_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultBilling":
			out.Values[i] = ec._Commerce_Customer_Address_defaultBilling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultShipping":
			out.Values[i] = ec._Commerce_Customer_Address_defaultShipping(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._Commerce_Customer_Address_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._Commerce_Customer_Address_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Customer_Address_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "prefix":
			out.Values[i] = ec._Commerce_Customer_Address_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Customer_Address_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Customer_Address_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "streetNumber":
			out.Values[i] = ec._Commerce_Customer_Address_streetNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Customer_Address_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "telephone":
			out.Values[i] = ec._Commerce_Customer_Address_telephone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Customer_Address_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Customer_PersonDataImplementors = []string{"Commerce_Customer_PersonData"}

func (ec *executionContext) _Commerce_Customer_PersonData(ctx context.Context, sel ast.SelectionSet, obj *domain5.PersonData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_PersonDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_PersonData")
		case "gender":
			out.Values[i] = ec._Commerce_Customer_PersonData_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._Commerce_Customer_PersonData_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._Commerce_Customer_PersonData_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Customer_PersonData_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mainEmail":
			out.Values[i] = ec._Commerce_Customer_PersonData_mainEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "prefix":
			out.Values[i] = ec._Commerce_Customer_PersonData_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "birthday":
			out.Values[i] = ec._Commerce_Customer_PersonData_birthday(ctx, field, obj)
		case "nationality":
			out.Values[i] = ec._Commerce_Customer_PersonData_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Customer_ResultImplementors = []string{"Commerce_Customer_Result"}

func (ec *executionContext) _Commerce_Customer_Result(ctx context.Context, sel ast.SelectionSet, obj *dtocustomer.CustomerResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Result")
		case "id":
			out.Values[i] = ec._Commerce_Customer_Result_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "personalData":
			out.Values[i] = ec._Commerce_Customer_Result_personalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getAddress":
			out.Values[i] = ec._Commerce_Customer_Result_getAddress(ctx, field, obj)
		case "addresses":
			out.Values[i] = ec._Commerce_Customer_Result_addresses(ctx, field, obj)
		case "defaultShippingAddress":
			out.Values[i] = ec._Commerce_Customer_Result_defaultShippingAddress(ctx, field, obj)
		case "defaultBillingAddress":
			out.Values[i] = ec._Commerce_Customer_Result_defaultBillingAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Customer_Status_ResultImplementors = []string{"Commerce_Customer_Status_Result"}

func (ec *executionContext) _Commerce_Customer_Status_Result(ctx context.Context, sel ast.SelectionSet, obj *dtocustomer.CustomerStatusResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_Status_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Status_Result")
		case "isLoggedIn":
			out.Values[i] = ec._Commerce_Customer_Status_Result_isLoggedIn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._Commerce_Customer_Status_Result_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_PriceImplementors = []string{"Commerce_Price"}

func (ec *executionContext) _Commerce_Price(ctx context.Context, sel ast.SelectionSet, obj *domain.Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_PriceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price")
		case "amount":
			out.Values[i] = ec._Commerce_Price_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Commerce_Price_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Price_ChargeImplementors = []string{"Commerce_Price_Charge"}

func (ec *executionContext) _Commerce_Price_Charge(ctx context.Context, sel ast.SelectionSet, obj *domain.Charge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_Charge")
		case "price":
			out.Values[i] = ec._Commerce_Price_Charge_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Price_Charge_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Price_Charge_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Price_Charge_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Price_ChargeQualifierImplementors = []string{"Commerce_Price_ChargeQualifier"}

func (ec *executionContext) _Commerce_Price_ChargeQualifier(ctx context.Context, sel ast.SelectionSet, obj *domain.ChargeQualifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargeQualifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_ChargeQualifier")
		case "type":
			out.Values[i] = ec._Commerce_Price_ChargeQualifier_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Price_ChargeQualifier_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Price_ChargesImplementors = []string{"Commerce_Price_Charges"}

func (ec *executionContext) _Commerce_Price_Charges(ctx context.Context, sel ast.SelectionSet, obj *domain.Charges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_Charges")
		case "items":
			out.Values[i] = ec._Commerce_Price_Charges_items(ctx, field, obj)
		case "hasType":
			out.Values[i] = ec._Commerce_Price_Charges_hasType(ctx, field, obj)
		case "hasChargeQualifier":
			out.Values[i] = ec._Commerce_Price_Charges_hasChargeQualifier(ctx, field, obj)
		case "getByChargeQualifierForced":
			out.Values[i] = ec._Commerce_Price_Charges_getByChargeQualifierForced(ctx, field, obj)
		case "getByTypeForced":
			out.Values[i] = ec._Commerce_Price_Charges_getByTypeForced(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_ActiveVariantProductImplementors = []string{"Commerce_Product_ActiveVariantProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ActiveVariantProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ActiveVariantProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ActiveVariantProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variantMarketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variationSelections":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_variationSelections(ctx, field, obj)
		case "activeVariationSelections":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx, field, obj)
		case "badges":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_ActiveVariationSelectionImplementors = []string{"Commerce_Product_ActiveVariationSelection"}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ActiveVariationSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ActiveVariationSelection")
		case "code":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_AttributeImplementors = []string{"Commerce_Product_Attribute"}

func (ec *executionContext) _Commerce_Product_Attribute(ctx context.Context, sel ast.SelectionSet, obj *domain1.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Attribute")
		case "code":
			out.Values[i] = ec._Commerce_Product_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "codeLabel":
			out.Values[i] = ec._Commerce_Product_Attribute_codeLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_Product_Attribute_unitCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_Product_Attribute_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_AttributesImplementors = []string{"Commerce_Product_Attributes"}

func (ec *executionContext) _Commerce_Product_Attributes(ctx context.Context, sel ast.SelectionSet, obj domain1.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Attributes")
		case "attributeKeys":
			out.Values[i] = ec._Commerce_Product_Attributes_attributeKeys(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._Commerce_Product_Attributes_attributes(ctx, field, obj)
		case "hasAttribute":
			out.Values[i] = ec._Commerce_Product_Attributes_hasAttribute(ctx, field, obj)
		case "getAttribute":
			out.Values[i] = ec._Commerce_Product_Attributes_getAttribute(ctx, field, obj)
		case "getAttributesByKey":
			out.Values[i] = ec._Commerce_Product_Attributes_getAttributesByKey(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_BadgeImplementors = []string{"Commerce_Product_Badge"}

func (ec *executionContext) _Commerce_Product_Badge(ctx context.Context, sel ast.SelectionSet, obj *domain1.Badge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_BadgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Badge")
		case "code":
			out.Values[i] = ec._Commerce_Product_Badge_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_Badge_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_BadgesImplementors = []string{"Commerce_Product_Badges"}

func (ec *executionContext) _Commerce_Product_Badges(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductBadges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_BadgesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Badges")
		case "all":
			out.Values[i] = ec._Commerce_Product_Badges_all(ctx, field, obj)
		case "first":
			out.Values[i] = ec._Commerce_Product_Badges_first(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_CategoriesImplementors = []string{"Commerce_Product_Categories"}

func (ec *executionContext) _Commerce_Product_Categories(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductCategories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_CategoriesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Categories")
		case "main":
			out.Values[i] = ec._Commerce_Product_Categories_main(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "all":
			out.Values[i] = ec._Commerce_Product_Categories_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_CategoryTeaserImplementors = []string{"Commerce_Product_CategoryTeaser"}

func (ec *executionContext) _Commerce_Product_CategoryTeaser(ctx context.Context, sel ast.SelectionSet, obj *domain1.CategoryTeaser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_CategoryTeaserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_CategoryTeaser")
		case "code":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_parent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_ConfigurableProductImplementors = []string{"Commerce_Product_ConfigurableProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ConfigurableProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ConfigurableProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ConfigurableProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variationSelections":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_variationSelections(ctx, field, obj)
		case "badges":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_LoyaltyImplementors = []string{"Commerce_Product_Loyalty"}

func (ec *executionContext) _Commerce_Product_Loyalty(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductLoyalty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_LoyaltyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty")
		case "price":
			out.Values[i] = ec._Commerce_Product_Loyalty_price(ctx, field, obj)
		case "earning":
			out.Values[i] = ec._Commerce_Product_Loyalty_earning(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_Loyalty_EarningInfoImplementors = []string{"Commerce_Product_Loyalty_EarningInfo"}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.LoyaltyEarningInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_Loyalty_EarningInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty_EarningInfo")
		case "type":
			out.Values[i] = ec._Commerce_Product_Loyalty_EarningInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "default":
			out.Values[i] = ec._Commerce_Product_Loyalty_EarningInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_Loyalty_PriceInfoImplementors = []string{"Commerce_Product_Loyalty_PriceInfo"}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.LoyaltyPriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_Loyalty_PriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty_PriceInfo")
		case "type":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "default":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDiscounted":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discounted":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_discounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discountText":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "minPointsToSpent":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxPointsToSpent":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "context":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_MediaImplementors = []string{"Commerce_Product_Media"}

func (ec *executionContext) _Commerce_Product_Media(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MediaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Media")
		case "all":
			out.Values[i] = ec._Commerce_Product_Media_all(ctx, field, obj)
		case "getMedia":
			out.Values[i] = ec._Commerce_Product_Media_getMedia(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_MediaItemImplementors = []string{"Commerce_Product_MediaItem"}

func (ec *executionContext) _Commerce_Product_MediaItem(ctx context.Context, sel ast.SelectionSet, obj *domain1.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MediaItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_MediaItem")
		case "type":
			out.Values[i] = ec._Commerce_Product_MediaItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Commerce_Product_MediaItem_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usage":
			out.Values[i] = ec._Commerce_Product_MediaItem_usage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Product_MediaItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Product_MediaItem_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_MetaImplementors = []string{"Commerce_Product_Meta"}

func (ec *executionContext) _Commerce_Product_Meta(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MetaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Meta")
		case "keywords":
			out.Values[i] = ec._Commerce_Product_Meta_keywords(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_PriceContextImplementors = []string{"Commerce_Product_PriceContext"}

func (ec *executionContext) _Commerce_Product_PriceContext(ctx context.Context, sel ast.SelectionSet, obj *domain1.PriceContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_PriceContextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_PriceContext")
		case "customerGroup":
			out.Values[i] = ec._Commerce_Product_PriceContext_customerGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Product_PriceContext_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channelCode":
			out.Values[i] = ec._Commerce_Product_PriceContext_channelCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locale":
			out.Values[i] = ec._Commerce_Product_PriceContext_locale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_PriceInfoImplementors = []string{"Commerce_Product_PriceInfo"}

func (ec *executionContext) _Commerce_Product_PriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.PriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_PriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_PriceInfo")
		case "default":
			out.Values[i] = ec._Commerce_Product_PriceInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "discounted":
			out.Values[i] = ec._Commerce_Product_PriceInfo_discounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "discountText":
			out.Values[i] = ec._Commerce_Product_PriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "activeBase":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Product_PriceInfo_activeBase(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "activeBaseAmount":
			out.Values[i] = ec._Commerce_Product_PriceInfo_activeBaseAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "activeBaseUnit":
			out.Values[i] = ec._Commerce_Product_PriceInfo_activeBaseUnit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "isDiscounted":
			out.Values[i] = ec._Commerce_Product_PriceInfo_isDiscounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "campaignRules":
			out.Values[i] = ec._Commerce_Product_PriceInfo_campaignRules(ctx, field, obj)
		case "denyMoreDiscounts":
			out.Values[i] = ec._Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "context":
			out.Values[i] = ec._Commerce_Product_PriceInfo_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "taxClass":
			out.Values[i] = ec._Commerce_Product_PriceInfo_taxClass(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_SearchResultImplementors = []string{"Commerce_Product_SearchResult"}

func (ec *executionContext) _Commerce_Product_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *graphql1.SearchResultDTO) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_SearchResult")
		case "products":
			out.Values[i] = ec._Commerce_Product_SearchResult_products(ctx, field, obj)
		case "facets":
			out.Values[i] = ec._Commerce_Product_SearchResult_facets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "suggestions":
			out.Values[i] = ec._Commerce_Product_SearchResult_suggestions(ctx, field, obj)
		case "searchMeta":
			out.Values[i] = ec._Commerce_Product_SearchResult_searchMeta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasSelectedFacet":
			out.Values[i] = ec._Commerce_Product_SearchResult_hasSelectedFacet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promotion":
			out.Values[i] = ec._Commerce_Product_SearchResult_promotion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_SimpleProductImplementors = []string{"Commerce_Product_SimpleProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_SimpleProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.SimpleProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_SimpleProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_SimpleProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "badges":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_VariationSelectionImplementors = []string{"Commerce_Product_VariationSelection"}

func (ec *executionContext) _Commerce_Product_VariationSelection(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection")
		case "code":
			out.Values[i] = ec._Commerce_Product_VariationSelection_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_VariationSelection_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Product_VariationSelection_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_VariationSelection_OptionImplementors = []string{"Commerce_Product_VariationSelection_Option"}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelection_OptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection_Option")
		case "label":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variant":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_variant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_VariationSelection_OptionVariantImplementors = []string{"Commerce_Product_VariationSelection_OptionVariant"}

func (ec *executionContext) _Commerce_Product_VariationSelection_OptionVariant(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelectionOptionVariant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelection_OptionVariantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection_OptionVariant")
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_ListFacetImplementors = []string{"Commerce_Search_ListFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_ListFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchListFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_ListFacetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_ListFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_ListFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_ListFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_ListFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_ListFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_ListFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_ListFacetItemImplementors = []string{"Commerce_Search_ListFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_ListFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_ListFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_ListFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_MetaImplementors = []string{"Commerce_Search_Meta"}

func (ec *executionContext) _Commerce_Search_Meta(ctx context.Context, sel ast.SelectionSet, obj *domain2.SearchMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_MetaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Meta")
		case "query":
			out.Values[i] = ec._Commerce_Search_Meta_query(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "originalQuery":
			out.Values[i] = ec._Commerce_Search_Meta_originalQuery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "page":
			out.Values[i] = ec._Commerce_Search_Meta_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "numPages":
			out.Values[i] = ec._Commerce_Search_Meta_numPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "numResults":
			out.Values[i] = ec._Commerce_Search_Meta_numResults(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "sortOptions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Search_Meta_sortOptions(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_PromotionImplementors = []string{"Commerce_Search_Promotion"}

func (ec *executionContext) _Commerce_Search_Promotion(ctx context.Context, sel ast.SelectionSet, obj *searchdto.PromotionDTO) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_PromotionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Promotion")
		case "title":
			out.Values[i] = ec._Commerce_Search_Promotion_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "content":
			out.Values[i] = ec._Commerce_Search_Promotion_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Commerce_Search_Promotion_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Search_Promotion_media(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_PromotionMediaImplementors = []string{"Commerce_Search_PromotionMedia"}

func (ec *executionContext) _Commerce_Search_PromotionMedia(ctx context.Context, sel ast.SelectionSet, obj *domain2.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_PromotionMediaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_PromotionMedia")
		case "type":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usage":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_usage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_RangeFacetImplementors = []string{"Commerce_Search_RangeFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_RangeFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchRangeFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_RangeFacetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_RangeFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_RangeFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_RangeFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_RangeFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_RangeFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_RangeFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_RangeFacetItemImplementors = []string{"Commerce_Search_RangeFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_RangeFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_RangeFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_RangeFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "min":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_min(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "max":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectedMin":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selectedMin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectedMax":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selectedMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_SortOptionImplementors = []string{"Commerce_Search_SortOption"}

func (ec *executionContext) _Commerce_Search_SortOption(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchSortOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_SortOptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_SortOption")
		case "label":
			out.Values[i] = ec._Commerce_Search_SortOption_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "field":
			out.Values[i] = ec._Commerce_Search_SortOption_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_SortOption_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_SuggestionImplementors = []string{"Commerce_Search_Suggestion"}

func (ec *executionContext) _Commerce_Search_Suggestion(ctx context.Context, sel ast.SelectionSet, obj *domain2.Suggestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_SuggestionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Suggestion")
		case "text":
			out.Values[i] = ec._Commerce_Search_Suggestion_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "highlight":
			out.Values[i] = ec._Commerce_Search_Suggestion_highlight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_TreeFacetImplementors = []string{"Commerce_Search_TreeFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_TreeFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchTreeFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_TreeFacetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_TreeFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_TreeFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_TreeFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_TreeFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_TreeFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_TreeFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_TreeFacetItemImplementors = []string{"Commerce_Search_TreeFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_TreeFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_TreeFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_TreeFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "flamingo":
			out.Values[i] = ec._Mutation_flamingo(ctx, field)
		case "Commerce_Cart_AddToCart":
			out.Values[i] = ec._Mutation_Commerce_Cart_AddToCart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_DeleteCartDelivery":
			out.Values[i] = ec._Mutation_Commerce_Cart_DeleteCartDelivery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_DeleteItem":
			out.Values[i] = ec._Mutation_Commerce_Cart_DeleteItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateItemQty":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateItemQty(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateBillingAddress":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateBillingAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateSelectedPayment":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateSelectedPayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_ApplyCouponCodeOrGiftCard":
			out.Values[i] = ec._Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx, field)
		case "Commerce_Cart_RemoveGiftCard":
			out.Values[i] = ec._Mutation_Commerce_Cart_RemoveGiftCard(ctx, field)
		case "Commerce_Cart_RemoveCouponCode":
			out.Values[i] = ec._Mutation_Commerce_Cart_RemoveCouponCode(ctx, field)
		case "Commerce_Cart_UpdateDeliveryAddresses":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateDeliveryShippingOptions":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_Clean":
			out.Values[i] = ec._Mutation_Commerce_Cart_Clean(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateAdditionalData":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateAdditionalData(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateDeliveriesAdditionalData":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_StartPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_StartPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_CancelPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_CancelPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_ClearPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_ClearPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_RefreshPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_RefreshPlaceOrderBlocking":
			out.Values[i] = ec._Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "flamingo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flamingo(ctx, field)
				return res
			})
		case "Commerce_Product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product(ctx, field)
				return res
			})
		case "Commerce_Product_Search":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product_Search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Customer_Status":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Customer_Status(ctx, field)
				return res
			})
		case "Commerce_Customer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Customer(ctx, field)
				return res
			})
		case "Commerce_Cart_DecoratedCart":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_DecoratedCart(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Cart_Validator":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_Validator(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Cart_QtyRestriction":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_QtyRestriction(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Checkout_ActivePlaceOrder":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Checkout_ActivePlaceOrder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Checkout_CurrentContext":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Checkout_CurrentContext(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_CategoryTree":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_CategoryTree(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Category(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCommerce_Cart_AdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx context.Context, sel ast.SelectionSet, v cart.AdditionalData) graphql.Marshaler {
	return ec._Commerce_Cart_AdditionalData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx context.Context, sel ast.SelectionSet, v cart.AppliedDiscount) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedDiscount(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscounts2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, v dto.CartAppliedDiscounts) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedDiscounts(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, v *dto.CartAppliedDiscounts) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_AppliedDiscounts(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, v cart.AppliedGiftCard) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedGiftCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v dto.BillingAddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v *dto.BillingAddressForm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx context.Context, sel ast.SelectionSet, v cart.Cart) graphql.Marshaler {
	return ec._Commerce_Cart_Cart(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_CouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx context.Context, sel ast.SelectionSet, v cart.CouponCode) graphql.Marshaler {
	return ec._Commerce_Cart_CouponCode(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_CustomAttributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx context.Context, sel ast.SelectionSet, v dto.CustomAttributes) graphql.Marshaler {
	return ec._Commerce_Cart_CustomAttributes(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx context.Context, sel ast.SelectionSet, v *dto.CustomAttributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_CustomAttributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedCart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedCart) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedCart) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedDelivery) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedCartItem) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v cart.Delivery) graphql.Marshaler {
	return ec._Commerce_Cart_Delivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *cart.Delivery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Delivery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx context.Context, v interface{}) (dto.DeliveryAdditionalData, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryAdditionalDataInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalDataᚄ(ctx context.Context, v interface{}) ([]*dto.DeliveryAdditionalData, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.DeliveryAdditionalData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx context.Context, v interface{}) (*dto.DeliveryAdditionalData, error) {
	res, err := ec.unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_DeliveryAddressForm2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, v []*dto.DeliveryAddressForm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Cart_DeliveryAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAddressInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx context.Context, v interface{}) (forms.DeliveryForm, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryAddressInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAddressInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx context.Context, v interface{}) (*forms.DeliveryForm, error) {
	res, err := ec.unmarshalNCommerce_Cart_DeliveryAddressInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryShippingOptionInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx context.Context, v interface{}) (dto.DeliveryShippingOption, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryShippingOptionInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryShippingOptionInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx context.Context, v interface{}) (*dto.DeliveryShippingOption, error) {
	res, err := ec.unmarshalNCommerce_Cart_DeliveryShippingOptionInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx context.Context, sel ast.SelectionSet, v domain4.Error) graphql.Marshaler {
	return ec._Commerce_Cart_Form_Error(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx context.Context, sel ast.SelectionSet, v dto.FieldError) graphql.Marshaler {
	return ec._Commerce_Cart_Form_FieldError(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_Cart_Item(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v *cart.Item) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Item(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_ItemValidationError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationError(ctx context.Context, sel ast.SelectionSet, v validation.ItemValidationError) graphql.Marshaler {
	return ec._Commerce_Cart_ItemValidationError(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, v interface{}) (dto.KeyValue, error) {
	res, err := ec.unmarshalInputCommerce_Cart_KeyValueInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx context.Context, v interface{}) ([]dto.KeyValue, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]dto.KeyValue, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_KeyValueInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx context.Context, v interface{}) ([]*dto.KeyValue, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.KeyValue, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_KeyValueInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, v interface{}) (*dto.KeyValue, error) {
	res, err := ec.unmarshalNCommerce_Cart_KeyValueInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_PaymentSelection_Split2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplit(ctx context.Context, sel ast.SelectionSet, v dto.PaymentSelectionSplit) graphql.Marshaler {
	return ec._Commerce_Cart_PaymentSelection_Split(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PaymentSelection_Split2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplit(ctx context.Context, sel ast.SelectionSet, v *dto.PaymentSelectionSplit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_PaymentSelection_Split(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_PaymentSelection_SplitQualifier2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐSplitQualifier(ctx context.Context, sel ast.SelectionSet, v cart.SplitQualifier) graphql.Marshaler {
	return ec._Commerce_Cart_PaymentSelection_SplitQualifier(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx context.Context, sel ast.SelectionSet, v cart.PersonalDetails) graphql.Marshaler {
	return ec._Commerce_Cart_PersonalDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, v placeorder.PlacedOrderInfo) graphql.Marshaler {
	return ec._Commerce_Cart_PlacedOrderInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedCartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedCartItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedCartItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedItems2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedItems(ctx context.Context, sel ast.SelectionSet, v dto.PricedItems) graphql.Marshaler {
	return ec._Commerce_Cart_PricedItems(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedShippingItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedShippingItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedTotalItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedTotalItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedTotalItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_QtyRestrictionResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx context.Context, sel ast.SelectionSet, v validation.RestrictionResult) graphql.Marshaler {
	return ec._Commerce_Cart_QtyRestrictionResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_QtyRestrictionResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx context.Context, sel ast.SelectionSet, v *validation.RestrictionResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_QtyRestrictionResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v dto.SelectedPaymentResult) graphql.Marshaler {
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v *dto.SelectedPaymentResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Summary2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartSummary(ctx context.Context, sel ast.SelectionSet, v dto.CartSummary) graphql.Marshaler {
	return ec._Commerce_Cart_Summary(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v cart.Tax) graphql.Marshaler {
	return ec._Commerce_Cart_Tax(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Tax2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v []cart.Tax) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommerce_Cart_Teaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTeaser(ctx context.Context, sel ast.SelectionSet, v cart.Teaser) graphql.Marshaler {
	return ec._Commerce_Cart_Teaser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Teaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTeaser(ctx context.Context, sel ast.SelectionSet, v *cart.Teaser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Teaser(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Totalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx context.Context, sel ast.SelectionSet, v cart.Totalitem) graphql.Marshaler {
	return ec._Commerce_Cart_Totalitem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx context.Context, sel ast.SelectionSet, v dto.UpdateShippingOptionsResult) graphql.Marshaler {
	return ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx context.Context, sel ast.SelectionSet, v *dto.UpdateShippingOptionsResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx context.Context, sel ast.SelectionSet, v validation.Result) graphql.Marshaler {
	return ec._Commerce_Cart_ValidationResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_ValidationResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx context.Context, sel ast.SelectionSet, v *validation.Result) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_ValidationResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx context.Context, sel ast.SelectionSet, v domain3.Category) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Category(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain3.Attribute) graphql.Marshaler {
	return ec._Commerce_Category_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v domain3.AttributeValue) graphql.Marshaler {
	return ec._Commerce_Category_AttributeValue(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain3.Attributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Category_Attributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v dto1.PlaceOrderContext) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v *dto1.PlaceOrderContext) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, v application.PlaceOrderPaymentInfo) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderPaymentInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_Form_Parameter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameter(ctx context.Context, sel ast.SelectionSet, v dto1.FormParameter) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderState_Form_Parameter(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_PaymentRequestAPI2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPaymentRequestAPI(ctx context.Context, sel ast.SelectionSet, v dto1.PaymentRequestAPI) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐState(ctx context.Context, sel ast.SelectionSet, v dto1.State) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderState_State(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_State_FailedReason2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐFailedReason(ctx context.Context, sel ast.SelectionSet, v process.FailedReason) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_StartPlaceOrder_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx context.Context, sel ast.SelectionSet, v dto1.StartPlaceOrderResult) graphql.Marshaler {
	return ec._Commerce_Checkout_StartPlaceOrder_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_StartPlaceOrder_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx context.Context, sel ast.SelectionSet, v *dto1.StartPlaceOrderResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_StartPlaceOrder_Result(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v domain5.Address) graphql.Marshaler {
	return ec._Commerce_Customer_Address(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Customer_PersonData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐPersonData(ctx context.Context, sel ast.SelectionSet, v domain5.PersonData) graphql.Marshaler {
	return ec._Commerce_Customer_PersonData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v *domain.Price) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Price(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx context.Context, sel ast.SelectionSet, v domain.Charge) graphql.Marshaler {
	return ec._Commerce_Price_Charge(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx context.Context, v interface{}) (domain.ChargeQualifier, error) {
	res, err := ec.unmarshalInputCommerce_Price_ChargeQualifierInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Price_Charges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharges(ctx context.Context, sel ast.SelectionSet, v domain.Charges) graphql.Marshaler {
	return ec._Commerce_Price_Charges(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Product(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_ActiveVariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelection(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	return ec._Commerce_Product_ActiveVariationSelection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Product_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain1.Attributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_Attributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_Badge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx context.Context, sel ast.SelectionSet, v domain1.Badge) graphql.Marshaler {
	return ec._Commerce_Product_Badge(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductBadges) graphql.Marshaler {
	return ec._Commerce_Product_Badges(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductCategories) graphql.Marshaler {
	return ec._Commerce_Product_Categories(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v domain1.CategoryTeaser) graphql.Marshaler {
	return ec._Commerce_Product_CategoryTeaser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductLoyalty) graphql.Marshaler {
	return ec._Commerce_Product_Loyalty(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductMedia) graphql.Marshaler {
	return ec._Commerce_Product_Media(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_MediaItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v domain1.Media) graphql.Marshaler {
	return ec._Commerce_Product_MediaItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_MediaItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v *domain1.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_MediaItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductMeta) graphql.Marshaler {
	return ec._Commerce_Product_Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx context.Context, sel ast.SelectionSet, v domain1.PriceContext) graphql.Marshaler {
	return ec._Commerce_Product_PriceContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain1.PriceInfo) graphql.Marshaler {
	return ec._Commerce_Product_PriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx context.Context, sel ast.SelectionSet, v graphql1.SearchResultDTO) graphql.Marshaler {
	return ec._Commerce_Product_SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx context.Context, sel ast.SelectionSet, v *graphql1.SearchResultDTO) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelection(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelection) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx context.Context, v interface{}) (graphqlproductdto.VariationSelectionOptionState, error) {
	tmp, err := graphql.UnmarshalString(v)
	return graphqlproductdto.VariationSelectionOptionState(tmp), graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOptionState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection_OptionVariant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionVariant(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOptionVariant) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection_OptionVariant(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_Facet2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacet(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchFacet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_Facet(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Facet2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacetᚄ(ctx context.Context, sel ast.SelectionSet, v []searchdto.CommerceSearchFacet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Facet2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilter(ctx context.Context, v interface{}) (searchdto.CommerceSearchKeyValueFilter, error) {
	res, err := ec.unmarshalInputCommerce_Search_KeyValueFilter(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Search_ListFacetItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItem(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	return ec._Commerce_Search_ListFacetItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_ListFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_ListFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommerce_Search_ListFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_ListFacetItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx context.Context, sel ast.SelectionSet, v domain2.SearchMeta) graphql.Marshaler {
	return ec._Commerce_Search_Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_RangeFacetItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItem(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	return ec._Commerce_Search_RangeFacetItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_RangeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_RangeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommerce_Search_RangeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_RangeFacetItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (searchdto.CommerceSearchRequest, error) {
	res, err := ec.unmarshalInputCommerce_Search_Request(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Search_SortOption2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOption(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchSortOption) graphql.Marshaler {
	return ec._Commerce_Search_SortOption(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_SortOption2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOption(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchSortOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_SortOption(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx context.Context, sel ast.SelectionSet, v domain2.Suggestion) graphql.Marshaler {
	return ec._Commerce_Search_Suggestion(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_TreeFacetItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	return ec._Commerce_Search_TreeFacetItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_TreeFacetItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain3.Tree) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Tree(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2mathᚋbigᚐFloat(ctx context.Context, v interface{}) (big.Float, error) {
	res, err := graphql2.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2mathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v big.Float) graphql.Marshaler {
	res := graphql2.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, v interface{}) (*big.Float, error) {
	res, err := ec.unmarshalNFloat2mathᚋbigᚐFloat(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v *big.Float) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, sel, *v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOCommerce_Cart_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx context.Context, sel ast.SelectionSet, v cart.Address) graphql.Marshaler {
	return ec._Commerce_Cart_Address(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx context.Context, sel ast.SelectionSet, v *cart.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Address(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, sel ast.SelectionSet, v forms.AddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_AddressForm(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_AddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, v interface{}) (forms.AddressForm, error) {
	res, err := ec.unmarshalInputCommerce_Cart_AddressFormInput(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommerce_Cart_AddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, v interface{}) (*forms.AddressForm, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommerce_Cart_AddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOCommerce_Cart_AppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscountᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedDiscount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_AppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_AppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCardᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedGiftCard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_AppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_CouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCodeᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.CouponCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_CouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedCart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedCart) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedCart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedDelivery) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDeliveryᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_DecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedDelivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.DecoratedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_DecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v cart.Delivery) graphql.Marshaler {
	return ec._Commerce_Cart_Delivery(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Delivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Delivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryAddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, v dto.DeliveryAddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_DeliveryAddressForm(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, v *dto.DeliveryAddressForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DeliveryAddressForm(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_DeliveryAddressInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryFormᚄ(ctx context.Context, v interface{}) ([]*forms.DeliveryForm, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*forms.DeliveryForm, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryAddressInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryInfo) graphql.Marshaler {
	return ec._Commerce_Cart_DeliveryInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryLocation) graphql.Marshaler {
	return ec._Commerce_Cart_DeliveryLocation(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_DeliveryShippingOptionInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOptionᚄ(ctx context.Context, v interface{}) ([]*dto.DeliveryShippingOption, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.DeliveryShippingOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryShippingOptionInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Cart_ExistingCustomerData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx context.Context, sel ast.SelectionSet, v cart.ExistingCustomerData) graphql.Marshaler {
	return ec._Commerce_Cart_ExistingCustomerData(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_ExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx context.Context, sel ast.SelectionSet, v *cart.ExistingCustomerData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_ExistingCustomerData(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []domain4.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.FieldError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx context.Context, sel ast.SelectionSet, v dto.ValidationInfo) graphql.Marshaler {
	return ec._Commerce_Cart_Form_ValidationInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_Cart_Item(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Item2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItemᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_ItemValidationError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []validation.ItemValidationError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_ItemValidationError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_KeyValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, sel ast.SelectionSet, v dto.KeyValue) graphql.Marshaler {
	return ec._Commerce_Cart_KeyValue(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_KeyValue2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, sel ast.SelectionSet, v *dto.KeyValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_KeyValue(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx context.Context, sel ast.SelectionSet, v cart.PaymentSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_PaymentSelection(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PaymentSelection_Split2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplitᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.PaymentSelectionSplit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PaymentSelection_Split2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Person2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx context.Context, sel ast.SelectionSet, v cart.Person) graphql.Marshaler {
	return ec._Commerce_Cart_Person(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Person2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx context.Context, sel ast.SelectionSet, v *cart.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Person(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []placeorder.PlacedOrderInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedCartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedCartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedShippingItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedShippingItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedTotalItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedTotalItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedTotalItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_ShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx context.Context, sel ast.SelectionSet, v cart.ShippingItem) graphql.Marshaler {
	return ec._Commerce_Cart_ShippingItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v cart.Tax) graphql.Marshaler {
	return ec._Commerce_Cart_Tax(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Taxes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐTaxes(ctx context.Context, sel ast.SelectionSet, v dto.Taxes) graphql.Marshaler {
	return ec._Commerce_Cart_Taxes(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Taxes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐTaxes(ctx context.Context, sel ast.SelectionSet, v *dto.Taxes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Taxes(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Totalitem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Totalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain3.Attribute) graphql.Marshaler {
	return ec._Commerce_Category_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain3.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v *domain3.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_Attribute(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValueᚄ(ctx context.Context, sel ast.SelectionSet, v []domain3.AttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Category_SearchResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋcategorydtoᚐCategorySearchResult(ctx context.Context, sel ast.SelectionSet, v categorydto.CategorySearchResult) graphql.Marshaler {
	return ec._Commerce_Category_SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋcategorydtoᚐCategorySearchResult(ctx context.Context, sel ast.SelectionSet, v *categorydto.CategorySearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []application.PlaceOrderPaymentInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderState_Form_Parameter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []dto1.FormParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Checkout_PlaceOrderState_Form_Parameter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Checkout_PlacedOrderInfos2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, v dto1.PlacedOrderInfos) graphql.Marshaler {
	return ec._Commerce_Checkout_PlacedOrderInfos(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, v *dto1.PlacedOrderInfos) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlacedOrderInfos(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v domain5.Address) graphql.Marshaler {
	return ec._Commerce_Customer_Address(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Customer_Address2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []domain5.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Customer_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v *domain5.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Address(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerResult(ctx context.Context, sel ast.SelectionSet, v dtocustomer.CustomerResult) graphql.Marshaler {
	return ec._Commerce_Customer_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Customer_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerResult(ctx context.Context, sel ast.SelectionSet, v *dtocustomer.CustomerResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Result(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Status_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerStatusResult(ctx context.Context, sel ast.SelectionSet, v dtocustomer.CustomerStatusResult) graphql.Marshaler {
	return ec._Commerce_Customer_Status_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Customer_Status_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerStatusResult(ctx context.Context, sel ast.SelectionSet, v *dtocustomer.CustomerStatusResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Status_Result(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v *domain.Price) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Price(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx context.Context, sel ast.SelectionSet, v domain.Charge) graphql.Marshaler {
	return ec._Commerce_Price_Charge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Price_Charge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.Charge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_ActiveVariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelectionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_ActiveVariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Product_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Badge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx context.Context, sel ast.SelectionSet, v domain1.Badge) graphql.Marshaler {
	return ec._Commerce_Product_Badge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_Badge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadgeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Badge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Badge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Badge2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx context.Context, sel ast.SelectionSet, v *domain1.Badge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Badge(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v domain1.CategoryTeaser) graphql.Marshaler {
	return ec._Commerce_Product_CategoryTeaser(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaserᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v *domain1.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_CategoryTeaser(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_EarningInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyEarningInfo(ctx context.Context, sel ast.SelectionSet, v domain1.LoyaltyEarningInfo) graphql.Marshaler {
	return ec._Commerce_Product_Loyalty_EarningInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_EarningInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyEarningInfo(ctx context.Context, sel ast.SelectionSet, v *domain1.LoyaltyEarningInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Loyalty_EarningInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain1.LoyaltyPriceInfo) graphql.Marshaler {
	return ec._Commerce_Product_Loyalty_PriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_PriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v *domain1.LoyaltyPriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Loyalty_PriceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_MediaItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_MediaItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.PriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariationSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection_Option(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Product_VariationSelection_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilterᚄ(ctx context.Context, v interface{}) ([]searchdto.CommerceSearchKeyValueFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]searchdto.CommerceSearchKeyValueFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilter(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Search_Promotion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐPromotionDTO(ctx context.Context, sel ast.SelectionSet, v searchdto.PromotionDTO) graphql.Marshaler {
	return ec._Commerce_Search_Promotion(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Search_Promotion2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐPromotionDTO(ctx context.Context, sel ast.SelectionSet, v *searchdto.PromotionDTO) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Search_Promotion(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Search_PromotionMedia2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v domain2.Media) graphql.Marshaler {
	return ec._Commerce_Search_PromotionMedia(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Search_PromotionMedia2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v *domain2.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Search_PromotionMedia(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (searchdto.CommerceSearchRequest, error) {
	res, err := ec.unmarshalInputCommerce_Search_Request(ctx, v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (*searchdto.CommerceSearchRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOCommerce_Search_SortOption2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchSortOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_SortOption2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestionᚄ(ctx context.Context, sel ast.SelectionSet, v []domain2.Suggestion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain3.Tree) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Tree(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v []domain3.Tree) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalODate2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql2.UnmarshalDate(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalODate2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql2.MarshalDate(v)
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2mathᚋbigᚐFloat(ctx context.Context, v interface{}) (big.Float, error) {
	res, err := graphql2.UnmarshalFloat(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2mathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v big.Float) graphql.Marshaler {
	return graphql2.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, v interface{}) (*big.Float, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOFloat2mathᚋbigᚐFloat(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v *big.Float) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOFloat2mathᚋbigᚐFloat(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithFieldInputContext(ctx, graphql.NewFieldInputWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, graphql.WrapErrorWithInputPath(ctx, err)
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.WrapErrorWithInputPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
