// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x8e\xe3\x36\x0c\xbe\xe7\x29\x3c\xd8\xcb\x14\xe8\x13\xf8\x36\x3f\x9d\x62\xd0\xcd\x36\xdd\xa4\xbd\x0c\x82\x82\x91\x19\x47\x88\x2c\xb9\x12\x3d\x3b\x41\xb1\xef\x5e\x58\x92\x1d\xfd\xd8\x49\x8e\x3d\x6c\x4e\x09\xbf\x4f\x24\x45\xf1\x2f\x5c\x12\xea\x3d\x30\x2c\x9e\x54\xd3\xa0\x66\xf8\xf7\x4a\xab\xaa\x63\x54\xfc\xbb\x28\x8a\xa2\xd8\x81\xc1\x67\x20\x28\xcf\x84\x47\x30\x9c\x79\x56\x0f\xdd\x59\x22\x21\x18\xd4\x09\xd5\xb3\x36\x23\xe6\xb8\xa6\x45\xc6\xf7\x9c\x01\x71\x25\x4d\xce\x5f\x47\xb8\x3b\xc3\xcd\x1a\x04\xc2\x4e\x60\x59\x3c\x2a\x25\x10\xa4\x57\xe6\xc5\xd3\xa6\x87\x43\xde\xc9\x53\x8b\x65\xb1\x26\xcd\x65\xed\x24\x35\xd2\x6b\x85\x92\xf8\x9e\xa3\x8e\xa1\x03\x98\x25\x56\x1c\xee\x6b\xad\xba\x76\xc4\x7e\x2e\x3a\x03\xf5\x59\xcd\x4f\x89\x3f\x35\xd2\x8d\xc7\x52\x5f\xed\xb1\xbb\xc5\xf7\xc5\xa2\xf7\xf3\x0c\xaf\x79\xd3\x0a\x1c\xde\xc5\xfe\x68\x50\x92\xf9\xf1\x66\xff\xdf\x37\x4b\x03\xee\x9f\x86\x38\xf5\xc1\x08\x3e\xa1\xf7\x40\xa4\xf9\xae\x23\x34\x03\x25\x35\xf7\x30\x32\x5c\x1c\x0f\x4a\xd3\x33\x1a\xa6\x79\xdb\xc7\x3d\x0e\x46\x15\x02\x99\xb1\xa6\xf7\x3c\x72\xe5\x6d\xfa\x72\xdb\x85\xe3\x83\x3e\x22\xad\x04\x30\x7c\x52\x55\xf2\x24\x1a\x09\xb8\x40\xed\x90\xc4\xd2\x00\xae\x8f\x5d\x99\xb9\x31\x80\x5f\xa0\x89\x4f\x5a\x94\x69\x04\xc2\xea\x81\x7a\x68\xc3\x1b\xb4\xd2\xae\xad\x26\xa4\xef\xdc\xf0\x9d\xc0\x17\xad\x9a\x32\x93\x6e\xd4\xc8\xb5\xe2\x27\x20\xac\x95\xe6\x2e\xd4\xe7\x9b\x7b\xf9\xc9\xa5\xff\xdd\xd6\x92\x97\xc0\xe5\x00\x04\x29\x90\x70\xbd\xc7\x83\x50\xf5\xb1\x58\x42\xdb\x72\x59\x97\xc5\x9b\xbf\x96\x0f\xa6\x21\xc5\x8e\x9f\xf1\x1d\x45\x19\x5f\xf8\x88\xa7\x6f\x4a\x57\x26\x3c\xe1\x4a\xe9\x0b\x7e\xb3\xf1\x19\x13\x37\xcb\xb9\xac\x72\x7d\xd2\xd9\x2c\xd9\xb8\xcc\x73\x4a\x2f\x26\x4f\xd0\x1a\x56\x9a\x33\x2c\xf2\xac\xb7\xf2\x57\xb9\x57\x29\xf7\xd5\xf4\xe1\xb7\x5f\xc7\x12\xb3\x9c\x56\xe3\x1a\x05\x32\xc2\xea\x2f\xd0\x1c\x24\xd9\x6c\x08\x2c\xda\x7c\x2c\xca\xf9\x2c\xbc\x90\x84\x81\x1b\x0f\xef\xc0\x45\xdf\x3d\xac\x13\x66\x4a\xe1\xe8\xbd\x57\xea\x0e\x7e\x56\x27\x10\x74\x1a\xc1\xfc\xd6\x29\x63\xf6\x05\x52\xe2\x50\xfc\x59\x27\xab\x70\x0f\x9d\xa0\xc8\x14\x67\x38\x74\xcf\x67\x6e\x98\xea\x24\x61\x95\xf4\xab\x2a\x00\xa6\x8e\x0e\xf8\x06\x3f\x28\xb6\xd8\x70\xb9\x52\x5c\x92\xd9\xa8\x75\x8b\x92\xca\xe2\x45\x28\x20\x0f\xc2\xc7\x3c\xc8\x94\x24\xab\x2e\x36\xf8\xe4\xc4\x93\xe9\x78\x86\x7d\x04\x58\x67\x48\x35\xa8\x7f\x8d\xda\xac\x83\x0e\x20\x25\x8a\xbc\xb5\x08\xc5\x40\x04\xb2\xb9\xa0\xc7\x03\xc8\x1b\xb4\xfd\xdc\x4c\xe4\x40\xc4\xb6\xee\xdc\x6d\x6f\x53\x6d\xc9\x71\x3b\x0f\xdd\x45\x49\xae\xab\x5c\x36\xf9\x8b\x24\x7d\xba\xd5\xa4\x25\x7b\x93\x02\x76\x61\xd3\xb0\x2d\x0e\x44\x87\x51\xc7\x98\xd5\xea\x27\xab\xd7\x75\x75\x3e\x27\xbd\x74\x10\xf7\xcd\x74\x14\x02\x23\xfe\x8e\xbe\xe4\x2f\x37\x0a\x88\x6b\xf3\x86\xd2\x14\x41\x25\x4d\xf1\xd3\x4a\xbb\x70\x77\xdb\x46\xa2\x4a\xcc\x47\x22\x6f\x70\xe3\xa0\x50\xec\x97\x80\x94\x1d\xcc\xf2\x78\xa0\xed\x51\xa3\x64\x37\xa4\xec\x79\x9a\x7b\xbf\xc6\x05\xe0\x37\x3c\x65\x23\x20\xdc\x0e\xb2\x40\x8c\xaa\x3c\xf9\x00\x66\x14\xdd\x1f\xf1\x34\xb1\xfa\x0c\x9b\xcf\x2c\x6f\xd6\xc6\xf5\x0b\x0d\xf5\x9e\x57\x73\x9e\xbe\x9d\xe4\x14\x97\x7d\xa6\x3e\x9e\xb4\xb3\xca\x5b\xa0\x43\x2c\x91\x76\xab\x88\x39\xda\x76\xb6\x19\xdd\xb3\x57\x4b\x9b\xf9\x4c\xeb\xbe\xd2\x9e\xaf\x74\x67\x57\x4b\x8f\x60\x30\x6a\xbd\x67\xf1\x43\xd3\x1f\x9c\x01\xff\x94\x9c\xa2\x89\x38\x39\x41\xfc\x96\xd2\xb4\xc0\x6b\xf9\xb5\x13\x98\x25\x5a\x85\xf2\xb4\x54\x1a\x87\xc3\x26\x3e\xfb\xe9\xfa\x34\x70\xf5\x01\x1f\x4f\x02\x8c\x09\x36\x9c\xfc\xaf\x0d\x82\x66\x87\x25\x8e\xbb\xca\x3f\x1d\xf6\x3b\x56\xb2\x1e\x5b\x48\x69\x5e\x73\x09\xe2\x0f\x4f\x09\xa0\x76\x2c\x50\xf7\x79\x95\xce\x05\xd9\x35\x2b\xa8\xcf\xeb\x74\x20\xff\x8a\xa6\x13\xe4\x91\x41\xfe\x69\xd8\x51\x5e\x80\x61\x0f\xbe\x6d\xed\x37\x0f\x2a\x4d\xbf\xb7\xfe\xff\x4f\xbf\x35\x6e\xcf\x92\xd9\xbc\xf1\x57\x74\xe6\xfc\x25\x5b\x07\x4d\xd5\xb1\x7f\x02\x33\xc6\xa5\x9c\x0a\x56\x6f\x0d\x3f\x08\x65\x65\x5b\x59\x61\x43\xe2\x95\xa7\x1a\xef\xdd\xce\xd4\x66\x8b\xfb\x44\x85\x2f\xbe\x2f\xfe\x0b\x00\x00\xff\xff\x5f\x3e\x1a\xbb\x12\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
