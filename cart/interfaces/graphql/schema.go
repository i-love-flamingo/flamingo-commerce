// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xdc\x28\x12\x7f\xf7\xa7\xd0\xf8\x5e\x66\x53\xb9\xdd\xba\x7b\xf4\x9b\x3d\x93\xa4\xa6\x36\x76\x12\xdb\xc9\x3d\xa4\x5c\x2e\x2c\xf5\xcc\x70\x41\xa0\x00\xb2\xad\xba\xda\xef\x7e\xc5\x3f\x09\x10\x92\x48\x52\x9b\x87\xbb\xdd\x87\x8d\x07\x9a\xa6\x81\x1f\xdd\xbf\x6e\x24\xbb\x06\x8a\x0d\xab\x6b\xe0\x25\xdc\x6f\xa1\x64\x1c\x49\xa8\x36\x88\xcb\xe2\x3f\x27\x45\x51\x14\x25\xe2\xf2\x6c\x10\x51\x3d\x2b\xdd\x51\x39\xe1\x2d\x10\xfc\x08\x1c\x83\x38\x2b\x3e\x07\x82\xdb\x48\xa4\x5b\xdd\xe9\xa1\x07\x18\x77\x5d\x74\x1b\x56\xc1\xba\xb2\x3f\xd5\x8f\xb3\xe2\x46\x72\x4c\x0f\xab\x5f\x22\x03\x46\x83\x9d\xd6\x73\x42\xde\xa3\xae\x06\x2a\xaf\xe1\x6b\x8b\x39\x54\x3b\x09\xb5\x88\x86\xdf\xbf\xe7\xb8\xb4\x5d\xab\x7e\x91\x37\x6d\x5d\x23\xde\xc5\xb2\xb6\x79\x75\xf2\xc7\xc9\x49\xb8\x5b\x7e\xb7\xdd\xac\x0a\x8b\x92\xb5\x54\xc6\x33\x9e\x37\x0d\xc1\x50\x6d\x5d\xb7\x16\x16\x6d\x1d\xb7\x7b\xc3\xb4\x8d\x91\xdc\x1b\xbc\x97\x1b\xc4\xab\x49\xb9\x37\x1c\xd1\xea\x96\x49\x44\xfe\x85\xe5\x71\x51\x5c\x4b\xba\xc9\x83\x11\xe7\xb5\x6a\x4a\x8e\x3b\x22\x31\x36\xfb\x82\x31\x02\x88\xae\x7a\xcd\xe8\x19\x46\xdb\xae\x1b\xd3\xfb\x68\xf7\x0f\x57\x67\xc5\x6e\x6b\xb4\x00\x95\x58\x76\xbb\x6d\x8f\x02\xdd\xfa\x80\x09\xc1\xf4\x70\x5e\x55\x1c\xc4\x68\x9b\x4d\xab\x16\x6c\x5a\x5e\x1e\x91\x00\x1e\xc9\xbc\x07\x2e\x18\xb5\x08\x9e\x06\x6e\x80\x57\x54\x55\x58\x62\x46\x11\xd9\x22\x89\xc6\x93\x7a\x9d\xc6\xca\xc6\x80\xf0\x06\x08\x94\xaa\x6f\x04\xc0\xa8\xdf\x2c\x0d\x08\xa3\x07\x71\xcb\xce\x5b\x79\x54\xab\x2f\x15\xc4\x3f\xea\x25\x04\xfb\x8b\xe2\xfe\x78\x93\x90\x39\x9f\x0d\x6b\x1b\x46\xd5\x4d\x1a\x2d\x70\xe8\xb2\x4b\xac\x60\x8f\x5a\x22\x37\x2d\xe7\x40\xcb\x2e\xd4\x27\x15\x4e\xb0\xb9\x49\xa1\x9e\x5b\xd7\x63\xd5\xa8\x3f\x37\x06\x3a\x3b\x6a\x1d\x45\xc3\x59\xd5\x96\x32\x6e\xc6\x22\xd8\x05\xa8\xa2\x55\x1e\x7a\x2c\xc7\x30\x5c\x05\xf8\xbd\x45\xcf\x69\xb4\x3a\xb1\x07\x2d\x76\x05\x13\x02\x68\x74\xb7\x3e\xa7\xee\xae\xeb\xf7\x5d\xd8\xf7\x78\xae\xd0\x61\x6d\xbd\x41\x6a\x66\x3b\xec\xee\xc4\x09\x5c\x22\x4c\x6f\x8e\xb8\x69\x30\x3d\xbc\xba\x44\x98\x84\x27\x83\xc5\xab\xba\x91\x5d\xb4\x75\x47\x24\x9c\xe2\xd7\x8c\xcf\x5a\xd7\x8f\x1b\xaf\x4a\xf9\xc7\xdd\x76\x8d\xf5\x3f\x8b\x2b\x5a\x39\x05\xb9\x03\x95\x54\x3f\x48\x1f\xd1\x07\xd9\xad\x6b\xc4\xbf\x80\x7c\x4f\x50\x09\x81\xa9\x2f\x8b\x47\xc4\x31\xa2\x32\x5e\xc0\x8e\xca\x61\xe6\x57\xcf\x12\x38\x45\xe4\x1a\xf6\xa0\x70\x0c\x6b\x0e\xfb\x05\x0b\xdc\xe8\x4f\xac\x2d\x8f\xc0\x6f\xd0\x23\xa6\x87\x91\xcb\xec\x2d\xd5\xa8\x87\x84\x63\xb9\x37\xad\x56\xa1\x68\x6b\x77\x6c\x93\xc8\x0b\x65\x94\xff\x9d\x0c\x04\xfd\xb9\xba\x01\x1b\x26\x46\x7e\x17\x11\xe2\xba\x6f\xb1\x24\x09\x40\xb9\xcb\xf0\x86\x33\x31\x31\x47\x20\x92\x61\x93\x77\xbf\xb2\xa4\xc3\xa0\x33\x7f\x73\xeb\x2b\x46\xd5\x21\x5d\x03\xd1\xd1\x3e\x6f\xd0\x37\x8e\x18\xe2\xd9\xe0\x14\x13\xf7\xa2\xe7\x15\x16\x59\xe1\x3d\x74\x10\xd6\x9c\xe2\xa2\xbb\xed\x1a\x58\xab\x28\x17\xa3\x75\xde\x7b\x0e\x2e\x6f\x73\x44\xfc\x00\xa3\x4d\xbc\xb7\xed\xd6\xac\xc1\x74\xcf\x7b\xc5\x9e\xe0\x1a\x6a\x84\x29\xa6\x87\x94\x4c\x9a\xd4\x78\xfc\xc8\x63\x81\x96\x4a\x45\x6b\xb0\xc2\xfd\x7d\x32\x2b\x11\x16\x87\xb3\x63\x6e\x3c\x21\x3b\x4e\xf6\x9b\x18\xef\x95\x1d\xd3\xef\xf2\xea\x6e\xd6\x78\x67\x8f\xb5\x1f\xcd\x00\x20\xf2\x53\xb3\x6a\x7d\x93\x33\x54\x3b\xaf\xbb\xa3\x7b\x16\x40\x61\x76\x92\x7e\x8d\x19\x33\x94\x19\x5a\x6f\xd1\x73\x86\x26\x35\x30\x04\xb5\xa2\xd8\x67\xc5\x6b\xc2\x90\x9c\xd6\x0c\x0e\x22\x49\x7e\xa0\x24\xee\xbc\xd0\x60\x2e\x06\x7a\xbe\xf5\x26\x8b\xdd\xb2\x1a\x33\xb9\x14\xed\x63\xed\x8c\x21\xb1\xe8\x23\xc1\x6e\xe0\x20\xfa\xa7\x6d\x4e\x87\x5a\x8d\x22\x4c\x25\xf0\x3d\x2a\x47\xc7\x11\xd1\x34\x3b\xef\x01\x49\x78\x42\x29\x8e\xf4\x09\x91\x16\xc6\xdb\x9b\x5e\xcb\xd6\x50\xae\xd1\x24\xb8\x6e\x08\xa8\x26\xf1\x33\xcd\x19\xe5\x54\x2e\xa5\xb1\x3f\x67\xc3\x7e\x9f\x0b\x26\xaf\xee\xd6\xef\x4d\xa4\x80\xee\xae\x5e\x74\xbb\x6a\x6d\x53\x80\xc9\x94\x4f\x09\x4e\xad\x20\x69\xb8\xba\x7b\x13\xc6\xab\xae\xde\xbd\x25\xf1\x3b\xe1\xd2\x22\x7d\xbe\x57\x58\x8e\xb3\x0b\xec\x36\x8f\xdc\x2e\x71\xdb\x6f\x88\xb6\xdf\x13\x6c\xbf\x39\xd6\x7e\x23\xb7\xf8\x0e\x6a\x71\x44\xc2\xa2\x6f\x3e\xba\xf9\x87\xef\xa2\x5b\xe0\x44\x55\xcb\x13\xe3\x5f\xf6\x84\x3d\x85\xad\x35\xc8\x23\xab\xc2\xb6\x12\x71\x8e\x15\x19\xf4\x1b\x1d\xf6\xde\xb2\x12\x25\xf2\xbf\x6d\xd4\x6d\xc7\x08\xcc\xa1\xba\xc5\x35\x9c\x15\xea\xff\x7d\x51\x23\x48\x30\xd7\x5f\xa0\xf3\x19\x45\x90\xf7\x05\x92\xbf\x43\x17\x30\x40\x25\xf1\xb7\x48\xcc\xdb\x0b\x71\x56\xd4\xa8\xf9\x2c\x8c\x5b\xfc\xb7\x60\xf4\xd7\x6b\xf4\x74\x09\x42\xa0\x03\x64\x0c\xbe\x44\xcd\x20\x15\x9a\xed\x09\xc6\xe6\x5f\xa2\x66\x64\xbb\x27\x1e\xaf\x61\xf6\x44\xdd\x76\x16\xf6\x58\xc7\x11\x0d\x2d\x96\x0d\x5a\x01\x17\x51\x89\x21\x20\x54\x19\xf1\x36\xc1\x11\xa4\xa2\xe3\xa1\x29\x8d\x42\xee\xd4\xc5\x95\xb3\xd7\x1e\x4d\x57\x8d\x52\xc5\x26\x2f\x20\xf8\xd7\x68\x47\x4b\xe5\x5e\x26\xc8\x40\xd0\xb1\x10\x95\xe3\x09\xe7\x08\x41\x24\x6b\x61\xf9\xd0\x6d\x50\xdd\x20\x7c\xd0\xec\x7b\x5d\x7a\x3f\x3c\x96\x90\xb3\xcc\x07\x43\x31\xf6\x98\x48\xe0\x73\x2c\x63\x3c\x3c\x67\x6d\x3d\x1d\xf6\x0d\x0c\xfd\x81\x97\x44\x14\x61\x17\x41\x0f\x40\x0c\x29\x89\xbb\xec\x91\xba\xce\x69\x7e\x96\x1c\x8d\x85\xe7\x87\xe3\x62\x1c\xe3\xf2\x1d\xaf\x94\x87\xb2\x6c\x68\x89\x00\x78\xb8\xc5\xe3\x58\xd7\xc7\x38\xcb\xbe\x02\xfc\xe8\x96\xb4\x7a\x5f\xab\x5f\xe5\x8b\x33\xf6\xc8\xe3\xea\x72\x40\x33\x2a\x07\xe8\x4e\x5b\x11\xb8\x9c\x28\x19\xf8\x56\x5e\xa1\x3a\xea\x10\xac\xe5\x25\xc4\x95\xb3\xaf\xb2\xf3\x4a\x54\xcb\xfe\x34\x94\xd0\x7c\x6b\x24\x93\xe9\xc2\xfb\x8c\x2e\x9e\x34\x16\xb7\xc7\x6b\x56\x81\xe9\x81\x80\x46\xc9\x5c\x4e\x3f\x48\x4d\x16\x23\x38\x7b\x5a\x52\xe3\x44\x96\x4a\x69\xb9\x8e\x69\x08\x17\x9c\x3d\xc5\x15\x63\xfd\x7b\xea\x52\x1a\xd7\x6c\xe1\xf4\x88\xa4\x77\x2f\xd2\x37\x64\x8f\xb9\x90\x54\x83\x60\x52\x86\xa0\xa4\x48\x88\x47\x5c\x55\x04\xae\x46\x52\x01\xf5\x36\xce\x7e\xd6\x1e\x81\x48\x2b\x2d\x35\x98\x94\x91\x1c\x20\xb1\xb4\xb1\xcc\x15\x9f\xb3\x79\xc0\xa8\xdd\xb7\xb7\x98\x8e\x51\x5a\xb2\xba\x41\xb4\x1b\x4d\x17\xf8\x36\x2c\xc7\x02\x91\x4c\xc3\x84\xec\xbd\xdf\xa4\xd5\x3a\xb3\x9c\xd5\xc3\xe1\x80\x3d\x3f\x9a\xb6\x47\xc1\x88\x2f\xd8\x6c\x64\x46\x8a\x82\x13\x03\x02\xcd\x91\xd1\x39\x74\x40\xad\x8b\xaf\x93\x36\x27\x81\x6a\x1e\x1b\x5c\xf2\xbd\xfc\x66\xa1\xc5\x15\x03\x92\x08\x93\x58\xf2\x7d\xd8\xeb\xfc\x27\x16\x12\xd3\xc3\xa6\x15\x92\xd5\xc0\x13\x0f\x14\xaf\x12\x22\x69\x73\x53\x92\x91\xcf\x9e\x59\x66\x6f\x99\x4b\xc0\x90\x84\x77\xfb\x0b\xcc\xe5\x31\xf2\xc9\x48\x88\x86\x71\x93\xb8\xf3\x2e\xdd\x79\xd5\xd6\x0f\x31\xad\xa6\xc8\xe0\x58\xc3\x70\x76\xe3\x43\x27\x6a\x0d\xd2\xae\xa6\xd4\x6b\x3b\x97\x92\xe3\x87\x56\x82\x47\x5c\x39\x08\xe0\x8f\x50\xe9\x68\xb9\x58\x10\xea\x6b\x77\x93\x39\xc4\x14\xe9\xcb\x29\xbf\x24\xa7\x1c\xea\x93\xc9\x39\xe7\xf8\x8b\xab\xfd\x4d\x1a\xdb\x13\x90\xa4\xe3\x77\x25\xc4\xc9\xcc\xeb\x7a\x90\x58\xa8\x2d\x7e\x42\x04\x57\xfa\x1c\xaf\x41\xb4\xc4\x31\xaa\x23\x12\x4a\x8e\xd1\x57\x9c\xb3\xc1\x9d\x45\xdc\xbb\x17\xb0\x69\xc9\xef\x10\xa1\x07\x6b\x1e\xa4\xf4\x0a\xff\xae\x46\x45\x29\xc5\x45\x06\x3b\xb4\xc2\xc9\x72\x62\x42\xd6\x23\x47\x0a\x26\x69\x77\x31\x65\xe5\x44\xe1\x4f\xb1\x17\x8b\xbc\x21\x2f\x65\xea\xb7\xbb\x08\xd1\x04\xe1\x83\xce\x82\x1f\xba\x0f\x73\x9a\xd7\x8c\x3b\xd8\xee\x19\xaf\x8d\xcf\x30\xff\x85\xc3\x3c\x79\x1b\x6a\xdd\x46\x24\xaa\x2a\xf7\x4a\xcc\x3b\xdf\xbe\xba\xd2\x70\x56\x82\x10\x1e\x35\x9d\x7a\x4c\xb7\x2f\x81\x7d\xad\xdd\x03\xc8\x9f\x3c\x75\x42\x81\x9d\xf8\xf4\x35\x06\x52\x15\xa2\x81\x12\xef\x71\xe9\x19\x62\x0e\x59\x9c\x5a\x86\x01\xa4\xd2\xf0\x18\x17\x41\xb5\xf2\xd7\xbd\x80\x8d\xb8\xa7\x6f\x80\x02\x47\x64\x4a\xe3\xc1\x74\xcf\xe9\x9c\x87\xee\x20\xe2\x96\x72\x5e\x7c\x81\xae\x60\xfb\x42\x1e\xc1\xcc\x55\xd4\x06\xa3\xbf\x16\xef\xf6\x12\xa8\xca\x7f\x2b\x05\x8a\x42\x72\x44\x05\xd1\x56\x9d\xda\xe2\x47\xfa\xca\x9d\x9e\xab\xbd\x41\x5f\x30\x3d\x58\x95\x3a\xcf\x09\x14\x4a\x56\x88\x23\x7b\x52\xff\x02\xad\x54\x1b\x2f\xfe\x5e\x60\x5a\x94\x48\x40\x41\x99\x3f\x9b\x09\x69\x76\x0f\xec\xb3\xf4\x5b\x93\x39\xcd\x63\x3c\xda\xe5\xff\xb1\x35\xeb\x69\x77\x15\x50\x89\xf7\x18\xb8\xb6\x17\xe9\xeb\x6b\xa0\xe7\xa1\x30\x4c\x76\xd2\x9b\x35\xf6\x04\x7f\xd1\xe8\x45\x1a\xed\xc8\xf3\x3f\xce\x96\x65\xfe\x39\x25\xf3\xff\x4c\xb4\x35\xc9\xf6\x02\x5a\x4a\x26\x83\x68\x63\xda\xb4\x72\x1a\xd0\x3b\xdd\x9d\x83\xea\x9f\x08\xea\x0c\x4c\x67\x40\x3a\x03\xd1\x19\x80\xce\xc0\x73\x06\x9c\x33\xd0\x9c\x01\xe6\x0c\x2c\x67\x40\x39\x03\xc9\x19\x40\xce\xc0\x71\x06\x8c\x7f\x04\xc5\xae\x94\x6d\xd1\xec\x23\xf9\xf4\x23\xc5\x5f\x5b\xe8\x89\x9f\x26\xf1\x2a\xba\x60\x13\x14\x3a\x1d\xe0\x5c\xef\x69\x82\x24\x06\xa1\xa4\x7f\x2d\xb3\x87\x6c\x42\x49\x85\x24\x0a\x87\xa6\xbf\xb4\x1b\x5d\x37\xa3\xf4\xe6\xc8\x5a\x52\x19\x43\x54\xde\x65\xa3\xae\xfd\x68\xaf\x9f\xea\x01\xbc\x98\x7b\xc4\x22\xb2\x7a\xa9\x06\x7f\xfa\xae\x31\xb9\x5d\xe1\x4a\xed\xc5\xa5\x7e\x99\x71\x41\xdb\x7f\xa5\xc9\x19\x11\xbd\xe1\x4c\xbe\xd7\x06\x3b\xe2\x85\xce\x9f\x7c\x34\xdf\xc6\xd9\xd5\xa1\x3c\x89\x02\xef\x17\x8f\x45\x98\xd3\xfb\xd1\xd3\xc9\x3e\x94\x5e\x70\x63\xf6\x3f\x7d\x18\x5a\x74\x60\xe6\xca\x78\xd1\x9a\x6c\x75\xd8\x70\xbb\x84\x97\x05\xd4\x8d\xec\xd4\x62\xdd\xa2\xb0\x30\xfc\xfa\xf4\x07\xb2\x88\x70\x0b\x39\x7c\x6d\x41\xc8\xe2\x09\x89\x42\xb4\xa5\xca\x2f\xf6\x2d\x21\xdd\x90\x6c\x9c\xce\xe4\x1e\x73\xb7\xde\x6d\x88\x41\x6b\x36\xb8\x10\x2d\x5e\xbc\x70\x85\xa0\x17\x2f\xf2\x81\x96\x71\x52\xb1\xe4\xdc\x51\x69\xaf\x06\xcf\x52\xd1\x5d\x7d\x7f\x3e\xb4\xc3\x73\x7c\xb0\xe2\xb3\x89\x6f\xce\x57\x63\x51\x77\x1e\x6c\xf4\xbd\x5d\x5c\x49\x18\x4d\x7f\x69\x03\x69\x6c\xc1\x79\x55\xdd\x32\xa5\x62\x3d\x7a\x5e\xd8\x6d\x57\x2f\x87\x47\x80\x97\xe9\xcd\xfb\x25\xd3\xfc\x2d\x10\x90\xe0\xbf\x50\x2e\x7f\x24\xba\xac\x6f\x27\xa1\xee\xbf\xad\xd4\xf6\xfe\x90\xd2\x8f\x4d\x85\x8c\xd2\x0f\xb2\xcb\xd0\xeb\x6d\x4f\xee\x14\xfa\xb4\xcc\x3c\xa1\xe7\x58\xa3\xc1\x57\x2d\x05\x98\xd1\x57\x42\xe3\x92\xc6\xf4\xb4\x51\x61\x61\x1d\x7f\x32\xf3\x32\x46\xfd\x68\xb6\x64\x69\x22\x35\xe1\x79\xd3\x90\x6e\xa8\xd4\xbd\xe3\xae\xf4\xb6\x2e\xb3\x8e\x27\xa1\xf2\x1a\x6a\xf6\x08\xbd\x9e\x83\xfd\x23\xef\xb8\x27\xf5\x0d\x36\xae\xfd\x37\xcb\x2c\x7d\xa7\xe7\x55\x25\x7e\x33\x7b\x2b\x0a\x46\xe1\xb7\xba\x25\x12\x37\x04\xfa\xcf\xac\x0a\x7b\x30\x60\xb3\xda\xd4\xb1\x44\x11\x15\xc4\x7a\x60\x1d\xa6\x61\x54\xf6\x48\x11\xa4\xd5\xdd\xe8\xcb\xca\x54\xb0\xbe\x5b\xfd\x19\xb6\x87\x3e\x5b\xac\x45\xf8\x7b\xd2\xb0\x70\x5c\xfe\x12\xfe\x38\xf9\x6f\x00\x00\x00\xff\xff\xe5\xe7\x61\xd9\xb4\x33\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
