// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xc1\x8e\xdb\x36\x13\x3e\xff\x7e\x0a\x2d\x72\xd9\x1f\x08\xfa\x00\xbe\x79\xed\x22\x30\x9a\x75\x36\x89\xd3\x1e\x82\xa0\x98\x15\xc7\x32\x1b\x8a\x54\xc9\xd1\x6e\x84\x60\xdf\xbd\x20\x45\xc9\x24\x45\xc9\x5b\x34\x87\x20\xe6\x7c\x1a\xce\x90\xdf\x7c\x33\x0c\x75\x0d\x16\x5b\x55\xd7\xa8\x4b\xfc\x73\x87\xa5\xd2\x40\xc8\xb6\xa0\xa9\xf8\xb9\x2a\x8a\xa2\x28\x41\xd3\xfa\x02\xb1\x96\x1b\x67\x60\x03\x78\x87\x82\x3f\xa1\xe6\x68\xd6\xc5\xd7\x08\xb8\x4b\x20\xdd\xcd\xb7\xd5\xcb\x6a\x15\x6f\x1a\xec\xc5\xd9\xba\xd8\xef\x7a\xf7\x28\x89\x53\xb7\xdf\xad\x8b\xcf\xa4\xb9\xac\xfa\xd5\x47\x2e\x04\x97\xd5\x86\x31\x8d\xc6\x24\x71\xf9\x55\x07\x6c\x5a\x5d\x9e\xc1\xa0\x4e\x30\x0f\xa8\x8d\x92\x3e\x81\xf9\xb8\xc7\x70\x2d\x10\x18\xe3\xc4\x95\x04\xb1\x03\x82\xe9\xa6\x81\xb1\x8f\xf2\xcd\xff\x1a\xe8\x6a\x94\xf4\x19\x05\x96\xd6\x9a\x46\x91\x98\x7d\x72\x28\x94\xac\xcc\x51\x6d\x5a\x3a\xdb\xfc\x4b\x7b\x76\x5f\x5c\x12\x77\x4a\x09\x04\x0f\x84\xd4\x9e\x1e\x13\x34\x8d\xe0\xc8\xb6\xaa\x6d\x94\xdc\x2a\x36\x4d\xf1\x62\xf2\x49\x32\x3c\x41\x2b\x68\xdb\x6a\x8d\xb2\xec\x62\x7f\xa4\x08\x04\x27\xac\x27\x7e\x8e\x83\xc5\xbb\xb1\xff\xdc\xaa\x56\xd2\xba\xd8\x4b\xcf\x94\x46\x2b\xd6\x96\x94\x2e\x73\x13\x1d\x03\xb2\x24\xcb\x4a\x83\x64\xce\x7f\x70\x7a\x0f\x9a\x97\x18\x25\xf9\x8e\x9f\x68\x0b\x9a\x4d\x42\xdb\xc4\x76\x1f\x60\x85\xe3\xf5\xde\x75\x36\xff\x5b\xcf\x03\xf7\x63\x4c\xfb\xff\xc9\x8d\x0d\xdf\xa4\x3e\x86\xc3\xf5\x9f\xcd\xf0\x7b\x52\x08\x9e\xf0\xc3\xd6\x33\x9b\x25\x85\xb6\xcf\x5d\xc0\x2e\xb4\x86\x39\x06\xa5\x6c\x4d\x77\xdd\x9e\xdd\xda\x02\x9b\x4d\x30\xf0\x33\x97\x45\x36\xf8\xbd\x3c\xa9\x99\x04\xac\x69\x54\x91\x2c\x7f\x82\xa8\xcd\x99\x37\x0d\x97\x95\x5d\x4a\xfc\x7d\x0e\x4c\x3d\xb6\x7d\x74\xcc\x78\xa7\x55\x24\x03\x8e\x1e\x57\xd8\xe3\x1d\xd4\xce\x78\x84\x1f\x9b\xba\x27\x66\x16\xd5\x6f\x73\xc0\x39\x7b\xef\x65\xc7\x4d\x69\x9d\x2c\xba\xaa\x0f\x4a\xda\x04\x3e\xa1\x70\x54\x78\xd5\x37\xff\xf6\x83\xe0\x58\xfe\xe0\x74\x1e\xbe\xc9\x9f\x51\x90\xde\x75\xf0\x19\x8c\x27\xe0\x58\xa5\x8b\x2c\xb1\x77\x3f\xf4\x90\xb0\xb2\xdc\xca\xb3\xd2\xdf\x4f\x42\x3d\xc7\xab\x35\xd2\x59\xb1\x78\xad\x04\xad\xb9\x55\xc0\x70\x71\xa0\xde\x7b\x55\x42\x46\x5e\x77\x89\xd9\x7f\x63\xb8\x46\x76\xe4\x35\xae\x0b\xfb\xf7\x50\x2a\xb1\x82\xdf\x7e\xc7\x2e\x2c\x92\x48\x56\x23\xe4\x6f\xd8\x45\x95\xff\x26\x81\x04\xe7\x60\xd6\x45\x0d\xcd\x57\xe3\xa0\xdf\xfe\x32\x4a\xfe\xf2\x09\x9e\xef\xd1\x18\xa8\x70\xf9\x18\x87\x1c\x0a\x7f\x96\x16\x39\x89\xea\x4a\x33\x6c\x0d\xde\x25\x8d\x33\x52\xda\xf8\x7e\xb2\xe1\x84\x15\x38\x44\xc2\x49\x24\xa1\x34\x96\x2d\x73\xc5\x42\x8b\xa5\xe6\xd5\x3c\xc7\xc1\x40\xcc\x47\xf3\x4c\x98\x29\x6c\x18\x2c\x72\xd2\x93\x60\xe7\xb4\x3b\x81\x8d\x63\x51\xdd\x00\xaf\x64\xdf\x34\x62\xc6\x8e\xad\x75\x6d\x7f\x86\x26\x01\x8f\x28\xdc\x6a\x91\x9a\x7c\xfe\x83\x31\xd7\xf0\xfa\xab\xcf\x7e\xcd\x4d\x20\x14\xc9\xed\x1a\xa5\xe9\x83\x66\xb6\x86\xec\x1f\xd7\x7f\x97\xbb\x54\x70\xc9\x7c\x2a\xc6\xa3\x08\xfb\xbe\x1e\x5d\xa7\x5b\xc9\xbb\x0f\xbd\x86\x83\xde\x0f\x42\x2d\x41\x7c\xc2\x13\xda\xd1\x23\xa1\x54\x0d\xfa\x3b\x52\x23\xa0\xc4\xed\x44\x46\x9e\x40\x73\x90\x74\xef\x30\x0f\x79\x8c\x8f\xf2\x00\x75\x62\x30\xaa\xd5\x25\xa6\xa3\xd3\xdf\xd4\x05\x33\xca\x72\xc5\x4f\x11\xbf\x83\x68\x71\x82\x79\xa5\xc8\x0c\x32\xbb\x49\x37\x4d\xe1\xfe\x7a\xfb\x2c\xb8\xac\x04\x3a\x96\x64\x9b\xe1\x4d\x8a\xca\x94\x67\x8f\xd1\xea\xf9\x9a\x9b\x01\x92\xf5\xf1\xc6\x23\x8e\xf0\x03\xc3\xef\xdd\xef\xb9\x7a\xed\xf5\xc8\xd3\xe2\x09\x28\xe0\x77\x9e\xe9\x27\xae\x0d\x49\x77\x99\xb3\x18\x01\x59\x48\xcc\x2b\xce\x98\xc0\xc3\x04\x15\x8d\xbd\xbd\xc2\x2d\xc6\x63\x40\xb4\xe4\x9b\xd0\x2c\x86\x34\x62\x26\xb5\x29\xe6\xa0\x97\x62\xbe\x70\xcd\x9f\xdb\x7b\x2e\xa7\x6c\x2b\x55\xdd\x80\xec\x26\xdb\x45\x1a\xc5\x69\x0a\x48\x30\x8d\x32\x34\xaa\xd8\x6c\xd4\x40\xd7\x4e\x48\x63\xc5\x03\x3d\xcc\xc7\x63\xa5\x55\x5f\x89\xb9\xc7\x4c\x1c\x45\x37\x86\x02\x9b\xb3\x92\x4b\xec\xc0\x1a\xb8\x58\x88\x39\x4b\xd4\xfe\xdd\xe8\x79\x7a\xbd\xe3\x36\x0e\x6e\x87\x00\x02\x2e\x52\xe4\x43\x6c\x1d\x74\x90\x1b\xe2\xb2\xda\xb6\x86\x54\x8d\x3a\xf3\xd6\xfc\x35\x03\xc9\x87\x9b\x43\x26\xda\xbb\x90\xe6\x18\xd9\x30\xe9\x03\xe1\x87\xd3\x1d\xd7\x74\x4e\xb4\x15\x8c\x69\x94\xee\x9f\x76\xba\xcb\x1b\x0f\x6d\xfd\x98\x0e\x70\x12\x7a\x1e\x3b\x1a\x2e\x1e\x7c\x2c\x86\xc5\xcf\x5e\x66\x4a\x97\xd7\x86\x48\xf3\xc7\x96\x6c\x0d\xdc\x43\xe3\xd9\x66\x50\x3f\x21\x73\x1d\x2f\x14\xf7\xac\xf7\xf1\xf9\x3a\x3b\xa9\xce\x4d\x39\x79\x81\x8c\xa7\xb3\xec\x96\x97\x97\x77\x76\xcf\xa5\x19\x64\x78\xca\xce\x06\x3b\x0e\x11\x59\xf1\xb6\xc4\x97\x5c\x56\x53\xf3\xcb\x6a\x65\xdb\xb0\x64\x2e\x81\xe2\x63\x7b\x79\xe5\x45\x71\xac\x67\xfe\xaf\x68\xe2\xe1\xde\x6b\x62\xea\x64\xc3\xd8\x51\xd9\x2f\x6e\x27\x7d\x7d\xbf\xbb\x79\x7b\xe9\xbe\x6f\x8b\xab\xcf\xf2\x24\x82\x68\x9f\x1d\x0a\x24\x0c\xe7\xe8\xeb\xcf\xfc\xeb\xfe\xec\x04\x73\x6b\xd9\x62\x79\xe5\xe2\xfd\x4f\x4e\xbf\x34\xb6\xb0\xac\xd3\x8f\xd4\xbd\xc2\x6f\x70\x3c\x0b\x5b\xbc\xac\xfe\x09\x00\x00\xff\xff\x45\x3c\x9c\x82\xd5\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
