// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\x41\x4f\xf3\x30\x0c\xbd\xe7\x57\xb8\xb7\x7d\xd2\xf7\x0b\x7a\x83\x72\xe1\x06\x0c\x71\x41\x53\xe5\xa5\x66\xad\x94\x26\x23\x71\x26\x26\xb4\xff\x8e\x9a\x75\xa5\x19\x69\x87\xb8\x2d\xc7\x67\xfb\xf9\xf9\xd9\x0a\xef\xb7\x04\x85\x69\x5b\xb2\x92\xca\x02\x99\x36\xc6\xee\xcb\x1b\x66\xdb\xac\x3d\x93\x83\x4f\x01\x00\xb0\x21\x1e\xb0\x85\x34\x15\xe5\xb0\x64\xdb\xe8\x4d\xf6\x2f\x9f\xab\xcf\x42\x35\x2a\xf5\xcd\x98\xc3\xeb\x5c\xc1\x4a\x1c\x84\xb8\x24\xab\x57\x15\x09\x09\x88\xc2\x35\xa9\x18\xda\xa1\xf2\x97\xba\xbe\x74\x39\xbf\x6b\x1d\x52\xfb\xfe\x81\x7a\x56\xc0\x41\x88\x46\x33\xd9\x37\x94\x09\xd6\xc9\x31\x34\xb6\x67\xc8\x16\xb9\x8e\x11\x94\xdc\xec\x28\x87\x5b\x63\x14\xa1\xee\xd3\xac\x69\x0d\x53\x75\x06\xe3\xc8\xfd\xb9\x6d\x67\xd3\x0e\xdc\x21\x23\x34\xed\x56\x51\x4b\x9a\xdd\xb5\x0c\x93\x70\xff\xd9\xd2\xf4\x01\xfd\x59\xac\xf3\xeb\x8e\x38\x3a\xb4\x0e\x58\x85\x68\x8d\xae\xa8\x1b\x55\xb9\xb3\xaa\xca\x48\xdf\xf9\x59\x18\xaf\x39\x87\x7b\xcd\x33\x2b\x08\xc2\x53\x2b\xe8\x02\xd7\x38\x50\xb9\x24\xb4\xb2\x7e\x22\xe7\x15\x9f\x56\xd2\xc7\x72\x88\xdf\x8f\xe2\xe1\x46\x2a\x2f\x79\x4c\x94\x47\xe9\x0f\xc7\x84\xa8\x55\x90\x44\x1f\x4c\xba\x82\xa0\xec\xd1\xd3\x70\xc0\x49\xdb\x17\x47\x8b\x4e\x50\x31\xf5\x03\x76\xb9\x59\x9a\x66\x21\x53\xc5\xff\x87\x81\x4f\x02\xdf\x3d\x39\x1e\x51\x1e\xf1\xb2\x0f\x24\xbf\xdb\xf1\x6c\xe2\x20\xbe\x02\x00\x00\xff\xff\x0c\x90\x4c\xed\xd5\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
