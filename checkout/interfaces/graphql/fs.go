// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xcf\x6e\xe3\x36\x10\xc6\xef\x7e\x8a\x09\x7c\xd9\x2d\xb0\x7d\x00\x1d\xeb\x76\xbb\x0b\x34\x8d\x6b\x27\xe9\xa1\x28\x8c\x09\x39\xb6\x88\x52\xa4\x30\x1c\xc5\x11\x8a\xbc\x7b\x41\x8a\x96\xe5\x38\x36\x1c\x07\x49\xa3\x83\x01\xf3\xcf\xf7\xfd\x66\xc8\x91\x66\x0c\x13\x5f\x55\xc4\x8a\x16\x93\x92\xd4\x3f\xbe\x91\xc5\xd4\xa2\xa2\x2b\xd6\xc4\x13\xef\x84\x1e\x04\x98\x6a\xa6\x40\x4e\x02\x48\x49\xc0\x14\x1a\x2b\xe0\x97\xe9\x9f\x6a\x98\xc9\x09\x7c\xe2\xc6\x39\xe3\x56\x9f\xa1\x8e\x02\xe0\xa3\x02\x54\x8d\xa0\x18\xef\x46\xd2\xd6\x74\x92\xd9\xbf\x23\x00\x80\x31\x5c\x97\x04\x13\x64\x01\x29\x51\xc0\x04\x58\x79\xe3\x56\x20\x1e\xee\xa8\xb3\xd0\x69\xa5\x42\x96\x62\xab\xfc\x33\x29\xcf\x28\xa4\xe3\xde\x81\x54\xb7\x23\x53\x19\x07\x0a\xc3\x86\xd1\x04\x40\xcb\x84\xba\x1d\xea\xa6\xb9\xef\x6e\xe9\x43\x71\x88\x5b\x5f\xf5\x6b\xb2\xd3\x5c\x50\x08\x34\xd5\xe4\x74\xa4\xf5\x2e\xe5\x28\xa4\x61\xbf\x84\x1a\xdb\x2a\x26\x0b\x9d\xde\x49\xd3\x97\xbc\xa4\xc2\x16\x94\x77\x82\xc6\x01\x6a\x6d\x62\xea\xd0\x82\xe9\x2d\xd2\xb2\x83\x40\x89\x27\x31\x2c\xd2\xef\xe8\x71\x34\x1a\x1d\x3c\xe3\x01\x3e\x7c\xe9\x3c\x00\xef\x7c\x23\x89\x79\x98\xb0\x38\x2f\x6d\x6d\x14\x5a\xdb\x42\x28\xfd\xda\xc5\xd0\x10\x42\xa3\x88\x42\x80\x1a\x57\x74\xf4\x88\x87\x5e\xdd\x09\xe7\x54\xe4\x0c\xe7\xe7\xaf\x63\x81\x4d\xb7\x3b\x2e\xfe\xee\x34\x9e\x48\x17\x4f\x34\x90\xf7\xec\xf3\x4e\xaa\xd0\xd8\xde\x36\x3f\x73\x61\xe3\x56\x17\x31\x6b\x29\x96\xa3\x69\x1e\xd0\xe4\x88\x56\x28\xb4\xc6\xb6\xd8\xd3\x1b\x84\x3b\x65\x7f\x6f\x34\x71\xb1\x33\x59\x91\x94\x5e\x17\xfb\x24\xe9\x56\x29\x26\x6d\x64\x82\xac\x93\x19\xfc\x90\xc2\x4e\x07\xf3\xe3\x64\x67\x2e\xad\xc7\xca\x37\x4e\x06\x62\x7d\x14\x53\x36\x8a\x3a\x51\x31\x62\xa9\x78\x3e\x76\xe3\x84\x78\x19\x2f\xe7\x89\xd7\x2c\xc7\x6f\xc2\x57\xe3\xd0\x16\xf0\x93\xf7\x96\xd0\xa5\x41\x87\x15\x15\x7b\x99\x3d\x51\x78\xf1\x3b\xad\xc1\x54\xb5\xa5\x2a\xbd\x7d\xfe\x77\x9e\x3f\xd1\xc8\x87\x02\x9a\x37\x4a\xc5\x02\xfc\x48\x4c\x5f\x51\xd0\xfe\xc2\xec\xf9\x4d\xb1\x52\x6d\x50\xb4\xd9\x8c\x45\xd2\xf1\xcb\xd2\x57\xfa\xf5\xf7\x25\x63\x45\xe7\xa1\x8e\x9f\x65\x1d\xef\xc3\xa6\xa1\xf1\xcd\xec\xb7\x9e\x75\x7c\x16\xec\x37\xa9\xec\xbb\xa0\x7e\xbb\xbe\x7c\x0d\xeb\x8c\xb4\x61\x52\x67\x16\xcb\x2b\xd3\xfa\xb2\xeb\x3a\x41\xa7\xc8\x5a\xd2\x6f\x7f\x5b\x55\x67\x95\x3a\xa2\x19\x61\xf0\xee\xe4\x4f\xf9\x06\x73\xb0\xf7\xac\x77\xf5\x33\x3a\x39\x08\xce\x40\xdb\x5a\x3a\x27\x8d\x03\xdd\x45\xfe\x44\x9e\xfb\x2a\x78\x4f\xd4\x5b\xb4\x46\xa7\x81\x37\xa7\x8d\x43\xf7\xbd\xdd\x2c\x35\xd3\xc3\x6b\x10\x9b\x96\xdb\x27\xf3\xa9\x91\xa3\x07\x21\xa7\x21\x85\xfa\x47\x43\xdc\xf6\xbd\xf2\xaf\x94\x5b\x73\x8b\x41\x76\x1a\x4b\x95\xbb\xea\xb5\x91\x12\x8c\x84\xdc\x67\x6e\x1b\xca\x13\x5a\xf2\xe3\x77\x34\x2f\xba\xd8\x43\xbc\xcc\xad\xff\x86\xf2\xca\xd9\x16\x6a\x1f\x82\xb9\xb3\x04\x66\xd9\x35\xcb\x15\x06\x55\x1a\x47\xe0\xbc\x00\x2a\x31\xf7\x11\x3d\x76\xe8\x08\xcb\x58\x54\x1d\xf1\x01\xd6\xb9\x20\xcb\x96\xe5\x13\x93\x34\xec\x6e\xd8\xf6\x85\xf7\xb9\x2f\xca\x5c\x83\x30\x1d\x20\xe4\x6c\x84\xe4\x9e\xec\x0e\x18\x75\x87\xbb\x75\x1a\xa8\x3e\x8e\xfe\x0b\x00\x00\xff\xff\x37\x17\x3b\xcd\x46\x0d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
