// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	mock "github.com/stretchr/testify/mock"
)

// GuestCartService is an autogenerated mock type for the GuestCartService type
type GuestCartService struct {
	mock.Mock
}

type GuestCartService_Expecter struct {
	mock *mock.Mock
}

func (_m *GuestCartService) EXPECT() *GuestCartService_Expecter {
	return &GuestCartService_Expecter{mock: &_m.Mock}
}

// GetCart provides a mock function with given fields: ctx, cartID
func (_m *GuestCartService) GetCart(ctx context.Context, cartID string) (*cart.Cart, error) {
	ret := _m.Called(ctx, cartID)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cart.Cart, error)); ok {
		return rf(ctx, cartID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cart.Cart); ok {
		r0 = rf(ctx, cartID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cartID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuestCartService_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type GuestCartService_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - ctx context.Context
//   - cartID string
func (_e *GuestCartService_Expecter) GetCart(ctx interface{}, cartID interface{}) *GuestCartService_GetCart_Call {
	return &GuestCartService_GetCart_Call{Call: _e.mock.On("GetCart", ctx, cartID)}
}

func (_c *GuestCartService_GetCart_Call) Run(run func(ctx context.Context, cartID string)) *GuestCartService_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GuestCartService_GetCart_Call) Return(_a0 *cart.Cart, _a1 error) *GuestCartService_GetCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GuestCartService_GetCart_Call) RunAndReturn(run func(context.Context, string) (*cart.Cart, error)) *GuestCartService_GetCart_Call {
	_c.Call.Return(run)
	return _c
}

// GetModifyBehaviour provides a mock function with given fields: _a0
func (_m *GuestCartService) GetModifyBehaviour(_a0 context.Context) (cart.ModifyBehaviour, error) {
	ret := _m.Called(_a0)

	var r0 cart.ModifyBehaviour
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (cart.ModifyBehaviour, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) cart.ModifyBehaviour); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cart.ModifyBehaviour)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuestCartService_GetModifyBehaviour_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModifyBehaviour'
type GuestCartService_GetModifyBehaviour_Call struct {
	*mock.Call
}

// GetModifyBehaviour is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *GuestCartService_Expecter) GetModifyBehaviour(_a0 interface{}) *GuestCartService_GetModifyBehaviour_Call {
	return &GuestCartService_GetModifyBehaviour_Call{Call: _e.mock.On("GetModifyBehaviour", _a0)}
}

func (_c *GuestCartService_GetModifyBehaviour_Call) Run(run func(_a0 context.Context)) *GuestCartService_GetModifyBehaviour_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GuestCartService_GetModifyBehaviour_Call) Return(_a0 cart.ModifyBehaviour, _a1 error) *GuestCartService_GetModifyBehaviour_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GuestCartService_GetModifyBehaviour_Call) RunAndReturn(run func(context.Context) (cart.ModifyBehaviour, error)) *GuestCartService_GetModifyBehaviour_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewCart provides a mock function with given fields: ctx
func (_m *GuestCartService) GetNewCart(ctx context.Context) (*cart.Cart, error) {
	ret := _m.Called(ctx)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*cart.Cart, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *cart.Cart); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuestCartService_GetNewCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewCart'
type GuestCartService_GetNewCart_Call struct {
	*mock.Call
}

// GetNewCart is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GuestCartService_Expecter) GetNewCart(ctx interface{}) *GuestCartService_GetNewCart_Call {
	return &GuestCartService_GetNewCart_Call{Call: _e.mock.On("GetNewCart", ctx)}
}

func (_c *GuestCartService_GetNewCart_Call) Run(run func(ctx context.Context)) *GuestCartService_GetNewCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GuestCartService_GetNewCart_Call) Return(_a0 *cart.Cart, _a1 error) *GuestCartService_GetNewCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GuestCartService_GetNewCart_Call) RunAndReturn(run func(context.Context) (*cart.Cart, error)) *GuestCartService_GetNewCart_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreCart provides a mock function with given fields: ctx, _a1
func (_m *GuestCartService) RestoreCart(ctx context.Context, _a1 cart.Cart) (*cart.Cart, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cart.Cart) (*cart.Cart, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cart.Cart) *cart.Cart); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cart.Cart) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GuestCartService_RestoreCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreCart'
type GuestCartService_RestoreCart_Call struct {
	*mock.Call
}

// RestoreCart is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 cart.Cart
func (_e *GuestCartService_Expecter) RestoreCart(ctx interface{}, _a1 interface{}) *GuestCartService_RestoreCart_Call {
	return &GuestCartService_RestoreCart_Call{Call: _e.mock.On("RestoreCart", ctx, _a1)}
}

func (_c *GuestCartService_RestoreCart_Call) Run(run func(ctx context.Context, _a1 cart.Cart)) *GuestCartService_RestoreCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cart.Cart))
	})
	return _c
}

func (_c *GuestCartService_RestoreCart_Call) Return(_a0 *cart.Cart, _a1 error) *GuestCartService_RestoreCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GuestCartService_RestoreCart_Call) RunAndReturn(run func(context.Context, cart.Cart) (*cart.Cart, error)) *GuestCartService_RestoreCart_Call {
	_c.Call.Return(run)
	return _c
}

// NewGuestCartService creates a new instance of GuestCartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGuestCartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GuestCartService {
	mock := &GuestCartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
