// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xcd\x4e\xdb\x4c\x14\xdd\xfb\x29\x6e\x94\xcd\xf7\x6d\xd2\xbd\x97\x50\x21\xa1\x82\xa0\x04\x75\x83\x22\x34\xd8\x07\x7b\xda\xf9\x31\x33\xd7\x81\xb4\xe2\xdd\xab\xb1\x1d\xc7\x76\x6c\x42\x85\x44\xb2\xca\xdc\x9f\x33\xe7\x1c\x5f\x69\xae\x34\x45\xc9\x74\x6a\xb5\x86\x4b\x70\xbf\x84\x70\x49\x7e\xff\x0d\x9b\x1f\x42\x95\x38\x93\x8a\xe1\xe8\x4f\x44\x44\xf4\x2b\xa6\x25\x3b\x69\xb2\x59\x75\x5c\xc7\x74\xd7\x9c\x57\xd1\x6b\x14\x8d\x23\xdd\xe0\xa9\x84\xe7\x06\xa2\x10\x19\x96\xf2\x37\x62\xda\xfd\xce\x0d\xb7\xb9\x6e\xbc\x9b\xf3\xd6\xf1\xc9\xa6\x9f\xad\xef\xae\x99\xf5\xe8\xfa\xaa\xee\xee\x6d\x4d\xb3\x55\xd5\xf9\x54\xc2\x0d\x70\xb7\xc0\xaf\x51\x34\x1f\xd7\x74\x21\xd7\xa8\xff\xee\xd4\xcd\x0f\xa0\xcd\x5f\xa3\x88\x37\x05\xf6\xc0\x2e\xc1\xa2\x71\x67\xd8\xde\x75\xdb\x3a\x99\x49\x23\xd4\xf7\xa6\xa6\x9b\x1b\x3a\x77\x6e\xb8\x4e\x98\x52\x5f\x8b\x0c\x3e\x1e\x49\xdc\xc0\x97\x8a\x9b\x54\x9b\x08\x46\x5f\x15\x2c\xad\x99\x70\x71\xd9\x16\xd4\x5f\x7d\x54\xd3\xae\xa8\x51\xa6\xc4\x03\x54\x7f\x7c\x1e\x25\x54\xda\x0f\x79\x28\x24\x8c\x34\xa6\x13\x6b\x15\x84\x99\xd5\x73\xc5\x70\x8f\x22\xd9\xbf\xe6\x4c\x24\xd8\x4e\x96\x11\x1a\x7d\xb4\x91\x3b\x0b\xeb\x65\x60\x15\xef\x04\x4b\x86\xf6\xf1\xbe\xce\x0a\xfb\x9c\xa1\x67\xab\xba\x30\x17\x7e\xd9\xf0\x0b\xe1\x7f\xe2\x18\x1a\xa6\x9d\x58\x87\xa9\x3c\xe8\x44\x08\x27\xb6\x34\xdc\x90\x9f\xf2\xfe\x42\x7a\xae\x8d\x91\xba\x50\xd0\x30\xec\x3f\xd5\xb9\x96\xc0\xbb\xdd\x7b\x5b\x47\x65\xde\x21\x2d\x9f\xe9\xf0\xad\x03\x8e\xea\x70\x4b\xe0\x63\x0e\xf7\x60\x8e\xe2\x70\x38\x8b\x84\xe5\x1a\x83\xa2\x77\x2a\x9f\x94\x76\x23\x4c\x76\xdc\x6f\xb4\x63\xf0\xb1\x8f\xd4\xc7\x39\xda\x57\xd2\xb2\x2b\x5a\x8b\x97\xce\x69\x0b\x71\xd9\xab\x69\xa3\x6d\xed\xe4\x6b\x51\x66\x19\x7c\xe7\xb5\x60\xbc\x70\xbc\xff\x04\xe6\x32\xcb\x95\xcc\x72\xde\x29\x98\x82\xbc\x76\x56\xdb\x2e\xa2\x64\x35\x10\x9e\x58\xc3\x30\xdc\x0f\x96\x6e\xe0\x98\x46\x2a\x45\x3c\x8d\x7f\x19\xf2\x87\x69\x54\x65\x5b\x2e\x9b\x02\x23\xea\xb4\xd4\xb8\xad\x53\x3d\x46\xbe\x7d\xdc\xbb\xe1\x46\xd0\x30\xec\xf0\x08\x07\x93\xa0\x67\xd1\x7c\x7c\xb2\xaa\x05\x60\xbb\xba\xe4\x32\xec\x02\x77\xab\x61\xd5\x57\x9b\x94\x61\xde\x88\xbe\xd0\x95\x23\x2d\x36\x0f\xa0\x67\x50\x6a\x0d\x93\x01\xd2\xaa\x93\x84\x49\x89\x73\x90\xb6\x69\xa9\xe0\xeb\x0c\x5b\x12\x69\x4a\x82\x90\x66\x08\x27\xce\xa5\x27\xfb\xf0\x13\x09\x2f\x16\x8b\x00\xf3\x2c\x95\x22\x0f\xd4\x24\x7c\x75\x67\xd8\x88\x6a\x69\x63\xbb\x52\x2d\x74\x4e\xd5\xb8\xfb\x98\x52\xab\x85\x34\x8b\xea\x78\x6a\x55\x18\x3a\x69\x4d\x83\xd7\x4e\xd6\xd4\x36\xd3\x16\xac\xaa\x0d\x2d\x9a\xe3\x85\x11\xb4\x04\xc7\xaa\x5d\x6b\x6b\xd0\xa0\xf5\x3f\xdf\x5d\x00\xf7\x27\xa4\x49\xfc\x3f\x96\x09\xbe\x8f\x82\x76\x36\xcb\x43\xf8\x7b\x3b\xe8\xe4\x4d\x07\x3b\x67\x41\xfa\xdf\x00\x00\x00\xff\xff\x32\x56\x34\x86\x08\x0c\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
