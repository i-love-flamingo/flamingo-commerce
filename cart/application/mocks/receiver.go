// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	mock "github.com/stretchr/testify/mock"

	web "flamingo.me/flamingo/v3/framework/web"
)

// CartReceiver is an autogenerated mock type for the Receiver type
type CartReceiver struct {
	mock.Mock
}

// GetCart provides a mock function with given fields: ctx, session
func (_m *CartReceiver) GetCart(ctx context.Context, session *web.Session) (*cart.Cart, cart.ModifyBehaviour, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	var r1 cart.ModifyBehaviour
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) (*cart.Cart, cart.ModifyBehaviour, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) cart.ModifyBehaviour); ok {
		r1 = rf(ctx, session)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(cart.ModifyBehaviour)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *web.Session) error); ok {
		r2 = rf(ctx, session)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCartWithoutCache provides a mock function with given fields: ctx, session
func (_m *CartReceiver) GetCartWithoutCache(ctx context.Context, session *web.Session) (*cart.Cart, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) (*cart.Cart, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyBehaviour provides a mock function with given fields: ctx
func (_m *CartReceiver) ModifyBehaviour(ctx context.Context) (cart.ModifyBehaviour, error) {
	ret := _m.Called(ctx)

	var r0 cart.ModifyBehaviour
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (cart.ModifyBehaviour, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) cart.ModifyBehaviour); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cart.ModifyBehaviour)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShouldHaveCart provides a mock function with given fields: ctx, session
func (_m *CartReceiver) ShouldHaveCart(ctx context.Context, session *web.Session) bool {
	ret := _m.Called(ctx, session)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) bool); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ShouldHaveGuestCart provides a mock function with given fields: session
func (_m *CartReceiver) ShouldHaveGuestCart(session *web.Session) bool {
	ret := _m.Called(session)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*web.Session) bool); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ViewCart provides a mock function with given fields: ctx, session
func (_m *CartReceiver) ViewCart(ctx context.Context, session *web.Session) (*cart.Cart, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) (*cart.Cart, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewGuestCart provides a mock function with given fields: ctx, session
func (_m *CartReceiver) ViewGuestCart(ctx context.Context, session *web.Session) (*cart.Cart, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) (*cart.Cart, error)); ok {
		return rf(ctx, session)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCartReceiver interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartReceiver creates a new instance of CartReceiver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartReceiver(t mockConstructorTestingTNewCartReceiver) *CartReceiver {
	mock := &CartReceiver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
