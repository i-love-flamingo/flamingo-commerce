// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x14\xec\x25\x0b\x14\x7d\x00\xdd\x12\xa7\x29\x82\x8d\x17\xe9\xca\xed\x65\x11\x04\x63\x6a\x2c\x13\xa6\x48\x95\x1c\x65\x23\x14\x7d\xf7\x42\x24\x25\x93\xa2\x64\xfb\xd8\xc3\xee\x69\x33\xdf\x37\x3f\x1a\xce\x9f\xb9\x24\xd4\x7b\x60\x98\xad\x55\x5d\xa3\x66\xf8\xf6\xa2\x55\xd9\x32\xca\xfe\x59\x65\x59\x96\xed\xc0\xe0\x03\x10\xe4\x27\xc2\x3d\x18\xce\x3c\xab\x87\x6e\x2c\x91\x10\x0c\xea\x09\xd5\xb3\xb6\x23\xe6\xb8\xa6\x41\xc6\xf7\x9c\x01\x71\x25\x4d\xca\x2f\x22\xdc\xe9\x70\x53\x80\x40\xd8\x09\xcc\xb3\x7b\xa5\x04\x82\xf4\xc6\xbc\x78\xde\xf5\xa0\xe4\x83\xec\x1a\xcc\xb3\x82\x34\x97\x95\x93\x54\x48\x4f\x25\x4a\xe2\x7b\x8e\x3a\x86\x0e\x60\x36\x58\x72\xb8\xad\xb4\x6a\x9b\x11\xfb\x25\x6b\x0d\x54\x27\x33\x9f\x27\xf1\x54\x48\x57\xaa\x4d\x63\xb5\x6a\x37\xab\x7f\x57\xab\x3e\xce\x13\x5c\xf0\xba\x11\x38\xbc\x8b\xfd\xa3\x46\x49\xe6\xe7\x9b\xfd\x7f\xdf\x6c\x9a\x70\xff\x34\xc4\xa9\x4f\x46\xf0\x2f\x8c\x1e\x88\x34\xdf\xb5\x84\x66\xa0\x4c\xdd\xdd\x8d\x0c\x97\xc7\x83\xd2\xf4\x80\x86\x69\xde\xf4\x79\x8f\x93\x51\x86\x40\xe2\xac\xee\x23\x8f\x42\xf9\x3e\xff\x71\xaf\x2b\xc7\x07\x7d\x44\x7a\x11\xc0\x70\xad\xca\xc9\x93\x68\x24\xe0\x02\xb5\x43\x26\x9e\x06\xb0\x38\xb6\x79\x12\xc6\x00\x7e\x85\x3a\xd6\xb4\x28\xd3\x08\x84\xe5\x1d\xf5\xd0\x96\xd7\x68\xa5\x6d\x53\xce\x48\xdf\xb9\xe1\x3b\x81\x8f\x5a\xd5\x79\x22\xdd\xaa\x91\x6b\xc5\x6b\x20\xac\x94\xe6\x2e\xd5\xa7\x2f\xf7\xf2\xce\x95\xff\xcd\xab\x25\x6f\x80\xcb\x01\x08\x4a\x60\xc2\xf5\x11\x0f\x42\xd5\xe7\x62\x03\x4d\xc3\x65\x95\x67\xdf\xfd\x67\xf9\x64\x1a\x52\xec\xf8\x8c\xef\x28\xf2\xf8\x83\x8f\xd8\xfd\x50\xba\x34\xa1\x86\x6b\xa5\xaf\xf8\xc3\xe6\x67\x2c\xdc\xa4\xe6\x92\xce\xf5\x45\x67\xab\x64\xeb\x2a\xcf\x19\x3d\x5b\x3c\xc1\x68\x78\xd1\x9c\x61\x96\x56\xbd\x95\x3f\xc9\xbd\x9a\x72\x9f\x4c\x9f\x7e\xfb\xdf\xb1\xc5\x2c\xa7\xd1\x58\xa0\x40\x46\x58\xfe\x05\x9a\x83\x24\x5b\x0d\x81\x47\x5b\x8f\x59\xbe\x5c\x85\x67\x8a\x30\x08\xe3\xee\x1d\xb8\xe8\xa7\x87\x0d\xc2\xcc\x19\x1c\xa3\xf7\x46\x9d\xe2\xb3\xea\x40\x50\x37\x82\xe9\x57\x4f\x19\x8b\x2f\x30\x25\x0e\xcd\x9f\x4c\xb2\x12\xf7\xd0\x0a\x8a\x5c\x71\x86\xc3\xf4\x7c\xe0\x86\xa9\x56\x12\x96\x93\x79\x55\x06\xc0\x9c\xea\x80\x6f\xf1\x83\x62\x8f\x35\x97\x2f\x8a\x4b\x32\x5b\x55\x34\x28\x29\xcf\x1e\x85\x02\xf2\x20\x7c\x2c\x83\x4c\x49\xb2\xe6\x62\x87\x6b\x27\x9e\x2d\xc7\x13\xec\x33\xc0\x5a\x43\xaa\x46\xfd\x7b\x34\x66\x1d\x74\x00\x29\x51\xa4\xa3\x45\x28\x06\x22\x90\x2d\x25\x3d\x5e\x40\xde\xa1\x9d\xe7\x66\xa6\x06\x22\xb6\x0d\xe7\xe6\xf5\x3a\xd3\x96\x1c\x8f\xf3\x30\x5c\x94\xe4\xa6\xca\x79\x97\xbf\x49\xd2\xdd\xb5\x2e\x2d\xd9\xbb\x14\xb0\x0b\x87\x86\x1d\x71\x20\x5a\x8c\x26\xc6\xa2\x55\xbf\x59\xbd\xad\x8b\xfb\x79\x32\x4b\x07\x71\x3f\x4c\x47\x21\x30\xe2\xef\xe8\x5b\xfe\xfc\xa0\x80\xb8\x37\xaf\x68\x4d\x11\x74\xd2\x1c\x7f\xda\x69\x67\xbe\xdd\x8e\x91\xa8\x13\xd3\x95\xc8\x6b\xdc\x3a\x28\x14\xfb\x23\x60\xca\x0e\x76\x79\xbc\xd0\xf6\xa8\x51\xb2\x2b\x4a\xf6\xb4\xcd\x7d\x5c\xe3\x01\xf0\x05\xbb\x64\x05\x84\xd7\x41\x92\x88\xd1\x94\x27\x1f\xc0\x8c\xa2\xdb\x23\x76\x33\xa7\xcf\x70\xf9\x2c\xf2\x16\x7d\x24\x9a\xe6\xbe\xfb\x82\x5d\xaf\x1f\x46\xfd\xf9\x42\x9c\x17\xd3\x32\x4c\x8d\x64\x26\xf4\x92\xe7\xb4\x11\x66\x7a\xa3\x95\x9c\xd2\x99\x72\x45\xc7\xc4\xcb\x7d\x31\x92\x06\xe8\x10\x4b\xa4\x3d\x64\x62\x8e\xb6\xc3\x74\xc1\xf6\x62\x1e\xa6\xfb\x63\x61\x5b\x5c\xd8\x08\x17\x16\x82\x6b\xdf\x7b\x30\x18\x4d\xfb\x93\xf8\xae\xee\x15\x17\xc0\x3f\x25\xa7\x68\x09\xcf\x2e\x2d\x7f\x18\xd5\x0d\xf0\x4a\x7e\x6b\x05\x26\xb5\x5d\xa2\xec\x36\x4a\xe3\xa0\x6c\x62\xdd\x4f\x97\x17\x90\x6b\x49\xf8\x58\x0b\x30\x26\x38\xaa\x96\x92\xfb\x56\x20\x68\x76\xf8\x86\xa6\x15\xc3\x7a\x6a\x1c\x34\xd7\x5f\x3e\xce\x4f\xd9\x23\x30\x24\x93\x19\xab\x5d\xaa\x1a\xb8\xfc\xd5\xca\xd6\x4a\xf4\xf7\x0d\x57\x2e\x64\xd3\x56\x15\x1a\xff\x63\xe9\x64\xce\x79\x7d\x2b\x46\xd4\x1b\x76\xf6\x36\x18\xfd\x1e\xf2\xe4\x5e\x6a\x87\x08\x7e\x10\xca\xd2\x4e\xaf\xec\x8f\x16\xc7\x9d\x30\x0d\xf6\xd6\x9d\x49\x4d\x72\xab\xcf\x34\xf5\xac\x01\xef\xf9\xd6\xf8\x1c\xfd\xdd\xa2\xa1\x34\x30\x0f\xcc\x58\x8d\xb2\xdb\xc7\xfe\x5f\x00\x00\x00\xff\xff\x7c\x3c\x10\x4d\x69\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
