// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x96\xdf\x6e\xeb\x36\x0c\xc6\xef\xf3\x14\x2c\xce\xcd\xe9\x80\xee\x01\x7c\xb9\xec\x4f\x0b\xac\x68\x96\xb4\xdd\xc5\x30\x04\xac\xc4\xc4\xc2\x64\xc9\xa0\xe8\xa6\xc6\xd0\x77\x1f\x24\x2b\x8e\xd3\x34\x59\x9a\x66\x3b\xbe\x08\x10\x4b\xfa\xbe\x1f\x29\xca\xe2\x17\x18\xfb\xaa\x22\x56\x34\x1f\x97\xa4\xfe\xf2\x8d\xcc\x27\x16\x15\xdd\xb1\x26\x1e\x7b\x27\xf4\x22\xc0\x54\x33\x05\x72\x12\x40\x4a\x02\xa6\xd0\x58\x01\xbf\x48\xff\x54\xc3\x4c\x4e\xe0\x2b\x37\xce\x19\xb7\xbc\x84\x3a\x0a\x80\x8f\x0a\x50\x35\x82\x62\xbc\x1b\x49\x5b\xd3\x51\x66\x7f\x8f\x00\x00\xbe\xc0\x7d\x49\x30\x46\x16\x90\x12\x05\x4c\x80\xa5\x37\x6e\x09\xe2\xe1\x89\x3a\x0b\x9d\x66\x2a\x64\x29\x36\xca\x3f\x92\xf2\x8c\x42\x3a\xae\x1d\x48\x75\x2b\x32\x95\x71\xa0\x30\xac\x19\x4d\x00\xb4\x4c\xa8\xdb\xa1\x6e\x1a\xbb\x71\x0b\x1f\x8a\x7d\xdc\xfa\xae\x9f\x93\x9d\x66\x82\x42\xa0\xa9\x26\xa7\x23\xad\x77\x29\x47\x21\xbd\xf6\x0b\xa8\xb1\xad\x62\xb2\xd0\xe9\xad\x34\x5d\xe5\x29\x15\xb6\xa0\xbc\x13\x34\x0e\x50\x6b\x13\x53\x87\x16\x4c\x6f\x91\xa6\xed\x05\x4a\x3c\x89\x61\x9e\x7e\x47\xaf\xa3\xd1\x68\xef\x1e\x0f\xf0\xe1\xaa\xf3\x00\x7c\xf2\x8d\x24\xe6\x61\xc2\xe2\xb8\xb4\xb5\x51\x68\x6d\x0b\xa1\xf4\x2b\x17\x43\x43\x08\x8d\x22\x0a\x01\x6a\x5c\xd2\xc1\x2d\x1e\x7a\x75\x3b\x9c\x53\x91\x33\x9c\x9f\x3f\x0e\x05\x36\xd9\xac\xb8\xf8\xb3\xd3\x78\x23\x5d\xbc\xd1\x40\xde\xb1\xcf\x2b\xa9\x42\x63\x7b\xdb\xfc\xcc\x84\x8d\x5b\x5e\xc4\xac\xa5\x58\x0e\xa6\x79\x40\x93\x23\x5a\xa2\xd0\x0a\xdb\x62\x47\x6f\x10\xee\x84\xfd\xb3\xd1\xc4\xc5\xd6\x60\x45\x52\x7a\x5d\xec\x92\xa4\xaa\x52\x4c\xda\xc8\x18\x59\x27\x33\xf8\x2e\x85\x9d\x36\xe6\xfb\xf1\xd6\x58\x9a\x8f\x95\x6f\x9c\x0c\xc4\xfa\x28\x26\x6c\x14\x75\xa2\x62\xc4\x52\xf1\x7e\xec\xc6\x09\xf1\x22\x16\xe7\x91\x65\x96\xe3\x5f\x18\x87\xb6\x80\x1f\xbc\xb7\x84\x2e\xd5\xde\xbf\x9e\xfa\x81\xca\xfc\x77\x34\x02\xa6\xaa\x2d\x55\xe9\x5b\xf3\x59\xf7\x0f\x99\xcf\x1a\xa5\x62\x25\x7f\x2b\xff\x9f\x51\xd0\xfe\xc4\xec\xf9\x6c\x08\xa9\xce\xa3\xe2\xba\xd8\x3e\x9e\x94\xd2\xaf\x6e\x16\x8c\x15\x9d\x15\xea\x61\xfa\xeb\xa7\x90\xae\xa5\xb2\x67\x05\xba\xbe\xbf\x3d\x9d\x68\x4a\xda\x30\xa9\xf3\x95\xee\x3b\x29\xfa\x18\xd1\x18\x9d\x22\x6b\x49\x9f\x15\x49\x75\xaa\xe9\x3a\x9f\x12\x06\xef\x8e\xbe\x87\xd6\x44\x83\xb5\x27\x7d\x68\xde\xd1\xc9\xbc\x9c\x81\x4e\xdc\xc3\x5d\xdd\x79\xfe\xbe\x9f\x7a\x24\xff\x4f\xd4\x47\xb4\x46\xa7\x17\xff\x39\x6d\x7c\xf5\xdc\xdb\x4d\x53\x27\x38\x2c\x83\x78\xe3\x3e\xbe\x19\x4f\x05\x4c\x2f\x42\x4e\x43\x0a\xf5\xb7\x86\xb8\xed\x1b\xbd\x5f\x28\xf7\x95\x16\x83\x6c\x75\x45\x2a\xb7\x84\x2b\x23\x25\x18\x09\xb9\x49\xda\x74\x43\x47\xf4\x93\x87\x6b\x34\x4f\xba\xd8\x41\xbc\xcd\x7d\xeb\x9a\xf2\xce\xd9\x16\x6a\x1f\x82\x79\xb2\x04\x66\xd1\x75\x7a\x15\x06\x55\x1a\x47\xe0\xbc\x00\x2a\x31\xcf\x11\x3d\xb6\x97\xd8\x9d\xa0\x8e\x78\x0f\xeb\x4c\x90\x65\xc3\xf2\x95\x49\x1a\x76\x0f\x6c\xfb\xe6\xe0\xb2\x3f\x81\xb9\x15\x80\xc9\x00\x21\x67\x23\x24\xf7\x64\xb7\xc7\xa8\xdb\xdc\x8d\xd3\x40\xf5\x75\xf4\x4f\x00\x00\x00\xff\xff\x39\xcc\xc5\xe9\x03\x0c\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
