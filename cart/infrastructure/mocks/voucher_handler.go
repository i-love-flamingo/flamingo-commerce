// Code generated by mockery v2.21.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	mock "github.com/stretchr/testify/mock"
)

// VoucherHandler is an autogenerated mock type for the VoucherHandler type
type VoucherHandler struct {
	mock.Mock
}

// ApplyVoucher provides a mock function with given fields: ctx, _a1, couponCode
func (_m *VoucherHandler) ApplyVoucher(ctx context.Context, _a1 *cart.Cart, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, _a1, couponCode)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cart.Cart, string) (*cart.Cart, error)); ok {
		return rf(ctx, _a1, couponCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cart.Cart, string) *cart.Cart); ok {
		r0 = rf(ctx, _a1, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cart.Cart, string) error); ok {
		r1 = rf(ctx, _a1, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveVoucher provides a mock function with given fields: ctx, _a1, couponCode
func (_m *VoucherHandler) RemoveVoucher(ctx context.Context, _a1 *cart.Cart, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, _a1, couponCode)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cart.Cart, string) (*cart.Cart, error)); ok {
		return rf(ctx, _a1, couponCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cart.Cart, string) *cart.Cart); ok {
		r0 = rf(ctx, _a1, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cart.Cart, string) error); ok {
		r1 = rf(ctx, _a1, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVoucherHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoucherHandler creates a new instance of VoucherHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoucherHandler(t mockConstructorTestingTNewVoucherHandler) *VoucherHandler {
	mock := &VoucherHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
