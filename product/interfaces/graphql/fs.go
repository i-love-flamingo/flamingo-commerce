// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xdc\x36\x10\x3e\x7b\x81\x7d\x07\x06\xbe\xb8\x45\x9f\x40\x37\x7b\xdd\x14\x46\xe3\xc4\xed\x6e\x7b\x09\x8a\x62\x96\x9a\x95\x89\xa5\x48\x81\x1c\x39\x16\x82\xbe\x7b\x41\x52\x94\x44\x4a\xab\xb8\xc7\x02\xf1\xc9\x3b\xf3\x0d\xe7\xef\x9b\x19\x09\x45\x68\x4e\xc0\x91\xed\x74\x5d\xa3\xe1\xf8\xf7\x93\xd1\x65\xcb\x89\x7d\xdd\x6e\x18\x63\xec\x08\x16\xef\x81\xa0\x18\x11\x77\x60\x05\xef\x61\x4e\xf5\x2e\x20\x09\xc1\xa2\xc9\xb0\x3d\xec\x30\xe8\x7a\xb0\x6d\x90\x8b\x93\xe0\x40\x42\x2b\x3b\x37\xd8\x27\xfa\xde\x48\xd8\x3d\x48\x84\xa3\xc4\x82\xdd\x69\x2d\x11\x54\x7c\xae\x97\x2f\x7b\x8f\x56\x31\xd0\xae\xc1\x82\xed\xc9\x08\x55\xf5\xa2\x0a\xe9\xa1\x44\x45\xe2\x24\xd0\x64\xba\x67\xb0\x8f\x58\x0a\xb8\xa9\x8c\x6e\x9b\x41\xf9\x13\x6b\x2d\x54\xe3\x43\x3f\xe4\x31\x55\x48\x6f\xb4\xcb\xe3\xf5\x66\xef\xb6\x9b\x7f\xb6\x9b\xed\xc6\x45\x3b\x22\xf6\xa2\x6e\x24\xc6\x1e\xf9\x1f\x35\x2a\xb2\xdf\xfb\xf7\xff\xe8\x5f\x5e\xfb\xd8\x26\x12\xe4\xaa\x32\xf9\x4b\x72\x00\x22\x23\x8e\x2d\xa1\x8d\x98\xdc\xe7\xed\x80\xe8\x2b\xfa\xac\x0d\xdd\xa3\xe5\x46\x34\xae\x07\x59\x51\xca\xa9\x66\xee\xaf\x76\x19\x24\xe1\x7c\x5e\x4e\xf2\x2f\x97\xa2\xb7\x00\x73\x46\x7a\x92\xc0\x71\xa7\xcb\xbc\x3f\x06\x09\x84\x44\x13\x54\xb9\xb7\xa8\xdd\x9f\xdb\x62\x1e\x4b\xd4\x7e\x84\x3a\xb3\x0d\x7a\x6e\x10\x08\xcb\x5b\x72\xca\x83\xa8\x23\x4d\xda\xa6\x5c\x94\xbf\x08\x2b\x8e\x12\xdf\x1b\x5d\x17\x0b\xf2\x83\x9e\xe0\x83\x66\x07\x84\x95\x36\x22\x54\x7f\xac\x44\x2f\xef\xc2\x74\xb8\x5a\x38\xf4\x23\x08\x15\x35\x13\x6e\x64\xe0\x21\xfa\x28\xd6\xae\x36\x8f\xd0\x34\x42\x55\x05\xfb\xdc\x27\x39\xd4\xd7\x92\xe6\xe7\x0f\xf8\x82\xb2\xc8\x0b\x70\xc6\xee\x8b\x36\xa5\x4d\xac\xc2\xbc\x7d\xc4\x2f\xbe\x64\x23\xb3\x17\x38\x39\x9b\xf1\x48\x4a\xcf\xa1\x43\x60\x66\x78\x79\x9d\x5b\xd3\x3d\xf2\x64\x04\x47\x36\x9f\x0d\x2f\x7f\x50\x27\x3d\x03\x3f\x58\xd7\x12\xff\xef\x30\x8a\x01\xd4\x18\xdc\xa3\x44\x4e\x58\xfe\x09\x46\x80\x22\xcf\x94\xa9\x53\x4f\x58\x56\xac\xd0\x74\x85\xa4\x41\x79\xcd\x0e\x9f\xee\x3f\x8d\x3b\x95\x09\xc5\x1a\x9f\x05\x81\x3d\x17\x3d\x28\x04\x7c\xfb\x02\x42\xba\x95\xe4\xc3\xb5\xce\xf1\x90\x58\x74\xd6\x43\x3f\xe8\x0e\x24\x75\x83\x9a\xfd\x98\x4b\xd6\x9a\x92\xee\xd1\xd8\x18\xbf\x91\xec\x42\xb6\x09\xfc\x17\x87\x72\xd1\xbc\xf1\x79\x8f\xcf\x16\x52\x32\x89\xa8\x28\x0c\xc1\xba\xdf\x9f\x15\x99\xee\x3f\xf8\xf5\xf8\xe8\x57\xc2\x31\xa1\xb8\x9f\x4c\x90\x2d\xa6\xf4\x5e\x79\xba\x3f\x16\xf1\xc1\x6f\x1f\x9d\x71\x13\xa4\x72\xb7\x09\x46\xe9\xdb\xe8\x71\x05\x9c\xc4\x0b\xf6\x2c\xfe\x06\xf9\xaf\xaf\x20\xe5\xd1\x42\x65\xe7\xb4\xba\x92\x13\xfe\x2c\x99\xe4\xfc\x5a\xaf\x97\x1f\x90\xa1\xeb\xfe\xb4\x2e\xdc\x03\x51\xe3\x21\xe8\x12\x79\x7f\x0a\x67\xf8\xc9\x39\xcb\x76\xf9\x09\x0d\x2a\x3e\x65\xd6\xe5\xd0\xc6\x9b\x36\x10\x1f\x47\xe1\xaf\xd8\xcd\x57\xde\x14\xb0\x54\x9b\x41\x19\x0d\x9e\xc1\x0e\xb2\x9b\x33\x76\x0b\xdf\x03\xf3\x97\x73\xe0\x45\x2f\x6f\xca\x2e\x26\xc7\xe7\x77\x73\x69\x1a\x5a\x25\x28\x3b\xb1\x0b\x4e\xd2\x73\xb3\xe2\xa2\x01\x7a\xce\x44\xca\x5f\xda\x0c\x65\x50\xd1\xc5\x73\xb6\x96\xe7\xb8\xf9\xbe\x6e\x37\xd7\xf1\x7b\xa2\xc4\x13\xb4\x92\xa6\xdf\x18\x13\x43\xc1\x71\x8a\x15\x96\xeb\x56\x11\x96\xc5\x25\xec\x14\x76\xc0\x57\xca\xc2\x0f\x53\x79\x07\x16\x0b\xf6\x5e\x6a\xa0\x99\xfc\xb6\x76\xa6\x97\xb4\x7f\x28\x41\xe9\xb5\x10\xf6\x7e\x12\x55\xc2\x14\x0e\x75\x03\xa2\x52\xbf\xb7\x12\xe7\x0c\x2d\x51\x75\x8f\xda\x60\x34\xb7\x99\xf5\x75\xe8\x93\x22\x9f\x45\x9a\xe7\x2e\x88\xfb\x19\x83\xd7\x9d\x04\x6b\x93\xef\x01\xdf\x06\x7c\x25\x54\xa5\x1f\x66\xf6\x5b\x8b\xe3\x72\xcd\x5b\x73\x13\x0e\x62\x33\xfb\x6a\x5b\xe0\xb4\x7f\xfb\xdf\x00\x00\x00\xff\xff\x42\x97\xc5\x05\x30\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3632, mode: os.FileMode(438), modTime: time.Unix(1561640898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
