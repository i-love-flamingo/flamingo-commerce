// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xcf\x6f\x1b\xb7\x12\xbe\xfb\xaf\x58\xc3\x17\x3d\x20\x78\xc0\x7b\x47\xdd\x64\x29\x09\x84\xc4\x8e\xe3\x38\xe9\x21\x08\x84\xf1\x72\x24\xb1\xe1\x92\x5b\x92\x6b\x47\x08\xfa\xbf\x17\xe4\x72\x57\xfc\xb5\x3f\x9a\xa2\xb9\xb4\x3e\x14\xd5\xce\xc7\xe1\x90\xfc\xe6\x9b\x21\xa3\x4f\x35\x16\x6b\x51\x55\x28\x4b\xdc\x6d\xb0\x14\x12\x34\x92\x35\x48\x5d\x7c\xbf\x28\x8a\xa2\x28\x41\xea\xe5\x19\x62\x2c\x97\xd6\x40\x3a\xf0\x06\x19\x7d\x42\x49\x51\x2d\x8b\xcf\x01\x70\x13\x41\x4e\x97\x5f\xec\xd0\x03\xa6\xa6\xeb\xd3\x5a\x10\x5c\x10\xf7\xd3\xfc\x58\x16\x1f\xb4\xa4\xfc\x70\xf9\x9f\x28\x80\x64\xf0\xc5\xef\x17\x17\xe1\x52\xbc\x15\x50\xb2\x2c\xb6\x9b\x36\x68\xe4\x9a\xea\xd3\x76\xd3\xbb\xb6\x5f\x1f\x29\x63\x94\x1f\x56\x84\x48\x54\x2a\x9a\xcc\x7d\xb5\xc0\xba\x91\xe5\x11\x14\xca\x08\x73\x87\x52\x09\xee\xb6\x65\x78\x37\x82\x4d\x00\x42\xa8\xa6\x82\x03\xdb\x80\x86\x74\x52\xcf\xd8\x46\x59\xc3\xa9\x42\xae\x3f\x20\xc3\xd2\xd8\xa2\x21\xbb\xbb\xc8\xde\x2e\x0d\x99\xe0\x07\xf5\x20\x56\x8d\x3e\x9a\xd5\x97\x66\xdf\x3e\xda\x25\x5c\x0b\xc1\x10\x78\xeb\x1d\x62\x7b\xbc\x49\x50\xd7\x8c\x22\x59\x8b\xa6\x16\xdc\x1c\x4f\xb2\xc0\xb3\xc9\x2d\x91\xe0\x1e\x1a\xa6\xd7\x8d\x94\xc8\xcb\x53\xe8\x4f\x0b\x0d\x8c\x6a\xac\x12\x3f\x0f\x9d\xc5\xb9\x31\xff\xbb\x16\x0d\xd7\xcb\x62\xcb\x1d\xfb\x6a\x29\x48\x53\xea\xf8\x33\x55\xc1\x2e\x20\x89\x56\x79\x90\xc0\x89\xf5\xef\xed\xde\x9d\xa4\x25\xb6\x76\xd5\x54\xd6\xfa\x00\xdf\x56\x55\xeb\x3b\x0f\x7b\xb4\xb0\x5b\x1c\x00\xb8\xcd\x7a\x4d\xf7\x7a\x0d\x92\x24\x4b\x5c\x85\x76\x3f\x2f\x7e\x24\x1d\x5c\x16\x44\x3e\xba\x43\x72\xc3\xbe\x98\x2c\xa1\x5c\xa3\xdc\x43\x89\x13\xe4\x71\xb9\x73\x00\x8d\xcf\x90\x3b\xb9\x4f\xc0\x1a\x4c\x17\x9f\x4d\xc4\xdd\xa6\x25\x42\x32\x09\xad\x6a\x86\xe6\x93\xfa\x99\xe1\x24\xf2\xe1\xbc\x77\x9b\x3d\xb0\xbd\x91\xec\x6d\x73\xd4\xdd\xf8\xd6\x8c\xda\x19\x8c\x31\x5d\x9f\xb6\x64\xe1\x84\x69\x50\xdd\x0c\x70\x68\x05\xd9\xc0\xb7\x7c\x2f\x06\x82\x37\xa6\x5e\xcf\xb3\x59\xe7\x45\xac\x8e\xb4\xae\x29\x3f\x98\x4f\x91\xbf\x0f\x9e\x29\x48\x85\xd7\x52\x04\xd2\x69\x0f\x60\x22\xe7\xe6\xa5\xdc\x54\xc6\x05\x5e\x36\x54\x95\xc6\xc9\xa8\xab\xea\x56\x70\xb3\x80\x7b\x64\x96\x06\xb3\xc6\xfc\xd9\x01\xde\xb6\xfc\x42\xf5\xb1\x1b\x93\xdf\x23\x6f\x79\xd3\xe0\x23\x28\x47\xbe\x5e\xdb\x46\x59\x62\xce\xbe\xab\xe6\xbe\x8e\xd8\x2f\xcf\x42\x7e\xdd\x33\xf1\x1c\x7e\xad\x50\x1f\x05\x09\xbf\x95\x20\x25\x35\x75\xc3\xff\xd8\x51\xef\xad\x28\x21\x53\x94\x36\x91\xd9\x8d\x51\x54\x22\x79\xa0\x15\x2e\x0b\xf3\xdf\x2e\x4d\xc2\xaa\xb7\xf8\x8a\x27\x5f\xf3\x82\x62\x14\x20\xdf\xe0\x29\xd0\x39\x83\xb8\x8a\x60\xde\x5e\xa8\x65\x51\x41\xfd\x59\x59\xf8\x97\x5f\x95\xe0\xff\xbd\x87\xe7\x1b\x54\x0a\x0e\x38\x63\xf0\x0d\xd4\x67\x54\x18\xb6\x07\x8c\xc3\xbf\x81\x3a\x89\xdd\x83\xc7\x6b\x18\x3d\xd1\x6e\x3b\x0b\x77\xac\x06\x99\x6c\xd0\x44\x2f\xd3\x28\xbc\x8e\xfa\x9e\xa0\x54\x86\x54\xc9\x86\xe3\x8b\x41\x17\x09\xd5\x2c\x0a\xa5\x36\xc4\x1d\xca\x5b\x3d\x9a\xf5\xae\x8c\xe6\xd2\xc1\xab\xa2\xbd\x79\x20\xcc\x18\xd6\xf5\x85\x39\x15\x8c\xb0\x43\x07\x11\xc1\xfa\x5e\xb9\xaa\x81\x1e\x78\x5b\xad\xc3\xe4\xe9\x7b\xa3\xa5\xf9\xe9\x9b\x18\x3c\x22\xb3\x5f\x8b\xd8\xe4\xd6\xdf\x19\x73\x9d\x46\x7b\xf4\xd9\xd1\x54\x79\x9a\x15\x9d\xae\x12\x52\xbf\x93\xc4\xa4\xb3\xf9\xb3\x0d\xd4\x78\xb1\xf4\x0e\x99\xa6\x75\xa1\xaf\x07\xae\x31\x0b\x8e\xd3\x7e\xc9\xbb\xf7\xbd\xfa\x7d\xfa\x37\x8d\x92\x03\xbb\xc7\x3d\x9a\xde\x31\xa2\x54\x05\xf2\x2b\xea\x9a\x41\x89\xeb\x44\xd1\x9e\x40\x52\xe0\xfa\xc6\x62\xee\xf2\x18\x17\xe5\x2d\x54\x91\x41\x89\x46\x96\x18\xf7\xbe\xbf\xe9\x93\xd7\x64\x4e\x8b\x4f\x88\xb0\xbd\x49\x82\x99\xa9\x77\x9d\xe2\xaf\xe2\x49\x63\xb8\x3b\xde\x76\x15\x94\x1f\x18\x5a\x96\x64\xeb\xf2\x65\x8c\x1a\x6c\x64\xa5\x78\x9e\x72\xd3\x41\x06\x7d\x5c\x39\xd4\x03\x7c\x43\xdf\x87\xfd\x3d\x94\xb3\xad\x26\x39\x6a\x3c\x81\xf6\x38\x9e\x67\xfb\x9e\x4a\xa5\xb9\x3d\xd0\x41\x0c\x83\x2c\x24\xe4\x16\x25\x84\xe1\x6d\x82\x0a\x5a\xce\x56\xe5\x46\xe3\x51\xc0\x1a\xed\x6a\xe2\x20\x46\x4b\xc4\xcc\xd2\x52\xcc\xad\x1c\x8b\xf9\xcc\x37\xb7\x6f\x6f\x29\x4f\x19\x57\x8a\xaa\x06\x7e\x4a\xa6\x0b\x74\x8a\xea\x14\x10\x61\x6a\xa1\x74\xaf\x64\x83\x51\x83\x9e\xda\x21\x89\x07\xea\x69\x62\x3e\x1e\x23\xaf\x72\x22\xe6\x16\x93\x38\x0a\x4e\x0c\x19\xd6\x47\xc1\xc7\xd8\x81\x15\x50\x36\x12\x73\x96\xa8\xed\xd5\xdf\xf1\x74\xba\xea\xd6\x16\x6e\x4a\xbf\x06\xca\x62\xe4\x5d\x68\xed\xb4\x90\x2a\x4d\xf9\x61\xdd\x28\x2d\x2a\x94\x99\xe7\x82\x97\x19\x48\x3e\xdc\x1c\x32\xd2\xdf\x91\x65\xf6\x91\x75\x17\x0f\xd0\xf8\x6e\x7f\x4d\xa5\x3e\x46\xfa\x0a\x4a\xd5\x42\xb6\xf7\x73\x79\xca\x1b\x6f\x9b\xea\x31\xee\x27\x39\xb4\x3c\xb6\x34\x1c\xdd\xf8\x50\x10\x5d\x40\x56\x6a\x4a\xbb\xb6\x95\xd6\x92\x3e\x36\x1a\xbd\x8e\x4d\xa2\x42\xf9\x84\xc4\x56\x3e\x5f\xe4\xb3\x33\xf4\xef\x10\x83\xcd\xf3\x50\xb7\x93\xd7\xc1\xb0\x4b\xcb\x4e\x79\x7e\x42\xc9\xce\x39\xd6\x8b\x74\x6f\x09\x83\xc1\xf6\xcd\x44\x56\xc4\x0d\xf9\x39\xe5\x87\xb9\x57\xfa\x4f\xc0\x28\xb1\x87\x75\x8f\xaa\x61\x5d\x0b\x74\x04\x65\x70\x82\xbf\x94\x52\x9c\x35\x2b\xea\x2c\x7b\x80\x6b\xba\xdf\x60\x44\x91\x2b\x6a\x3b\x17\xe3\x58\x79\x19\x19\xf6\x6a\x3b\xd3\x3c\x9c\xe3\xb0\x0e\xdb\x86\xed\x2a\x13\x70\x06\x5c\x7c\xbf\xb0\x84\x31\x93\x19\x36\x24\x19\x6f\xad\x38\x14\xe8\x55\x7e\x67\x6c\xcb\xe1\x28\x76\xbe\x79\x09\xf3\xbb\x63\x7c\x24\x3c\xe1\x2b\x4f\x20\x38\xa6\x11\xe2\xc4\x52\xa7\x78\xdf\x9c\xaf\xfc\xc1\x94\xcb\x81\x27\xdc\xcb\x14\xba\x7b\x8d\x3a\x6c\xfb\x5f\x09\x19\x37\x73\xbb\x14\x91\x04\x73\xe3\x8a\x5b\x1c\xcf\x8a\x90\x07\x61\x9c\x2c\x92\x26\x6d\xbb\xb9\x7c\x71\x6e\xa5\x5e\x14\x93\x8f\x5b\x63\x8b\xd9\x20\x43\x8d\xfe\xa5\x68\xfa\xb1\x6c\xda\x9f\x21\xc9\xa2\xa3\x83\x8d\xf7\x2f\x39\xfd\x58\x1b\x85\x34\x4e\xdf\xeb\xd3\x0c\xbf\xde\xf6\xcc\x9d\xc2\x9e\x57\x3b\x4f\x78\x6a\x0b\xc8\x9e\x6f\x7a\xb4\x5b\x5e\x37\x3a\x7e\x84\xca\x52\x60\x68\xe2\xee\xb1\xd5\xbd\xda\x2d\xe2\x67\xba\x17\xf1\x7b\x42\x32\x5b\xe4\xa1\xcd\x7c\xcb\xb9\x5c\x86\xa5\xb1\x39\x16\xee\x85\xac\xda\xf2\xd8\xfe\x4d\x0d\xb3\x75\xb2\xb0\x0d\x66\x27\x0c\x99\x37\xb4\x9d\x81\x7a\x82\xd7\xbf\xa5\xd5\x52\x94\xa8\x94\x77\xb9\x1a\x10\xcb\xec\xf2\xfa\xde\xf6\x6f\x9d\x3a\xe3\xa0\xdb\x2c\x8a\x8c\x58\x1d\x4c\x6e\xc1\xed\xa8\x57\x3d\xa0\xbf\xb2\x70\x94\xc0\xc6\xc6\x78\x22\x3c\x14\x4c\x27\xbd\x85\x7d\x67\xca\xeb\xbf\xfb\x97\x83\xb7\xed\xd5\x78\xb4\xfc\xc5\xb1\xfe\x90\xe7\x7e\x3f\xc2\x1b\x61\x7e\xc2\x3c\x8f\xfe\xbd\xaa\xcc\xbd\xaa\x74\x17\x94\xff\x2d\xa7\x31\xff\x1f\xc2\xfc\x93\x2f\x33\xf6\x22\xe3\xf5\x12\x39\xcc\x8c\xcb\xcc\x05\x35\xca\x3f\x59\x1a\x66\x11\xfb\x27\xf2\x7a\x06\xad\x67\xb0\x7a\x06\xa9\x67\x70\x7a\x06\xa5\x67\x30\x7a\x06\xa1\x67\xf0\x79\x06\x9d\x67\xb0\x79\x06\x99\x67\x70\x79\x06\x95\x67\x30\x79\x26\x91\xff\x08\x00\x00\xff\xff\xda\x3a\xd6\x08\xc5\x20\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
