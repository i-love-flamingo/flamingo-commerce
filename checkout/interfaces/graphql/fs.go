// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcf\x6e\xdb\x38\x10\xc6\xef\x7e\x8a\x31\x7a\x69\x0f\x7d\x01\xdd\x5a\xef\x16\x5b\xa0\x45\xbc\x4e\xdb\x3d\x14\x85\x31\x21\x47\x16\x11\x8a\xd4\x0e\x87\x49\x85\x45\xdf\x7d\x41\x8a\x55\xe4\x7f\x81\xeb\xb8\xbb\xf5\x21\x88\x49\xcd\x37\xbf\x19\x7f\xa2\x46\xd2\x77\x04\x0b\xdf\xb6\xc4\x8a\xd6\x8b\x86\xd4\xad\x8f\xb2\xbe\x16\x64\x59\x5a\x54\x74\xc5\x9a\x78\xbd\xa2\x10\xad\xc0\x3f\x33\x00\x80\x18\x8d\xae\xe0\x5a\xd8\xb8\xcd\x7c\xf6\x6d\xf6\xec\x80\xc0\x43\xec\xc2\x3b\xa1\xaf\x02\x4c\x1d\x53\x20\x27\x01\xa4\x21\xe0\x41\xd1\xd7\xf9\x9b\x8a\xcc\xe4\x04\x9e\x73\x74\xce\xb8\xcd\x0b\xe8\x92\x00\xf8\xa4\x00\x6d\x14\x14\xe3\xdd\xec\x08\xed\x7e\xb2\x01\xf4\x19\x7c\x68\x08\x16\xc8\x02\xd2\xa0\x80\x09\xb0\xf1\xc6\x6d\x40\x3c\xdc\xd0\x90\x42\xe7\x2b\x15\xb2\x54\x0f\xca\xbf\x91\xf2\x8c\x42\x3a\xc5\x4e\xa4\x86\x88\x42\x65\x1c\x28\x0c\xdf\x19\x4d\x00\xb4\x4c\xa8\xfb\xa9\x6e\xde\x7b\xeb\x6a\x1f\xaa\x63\xdc\xfa\x6a\xbc\xa6\x64\xba\x16\x14\x02\x4d\x1d\x39\x9d\x68\xbd\xcb\x3d\x0a\x79\xd9\xd7\xd0\x61\xdf\xa6\x66\xa1\xd3\x5b\x6d\x7a\x59\x2e\x69\xb1\x07\xe5\x9d\xa0\x71\x80\x5a\x9b\xd4\x3a\xb4\x60\xc6\x14\xf9\xb2\xa3\x40\x99\x27\x33\xac\xf3\xdf\x79\xc1\x7a\x05\xd1\x99\xbf\x23\x81\xd1\x50\x7b\xce\x4c\x1d\x7b\x45\x21\x1c\xb4\xc5\xec\xb8\x31\x26\x35\xc3\xcb\x01\x0c\xf0\xc6\x47\x19\x44\x27\x5d\x4e\xfb\xd2\x77\x46\xa1\xb5\x3d\x84\xc6\xdf\xbb\xd4\x0f\x84\x10\x15\x51\x08\xd0\xe1\x86\x1e\xf5\xc5\x34\xd7\x60\x8b\xd2\xbf\xf2\xb3\x94\xcf\xe7\xc7\xba\xb1\x7c\x88\x98\x7f\x19\x34\x76\xa4\xab\x1d\x0d\xe4\xbd\xf4\x25\x92\x5a\x34\x76\x4c\x5b\x3e\x93\xae\xe5\x5a\x1e\xfd\x6d\x26\x34\xa5\xa2\x0d\x0a\xdd\x63\x5f\xed\xe9\x4d\xca\x5d\xb2\xbf\x33\x9a\xb8\xda\xda\x6c\x49\x1a\xaf\xab\x7d\x92\xf4\x3f\xb6\x3e\x3a\x99\x6c\x8e\x54\x4b\x36\xaa\x18\x43\x8c\x58\xaa\x0e\xd7\x32\x33\x4e\x88\xeb\x64\xd1\x13\xcd\x56\x0a\x72\xd8\x52\xb5\xd7\x95\x13\x35\xd6\x7f\xa1\x11\x30\x6d\x67\xa9\xcd\xe7\xcd\x7f\x99\xfb\x3a\xaa\x74\x47\xfc\x5f\xe9\xdf\xa0\xb1\xa4\x2f\x95\x3d\xad\x30\x61\xf0\xee\x09\x0d\x69\xfc\xfd\xdb\x37\x8c\x2d\x5d\x92\xea\xe3\xea\xdd\xd3\x90\xfe\xf8\xf0\xfe\xdd\x25\x81\x92\xde\xf9\x44\x2b\xd2\x86\x49\x5d\xcc\xb5\x4f\x6e\xd1\xd2\x07\xf9\xe9\x50\x69\x61\x89\xc9\x1a\x42\x1c\xaa\xc7\xcf\xe0\xe2\x6f\xcf\xed\x7a\x8c\x99\x7f\x49\x85\xfd\xf0\x21\x53\xee\x92\x55\x76\x76\x41\xdd\xb6\x79\x3e\xbc\xce\xb8\xf1\x06\xc9\xf5\xef\xcc\x9e\xcf\x68\xdb\x69\x60\xe7\x73\x95\x27\xc7\xaf\x8a\x97\x9e\x9a\x9f\xd0\x1a\x9d\xa7\xbd\x9f\x48\x99\x96\xee\xc6\x44\xc3\x70\x3b\x9d\x87\xd2\xd3\xfb\xd3\xce\xfe\x8f\xdc\x43\xdb\x2e\x2d\x0c\xb7\xd4\x6f\x5b\xff\x0e\x6d\xa4\x0a\x3e\x97\xb5\xec\x65\xfa\x2a\xe4\x34\xe4\x3c\x7f\x46\xe2\xbe\x04\xef\xe7\x7c\xa5\xc4\xdc\xd1\x43\xe6\x0a\x5e\x7b\x6f\x09\xdd\x7c\x57\xe7\x7d\x19\x9f\xc7\xa9\xf8\xca\xd9\x1e\x3a\x1f\x82\xb9\xb1\x04\xa6\x1e\x26\xce\x16\x83\x6a\x8c\x23\x70\x5e\x00\xb3\x3a\xf8\x3c\xe6\x22\xd4\x26\x4d\x90\x79\x6e\x3c\x82\xb3\xf3\xc6\xf0\x9c\x49\x22\xbb\x8f\x6c\xc7\x9a\x5f\x1c\x9a\x38\x0f\xbf\x68\x7c\x1f\x39\x97\x13\xc6\x61\xb6\x35\x21\xe3\x65\x9e\x23\x24\x0b\x74\x8a\xec\xc1\xc6\x1c\x0e\x58\x51\xcd\x14\x9a\x69\xc4\x09\xef\x18\x27\xab\xbd\xb6\x5e\xdd\x1a\xb7\x39\x51\xf5\xdb\xec\xdf\x00\x00\x00\xff\xff\x97\xd1\x3a\xaa\x94\x0d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
