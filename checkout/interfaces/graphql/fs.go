// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x6e\x1b\x39\x0c\xbe\xfb\x29\x68\xe4\xd2\x1e\xda\x07\x98\x5b\xeb\xdd\xee\x16\x48\x37\xae\xd3\x76\x0f\x45\x61\x30\x12\xed\x11\xa2\x91\x66\x29\x4e\xd2\xc1\x22\xef\xbe\xd0\x4f\xed\xf1\x2f\x5c\x6f\xda\x66\x4e\xb6\x24\x7e\xdf\x47\x8a\x94\x28\xe9\x5b\x82\x89\x6f\x1a\x62\x45\xf3\x49\x4d\xea\xd6\x77\x32\xbf\x16\x64\x99\x5a\x54\x74\xc5\x9a\x78\x3e\xa3\xd0\x59\x81\x7f\x47\x00\x00\x5d\x67\x74\x05\xd7\xc2\xc6\x2d\xc7\xa3\x87\xd1\xc5\x1e\x80\xb5\xed\xc4\x3b\xa1\xaf\x02\x4c\x2d\x53\x20\x27\x01\xa4\x26\xe0\x8c\xe8\x17\xe9\x9f\xea\x98\xc9\x09\x3c\xe3\xce\x39\xe3\x96\xcf\xa1\x8d\x00\xe0\x23\x02\x34\x9d\xa0\x18\xef\x46\x07\xd4\xee\x92\x65\xa1\x17\xf0\xa1\x26\x98\x20\x0b\x48\x8d\x02\x26\xc0\xd2\x1b\xb7\x04\xf1\x70\x43\x99\x42\xa7\x95\x0a\x59\xaa\x35\xf2\x6f\xa4\x3c\xa3\x90\x8e\xb6\x03\xa8\x6c\x51\x54\x19\x07\x0a\xc3\x37\x8d\x26\x00\x5a\x26\xd4\xfd\x10\x37\xcd\xbd\x75\x0b\x1f\xaa\x43\xba\xf5\xd5\x6a\x4d\x61\xba\x16\x14\x02\x4d\x2d\x39\x1d\xd5\x7a\x97\x62\x14\xd2\xb0\x5f\x40\x8b\x7d\x13\x83\x85\x4e\x6f\x84\xe9\x45\x59\xd2\x60\x0f\xca\x3b\x41\xe3\x00\xb5\x36\x31\x74\x68\xc1\xac\x28\xd2\xb2\xd5\x0e\xc2\x05\x88\xd7\xbe\x82\x2e\x10\x28\xcf\x4c\x4a\xe0\x0f\xc6\xb6\x7e\x7f\x99\x97\x86\x97\x2f\x8b\xb4\x57\xd0\x39\xf3\x4f\x47\x60\x34\x2c\x3c\x27\x5d\x2d\x7b\x45\x21\xec\x49\x8d\x38\xb2\x40\x63\x49\xcf\x08\x83\x77\xdf\x66\x46\x0f\xa3\xd1\xe1\xac\x19\x04\x04\x5e\x64\xd5\x80\x37\xbe\x93\xcc\x36\xd8\x82\x38\x2f\x7d\x6b\x14\x5a\xdb\x43\xa8\xfd\xbd\x8b\xc1\x42\x08\x9d\x22\x0a\x01\x5a\x5c\xd2\xd1\xa4\x19\x72\xe5\x9c\x29\xc1\x2d\x7b\x56\xbe\xcf\xc7\x72\x6e\xba\xb6\x18\x7f\xc9\x18\x5b\xd0\xd5\x16\x06\xf2\x0e\x7d\xb1\xa4\x06\x8d\x5d\xd1\x96\x6f\x5d\x69\xd9\x97\xa3\x15\x30\x50\x53\x3c\x5a\xa2\xd0\x3d\xf6\xd5\x0e\xde\xc0\xdd\x29\xfb\x3b\xa3\x89\x37\xf7\xae\x21\xa9\xbd\xae\x76\x95\xc4\xdf\xd8\xf8\xce\xc9\x60\x72\xa5\x6a\xca\x46\x51\x5e\x24\x46\x2c\x55\xfb\x7d\x19\x19\x27\xc4\x8b\x98\xbf\xc7\x1c\x4a\xd5\x30\xcf\x35\x91\x1d\x72\xd8\x50\xb5\x13\x95\x13\x31\xe6\x7f\xd1\x3d\x98\xa6\xb5\xd4\xa4\xb3\xe8\x67\x52\xff\x8d\x46\x7e\x15\xf7\x75\xa7\x62\x95\xfe\x2a\xfa\x37\xe9\x18\x78\x2c\xf6\x38\xc2\x1b\x47\xca\x19\x01\xa9\xfd\xfd\xdb\x37\x8c\x0d\x3d\xa6\xaa\x8f\xb3\xcb\xff\x27\xe9\xcf\x0f\xef\x2e\x1f\x53\x50\xc4\x3b\x5f\xd1\x8c\xb4\x49\xf7\xc1\x53\x09\xd1\xd4\x07\xf9\xe1\xa2\xe2\xc0\x14\x63\x6a\x08\x71\xa8\x8e\x1f\xff\x25\xbf\x3d\x37\xf3\x95\xcd\xf8\x4b\x74\xec\xbb\xcf\xb7\x52\x25\xf9\xb2\x2c\x52\x79\xf7\xe6\x3c\xa3\xf0\x32\xe4\xfc\x77\x66\xcf\x67\x84\xed\x34\x61\xe7\xeb\x2a\x97\xd6\x53\x95\x17\x2f\xec\x4f\x68\x8d\x4e\x5d\xe8\x0f\x54\x19\x87\xee\x56\x44\xb9\xe9\x1e\x36\x8e\xb1\x71\xf8\xb4\x35\xff\x3d\x35\xb4\x99\xa5\x45\xc3\x2d\xf5\x9b\xa9\x7f\x87\xb6\xa3\x0a\x3e\x97\xb1\x94\xcb\xf4\x55\xc8\x69\x48\x3c\xef\x3b\xe2\xbe\x18\xef\x72\xbe\x52\x62\xee\x68\xcd\x5c\xc1\x6b\xef\x2d\xa1\x1b\x6f\xe3\xbc\x2b\x6d\xfd\xaa\x5b\xbf\x72\xb6\x87\xd6\x87\x60\x6e\x2c\x81\x59\xe4\x4e\xb8\xc1\xa0\x6a\xe3\x08\x9c\x17\xc0\x84\x0e\x3e\xb5\xdf\x08\x0b\x13\x3b\xdb\xd4\xa4\x1e\x90\xb3\xf5\x92\x79\xc6\x24\x1d\xbb\x8f\x6c\x57\x3e\x3f\xdf\xd7\x9a\xef\x7f\x00\x8d\x8b\xd0\xe9\x40\x63\xee\xb9\x4d\x48\xf2\x92\x9e\x03\x4a\x26\xe8\x14\xd9\xbd\x81\xd9\x6f\x30\xa3\x05\x53\xa8\x87\x16\x27\xbc\x7d\x4e\x46\x7b\x6d\xbd\xba\x35\x6e\x79\x22\xea\xc3\xe8\xbf\x00\x00\x00\xff\xff\x80\x64\xc5\x42\x2c\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
