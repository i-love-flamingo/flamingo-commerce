// Code generated for package graphql by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xcd\x6e\xe3\x36\x10\x3e\xaf\x9f\x42\x46\x2e\xbb\xc0\xa2\x0f\xa0\x9b\x63\x15\x0b\xa3\x1b\x37\x4d\xdc\xf6\xb0\x08\x8a\x89\x38\x96\xd9\x50\xa4\x4a\x8e\x92\x08\x45\xdf\xbd\xa0\x44\xd9\x24\x45\xc9\xbb\x39\x04\x09\xe7\xe3\xfc\x7e\x33\x43\x51\xd7\x60\xb6\x55\x75\x8d\xba\xc4\xbf\x0a\x2c\x95\x06\x42\xb6\x05\x4d\xd9\xbf\xab\x2c\xcb\xb2\x12\x34\xe5\x17\x88\x95\xac\x7b\x01\x1b\xc1\x05\x0a\xfe\x8a\x9a\xa3\xc9\xb3\x6f\x01\xb0\x88\x20\xdd\xfa\x69\xf5\xdf\x6a\x15\x1a\xf5\x6c\x71\x96\x67\xbb\x62\x50\x8f\x92\x38\x75\xbb\x22\xcf\x1e\x49\x73\x59\x0d\xa7\xcf\x5c\x08\x2e\xab\x0d\x63\x1a\x8d\x89\xfc\x72\xa7\x3d\xb0\x69\x75\x79\x02\x83\x3a\xc2\xdc\xa3\x36\x4a\xba\x00\xe6\xfd\x3e\xbb\x6b\x81\x37\x1f\x80\x31\x4e\x5c\x49\x10\x05\x10\x4c\xcd\x7a\xc2\xb5\xbb\xd2\x40\x57\xa3\xa4\x47\x14\x58\x5a\x69\xec\x47\x24\x76\xe1\xa1\x50\xb2\x32\x07\xb5\x69\xe9\x64\x33\x50\xda\xec\xfd\xde\x87\x71\xab\x94\x40\x70\x40\x88\xe5\x71\xa2\x6e\x3e\x40\xd3\x08\x8e\x6c\xab\xda\x46\xc9\xad\x62\xd3\x30\x2f\x22\x17\x28\xc3\x23\xb4\x82\xb6\xad\xd6\x28\xcb\xee\xa2\xf1\xc6\x4a\x49\x11\x08\x4e\x58\x4f\x14\x1d\x46\x89\xd3\x63\xff\xdc\xaa\x56\x52\x9e\xed\xa4\xa3\x4b\xa3\x15\x6b\x4b\x8a\x8f\xb9\x09\x32\x81\x2c\x0a\xb4\xd2\x20\x59\xaf\xdf\x4b\xe0\xbd\xe6\x25\x46\x71\x7e\xe1\x47\xda\x82\x66\x13\xe7\x36\xa1\x7c\x8e\x82\x13\xae\x3a\x4e\x3a\x96\x74\x79\x0c\x77\x14\x09\x7b\x61\x97\x4a\x4f\xe1\x4b\xe7\xed\x27\xcd\xee\xe4\x51\xcd\x98\xb6\xa2\x73\x8b\x26\xeb\xb2\xbb\x94\xc4\x9c\x78\xd3\x70\x59\xd9\xa3\x48\xdf\xa3\x27\x1a\xb0\xed\x73\x9f\xf1\x2f\x5a\x05\x3d\xd6\xa7\xfd\x4a\x55\x9c\x82\xba\x17\x1e\xe0\x7d\x53\x0f\x05\x4f\xa2\x06\x33\x7b\x9c\x93\x0f\x5a\x0a\x6e\x4a\xab\x64\x51\x55\xbd\x57\xd2\x06\xf0\x80\xa2\x2f\xe2\x77\xdd\xf9\xd1\x0b\x5e\x5a\xfe\xe4\x74\x1a\xef\xa4\x73\xe4\x85\x77\x1d\x7c\x02\xe3\xa8\x73\x66\xff\x22\x4b\x6c\xed\xc7\x01\xad\x18\x86\xbd\xff\xa6\xf4\xcb\x51\xa8\xb7\xf0\xb4\x46\x3a\x29\x16\x9e\x95\xa0\x35\xb7\xc3\xc5\x3f\x1c\xa9\xf7\x55\x95\x90\x98\x5c\x45\x24\x76\x77\x0c\xd7\xc8\x0e\xbc\xc6\x3c\xb3\xbf\x07\x9a\x60\x34\x1c\x3f\xbe\xe0\x65\xaa\x7c\x0a\xcd\x86\x33\xf6\x17\xec\x2c\x9d\x1d\xe0\x69\x98\x40\x1e\xc4\xcb\x83\xc9\xb3\x1a\x9a\x6f\xa6\x87\x3e\xfd\x6d\x94\xfc\xe9\x01\xde\xee\xd0\x18\xa8\x70\x39\x8d\x63\x0c\x99\xcb\xa5\x45\x4e\xbc\xba\xb2\x69\x5a\x83\xb7\xd1\x56\x0a\x26\x58\x58\x9f\xa4\x3b\x7e\x07\x8e\x9e\x70\x12\x91\x2b\x8d\x65\xcb\x5c\xb3\xd0\x62\xab\xb1\x65\x76\x2f\x0f\x44\xcf\x2b\x3e\x9d\x1e\xe7\xa9\xe1\x06\x7c\xa0\xbc\x3f\x49\xab\xf7\xb5\xfa\x6b\xff\x9d\x50\x4b\x10\x0f\x78\x44\xbb\x84\xa2\x1c\xd4\xa0\x5f\x90\x1a\x01\x25\x6e\x27\xbc\x7f\x05\xcd\x41\xd2\x5d\x8f\xb9\x4f\x63\x9c\x97\x7b\xa8\x23\x81\x51\xad\x2e\x31\x5e\xa3\xff\x50\xe7\x2d\xab\x65\x8a\x4e\x11\x7f\x80\x68\x71\x82\xf9\xce\xae\x18\xe7\xc2\x26\x36\x1a\xc3\x1d\xdb\x86\x28\xb8\xac\x04\xf6\x55\x4d\x4e\xef\x75\x8c\x4a\xf0\x69\xc0\x68\xf5\x76\x4d\xcd\x08\x49\xea\xb8\x71\x88\x03\xbc\xa3\x7f\xbf\xff\x7f\xbd\xcc\x98\xf5\x2a\xcd\x19\xd7\x60\x8e\x36\xaf\x40\x79\x96\xf8\xf1\xeb\x77\xe4\xda\x90\xec\x8b\x3d\x8b\x11\x90\x84\x84\xbc\xe3\x8c\x09\xdc\x4f\x50\x3e\xc6\xb5\xec\xa2\x3f\x06\x44\x4b\x6e\xaa\xce\x62\x48\x23\x26\x42\x9b\x62\xf6\x7a\xc9\xe7\x0b\x17\x5d\xde\xbe\x72\x39\x65\x63\xa9\xea\x06\x64\x37\x31\x17\xac\x09\x4e\x53\x40\x84\x69\x94\xa1\xa1\xdd\x96\xbc\x06\xba\x96\x21\x8d\x15\x1f\x1e\xa5\xf3\x19\xea\x67\x99\xbe\xe2\xf3\x80\x99\x28\x0a\x2a\x86\x02\x9b\x93\x92\x4b\xec\xc0\x1a\xb8\x58\xf0\x39\x49\xd4\xe1\x2b\xc3\xf1\xf4\xfa\x0a\x69\x7a\xb8\xdd\x6a\x04\x5c\xc4\xc8\xfb\x50\x3a\xce\x49\x6e\x88\xcb\x6a\xdb\x1a\x52\x35\xea\xc4\x77\xc9\xcf\x09\x48\xda\xdd\x14\x32\x9a\xcd\x0b\x61\x9e\x3d\x1b\x9f\xae\x40\xf8\xeb\xf1\x96\x6b\x3a\x45\xb3\x17\x8c\x69\x94\x1e\xbe\x01\x74\x97\x16\xee\xdb\xfa\x39\x7e\x91\x48\x18\x78\xdc\xd3\xd0\x4b\xbc\x5d\x16\x92\xf5\x5b\x3b\xfb\xad\xbd\x3c\x9e\x4b\xdf\xc9\x7c\xe6\xfb\x76\xa2\xe1\xce\x75\x66\xac\x64\xc3\xd8\x41\xd9\x1b\x1f\x27\xdb\x67\x57\xac\x3f\x9f\x77\xc4\xe7\xf3\xcb\x29\x58\x3b\x9f\x96\x1c\xf8\x3f\x00\x00\xff\xff\xc9\x96\xbe\x63\x80\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3968, mode: os.FileMode(420), modTime: time.Unix(1567424671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
