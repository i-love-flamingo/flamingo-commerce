// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x97\xcd\x6e\xdb\x38\x10\xc7\xef\x7e\x8a\x31\x7a\x69\x0f\x7d\x01\xdd\x1a\xef\x16\x5b\xa0\x45\xbc\x4e\xdb\x3d\x14\x85\x31\x21\x47\x16\x11\x8a\xd4\x0e\x87\x49\x85\xc5\xbe\xfb\x82\x14\xe3\xc8\x9f\x70\x9c\xb4\xdd\xea\x10\xc4\x24\x67\xe6\xc7\x3f\x87\x23\x8d\xf4\x1d\xc1\xcc\xb7\x2d\xb1\xa2\xe5\xac\x21\x75\xe3\xa3\x2c\xaf\x04\x59\xe6\x16\x15\x5d\xb2\x26\x5e\x2e\x28\x44\x2b\xf0\xcf\x04\x00\x20\x46\xa3\x2b\xb8\x12\x36\x6e\x35\x9d\xfc\x3b\x79\xb1\xc7\xc1\x83\xed\xcc\x3b\xa1\x6f\x02\x4c\x1d\x53\x20\x27\x01\xa4\x21\xe0\xc1\xa3\xaf\xf3\x2f\x15\x99\xc9\x09\xbc\xe4\xe8\x9c\x71\xab\x57\xd0\x25\x07\xe0\x93\x07\x68\xa3\xa0\x18\xef\x26\x07\x68\x77\x83\x0d\xa0\x2f\xe0\x63\x43\x30\x43\x16\x90\x06\x05\x4c\x80\x95\x37\x6e\x05\xe2\xe1\x9a\x86\x10\x3a\xaf\x54\xc8\x52\x3d\x78\xfe\x8d\x94\x67\x14\xd2\xc9\x76\xe4\x6a\xb0\x28\x54\xc6\x81\xc2\x70\xcf\x68\x02\xa0\x65\x42\xdd\x8f\xfd\xe6\xb9\x77\xae\xf6\xa1\x3a\xc4\xad\x2f\xd7\x6b\x4a\xa4\x2b\x41\x21\xd0\xd4\x91\xd3\x89\xd6\xbb\xac\x51\xc8\xc3\xbe\x86\x0e\xfb\x36\x89\x85\x4e\x6f\xc8\xf4\xba\x2c\x69\xb1\x07\xe5\x9d\xa0\x71\x80\x5a\x9b\x24\x1d\x5a\x30\xeb\x10\x79\xd9\x41\xa0\xcc\x93\x19\x96\xf9\xef\xb4\x60\xbd\x81\xe8\xcc\xdf\x91\xc0\x68\xa8\x3d\x67\xa6\x8e\xbd\xa2\x10\xf6\xa6\xc5\xe4\x70\x62\x8c\xf6\x0c\xaf\x07\x30\xc0\x6b\x1f\x65\x70\x3a\x52\x39\xcd\x4b\xdf\x19\x85\xd6\xf6\x10\x1a\x7f\xe7\x92\x1e\x08\x21\x2a\xa2\x10\xa0\xc3\x15\x1d\xcd\x8b\x71\xac\x21\x2d\x8a\x7e\xe5\x58\xca\xf3\xe5\x98\x1a\xf3\x07\x8b\xe9\xd7\xc1\xc7\x96\xeb\x6a\xcb\x07\xf2\x4e\xf8\x62\x49\x2d\x1a\xbb\x0e\x5b\x9e\x91\x6a\x79\x2f\x47\xcf\x66\x44\x53\x76\xb4\x42\xa1\x3b\xec\xab\x1d\x7f\xa3\xed\xce\xd9\xdf\x1a\x4d\x5c\x6d\x4c\xb6\x24\x8d\xd7\xd5\x2e\x49\xfa\x1f\x5b\x1f\x9d\x8c\x26\xd7\x54\x73\x36\xaa\x24\x86\x18\xb1\x54\xed\xdf\xcb\xc4\x38\x21\xae\x53\x8a\x9e\x98\x6c\x65\x43\x0e\x5b\xaa\x76\x54\x39\xd1\xc7\xf2\x2f\x34\x02\xa6\xed\x2c\xb5\xb9\xde\xfc\xe8\xd8\x6f\x3d\xcf\x62\x10\xdf\xa6\xba\xf0\x73\x30\xae\xa2\x4a\x17\xf3\x67\x85\x7f\x8b\xc6\x92\x7e\xae\xe8\x69\x84\x09\x83\x77\x27\x17\xad\x42\xb0\xc8\x56\x67\xc8\xd7\xf8\xbb\x77\x35\x63\x4b\xcf\xb9\x87\x4f\x8b\xf7\x4f\x38\xd1\xc6\xdf\xfd\xf1\xf1\xc3\xfb\xe7\x04\x4a\xfe\xce\x27\x5a\x90\x36\x4c\xea\xd9\xae\xda\x93\x25\x9a\xfb\x20\xdf\x1d\x2a\x0d\xcc\x31\xa5\x86\x10\x87\xea\xf8\x8b\xa3\xe4\xa2\xe7\x76\xb9\xb6\x99\x7e\x4d\x1b\x7b\x74\x65\xdc\xc8\xe8\x82\x7a\x7f\x29\x06\xb6\x5c\x71\xcf\xb8\xa6\x83\xcb\xe5\xef\xcc\xfe\x9c\x7a\x75\x1a\xd8\xf9\x5c\xe5\x75\xf7\x7f\xc5\x9b\xa1\x53\x64\x49\x5f\xf4\x4f\xa8\xf9\x3f\x48\xc3\x5f\x82\x35\x7d\x3b\x7d\x46\x6b\x74\xfe\xe6\xff\x8e\xc7\x9e\x86\x6e\xd7\x81\x86\x16\x67\xfc\x82\x49\xdf\x70\x9f\xb7\xe6\x1f\x53\x94\x36\xaf\x7d\x61\xb8\xa1\x7e\xb3\x96\xdc\xa2\x8d\x54\xc1\x97\x32\x96\x8b\x03\x7d\x13\x72\x1a\x72\x9c\x3f\x23\x71\x5f\x8c\x77\x63\xbe\x51\x62\x6e\xe9\x21\x72\x05\x17\xde\x5b\x42\x37\x3d\x60\x30\x1b\x3a\xad\xd2\x28\x1d\x7f\x9f\x96\x45\xd3\x6d\xa4\x0f\xa5\x1f\x5b\xb7\x59\x97\xce\xf6\xd0\xf9\x10\xcc\xb5\x25\x30\xf5\xd0\xc2\xb4\x18\x54\x63\x1c\x81\xf3\x02\x98\x41\xc1\xe7\xbe\x09\xa1\x36\xa9\x25\xc9\x8d\xc8\x01\xd0\xad\x16\xf4\x25\x93\x44\x76\x9f\xd8\xae\xe5\x7b\xb5\x8f\x7e\x7f\xe7\x7a\xdf\xc3\xcc\x47\x8c\x43\xb3\x64\x42\xc6\xcb\x3c\x87\x24\xcb\xb7\xe6\x11\x1a\x2f\xa8\x66\x0a\xcd\xd8\xe2\x24\x99\x4f\xf4\x76\x61\xbd\xba\x31\x6e\x75\xf2\xe1\xfd\x17\x00\x00\xff\xff\xae\xd8\xe9\x50\xe5\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
