// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\x66\xf7\x02\x48\x55\xb9\xe7\x46\xbb\x80\x56\xaa\x2a\x68\xb9\x21\x54\x79\xe3\x49\x32\xc2\x19\x47\xf6\x84\x76\x85\xfa\xef\x28\xb6\xb3\x9b\xec\x26\xa5\x82\x9c\x92\x99\xe7\xf7\xc6\x93\x37\xb6\xec\x5b\x84\x6b\xdb\x34\xe8\x0a\x7c\xb8\xee\xbc\xd8\x06\xdd\xc3\xbd\x28\xe9\xfc\xc3\x1d\xfa\xce\x08\xfc\xce\x00\x00\xc8\xdf\xd8\xaa\x42\xbd\xe5\x1c\xae\xac\x35\xa8\x78\x15\x12\x9d\x47\xb7\xdd\xe4\x70\x2f\x8e\xb8\x5a\x65\xcf\x59\xb6\x40\x3b\xe5\xd3\xc7\x25\xfd\xf7\x7a\x80\x79\x68\xd1\x79\xcb\xca\x80\x56\xa2\xd6\x21\x3b\x84\x36\x4a\x54\x3e\x43\xfd\x25\xe4\xfb\x6c\x62\xfb\x8c\x02\x0a\x7c\x8b\x05\x95\x54\x80\xd2\xda\xa1\xf7\x50\x3a\xdb\x80\xd4\x08\x45\x5a\x19\xe9\x2b\x94\x0f\x11\xf1\xb6\xaf\x6b\xbb\x59\xbd\x9b\x53\x49\x98\xa8\x90\x3e\xd0\x83\xd4\x4a\x26\xa4\xd0\x3a\xfb\x8b\x34\xea\x0b\x28\x14\xc3\x0e\xfb\x26\x69\x28\xad\x83\x1d\x19\x43\x5c\xc1\x7b\xf0\x35\xb5\x2d\x71\x15\x2b\x50\x03\x5b\x0e\xdf\x17\x85\x57\x3f\xa2\xf4\xb7\x1a\x41\x63\xa9\xfa\x6e\x0e\x34\x87\x2d\xda\x72\x52\xcb\x05\x70\x67\x0c\x50\x88\x3a\x04\xf2\xc0\x96\x31\xaa\x26\x92\xfb\xc4\x91\x64\xfe\xba\xf5\xb1\xfe\xb0\xa1\xff\x90\xbf\x8a\x14\xaf\x50\x5f\xf6\xd6\xd1\x00\xc9\x5f\x15\xb2\x46\x97\xf7\xaf\x13\x9f\x95\xe4\xbc\xdc\xaa\x06\xf3\x69\xdc\xa8\x43\x78\x12\x6f\x48\x6b\x83\x31\x33\x89\x2b\xe2\x8f\x8d\x22\x73\xc2\xd3\x3a\x2c\xe9\x29\xea\x4e\x12\x3b\x72\x52\x6b\xb5\x0f\xa9\x8d\x12\x0c\x51\x56\x42\xbd\xb1\x49\xf6\xaf\x19\xa1\xd4\x88\xd1\x0c\xcd\x3d\xdb\xcd\x6a\x30\x15\x45\xfa\xb4\xee\x86\x38\x38\x2c\x09\x45\x3b\x15\x41\xfb\xfc\x19\x17\x5f\xd8\xa6\x55\x7c\x0e\x9b\x62\x3a\x16\xb7\xbf\xb6\x1a\xf3\x25\xcc\xfa\x93\x51\x55\x74\x03\xf9\x83\x67\x7c\x6d\x3b\xa3\x0f\x73\xa2\x7c\xb0\xd0\x82\xc3\xe6\xac\x73\xd4\x9b\x1c\x4d\xff\xa2\x76\x3a\x4f\xb3\x83\x92\xcf\xca\x8d\xad\xb5\xd4\x80\xb1\xcd\x96\x30\xad\xf5\x72\xd6\xc5\x53\xcc\xd8\x66\x0b\x18\x87\x15\x59\x3e\x67\x1a\x63\xbc\x38\x44\x79\x99\x27\x62\x6e\xbb\x66\x37\x0c\xd4\x1c\x46\xc9\x59\xc1\x27\x18\x41\x83\x6d\x6d\xf9\xa5\xfe\x60\x1a\xa9\x25\x9e\xe7\x2c\xc3\x27\x41\xd6\x10\x26\xe4\x6b\x87\x6e\x9f\xa6\x61\xbd\x8e\xff\xea\x0e\xa5\x73\x1c\xff\xaa\x09\x77\x16\x10\x87\x02\x3b\x1f\xce\xe0\x78\x3e\x39\x87\x2c\xe0\xd1\x7b\xb2\x3c\x21\x58\xba\x10\xe7\x4e\xa6\xc9\x55\xf9\x8a\x32\x0e\x57\xc4\x42\x21\x60\x1d\x28\x06\x74\xce\xba\xde\xb9\x24\xf1\xc8\x94\x23\xc7\x65\xa0\xdf\x96\xb0\xb7\x1d\x68\xcb\x6f\x04\x1e\x15\x0b\x88\x85\x5a\xb1\x36\x18\x78\x03\xc3\x05\x14\x35\x16\x3f\xe1\x91\xa4\x5e\x2c\x3e\xfa\xf6\xf2\xe5\x16\xcc\xed\x3d\x6d\xfa\x39\xfb\x13\x00\x00\xff\xff\xcc\xfe\xda\xe0\x47\x08\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
