// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\x3e\xaf\x01\xbf\x03\x83\x5c\xd2\xa2\xe8\x03\xe8\x96\x38\xdd\x22\xe8\x66\x37\xad\xdd\x5e\x16\x45\x31\xa6\xc6\x0a\x61\x8a\x14\xc8\x91\x37\xc2\xa2\xef\x5e\x88\x3f\x92\x48\x29\xda\xf4\x58\xa0\x39\x39\x33\xdf\x70\xfe\xbe\x99\x91\x50\x84\xe6\x04\x1c\xd9\x4e\xd7\x35\x1a\x8e\x7f\x3d\x19\x5d\xb6\x9c\xd8\xd7\xed\x86\x31\xc6\x8e\x60\xf1\x1e\x08\x8a\x11\x71\x07\x56\xf0\x00\xeb\x55\x57\x1e\x49\x08\x16\x4d\x86\x0d\xb0\xc3\xa0\x0b\x60\xdb\x20\x17\x27\xc1\x81\x84\x56\x76\x6e\xb0\x4f\xf4\xc1\x48\xd8\x3d\x48\x84\xa3\xc4\x82\xdd\x69\x2d\x11\x54\x7c\x2e\xc8\x97\xbd\x47\xab\x18\x68\xd7\x60\xc1\xf6\x64\x84\xaa\x82\xa8\x42\x7a\x28\x51\x91\x38\x09\x34\x99\xee\x19\xec\x23\x96\x02\x6e\x2a\xa3\xdb\x66\x50\xfe\xc0\x5a\x0b\xd5\xf8\xd0\x77\x79\x4c\x15\xd2\x1b\xed\xf2\x78\x9d\xd9\xd5\x76\xf3\xf7\x76\xb3\xdd\xf4\xd1\x8e\x88\xbd\xa8\x1b\x89\xb1\x47\xee\x9f\x1a\x15\xd9\xff\xfb\xf7\xdf\xe8\x5f\x5e\xfb\xd8\x26\x12\xd4\x57\x65\xf2\x97\xe4\x00\x44\x46\x1c\x5b\x42\x1b\x31\xb9\xcf\xdb\x01\x11\x2a\xfa\xac\x0d\xdd\xa3\xe5\x46\x34\x7d\x0f\xb2\xa2\x94\x53\xcd\xdc\x5f\xdd\x67\x90\x84\xf3\x79\x39\xc9\x3f\xfb\x14\x9d\x05\x98\x33\xd2\x93\x04\x8e\x3b\x5d\xe6\xfd\x31\x48\x20\x24\x1a\xaf\xca\xbd\x45\xed\xfe\xdc\x16\xf3\x58\xa2\xf6\x23\xd4\x99\xad\xd7\x73\x83\x40\x58\xde\x52\xaf\x3c\x88\x3a\xd2\xa4\x6d\xca\x45\xf9\x45\x58\x71\x94\xf8\xde\xe8\xba\x58\x90\x1f\xf4\x04\xef\x35\x3b\x20\xac\xb4\x11\xbe\xfa\x63\x25\x82\xbc\xf3\xd3\xd1\xd7\xa2\x47\x3f\x82\x50\x51\x33\xe1\x46\x06\x1e\xa2\x8f\x62\xdd\xd7\xe6\x11\x9a\x46\xa8\xaa\x60\x9f\x43\x92\x43\x7d\x2d\x69\x7e\xfe\x80\x17\x94\x45\x5e\x80\x33\x76\x5f\xb4\x29\x6d\x62\xe5\xe7\xed\x23\x7e\x71\x25\x1b\x99\xbd\xc0\xc9\xd9\x8c\x47\x52\x3a\x0e\x1d\x3c\x33\xfd\xcb\xeb\xdc\x9a\xee\x91\x27\x23\x38\xb2\xf9\x6c\x38\xf9\x83\x3a\xe9\x19\xf8\xc1\xf6\x2d\x71\x3f\x87\x51\xf4\xa0\xc6\xe0\x1e\x25\x72\xc2\xf2\x0f\x30\x02\x14\x39\xa6\x4c\x9d\x3a\xc2\xb2\x62\x85\xa6\x2b\x24\xf5\xca\x6b\x76\xf8\x74\xff\x69\xdc\xa9\x4c\x28\xd6\xb8\x2c\x08\xec\xb9\x08\x20\x1f\xf0\xed\x05\x84\xec\x57\x92\x0b\xd7\xf6\x8e\x87\xc4\xa2\xb3\x00\xfd\xa0\x3b\x90\xd4\x0d\x6a\xf6\x7d\x2e\x59\x6b\x4a\xba\x47\x63\x63\xdc\x46\xb2\x0b\xd9\x26\xf0\x9f\x7b\x54\x1f\xcd\x1b\x9f\x77\xf8\x6c\x21\x25\x93\x88\x8a\xfc\x10\xac\xfb\xfd\x49\x91\xe9\xfe\x85\x5f\x87\x8f\x7e\x25\x1c\x13\x8a\xbb\xc9\x04\xd9\x62\x4a\xef\x95\xa7\xc3\xb1\x88\x0f\x7e\xfb\xe8\x8c\x9b\x20\x95\xf7\x9b\x60\x94\xbe\x8d\x1e\xef\x80\x93\xb8\x60\x60\xf1\x37\xc8\x7f\xfd\x0e\x52\x1e\x2d\x54\x76\x4e\xab\x77\x72\xc2\x9f\x25\x93\x9c\x5f\xeb\xf5\x72\x03\x32\x74\xdd\x9d\xd6\x85\x7b\x20\x6a\x3c\x78\x5d\x22\x0f\xa7\x70\x86\x9f\x9c\xb3\x6c\x97\x9f\xd0\xa0\xe2\x53\x66\xbd\x1e\xda\x78\xd3\x06\xe2\xe3\x28\xfc\x05\xbb\xf9\xca\x9b\x02\x96\x6a\x33\x28\xa3\xc1\x33\xd8\x41\x76\x73\xc6\x6e\xe1\x7b\x60\xfe\x72\x0e\x7c\xd5\xcb\x9b\xb2\x8b\xc9\xf1\xf9\xdd\x5c\x9a\x86\x56\x09\xca\x4e\xec\x82\x93\xf4\xdc\xac\xb8\x68\x80\x9e\x33\x91\x72\x97\x36\x43\x19\x54\xf4\xea\x39\x5b\xcb\x73\xdc\x7c\x5f\xb7\x9b\xeb\xf8\x3d\x51\xe2\x09\x5a\x49\xd3\x6f\x8c\x89\xa1\xe0\x38\xc5\x0a\xcb\x75\xab\x08\xcb\xe2\x35\xec\x14\x76\xc0\x17\xca\xc2\x0f\xc3\x6b\xd0\x6a\x79\x41\x76\x14\xd5\x8f\xef\xa5\x06\x62\xa4\x99\xfb\x51\x04\x77\x7e\x7c\xef\xc0\x62\xe1\x15\x57\x33\xc5\x6d\xdd\x3b\x19\xd5\xa9\xf6\x77\x25\x28\xbd\x2b\xc2\xde\x4f\xe2\x4f\x38\xc5\xa1\x6e\x40\x54\xea\xb7\x56\xe2\x9c\xcb\x25\xaa\xee\x51\x1b\x8c\xe6\x36\xb3\xbe\xf6\x1d\x55\xe4\xf2\x4d\x2b\xb2\xf3\xe2\x30\x8d\xf0\xb2\x93\x60\x6d\xf2\xe5\xe0\x1a\x86\x2f\x84\xaa\x74\x63\xcf\x7e\x6d\x71\x5c\xc3\x79\x13\x6f\xfc\xe9\x6c\x66\xdf\x77\x0b\xec\x77\x6f\xff\x13\x00\x00\xff\xff\x19\x1c\x14\x87\x5a\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3674, mode: os.FileMode(438), modTime: time.Unix(1561563845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
