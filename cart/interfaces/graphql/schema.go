// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdc\x38\xd2\xbe\xfb\x57\xd0\x9e\x4b\x4f\x90\x77\x06\xef\x1e\x7d\x6b\x77\x27\x41\x63\xc6\x4e\x62\x3b\xd9\x43\x10\x18\xb4\x54\xdd\xcd\x0d\x45\xca\x24\x65\x5b\x58\xcc\x7f\x5f\xf0\x4b\x22\x29\xea\xc3\x09\x76\x80\xd9\xdd\x1c\x62\x4b\x2c\x16\x8b\xac\xa7\x8a\x0f\x8b\xb2\x6a\x6b\x40\x1b\x5e\x55\x20\x0a\xb8\xdb\x42\xc1\x05\x56\x50\x6e\xb0\x50\xe8\x9f\x27\x08\x21\x54\x60\xa1\xce\x7b\x11\xdd\x72\x6a\x1a\x4a\x2f\xbc\x05\x4a\x1e\x41\x10\x90\xe7\xe8\x4b\x24\xb8\x4d\x44\xda\xd3\xaf\xa6\xeb\x01\x86\x4d\x17\xed\x86\x97\xb0\x2a\xdd\xa3\x7e\x38\x47\x37\x4a\x10\x76\x38\xfd\x39\x31\x60\xd0\xd9\x6b\x5d\x53\xfa\x01\xb7\x15\x30\x75\x0d\x0f\x0d\x11\x50\xee\x14\x54\x32\xe9\x7e\xf7\x41\x90\xc2\x35\x9d\x76\x93\xbc\x69\xaa\x0a\x8b\x36\x95\x75\xaf\x4f\x4f\xfe\x38\x39\x89\x57\x2b\x6c\x76\x8b\x55\x12\x59\xf0\x86\xa9\x74\xc4\x75\x5d\x53\x02\xe5\xd6\x37\xdb\x51\x65\x53\xa5\x0d\x41\x3f\x63\x64\x22\xf7\x8e\xec\xd5\x06\x8b\x72\x54\xee\x9d\xc0\xac\xbc\xe5\x0a\xd3\xbf\x13\x75\x9c\x15\x37\x92\x7e\xf0\xa8\xc7\xba\xd2\xaf\xb2\xfd\x8e\x58\x0e\xcd\xbe\xe0\x9c\x02\x66\xdd\xc4\x6e\xf1\x33\x0c\xd6\xdd\xbc\xf4\x12\xce\x51\x37\x40\xa1\x50\x84\x33\x2d\x71\x53\x53\xa2\x3e\x63\xda\x80\x1d\xff\xa2\xbd\x04\x75\xe4\xa5\x5c\x55\xf6\xe7\x39\xfa\xe2\x30\xf1\xf5\xe7\x81\x71\x59\x0f\x39\xcf\x90\xf2\x1c\xed\xb6\xd6\x3c\x60\x8a\xa8\x76\xb7\xed\xf0\x65\xde\xde\x13\x4a\x09\x3b\xac\xcb\x52\x80\x1c\x38\xd0\xbe\x35\x82\x75\x23\x8a\x23\x96\x20\x12\x99\x0f\x20\x24\x67\x2e\x36\xc6\x43\x22\x8a\x04\x5c\x96\x44\x4f\x1e\xd3\x2d\x56\x78\x38\x68\xd0\x68\xad\xac\x93\x55\x1b\x40\x3b\x69\xb7\x53\x03\xca\xd9\x41\xde\xf2\x75\xa3\x8e\x7a\xf6\x85\x0e\x9e\x4f\x66\x0a\x91\xe3\x70\xda\x9e\x2e\x12\xb6\x8e\xdf\xf0\xa6\xe6\x4c\xc7\xe8\x60\x82\x7d\x93\x9b\x62\x09\x7b\xdc\x50\xb5\x69\x84\x00\x56\xb4\xb1\x3e\xa5\x01\x48\x6c\x8c\xc6\x7a\x6e\x7d\x8b\x53\xa3\x7f\xdd\x58\x4c\xee\x98\x4b\x41\xb5\xe0\x65\x53\xa8\xf4\x35\x91\xd1\x2a\x40\x99\xcc\xf2\xd0\x05\x49\x0a\xa1\xd3\x28\x30\x6e\xf1\x73\x3e\x0c\xbc\xd8\xbd\x11\xbb\x82\x11\x01\x3c\x08\xda\x2f\xb9\xac\xe0\xdb\xc3\xe4\xf8\x3d\x39\x31\x4e\x85\xdb\xa0\x53\x18\x36\x27\x5e\xe0\x12\x13\x76\x73\x24\x75\x4d\xd8\xe1\xcd\x25\x26\x34\xf6\x0c\x91\x6f\xaa\x5a\xb5\xc9\xd2\x1d\xb1\xf4\x8a\xdf\x72\x31\x69\x5d\xd7\x6f\x38\x2b\x9d\x79\x77\xdb\x15\x31\x3f\x66\x67\x74\xea\x15\x2c\xed\xa8\xa5\xba\x4e\xc6\x45\x1f\x55\xbb\xaa\xb0\xf8\x06\xea\x03\xc5\x05\x44\xa6\xbe\x46\x8f\x58\x10\xcc\x54\x3a\x81\x1d\x53\xfd\xc8\x6f\x9e\x15\x08\x86\xe9\x35\xec\x41\xe3\x18\x56\x02\xf6\x33\x16\xf8\xde\x9f\x79\x53\x1c\x41\xdc\xe0\x47\xc2\x0e\x83\x5c\xdc\x59\x6a\x50\x0f\x99\xc4\x72\x67\xdf\x3a\x85\xb2\xa9\xbc\xdb\x46\x91\x17\xcb\xe8\xc4\x3e\xba\xc3\x0c\x3a\xbc\x13\x5c\xca\x99\x2e\x1e\x0b\xbe\xcf\x86\xcb\xc1\x26\x80\x29\xf5\xcd\xb7\x44\xd1\x0c\x08\x7d\x00\x99\x11\xa7\x63\x6c\x89\x51\x49\x4c\x2e\x9b\x75\xb4\x03\x4e\x47\x7b\x75\xc5\x99\x76\xec\x35\x50\xc3\x3d\x96\x75\x7a\x61\x8f\x7e\x73\xed\x13\x69\x26\x96\x3a\x96\xe3\xd0\x18\xc7\xae\x87\xbd\x61\x38\x17\xed\x6d\x5b\xc3\x4a\xef\x8c\x29\xc2\xa7\x33\x6e\x9f\x26\x37\x47\x2c\x0e\x30\x58\xc4\x3b\xf7\xbe\xc7\xc3\x90\xa6\xa4\xd9\xe3\x1a\x2a\x4c\x98\x86\x59\x46\x26\x4f\xb1\x02\xb6\x16\x70\x52\x47\xec\x92\x39\x38\xe1\x2e\x06\xed\x4c\xa4\xc3\xe1\x64\x9f\x9b\x40\xc8\xf5\x53\xdd\x22\xa6\x6b\xe5\xfa\x74\xab\x7c\xfa\x75\xd2\x78\x6f\x8f\xb3\x1f\x4f\x00\x20\xc9\x6d\x93\x6a\x43\x93\x17\xa8\xf6\x99\x7a\xc7\xf6\x3c\x82\xc2\xe4\x20\xdd\x1c\x17\x8c\x50\x2c\xd0\x7a\x8b\x9f\x17\x68\xd2\x1d\x63\x50\x6b\xc2\x7f\x8e\xde\x52\x8e\xd5\xb8\x66\xf0\x10\xc9\x72\x0a\x2d\xf1\x35\xd8\x4e\x6c\x60\xe0\xe7\xdb\x60\xb0\x34\x95\xeb\x3e\xa3\x53\x31\x79\xd9\x8d\x18\x93\x91\x6e\xf7\xd8\xf5\xbc\xc5\x3c\xba\xd7\xf9\xed\xd9\xa0\x88\x30\x05\x62\x8f\x8b\x81\x3b\x12\x6a\xe7\xc6\x3d\x60\x05\x4f\x38\xc7\xab\x0c\x91\x1e\x71\x94\x27\xdb\x43\x60\x27\xa3\xdc\x19\xb1\x71\x7c\x67\xc5\x9d\x69\x0f\x0d\xa6\x64\x4f\x86\x1b\x5a\xbe\xd7\x47\x2f\xee\x6c\x34\xd9\x65\x24\xe9\x8c\x62\x76\x5a\xb3\x33\x6c\x88\x2e\x7b\xbe\x48\x10\x37\xcc\xae\xf9\x41\xb7\x96\xe2\x0e\x1c\x44\xaa\x9a\x82\x7e\x25\xff\x02\xae\x1c\x1c\xaa\xfd\x99\xd6\x3d\x4e\xb2\xb3\xae\x18\x90\xcd\x96\xdb\xb0\x75\x7c\xfc\xec\xb0\x3a\x59\x8d\x0c\xad\x9b\xba\x25\xc8\x06\xfc\xc8\x1e\x90\xe8\x0b\xd3\xe8\x3c\x31\x99\x39\x42\x2c\x3b\x41\xcc\x1d\x20\x5e\x40\x4f\xbe\x87\x9d\xbc\x98\x9c\xbc\x90\x8c\x7d\x07\x17\x3b\x62\xe9\xb0\x33\x4d\x07\x42\xe7\x7b\x3a\x10\xed\x3a\xfa\xcd\x13\x17\xdf\xf6\x94\x3f\xcd\xc7\x78\x81\x85\x30\x09\x2a\x7c\xe9\xb1\xf7\x3b\x2f\x70\xe6\x90\xbd\x4d\x9a\x5d\x1f\x49\x04\x94\xb7\xa4\x82\x73\xa4\xff\xef\x6a\x52\xd1\x29\x7e\xf5\x0d\xda\x90\x82\x45\x87\xeb\x48\xf2\x37\x68\x23\xca\xac\x25\x7e\x4a\xc4\x82\xb5\x90\xe7\xa8\xc2\xf5\x17\x69\xf7\x91\x7f\x48\xce\x7e\xb9\xc6\x4f\x97\x20\x25\x3e\xc0\x82\xce\x97\xb8\xee\xa5\x62\xb3\x03\xc1\xd4\xfc\x4b\x5c\x0f\x6c\x0f\xc4\xd3\x39\x4c\x7a\xd4\x2f\x27\x1a\x4d\xd2\x78\xb6\x36\xd3\x48\xb8\x48\xea\x38\x11\x03\x5d\x40\x50\x32\xa4\x4a\xe9\xf3\x4b\x6c\x4a\xad\x91\x3b\x16\xb8\x6a\x32\xec\xf1\x78\xcd\x6f\xbc\x56\xa8\x7c\x4d\xcf\xbf\xdf\xb1\x42\xa7\x97\x11\xf6\x14\x35\xcc\xd0\x98\x74\xc0\x29\x06\x95\xc8\x3a\x58\xde\xb7\x1b\x5c\xd5\x98\x1c\xcc\x71\x65\x55\x04\x0f\x01\xad\x5a\x32\xcd\x7b\xcb\xc9\xf6\x84\x2a\x10\x53\xb4\x6c\xd8\x7d\xc9\xdc\xba\xf3\x43\x68\x60\x9c\x0f\x82\x53\x17\x8a\x9b\x28\xbe\x07\x6a\x59\x5c\xda\xe4\x5c\xea\x1b\xc7\x09\x6d\xb6\x37\x91\x41\x1e\x4e\x4b\xa9\x5c\xa8\xf7\xa2\xd4\x19\xca\xd1\xc7\xd1\xbc\x18\xec\xb1\x81\x0b\x33\x95\x89\x90\xae\x46\xf8\x31\x6f\xf2\xea\x43\xad\x61\x29\x35\x2d\x8b\x24\x19\xd7\xd4\x5c\xea\x41\xcd\xc5\x34\xba\xb2\xcb\xe5\x48\x5d\x26\xb4\xf2\x0a\x57\x49\x83\xe4\x8d\x28\x20\x2d\x4f\x3e\xa8\x36\xa8\x03\xce\xe7\xd3\x58\xc2\x90\xac\x81\xcc\xc2\x14\xde\x1d\x81\xd3\x41\x53\x71\xe7\x5e\x3b\x0b\xc2\x0e\x14\x0c\x4a\xa6\x8a\x20\xbd\xd4\x68\xc5\x47\xf0\xa7\x39\x35\x5e\x64\xae\x5e\xf9\xb2\xc4\xf4\x93\x53\x9d\x16\xfc\xcd\xf3\x58\x54\xda\xdc\xec\xf0\xf4\x88\x55\x10\x18\xf9\x10\xd9\x13\x21\x15\x33\x28\x18\x95\xa1\x38\x2b\x12\x03\x92\x94\x25\x85\xab\x81\x54\x44\xb8\x6d\xb6\x9f\xb4\x47\x62\xda\x28\xc7\x0d\x46\x65\x94\x00\xc8\x4c\x6d\x28\x73\x25\xa6\x6c\xee\x41\xea\xd6\xed\x77\xc2\x86\x30\x2d\x78\x55\x63\xd6\x0e\x86\x8b\x92\x1b\x51\x43\x81\x44\xa6\xe6\x52\x75\xe9\x6f\xd4\x6a\x73\x16\x9f\xd4\x23\xe0\x40\x82\x44\x9a\xb7\x47\xe3\x48\xcc\xd8\x6c\x65\x06\x8a\x22\x8f\x01\x85\xfa\xc8\xd9\x14\x3a\xa0\x32\x25\xee\x51\x9b\xb3\x40\xb5\x57\x3a\xbe\x5c\x31\x7f\x33\x64\xc4\x35\x05\x52\x98\xd0\x54\xf2\x43\xdc\xea\x13\x28\x91\x8a\xb0\xc3\xa6\x91\x8a\x57\x20\x32\xd7\x40\x6f\x32\x22\x79\x73\x73\x92\x49\xd2\x9e\x98\x66\x67\x99\x3f\x81\x61\x05\xef\xf7\x17\x44\xa8\x63\x92\x94\xb1\x94\x35\x17\xb6\xd4\x21\xda\x7c\xe3\x55\x53\xdd\xa7\xbc\x9a\x61\x8b\x63\x03\xc3\xc9\x85\x8f\xb3\xa8\x33\xc8\xa4\x9a\xc2\xcc\x6d\xad\x94\x20\xf7\x8d\x82\x80\xb9\x0a\x90\x20\x1e\xa1\x34\xdb\xe5\x6c\x09\xad\xab\x76\x8e\x1e\x22\xc6\x58\xdf\x92\x82\x55\x76\xc8\xbe\xa2\x9b\x1d\x73\x8a\xc0\xf8\x6a\xe9\xa8\xb1\x1d\x03\xc9\x66\x7e\x5f\x74\x1d\x3d\x7a\x5d\xf7\x12\x33\xd5\xd8\xcf\x98\x92\xd2\xf8\xf1\x1a\x64\x43\x3d\xa5\x3a\x62\xa9\xe5\x38\x7b\x23\x04\xef\xd3\x59\x42\xbe\x3b\x01\x77\x2e\xf9\x0d\x12\xf4\x10\x43\x84\xb4\x5e\x19\xc6\x6a\x52\xd8\xd0\x64\xa4\xb7\xc3\x28\x1c\x2d\x50\x65\x64\x03\x76\xa4\x61\x92\x4f\x17\x63\x56\xfe\x71\x92\x1d\xe6\xa3\x6a\xaf\x41\x1f\xbe\x8a\xc1\xd2\x10\xe9\x5b\x7a\x86\x18\x2f\x4c\x85\x9f\xd7\x94\xf2\xa7\xa0\x1d\xf5\x34\xa6\xf3\xde\x96\xec\x3b\x96\x15\xb4\x5a\xdd\x5c\x04\xbb\xda\x4c\x5d\x57\x73\x2d\x17\x26\xfd\x29\x9a\xeb\x67\x1f\xb5\xc9\x6a\xc4\x77\x7c\x73\xfa\xe3\x13\xd8\x5b\x2e\x7c\x8c\x9d\xb9\x16\x9f\x4a\xd1\x5e\xb7\x95\x58\xe1\x33\xbb\xcb\x73\x51\xd9\x04\x68\xff\xc5\x6a\x03\x7d\x56\x5b\xef\x56\xc4\xf7\x48\x36\x36\x04\xfc\x45\xbe\x1f\xe4\x35\x82\xaa\x56\x2d\x22\xfb\x6e\x58\x22\xd1\xa3\xee\x7b\xe6\xf8\x87\x57\x93\xa9\x35\xdd\xe9\xe1\x02\xd0\x77\x35\xa7\xb3\x9b\x23\x7f\x92\x5a\xab\x3a\x02\x12\xf0\xd0\x80\x54\xe8\x09\x4b\x24\x9b\xa2\x00\x29\xf7\x0d\xa5\xad\x26\xb0\xfa\x01\xdc\x58\xdd\x63\xcf\x03\x47\xbe\x2b\x71\x57\xd7\xdd\x45\x4f\x00\xa8\xef\x33\x78\xf1\xd0\x19\x05\xde\x7f\x6f\x09\xd0\x12\xc9\x1a\x0a\xb2\x27\x45\x60\x88\x8d\x17\xe9\xdc\xa8\xa5\x4c\xa4\x0d\x2b\xf0\x46\xf9\xdb\x4e\xc0\x91\x97\xb3\x77\xc0\x40\x60\x3a\xa6\xf1\x60\x9b\xa7\x74\x4e\x67\x81\x5e\xc4\x4f\x65\x8d\xbe\x41\xab\x71\xa3\xdd\x67\xc6\x42\x95\x0d\xf7\x5f\xd0\xfb\xbd\x02\x86\x1a\x09\xa5\x86\x24\x52\x02\x33\x49\x8d\x55\x67\xae\x90\x94\xcf\x5e\x67\x6b\xbd\x36\xf8\x9b\x46\x9f\x55\x69\xce\x8c\x91\x42\xc5\x91\x3c\xf2\x27\xfd\x13\x58\xa9\xdf\x09\xf4\x7f\x88\x30\x54\x60\x09\x88\xf1\x70\x34\xcb\x0e\xdc\x1a\xb8\xef\x28\x7e\xb7\xa7\xd0\xe9\x08\x4c\x56\xf9\x3f\x6c\xce\x66\xd8\x5d\x09\x4c\xd9\x9a\xbe\xb6\x17\xdb\x5c\x62\xa0\x17\xa0\x30\x3e\x38\xe6\x17\x6b\x98\xa7\xfe\x77\x22\x99\x3d\x91\xf8\x73\xc8\xff\x9f\xcf\xcb\xfc\x6d\x4c\xe6\xbf\xf9\xcc\x62\xce\x2b\xc1\x76\x9b\x93\x59\x70\x66\x21\xac\x6e\xd4\x38\xa0\x77\xa6\x79\x09\xaa\xff\x44\x50\x2f\xc0\xf4\x02\x48\x2f\x40\xf4\x02\x40\x2f\xc0\xf3\x02\x38\x2f\x40\xf3\x02\x30\x2f\xc0\xf2\x02\x28\x2f\x40\xf2\x02\x20\x2f\xc0\xf1\x02\x18\xff\x08\x8a\xfd\xb5\x80\x43\x73\x88\xe4\xb3\x4f\x8c\x3c\x34\xd0\xd1\x52\x73\x1e\xd2\xbb\x0b\xb1\x9b\x42\x6b\x36\x38\xdf\x7a\x96\xa1\xb0\xd1\x56\xd2\xdd\x3c\x8e\xd0\xd2\x32\xb6\x24\x25\x5c\x69\xb8\x75\xf4\xb0\xa1\xa5\x35\x44\x1f\x61\xdd\xae\x9b\x90\x53\x74\x0f\xc1\x9e\x7b\x24\x32\xb1\x7a\xee\x3e\xe3\xec\x7d\x6d\x8f\xc9\xc8\x5f\x5b\x20\xfb\xc5\xac\xdf\xb4\xc3\x1b\xaf\x25\x3d\x92\xfb\xb0\xa4\x8b\xbb\xe4\xea\x17\xbe\xc4\x0a\xd0\xaf\x48\x91\x0a\xfc\x5a\xa5\xd7\x60\x63\x57\xe6\xd1\x9a\x86\x87\x84\x3f\xd7\xb9\x2f\x3c\x73\x44\xac\x7f\xca\xb1\xd2\xfa\xff\x47\xfd\xbb\xd8\xad\x9d\xe0\xc6\x7a\xf0\xdf\xe5\xce\xc9\xa3\x57\x99\x2c\xf6\x5f\xe0\xec\x35\x95\x7a\xfc\x9a\xda\x05\x5b\x8c\x4f\xcc\xd0\xab\x57\xbe\xb0\xf7\xea\xd5\x72\xac\x2e\x70\x76\x2a\x39\xe5\x6d\x93\x5a\xe1\x59\x69\xce\x6d\x42\xf0\x63\xd3\x7f\x5f\x11\xcd\x38\x58\xf8\xe8\x6f\x40\x4e\x87\xa2\xde\x1f\x7c\xf0\x51\x4f\x5a\x19\x72\xa6\x4e\xd5\x49\x90\x00\xd5\x08\xd6\xb9\xd2\x5d\xf7\x68\x90\x88\xae\x66\xa2\x0f\x0a\x0a\x44\x25\x7d\xa8\x61\x5b\x2b\x41\x0f\x0d\x36\x5f\xf2\xbb\xe0\x02\x54\x98\x6f\xcc\x95\xf9\x1e\x04\x61\x66\xb3\xef\x81\x3c\x02\x4b\x7c\x30\x65\xd3\x6a\xec\xd2\x2a\xfb\xa1\xf0\xeb\xbc\x3f\x07\x5f\x91\xe5\xea\x43\x03\xff\x5c\x3a\xba\x93\xba\x68\x5d\x96\xb7\x5c\xab\x19\xda\xb6\xdb\x9e\xbe\xee\xaf\xbd\x16\x58\x33\xe5\xdf\x2d\x50\x50\x10\xde\xc9\xcf\x7f\x7b\x3e\xaf\x6f\xa7\xa0\xea\x3e\xd9\x36\xf6\xfe\x90\xd2\x4f\xb5\xce\x52\x5a\xe9\x47\xd5\x2e\xd0\x1b\x2c\xcf\xcc\x10\x67\xeb\xb2\x94\xbf\x5a\xfd\xd2\x60\xc7\xd7\xab\xfc\x85\x95\x03\x60\x88\xb3\x1c\xa0\xac\x8a\x38\xb1\xaf\x70\xbf\x95\xcc\x31\x88\x01\x7a\x86\x15\xb5\x5c\x64\xda\x61\x93\xca\xd1\x2a\xfd\xa8\xec\x75\x9a\x51\x06\xa3\x65\x6b\x4f\xb9\x01\xd7\x75\x4d\xdb\xbe\xaa\xfd\x5e\xf8\x32\xf5\xaa\x58\xe4\xd9\x8c\xca\x6b\xa8\xf8\x23\x74\x7a\x0e\xee\x97\x65\x48\x19\xd5\xd7\xdb\xb8\x0a\x2f\xf8\x17\xe9\x8b\x51\xc1\x19\xfc\x5a\x35\x54\x91\x9a\x42\xf7\x11\xa7\xc7\x07\xc8\x71\x34\x24\x84\x07\xe4\xaa\xa7\x95\xf6\xc5\xa0\xae\x95\x63\xc0\xe6\xef\x9e\xa6\xe5\x34\x3c\xbe\xe6\x10\xfd\xc3\xb6\xc7\xfb\xa1\x5c\xc9\xf8\x79\xd4\xb0\xb8\xdf\x0b\xa7\xb0\xd1\x3b\xb5\x9c\x8d\x39\x23\x16\xdd\x5e\xfc\x2b\x00\x00\xff\xff\x08\x97\xfb\x93\xdc\x38\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
