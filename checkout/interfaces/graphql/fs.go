// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcd\x92\x13\x37\x10\xc7\xef\x7e\x8a\x76\xf9\x02\x07\x78\x80\xb9\x11\x27\x1b\xa8\x82\xac\xf1\x02\x39\x50\x5b\xae\x5e\xa9\xc7\xa3\x42\x23\x4d\x5a\x3d\x6b\xa6\xa8\xbc\x7b\x4a\xd2\x30\x1e\x7f\x86\x98\x82\xd8\xa7\x5d\x49\xfd\xef\x5f\xf7\xb4\x3e\x5a\xba\x86\x60\xee\xeb\x9a\x58\xd1\x6a\x5e\x91\xfa\xe4\x5b\x59\xdd\x09\xb2\x2c\x2c\x2a\xba\x65\x4d\xbc\x5a\x52\x68\xad\xc0\x97\x09\x00\x40\xdb\x1a\x5d\xc0\x9d\xb0\x71\xeb\xe9\xe4\xef\xc9\xec\x88\xc0\xd6\x76\xee\x9d\xd0\x67\x01\xa6\x86\x29\x90\x93\x00\x52\x11\x70\x56\xf4\x65\xfa\x4f\xb5\xcc\xe4\x04\x9e\x70\xeb\x9c\x71\xeb\xa7\xd0\x44\x01\xf0\x51\x01\xea\x56\x50\x8c\x77\x93\x13\xb4\x87\xce\x32\xe8\x0c\xde\x55\x04\x73\x64\x01\xa9\x50\xc0\x04\x58\x7b\xe3\xd6\x20\x1e\x1e\x28\xbb\xd0\x69\xa5\x42\x96\x62\xab\xfc\x2b\x29\xcf\x28\xa4\xa3\xed\x48\x2a\x5b\xf4\x54\xc6\x81\xc2\xf0\x95\xd1\x04\x40\xcb\x84\xba\x1b\xeb\xa6\xb9\x57\xae\xf4\xa1\x38\xc5\xad\x6f\x87\x35\xbd\xa7\x3b\x41\x21\xd0\xd4\x90\xd3\x91\xd6\xbb\x94\xa3\x90\x86\x7d\x09\x0d\x76\x75\x4c\x16\x3a\xbd\x93\xa6\x67\xfd\x92\x1a\x3b\x50\xde\x09\x1a\x07\xa8\xb5\x89\xa9\x43\x0b\x66\x70\x91\x96\x0d\x5f\x10\x66\x20\x5e\xfb\x02\xda\x40\xa0\x3c\x33\x29\x81\xdf\x19\x9b\xea\xed\xeb\xbc\x34\x3c\x7f\xde\xa3\xbd\x80\xd6\x99\xbf\x5a\x02\xa3\xa1\xf4\x9c\xb8\x1a\xf6\x8a\x42\x38\x5a\x1a\x93\xd3\xc5\x31\x8a\x1b\x9e\x65\x38\xc0\x07\xdf\x4a\x16\x1d\x65\x3a\xce\x4b\xd7\x18\x85\xd6\x76\x10\x2a\xbf\x71\x31\x27\x08\xa1\x55\x44\x21\x40\x83\x6b\x3a\x5b\x1b\x63\x5f\xb9\x34\xfa\x1c\xf6\x9f\xa6\xff\x7d\x3c\x57\x5a\x8b\xad\xc5\xf4\x3e\x6b\xec\x49\x17\x7b\x1a\xc8\x07\xee\x7b\x4b\xaa\xd1\xd8\xc1\x6d\xff\x1b\x65\x2d\xc5\x72\xb6\xd0\x47\x34\x7d\x44\x6b\x14\xda\x60\x57\x1c\xe8\x8d\xc2\x5d\xb0\x7f\x34\x9a\xb8\xd8\x99\xac\x49\x2a\xaf\x8b\x43\x92\xf8\x37\xd6\xbe\x75\x32\x9a\x1c\xa8\x16\x6c\x14\xe5\x45\x62\xc4\x52\x71\x3c\x96\xd9\x64\x66\x9c\x10\x97\xb1\x50\xcf\x85\x94\xca\x7e\x95\x8b\xff\xcb\x64\x16\x65\x4c\xb8\x31\x0e\x6d\x01\xbf\x78\x6f\x09\x5d\x1e\x75\x58\x6f\xab\x77\x32\x8b\x3e\xfe\xf5\x60\x18\x89\xaf\xfe\xa0\x0d\x98\xba\xb1\x54\xa7\xd3\xe8\x2a\x98\xfe\x44\x23\x57\x07\x75\xd7\xaa\xb8\xb3\xaf\x8e\xeb\x06\x8d\x25\xfd\xa3\xb1\xe2\x10\x13\x06\xef\x4e\x9e\xdd\x27\xc8\x96\xc9\xea\x92\x84\x57\x7e\xf3\xaa\x64\xac\xe9\x67\x04\xf7\x7e\xf9\xfa\xbb\xaa\xa3\xf2\x9b\x97\x52\xdb\x9f\x81\xfa\xf2\xdd\x9b\xef\x62\x5d\x92\x36\xe9\x5e\xbb\xfe\xb4\x2e\x7c\x90\xff\x0f\x37\x8e\x2c\x30\x56\xa0\x10\x87\xe2\xd8\x95\x78\xe3\xb9\x5e\x0d\x6b\xa6\xf7\x29\xc6\xff\x7c\xc4\xef\x6c\x95\xfe\x0a\xfb\xba\xdb\x32\x4d\x7a\x3e\x5c\x70\x2e\x64\xc9\xd5\x6f\xcc\x9e\x2f\x48\xe0\xb7\x81\x5d\xce\xd5\xdf\xdc\xd7\x8a\x17\x5f\x2d\x1f\xd0\x1a\x9d\x5e\xdc\x3f\x90\x32\x0e\x3d\x0e\x8e\x72\x83\x31\x3e\x68\xe3\xeb\xe9\xc3\xde\xfc\xf4\x4c\x6c\xbb\x65\xd9\xfb\xfc\x44\xdd\xee\x5b\xe7\x11\x6d\x4b\x05\x7c\xec\xc7\xee\xa3\x20\x7d\x16\x72\x1a\x92\xee\xdb\x96\xb8\xeb\x8d\x0f\x7d\xbc\x50\x62\x1e\x69\x1b\xf1\xb0\xbb\xa6\xfb\x3a\x6f\xfa\x96\x65\xe8\x44\x6e\x9d\xed\xa0\xf1\x21\x98\x07\x4b\x60\xca\xfc\xca\xaf\x31\xa8\xca\x38\x02\xe7\x05\x30\xa9\x83\x4f\xad\x05\x42\x19\xf7\x6f\x7e\x80\x9f\xc0\xd9\xeb\xd2\x9e\x30\x49\xcb\xee\x3d\xdb\x21\xe6\xa7\xc7\xae\xae\xe3\xcd\xdd\xb4\x07\x5d\x8c\x18\x73\x3f\x61\x42\xc2\x4b\x3c\x27\x48\xe6\xe8\x14\xd9\xa3\x89\x39\x6e\xb0\xa4\x92\x29\x54\x63\x8b\x6f\xe8\xeb\x62\x9a\xff\x09\x00\x00\xff\xff\xbc\xd4\xec\x4a\xb2\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
