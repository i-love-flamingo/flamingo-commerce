// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\x23\x29\xf6\x7d\xcf\xa7\xb0\xf5\x7b\xf1\x48\xad\x9f\xb4\xfb\xe8\x37\xc7\x4e\xb7\xac\xe9\xa4\xd3\x89\xa7\xf7\xa1\x15\x45\xa4\xea\xda\x66\x9b\x2a\x6a\x80\x4a\x52\x5a\xed\x77\x5f\x41\x41\x15\x7f\xab\xe8\xac\x66\xa4\xd1\x66\x1e\x66\x52\x70\xb8\x5c\xe0\x70\x39\x5c\x3c\xa2\x6b\x60\xb1\xa5\x55\x05\xac\x80\xc7\x1d\x14\x94\x21\x01\xe5\x16\x31\xb1\xf8\xd7\xc5\x62\xb1\x58\x14\x88\x89\xf5\x08\x91\x35\x4b\x55\x51\x1a\xf0\x0e\x08\x7e\x06\x86\x81\xaf\x17\xdf\x1d\xe0\xce\x83\x74\xcb\x07\xd5\xf4\x04\x61\xd5\x65\xb7\xa5\x25\xac\x4a\xfd\x29\x3f\xd6\x8b\x7b\xc1\x70\x7d\x5a\xfe\xe2\x39\x10\x34\x36\x56\x37\x84\xdc\xa2\xae\x82\x5a\xdc\xc1\xef\x2d\x66\x50\xee\x05\x54\xdc\x6b\xfe\x78\xcb\x70\xa1\xab\x96\xc3\x20\xef\xdb\xaa\x42\xac\xf3\xb1\xba\x78\x79\xf1\xef\x8b\x0b\x77\xb6\xec\x6a\x3d\x59\x25\xe6\x05\x6d\x6b\xe1\xf7\xb8\x69\x1a\x82\xa1\xdc\x99\x6a\x05\xe6\x6d\xe5\x97\x5b\xcd\x94\x8f\x1e\xee\x13\x3e\x8a\x2d\x62\x65\x12\xf7\x89\xa1\xba\x3c\x50\x81\xc8\x3f\xb0\x38\xcf\xc2\x15\xd2\x74\xee\xb4\xd8\x54\xb2\x28\xda\xee\x8c\x78\xe8\xf6\x25\xa5\x04\x50\xbd\x1c\x2c\xa3\x57\x08\xa6\x5d\x15\xc6\xe7\x51\xcf\x1f\x2e\xd7\x8b\xfd\xae\xb7\x02\xb5\xc0\xa2\xdb\xef\x06\x16\xa8\xd2\x27\x4c\x08\xae\x4f\x9b\xb2\x64\xc0\x83\x69\xee\x4b\x15\xb0\x69\x59\x71\x46\x1c\x98\x87\xb9\x05\xc6\x69\xad\x19\x9c\x26\xae\xc3\x57\x54\x96\x58\x60\x5a\x23\xb2\x43\x02\x85\x9d\x5a\x95\xbd\x97\x4d\x4f\xc2\x7b\x20\x50\xc8\xba\x80\x80\x5e\x7d\x3f\x34\x20\xb4\x3e\xf1\x03\xdd\xb4\xe2\x2c\x47\x5f\x48\x8a\xff\xa6\x86\xe0\xcc\x2f\xf2\xeb\xfd\x49\x42\xfd\xfa\x6c\x69\xdb\xd0\x5a\xee\xa4\x60\x80\x63\x95\x1e\x62\x09\x47\xd4\x12\xb1\x6d\x19\x83\xba\xe8\x5c\x7b\x42\xf2\x04\xf7\x3b\xc9\xb5\x73\x30\x35\xda\x8c\xfc\x73\xdb\x53\x67\x5f\xeb\x40\xd1\x30\x5a\xb6\x85\xf0\x8b\x31\x77\x66\x01\x4a\x6f\x94\xa7\x81\xcb\x3e\x0d\x97\x0e\x7f\x0f\xe8\x35\xce\x56\x03\x7b\x52\xb0\x1b\x48\x00\x50\xb0\xb7\xbe\xc7\xf6\xae\xa9\xb7\x43\xd8\x5b\x22\x97\x1b\xb0\x76\x56\x23\xd9\xb3\x6e\xf6\x70\x61\x00\xd7\x08\xd7\xf7\x67\xdc\x34\xb8\x3e\x5d\x5d\x23\x4c\xdc\x95\xc1\xfc\xaa\x6a\x44\xe7\x4d\xdd\x19\x71\x63\xf8\x23\x65\x93\xde\x0d\xed\xc2\x51\xc9\xf8\xb8\xdf\xad\xb0\xfa\xcf\xec\x88\x96\xc6\x40\x6e\x43\x89\x1a\x1a\xa9\x25\xfa\x2a\xba\x55\x85\xd8\x0f\x10\xb7\x04\x15\xe0\xb8\xfa\x61\xf1\x8c\x18\x46\xb5\xf0\x07\xb0\xaf\xc5\xd8\xf3\xd5\xab\x00\x56\x23\x72\x07\x47\x90\x3c\x86\x15\x83\xe3\x8c\x07\xa6\xf5\x37\xda\x16\x67\x60\xf7\xe8\x19\xd7\xa7\x20\x64\x0e\x9e\x2a\xd6\x43\x24\xb0\x3c\xf6\xa5\xda\x20\x6f\x2b\xb3\x6c\x49\xe6\xb9\x18\x19\x7f\x93\x07\xc1\xb0\xae\xa6\xc1\x96\xf2\x20\xee\x22\x42\x4c\xf5\x01\x0b\x12\x21\x94\xd9\x0c\x9f\x18\xe5\x89\x3e\x1c\x48\x86\x4f\xd6\xfe\xca\x42\xbb\x87\xce\xf4\xce\xad\x6e\x68\x2d\x17\xe9\x0e\x88\x3a\xed\xf3\x1a\xfd\x64\x8b\xf1\x3c\x1b\x83\x62\x64\x5f\x0c\xba\x42\x33\xcb\xdd\x87\x86\xc2\x4a\x53\x5c\x76\x87\xae\x81\x95\x3c\xe5\x7c\xb6\x4e\x47\xcf\x31\xe4\x6d\xcf\x88\x9d\x20\x98\xc4\x47\x5d\xae\xdd\x1a\x5d\xb7\xa2\x97\x1f\x09\xee\xa0\x42\xb8\xc6\xf5\x29\x86\x89\x8b\x1a\x4b\x1f\x59\x2a\x50\x4b\x29\x6f\x0c\x1a\x3c\xec\xa7\x7e\x24\x5c\xf3\x70\xb2\xcd\xbd\x05\xd2\xed\xc4\x30\x89\xfe\x5c\xe9\x36\xc3\x2c\x2f\x1f\x26\x9d\x37\xfe\x68\xff\xd1\x04\x01\xbc\x38\x35\x69\xd6\x76\x39\xc3\xb4\x89\xba\xfb\xfa\x48\x1d\x2a\x4c\x76\x32\x8c\x31\xa3\x87\x22\xc3\xea\x01\xbd\x66\x58\x92\x0d\x5d\x52\x4b\x89\xbd\x5e\x7c\x24\x14\x89\xb4\x65\x30\x14\x89\xea\x03\x89\x78\xb0\x8e\x86\x7e\x63\xa0\xd7\x83\xd5\x99\x1f\x96\x65\x9b\xe4\x50\x54\x8c\xd5\x3d\xba\xc2\x62\x38\x09\xf6\xa3\x06\x51\x9f\xba\x38\x7e\xd4\x2a\x16\xe1\x5a\x00\x3b\xa2\x22\x58\x0e\x4f\xa6\xe9\x7e\x4f\x48\xc0\x0b\x8a\x69\xa4\x6f\x88\xb4\x10\x4e\x6f\x7c\x2c\xbb\x5e\x72\x05\x9d\xe0\xaa\x21\x20\x8b\xf8\x9f\xe9\x4e\x70\xa7\x32\x57\x1a\xfd\x39\x79\xec\x0f\x77\xc1\xe8\xd6\xdd\xd9\xb5\x91\x2b\xa0\xd9\xab\x97\xdd\xbe\x5c\xe9\x2b\x40\xf2\xca\x27\x81\xa9\x11\x44\x1d\x97\x7b\x2f\xe1\xbc\xac\x1a\xc2\x5b\x94\xbf\x89\x90\xe6\xd9\xb3\xa3\xc2\xfc\x39\x3b\xa3\x6e\xf3\xc4\xed\x9c\xb6\xfd\x89\xd3\xf6\x2d\x87\xed\x4f\x9f\xb5\x3f\xa9\x2d\xde\x20\x2d\xce\x88\x6b\xf6\x4d\x9f\x6e\xf6\xe2\x9b\xd3\xcd\x09\xa2\xb2\xe4\x85\xb2\x1f\x47\x42\x5f\xdc\xd2\x0a\xc4\x99\x96\x6e\x59\x81\x18\xc3\x52\x0c\xda\x85\x86\x7b\x9f\x69\x81\x22\xf7\xbf\x9d\x57\xad\xdb\x70\xcc\xa0\x3c\xe0\x0a\xd6\x0b\xf9\xef\x21\xa9\xe1\x5c\x30\x57\x3f\xa0\xb3\x15\x85\x73\xef\x73\x90\xbf\x42\xe7\x28\x40\x89\xf8\x3f\x0f\x66\xcd\x05\x5f\x2f\x2a\xd4\x7c\xe7\x7d\x58\xfc\x27\xa7\xf5\xff\xdf\xa1\x97\x6b\xe0\x1c\x9d\x20\xa3\xf1\x35\x6a\x46\x94\xeb\xb6\x05\xf4\xdd\xbf\x46\x4d\xe0\xbb\x05\xf7\xc7\x30\xb9\xa2\x66\x3a\x17\x7a\x59\xc3\x13\x0d\xcd\xa6\x0d\x5a\x0e\x97\x5e\x8a\xc1\x11\x54\x19\xe7\x6d\x44\x23\x08\x29\xc7\x5d\x57\x1a\xc9\xdc\xd4\xc6\x15\x93\xdb\x1e\xa5\xb3\x46\xb1\x64\x93\x75\x20\xd8\xdb\x68\x5f\x17\x32\xbc\x24\xc4\x80\x53\x31\x73\x2a\xfb\x1d\x4e\x09\x02\x0f\xab\x69\xf9\xd4\x6d\x51\xd5\x20\x7c\x52\xea\x7b\x55\x58\x1f\x96\x4a\xc8\x19\xe6\x53\x2f\x31\x8e\x98\x08\x60\x53\x2a\x23\x6c\x9e\x33\xb6\x41\x0e\xdb\x0e\xba\xf1\xc0\xba\x44\x2c\xdc\x2a\x82\x9e\x80\xf4\xa2\xc4\xaf\xd2\x4b\x6a\x2a\xd3\xfa\x2c\xda\x1a\x73\x2b\x0e\xfb\xc9\x38\xca\xc4\x17\x56\xca\x08\xa5\xd5\xd0\x9c\x00\xb0\x78\x8b\xc3\xb3\x6e\x38\xe3\xb4\xfa\x72\xf8\xa3\x4a\xe2\xe6\x6d\xab\x76\x96\xcf\xbf\xb1\x7b\x11\x57\xa5\x03\x9a\x20\x1d\xa0\x2a\x75\x46\xe0\x3a\x91\x32\xb0\xbd\xbc\x41\x95\x57\xc1\x69\xcb\x0a\xf0\x33\x67\xbf\x8b\xce\x4a\x51\xcd\xc7\x53\x17\xa1\xf4\x56\x80\xc9\x0c\xe1\xc3\x8d\xce\xef\xd4\x87\xeb\xe5\xed\x47\x81\xeb\x13\x01\xc5\x92\xa9\x3b\xfd\x88\x4a\x26\x23\x18\x7d\x99\x33\x63\x20\x73\xa9\xb4\xdc\xc0\x34\x1e\x17\x8c\xbe\xf8\x19\x63\xf5\x9d\xda\x94\x7d\x68\xd6\x74\x7a\x46\xc2\xda\x17\xf1\x1d\x72\xc4\x8c\x8b\x5a\x91\x20\x89\x21\x28\x0a\x71\xf9\x88\xcb\x92\xc0\x4d\x80\x72\xa4\x77\x1f\xec\x27\xfd\xe1\x88\xb4\x42\x4b\x83\x24\x46\x30\x80\xc8\xd0\x42\xcc\x0d\x9b\xf2\x79\xe4\xa8\x9e\xb7\xcf\xb8\x0e\x59\x5a\xd0\xaa\x41\x75\x17\x74\xe7\xc4\x36\x2c\x42\x80\x87\x69\x28\x17\x43\xf4\x4b\x7a\xad\x6e\x96\x93\x76\x18\x9c\xb0\x15\x47\xe3\xfe\x48\x1a\xb1\x19\x9f\x7b\x4c\x60\xc8\x59\x31\x20\xd0\x9c\x69\x3d\xc5\x0e\xa8\x54\xf2\x35\xe9\x73\x94\xa8\xfd\x63\x83\xb9\x7c\xcf\xbf\x59\x28\xb8\x54\x40\x02\x61\xe2\x23\x6f\xdd\x5a\x13\x3f\x31\x17\xb8\x3e\x6d\x5b\x2e\x68\x05\x2c\xf2\x40\x71\x15\x81\xc4\xdd\x8d\x21\xbd\x98\x3d\x31\xcc\xc1\x33\x73\x01\x43\x02\xbe\x1c\x2f\x31\x13\x67\x2f\x26\x23\xce\x1b\xca\xfa\x8b\x3b\xeb\xe2\x95\x37\x6d\xf5\xe4\xcb\xea\x1a\xf5\x3c\x56\x34\x9c\x9c\x78\x37\x88\x6a\x87\x54\xa8\x29\xd4\xd8\x36\x42\x30\xfc\xd4\x0a\xb0\x84\x2b\x03\x0e\xec\x19\x4a\x75\x5a\xce\x26\x84\x86\xdc\x5d\xf2\x0e\x91\x12\x7d\x39\xe9\x97\x68\x97\x63\x7e\x32\xda\xe7\x94\x7e\x31\xb9\xbf\xa4\xb3\x83\x00\x89\x06\x7e\x93\x42\x4c\xde\xbc\xee\x46\xc4\x4c\x6e\xf1\x1b\x22\xb8\x54\xeb\x78\x07\xbc\x25\x46\x51\x9d\x11\x97\x38\x5a\x5f\x31\x46\xc7\x70\xe6\x69\xef\x01\xa0\xaf\x25\xbf\x82\xc7\x1e\xac\x74\x90\xb4\xcb\xed\xbd\xea\x25\xa5\xa4\x16\x19\xfd\x50\x06\x93\xe9\xc4\x08\xd6\x12\x47\x92\x26\xf1\x70\x91\xf2\x32\x91\xf8\x93\xea\x45\x33\x6f\xbc\x97\x52\xf9\x6d\x36\x82\xd7\x81\xfb\xa0\x33\x13\x87\x1e\xdd\x3b\xcd\x47\xca\x0c\x6d\x8f\x94\x55\x7d\xcc\xe8\xff\x99\x6b\xa6\x82\xc7\x42\x9d\xba\x66\x4e\x22\x09\x96\x47\x09\xb5\x96\x7a\x48\xb4\x34\x8c\x16\xc0\xb9\xa5\x52\x53\xef\xea\xfa\x51\x70\x48\xbb\x5b\x5c\xf9\x83\xbb\x8e\x18\x30\x93\x85\x81\x94\x8a\x02\x61\xa2\x53\xb5\xfa\x38\x00\x06\xed\x57\x03\x43\x64\xaa\xcd\x34\xfd\x46\x88\xf6\xa1\x4a\x30\x5f\x3f\xe0\x7e\xee\xef\x18\xd3\x6c\xf0\x7c\x7d\x93\xe5\x61\x3e\x5c\x69\x9d\x4b\x3f\x2b\x2c\xbf\xeb\xb7\x59\xfd\x66\x54\xdb\xdf\xd6\xf3\x98\xbf\xa7\x30\xff\xcb\x0a\x4f\xa9\x3b\x2b\x92\xc6\x30\x19\x0a\xef\x02\xd7\x4d\x2b\x46\x72\x87\xbc\xde\x2b\x40\x0e\xb1\xff\x44\x5e\x67\xd0\x3a\x83\xd5\x19\xa4\xce\xe0\x74\x06\xa5\x33\x18\x9d\x41\xe8\x0c\x3e\x67\xd0\x39\x83\xcd\x19\x64\xce\xe0\x72\x06\x95\x33\x98\x9c\x4b\x64\x8f\xc7\x26\x83\xfa\x4e\xe4\x77\x22\xff\xa5\x89\xac\x1f\x56\x1d\x36\xdb\x4c\x2e\xdd\xaa\xf5\xfc\x16\x50\xcd\xe6\x5e\x05\xcc\xdb\xe0\xb5\xf3\x40\xe4\x54\x6d\xdd\x77\xa2\x88\x86\x9f\x96\x50\x11\xff\xb8\xa5\xe1\x43\x71\x19\x69\x90\x54\x99\x11\x6c\xd6\xfd\x20\xd2\x6e\xb8\x20\xcc\xcd\x59\x7c\xf0\x8b\xe0\x99\xad\xe7\x53\x64\xf6\xfe\xe0\x6b\x40\x62\x6c\xef\xa2\xf5\x5d\xb4\xfe\xb5\x44\x2b\xbc\x0a\xa8\x4b\x95\x60\x5a\x7c\x6d\xc7\x1f\x48\x38\x74\x5f\x27\xfe\x2f\x80\x65\x08\x35\xbb\x8a\x06\xbf\x80\xf4\x73\x3b\x41\xf7\xd7\x9a\x7f\xbe\x07\x9b\xb2\x3c\x50\x69\x62\x15\x3c\xf8\xec\x77\xcb\x0f\xe3\xb3\xcc\x87\x78\xd8\xf8\x25\xd3\xfd\x1d\x10\x10\x60\xbf\x19\xcf\xff\x6c\x77\xde\xde\x5e\x40\x35\xfc\xda\x55\xf9\xfb\x5f\x19\xfd\xad\x29\x51\x6f\xf4\xab\xe8\x32\xec\x5a\xd3\x93\xdb\x85\x5a\xad\xbe\x1f\x37\x46\xaf\xd0\x18\xed\xd6\xb3\xf7\x9c\xe0\x97\x5b\x21\x2e\xdd\xb1\x97\xe1\x59\xf9\x3f\x63\xfa\xe0\xff\xdc\x22\xe8\x2d\x9a\x23\x8a\x75\xb8\x69\x1a\xd2\x8d\xd9\xd3\x2f\xcc\xa4\x43\x57\x45\xd6\x02\x45\x4c\xde\x41\x45\x9f\x61\xb0\x73\xd2\x7f\xe4\x2d\x78\xd2\xde\xe8\xe3\xca\x7e\x47\x7e\x83\xbd\x7e\x8e\xbd\x33\x0c\xb8\xa6\x7b\xb7\xd1\xdf\x73\xaa\x41\x2d\xf3\xf2\x21\x98\xfa\x98\x1a\x91\xbb\xfd\x3f\x01\x00\x00\xff\xff\xc4\x48\xf8\x2c\x50\x34\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
