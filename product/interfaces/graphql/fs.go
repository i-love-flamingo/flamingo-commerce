// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x30\x3e\x17\x4e\x70\x5c\x3f\x40\xee\x1c\x37\x3d\x27\x68\xd2\xe6\xd4\x39\xdd\x05\x8a\x22\x18\x4b\x23\x89\x28\x45\x6a\x49\x2a\x8d\xb6\xe8\x5b\xed\x13\xec\x93\x2d\x86\xa4\x64\xfd\xda\xc9\xb6\x58\xa0\x40\x0d\xb4\x40\x39\xbf\x9c\x9f\x6f\x86\x2a\x97\x16\x75\x02\x11\xb2\x8d\xca\x73\xd4\x11\xde\xdf\x6a\x15\x97\x91\x65\x5f\x66\x8c\x31\x66\xab\x02\xcf\xd9\xd6\x6a\x2e\xd3\x13\x77\x92\x83\xfe\x84\xf6\x56\x40\x84\x1b\x15\xf7\x88\x3c\x46\x69\x79\xc2\x51\xf7\x84\x30\xe6\x70\x3e\x30\x72\x7f\x43\xe7\x27\x4b\xc7\x53\x68\x1e\xe1\x08\xcf\x2d\x9d\x5f\xc9\x44\x05\x3e\xcb\xad\xe8\x99\x8d\xc0\x62\xaa\x34\x47\x33\x22\xbf\x69\x88\x9e\x39\x46\x13\x69\x5e\x58\xae\x64\x57\x8b\xc9\x94\xb6\x2f\xa7\xa8\x39\xda\xf1\x1b\x58\xf0\x0c\x42\x55\x20\x6c\x35\xc2\x73\xed\x29\x9e\x0d\xac\xd5\x7c\x57\xda\x51\x5f\xd7\x0d\xd1\x33\xef\x20\x4e\x47\x19\x2f\x1c\xe1\x64\xf6\x75\x36\x9b\xcf\xe7\xb3\x35\x33\x3c\x2f\x04\xb2\xc2\xd3\x97\xcc\x66\x60\x59\x06\x86\x49\xc5\x1e\x40\x73\xd8\x09\x6c\xd9\x66\x20\x63\x66\x33\xd4\x98\x28\x8d\xc4\xa4\x51\x00\xdd\x9a\x59\xc5\x14\x51\x6a\x5d\xc6\x59\xa0\x42\x18\xba\xb1\x75\x56\xeb\x92\x71\xff\xc8\x51\x5a\xf3\xb3\x9c\x7e\xf0\x72\x8a\x94\x4c\x78\x5a\x6a\x57\x36\xa1\x10\x58\x8c\x09\x97\x68\xa8\x6e\x58\xa1\x8c\xe1\x44\x74\xc5\x45\xf7\x33\x4c\x25\x0c\x6a\xe6\x15\xbb\xb2\x4c\x49\x51\x91\x2a\x0b\x5c\x9a\x19\x97\x89\xd2\xb9\x2f\x32\xd8\xa9\xd2\x36\x8a\x9d\x0e\x2a\x9b\x5d\xd9\x14\x2d\x44\x96\x3f\x60\x4d\x62\xdc\x1a\x14\xc9\xea\x40\x2d\x6e\x5a\x2e\xff\xac\xc8\x1f\xa4\x22\x9b\xea\xd9\xa2\xc0\xc8\x95\xd1\x39\xfb\x30\x10\x7b\x3f\x60\x3b\xf9\xf8\xbc\x8a\x96\x83\x82\x32\x4c\x49\xa4\x9a\xcd\x41\xba\x2a\x8d\x34\x5a\xdc\xd7\xa2\x43\x50\x18\x74\xc2\x03\x8f\xd1\xac\xd8\x5a\x08\x16\x83\x05\x8f\x9b\xd4\x14\xca\xe9\xeb\x5a\x99\x11\xcc\x4a\x65\x5d\xcb\xd0\x9f\xb6\x36\xd7\x22\x20\x8c\x6a\x5a\x84\x0d\x5b\x84\xdb\x3f\xff\x30\x8c\x5a\x8d\xcb\xd4\xb0\x53\x0f\xcd\x8d\x93\x84\xd7\x19\x32\x03\x79\x57\xf7\xd9\x81\x46\x59\x3b\x17\xdf\x7b\x15\xdf\xd2\x29\xf3\xbb\x0c\xfb\xed\x42\x01\x25\x8f\x16\x6d\x6f\x16\x7b\x54\xd8\x22\xfa\x3b\x2f\xc2\x1d\x6e\xba\xf2\x0b\x96\x28\xed\x34\xd4\x89\xea\x19\x98\xff\x6c\xd2\x7f\xba\x49\x0f\xe5\x19\x22\x5b\x82\xa8\x93\x35\xdf\x37\xf5\x20\xb3\xbd\xda\xd9\x4c\xd7\xbc\xaf\x71\x78\x00\x2e\x3a\xf3\x67\x3f\x6a\xe6\xdf\x05\x3c\xc8\x87\x07\x94\x1c\x65\xe4\x8c\x14\xa8\x6d\x45\x8d\x0c\x51\x84\xc6\xd4\xf7\x6b\xa3\x86\x80\x1d\x0a\xc3\x10\x0c\x17\x95\xf7\x02\xf6\xed\x74\xdc\x97\xf5\x04\xf3\x73\xe0\x6c\xcd\x52\xad\xca\xc2\x8d\xdb\x26\x53\x2b\x76\xb9\x4a\x57\x6c\x61\xf8\xef\xb8\x98\xea\xfc\xa1\xdd\xd0\xdb\xd1\x20\x3f\xee\xa2\xbd\x94\x11\xe6\x85\xb9\xcf\x3b\x83\xdf\xb7\x2c\xc1\x65\xed\x4f\xed\xce\xcd\x62\xc9\x16\xd7\xf4\xd7\xaf\xd7\x0b\x1f\x2f\x55\x3c\x23\x53\xf7\x6f\x1d\xf7\x47\x77\xf1\x4b\x30\xd5\x0b\xab\x5e\x84\xf4\xb4\x33\x16\x73\x53\x08\xa8\xf6\x0e\x8c\x94\x15\xf4\x67\xc0\x13\x00\xf2\x6f\x07\xeb\x01\x44\xd9\xe2\x72\x79\x93\xe1\xee\x2e\x5e\x30\x96\xc5\xa7\x27\x2e\x04\x26\xb8\x34\xe2\x80\xb1\x60\xc7\x80\x6c\x52\xd5\x96\x04\x42\xa6\xe7\x3e\x55\x07\x7a\xb4\x59\xf4\x7c\xe2\x73\xb0\x51\xe6\x56\x43\x9a\xab\x4e\xdf\xca\xa9\x78\x89\x05\xca\x98\xcb\x94\x46\x15\x4f\xfc\x9b\x83\x86\xef\x20\x1b\x4c\x69\x1a\x95\x4b\xc6\x2d\xb3\x04\x94\x94\x57\x2e\x23\x51\xc6\xd8\x1e\x08\x01\x7f\xc9\xea\x0e\x4d\xdb\x34\xb2\xa8\xd4\x1a\x49\x55\xcb\x83\xfa\x32\x41\xfc\x39\x21\x09\x33\xf2\x64\xe9\xf2\x77\x35\x08\x02\x99\x2c\x65\x8c\x5a\x54\x74\xc3\x23\x65\x75\xcc\x4c\xc8\xe5\xe4\x68\x23\x1f\x08\x89\x5d\x66\x5d\xdd\x34\x05\xe5\x97\x90\x98\x22\xd6\x0a\x83\xa8\x06\x05\x8f\xb2\xcc\x9f\x5b\x13\xc1\x2f\x67\x7b\x4a\xb3\xdb\xda\x5d\xf2\xf1\x11\xa2\x16\x10\xb0\x7f\x33\x10\xa2\x86\xf4\xae\x4c\xbb\xee\xc9\xc2\x7a\x73\x77\xf5\xfe\x32\x60\x4d\xc3\x15\x56\x1e\x9b\x81\x1c\x41\xe4\x33\x86\x8f\xdc\x58\xb3\x1c\xa9\xc3\x6f\x70\xe5\x66\x7d\xb7\xf9\xaf\xf7\xe4\x8d\x6a\xb8\xbe\xb3\xa9\x95\xb7\xf5\xe6\xed\xbd\x37\x47\x09\xfe\x45\x43\x51\x60\x80\xd3\x50\xfd\x86\xe5\xc0\x65\xbd\x5f\x54\xee\xed\x4e\xea\xf7\x0b\xc7\xe4\x9b\xa8\xe1\x68\x8a\x8b\xcb\xe9\xed\xa4\xba\x43\x30\xa8\xc3\x8a\x20\xc4\x39\x63\x23\x28\xdd\x63\xf6\xd8\x4c\x1b\xc8\x08\x4c\xb8\xa7\xa2\x97\x9b\xf2\xd1\x49\x7a\xef\x3e\x61\xf5\x59\xe9\xd8\x90\x5d\xf7\xfb\x10\x6a\xdf\xdb\x08\x1b\xcc\xa8\x19\x6e\x8e\xd9\xa9\xa5\xbf\xb4\xf7\x3c\xe6\x61\x6e\x9c\x75\xbf\xf4\x39\x11\x04\x2d\xb9\x4c\xcf\x0f\x8a\x5c\x7a\x26\x27\xf4\x75\x76\xd8\x95\xbd\xfe\xc9\x15\x3b\xc6\x04\x4a\xd1\x05\x2d\x1e\x05\x98\xe6\xe6\x25\x37\x91\x2a\xa5\xc5\xf8\x9c\x5d\x28\x25\x10\x64\x90\x6b\x11\xc6\x44\x6b\xfa\x1d\x3e\xda\xde\x86\xc9\xe5\xad\xe2\xd2\x9a\x3b\xb5\x2d\x90\xf0\xf2\x95\x50\x60\xeb\xb7\xf1\xe3\x34\x91\x5e\x31\x4e\xdd\xf8\xf2\xbc\xf1\x64\x8f\x63\xdb\x4c\x7d\xf6\x90\xed\x22\x14\xbe\x46\xb1\xc2\x29\x77\x91\xc6\xf8\x48\x22\xdb\xa1\x6e\x43\x94\x13\x0a\xdb\x69\x60\x6d\x71\x2e\x19\xd2\x62\x72\xc3\x05\x9a\xb5\x8c\x6f\x94\x0e\x2f\x8a\x89\xe7\x8d\x9b\xe3\x87\xd4\x79\x44\x8c\x2a\x16\x81\x64\x3b\xf4\xea\xc3\x3d\x94\x66\x39\x19\x9a\x1f\xce\xe5\x64\x9d\xb4\xe3\x56\x2f\x1f\xa5\xb1\x2a\x47\xfd\x1f\x5a\x1e\x7a\xef\x8f\x0c\xa4\x44\x31\xdc\xb5\x85\x8a\x40\x74\x07\xc9\x54\x2b\xc6\xbc\xee\x45\xd7\xfe\xc3\xe6\x77\x2c\x57\x16\xf3\xb0\xb1\xa6\x68\xdd\xd1\x69\x69\x20\xdd\xdb\x38\x9b\x7a\x66\x39\xd1\x23\x1e\x10\x4f\xa7\x23\xdc\xaf\x5b\xa4\x39\xde\x79\x52\xfb\x38\xf8\xd0\xe7\x0e\x6f\xb5\xfe\xb1\xc6\x04\x29\x75\x4f\x89\xcc\xfe\x49\x54\x87\xa7\x3e\x78\x8d\x15\xed\xb2\x0d\x50\xf5\x5f\x57\x23\x6f\x80\x9a\x1a\xb8\x33\x30\xcd\xd1\xe9\x27\xac\xda\x41\x0c\x4d\x5d\x87\x7a\x92\x6f\xda\xc8\x40\xd4\x5c\x54\xaf\xb1\x22\x05\x6d\xbf\xcf\x8e\x79\x7a\x3c\x34\x93\xeb\x31\x9d\x5c\x0f\x37\xd4\x91\xa5\xb5\x94\xdc\x0e\xeb\xd7\xf5\x60\x27\xc8\x93\xce\x74\x67\xd3\xa4\x47\x05\xd8\xac\x7b\x22\x21\x1f\xf0\x68\x1c\x5d\x17\xbb\x36\x8e\x74\x6f\x0b\x9d\x26\xfa\xff\x08\x5e\x1f\x81\x6b\xbf\x5c\x5c\x80\xc1\x0e\x16\xef\x8f\xd7\x39\x09\x4e\x10\xff\x2f\x79\xa3\x6f\x7a\xa4\x84\xaf\x1b\x79\x01\x3c\x95\xef\x4a\x81\x83\x82\x8f\x51\x56\x04\xa5\xb5\xb0\xe9\xca\xfe\xeb\xe9\xe3\xc1\x37\x2c\x3c\x6e\x04\x18\xf3\x84\xc6\xdc\x22\xe8\x28\x7b\x87\xa6\x14\xb6\x19\xed\xfe\xff\x2d\x46\x2a\x3a\xb8\x9b\x40\x84\x5d\xba\x57\x73\xff\x8a\x08\x27\x1f\xc3\x0b\xaa\x4c\x53\x34\x83\xc7\x6a\x60\xdd\x36\xd4\xa0\xd4\xb8\xf3\x9b\xee\x07\x9a\xc0\xbc\xff\x3e\x93\x81\xf1\x4b\x36\xc6\xce\x58\x6b\x6e\x4f\xde\xd1\x3f\xfe\x0f\xe3\xb2\xe3\x39\xd4\x19\x8e\xa1\xd3\x10\x87\x9a\xf1\xeb\x6c\x86\x8f\x16\x69\x2c\x93\xb6\xff\x95\xa8\xeb\xcd\xa9\xaf\xf9\x74\xea\xc1\xb2\x3c\xf2\x21\x68\x04\xb6\x46\x0d\x84\x20\x9e\x9a\x90\xea\xdf\x4a\x34\x76\x18\xe3\x40\x18\x03\xc3\x76\x91\xd0\xdd\xfe\x0a\x00\x00\xff\xff\xbd\x39\x48\xd1\xf7\x1c\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
