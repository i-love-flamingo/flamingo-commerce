// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5f\x6f\xdb\x36\x10\x7f\x9e\x3f\x85\x82\xbe\x64\x40\xb1\x0f\xe0\x37\xc7\x1e\x0a\x63\x8d\x9b\xb6\xee\xf6\x50\x04\xc3\x45\x3c\xcb\x5c\x28\x52\x23\x4f\x49\x84\x22\xdf\x7d\x20\x45\xd9\x24\x45\xc9\xd9\x96\x87\x20\xe2\xfd\x78\xbc\x3b\xfe\xee\x0f\x43\x5d\x83\xc5\x5a\xd5\x35\xea\x12\xff\xdc\x60\xa9\x34\x10\xb2\x35\x68\x2a\x7e\x2c\x8a\xa2\x28\x4a\xd0\xb4\x3c\x43\xac\xe4\xca\x09\xd8\x00\xde\xa0\xe0\x4f\xa8\x39\x9a\x65\xf1\x3d\x02\x6e\x12\x48\x77\x75\xef\xb6\x56\x38\x16\xdd\x74\x6b\xc5\xf0\x9a\xf9\x4f\xfb\xb1\x2c\xbe\x92\xe6\xb2\xba\xfa\x39\x31\x60\xb4\x79\xf1\xba\x58\xc4\xae\x04\x1e\x70\xb6\x2c\xb6\x9b\xde\x68\x94\xc4\xa9\xdb\x6e\x4e\xaa\xdd\xea\x03\x17\x82\xcb\x6a\xc5\x98\x46\x63\x92\xc3\xfc\xaa\x03\x36\xad\x2e\x8f\x60\x50\x27\x98\x3b\xd4\x46\x49\x1f\x96\xe9\x68\x44\x41\x00\xc6\x38\x71\x25\x41\x6c\x80\x60\x7c\x68\x20\xec\xad\x7c\xf7\x53\x03\x5d\x8d\x92\xbe\xa2\xc0\xd2\x4a\x53\x2b\x12\xb1\x77\x0e\x85\x92\x95\xd9\xab\x55\x4b\x47\xeb\x7f\x69\x23\xf7\xcd\x39\x71\xa3\x94\x40\xf0\x40\x48\xe5\x69\x98\xa0\x69\x04\x47\xb6\x56\x6d\xa3\xa4\xbd\xa0\x91\x8b\x67\x91\x77\x92\xe1\x01\x5a\x41\xeb\x56\x6b\x94\x65\x17\xeb\x23\x45\x20\x38\x61\x3d\xd2\xb3\x1f\x24\x5e\x8d\xfd\x73\xad\x5a\x49\xcb\x62\x2b\x3d\xff\x1a\xad\x58\x5b\x52\xba\xcc\x4d\x14\x06\x64\x89\x97\x95\x06\xc9\x9c\xfe\x20\x7a\x77\x9a\x97\x18\x39\xf9\x81\x1f\x68\x0d\x9a\x8d\x4c\x5b\xc5\xf2\x90\xd1\xff\x85\xc8\x9e\xbf\x89\x8e\x21\xb8\x7e\xdb\x7d\x9e\xdf\xa3\x34\xf0\x84\x1f\x8e\x9e\x38\x2c\x49\xdf\x6d\xee\x02\x36\xa1\x34\x93\xb5\x16\x63\x45\x37\xdd\x96\x5d\xdb\x04\xbb\x94\xa9\x16\x3c\xe5\x45\xd6\xf8\xad\x3c\xa8\x09\x07\xac\xe8\x54\x9b\xb2\xfc\x09\xac\x36\x47\xde\x34\x5c\x56\x76\x29\xd1\xf7\x35\x10\xf5\xd8\xf6\xc1\x31\xe3\x83\x56\x51\x19\x70\xf4\xb8\xc0\x1e\xaf\xa0\x76\xc2\x3d\xbc\xac\xea\x9e\x98\x59\x54\x7f\xcc\x0e\xa7\xe4\xbd\x96\x0d\x37\xa5\x55\x32\xab\xaa\xde\x29\x69\x1d\xf8\x82\xc2\x51\xe1\x4d\x7b\xfe\xed\x86\x20\x2c\x7f\x70\x3a\x0e\x7b\xf2\x31\x0a\xdc\xbb\x0c\x3e\x82\xf1\x04\x3c\x65\xe9\x2c\x4b\xec\xdd\x0f\x9d\x29\xcc\x2c\xb7\xf2\xac\xf4\xe3\x41\xa8\xe7\x78\xb5\x46\x3a\x2a\x16\xaf\x95\xa0\x35\xb7\x15\x30\x5c\x1c\xa8\xf7\x51\x95\x90\x29\xaf\x9b\x44\xec\xf7\x18\xae\x91\xed\x79\x8d\xcb\xc2\xfe\x1e\x52\x25\xae\xe0\xd7\x8f\xd8\x85\x49\x12\x95\xd5\x08\xf9\x1b\x76\x51\xe6\xbf\x4b\x20\x41\x1c\xcc\xb2\xa8\xa1\xf9\x6e\x1c\xf4\xfe\x2f\xa3\xe4\x2f\x5f\xe0\xf9\x16\x8d\x81\x0a\xe7\xc3\x38\xf8\x50\xf8\x58\x5a\xe4\xc8\xaa\x0b\xcd\xb0\x35\x78\x93\x34\xce\xa8\xd2\xc6\xf7\x93\x35\x27\xcc\xc0\xc1\x12\x4e\x22\x31\xa5\xb1\x6c\x99\x4a\x16\x9a\x4d\x35\x5f\xcd\x73\x1c\x0c\x8a\xf9\x49\x3c\x61\x66\x0a\x1b\x06\x8b\x5c\xe9\x49\xb0\x53\xb5\x3b\x81\x9d\x86\xad\xba\x01\x5e\xc9\xbe\x69\xc4\x8c\x3d\xb5\xd6\xa5\xfd\x0c\x45\x02\x1e\x50\xb8\xd5\x22\x15\x79\xff\x07\x61\xae\xe1\xf5\x57\x9f\xdd\xcd\x4d\x50\x28\x92\xdb\x35\x4a\xd3\x27\xcd\x6c\x0e\xd9\x1f\xd7\x7f\xe7\xbb\x54\x70\xc9\x7c\x5c\x8c\x4f\x45\xd8\xf7\xf5\xe8\x3a\xdd\x4a\x5e\x7d\xa8\x35\x1c\xf4\x5e\x08\xb5\x04\xf1\x05\x0f\x68\x47\x8f\x84\x52\x35\xe8\x47\xa4\x46\x40\x89\xeb\x51\x19\x79\x02\xcd\x41\xd2\xad\xc3\xdc\xe5\x31\xde\xca\x1d\xd4\x89\xc0\xa8\x56\x97\x98\x8e\x4e\x7f\x53\x17\xcc\x28\xf3\x19\x3f\x46\xfc\x0e\xa2\xc5\x11\xe6\x8d\x45\x66\x28\xb3\xab\xf4\xd0\x14\xee\xaf\xb7\xf7\x82\xcb\x4a\xa0\x63\x49\xb6\x19\x5e\xa5\xa8\x4c\x7a\xf6\x18\xad\x9e\x2f\xa9\x19\x20\x59\x1d\xef\x3c\x62\x0f\x2f\x18\xee\x77\xdf\x53\xf9\xda\xd7\x23\x4f\x8b\x27\xa0\x80\xdf\x79\xa6\x1f\xb8\x36\x24\xdd\x65\x4e\x62\x04\x64\x21\x31\xaf\x38\x63\x02\x77\x23\x54\x34\xf6\xf6\x15\x6e\xd6\x1e\x03\xa2\x25\xdf\x84\x26\x31\xa4\x11\x33\xae\x8d\x31\x3b\x3d\x67\xf3\x99\x6b\x3e\x6e\x1f\xb9\x1c\xb3\xad\x54\x75\x03\xb2\x1b\x1d\x17\xd5\x28\x4e\x63\x40\x82\x69\x94\xa1\x53\x15\x9b\xb4\x1a\xe8\x52\x84\x34\x56\x3c\xa8\x87\x79\x7b\x6c\x69\xd5\x17\x6c\xee\x31\x23\x45\xd1\x8d\xa1\xc0\xe6\xa8\xe4\x1c\x3b\xb0\x06\x2e\x66\x6c\xce\x12\xb5\x7f\x37\x7a\x9e\x5e\xee\xb8\x8d\x83\xdb\x21\x80\x80\x8b\x14\x79\x17\x4b\x87\x3a\xc8\x0d\x71\x59\xad\x5b\x43\xaa\x46\x9d\x79\x6b\xfe\x9a\x81\xe4\xcd\xcd\x21\x93\xda\x3b\xe3\xe6\xc9\xb2\x61\xd2\x07\xc2\x4f\x87\x1b\xae\xe9\x98\xd4\x56\x30\xa6\x51\xba\x7f\xda\xe9\x2e\x2f\xdc\xb5\xf5\x43\x3a\xc0\x49\xe8\x79\xec\x68\x38\x1b\xf8\xb8\x18\x16\x3f\xfa\x32\x53\x3a\xbf\x56\x44\x9a\x3f\xb4\x64\x73\xe0\x16\x1a\xcf\x36\x83\xfa\x09\x99\xeb\x78\x61\x71\xcf\x6a\x3f\x3d\x5f\x27\x27\xd5\xa9\x29\x27\x5f\x20\xe3\xe9\x2c\x7b\xe4\xf9\xe5\x9d\x3d\x73\x6e\x06\x19\x9e\xb2\x93\xc6\x9e\x86\x88\x6c\xf1\xb6\xc4\x97\x5c\x56\x63\xf1\xeb\x62\x61\xdb\xb0\x64\xce\x81\xe2\x73\x7b\x7e\xe5\x45\x76\x2c\x27\xfe\x03\x35\xd2\x70\xeb\x6b\x62\xaa\x64\xc5\xd8\x5e\xd9\x1d\xd7\xa3\xbe\xbe\xdd\x5c\xbd\x3f\x77\xdf\xf7\xc5\xc5\x67\x79\x62\x41\x74\xce\x06\x05\x12\x86\x73\xf4\xe5\x67\xfe\x65\x7d\x76\x82\xb9\xb6\x6c\xb1\xbc\x72\xf6\xfe\x2f\xa5\xdf\x1a\x9b\x58\x56\xe9\x67\xea\xde\xa0\x37\x08\xcf\xcc\x11\xaf\x8b\x7f\x02\x00\x00\xff\xff\xc5\x9a\xef\x7d\x2b\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
