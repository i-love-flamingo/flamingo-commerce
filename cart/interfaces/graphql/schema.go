// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcf\x6f\xdb\x38\x16\xbe\xfb\xaf\xb0\xb1\x17\x0f\x50\x2c\xb0\x7b\xf4\x2d\xb1\xdb\xc2\x98\x26\x4d\x13\x4f\xf7\x50\x04\x01\x23\x3d\xdb\xdc\x52\xa2\x86\xa4\x92\x08\x8b\xfe\xef\x0b\x52\xa4\xc4\x9f\x12\x9b\xc5\x0c\x30\xd8\xcc\x61\x1a\x93\x1f\x1f\x1f\xc9\x8f\x8f\x1f\x1f\x25\xba\x06\x96\x5b\x5a\x55\xc0\x0a\x78\xd8\x41\x41\x19\x12\x50\x6e\x11\x13\xcb\xff\x2c\x96\xcb\xe5\xb2\x40\x4c\x6c\x46\x88\xac\x59\xa9\x8a\xd2\x80\x77\x40\xf0\x13\x30\x0c\x7c\xb3\xfc\xe6\x00\x77\x1e\xa4\x5b\xdd\xab\xa6\x27\x08\xab\x2e\xbb\x2d\x2d\x61\x5d\xea\x9f\xf2\xc7\x66\x79\x27\x18\xae\x4f\xab\x5f\x3c\x07\x82\xc6\xc6\xea\x05\x21\x37\xa8\xab\xa0\x16\xb7\xf0\x7b\x8b\x19\x94\x7b\x01\x15\xf7\x9a\x3f\xdc\x30\x5c\xe8\xaa\xd5\x30\xc8\xbb\xb6\xaa\x10\xeb\x7c\xac\x2e\x5e\x2d\x7e\x2c\x16\xee\x6c\xd9\xd5\x7a\xb2\x4a\xcc\x0b\xda\xd6\xc2\xef\xf1\xa2\x69\x08\x86\x72\x67\xaa\x15\x98\xb7\x95\x5f\x6e\x35\x53\x3e\x7a\xb8\x8f\xf8\x28\xb6\x88\x95\x49\xdc\x47\x86\xea\xf2\x40\x05\x22\xff\xc2\xe2\x3c\x0b\x57\x48\xd3\xb9\xd3\xe2\xa2\x92\x45\xd1\x76\x67\xc4\x43\xb7\x2f\x29\x25\x80\xea\xd5\x60\x19\xbd\x40\x30\xed\xaa\x30\x3e\x8f\x7a\xfe\x70\xb9\x59\xee\x77\xbd\x15\xa8\x05\x16\xdd\x7e\x37\xb0\x40\x95\x3e\x62\x42\x70\x7d\xba\x28\x4b\x06\x3c\x98\xe6\xbe\x54\x01\x9b\x96\x15\x67\xc4\x81\x79\x98\x1b\x60\x9c\xd6\x9a\xc1\x69\xe2\x3a\x7c\x45\x65\x89\x05\xa6\x35\x22\x3b\x24\x50\xd8\xa9\x55\xd9\x7b\xd9\xf4\x24\xbc\x03\x02\x85\xac\x0b\x08\xe8\xd5\xf7\x43\x03\x42\xeb\x13\x3f\xd0\x8b\x56\x9c\xe5\xe8\x0b\x49\xf1\xdf\xd4\x10\x9c\xf9\x45\x7e\xbd\x3f\x49\xa8\x5f\x9f\x2d\x6d\x1b\x5a\xcb\x9d\x14\x0c\x70\xac\xd2\x43\x2c\xe1\x88\x5a\x22\xb6\x2d\x63\x50\x17\x9d\x6b\x4f\x48\x9e\xe0\x7e\x27\xb9\x76\x0e\xa6\x46\x9b\x91\x7f\x6e\x7b\xea\xec\x6b\x1d\x28\x1a\x46\xcb\xb6\x10\x7e\x31\xe6\xce\x2c\x40\xe9\x8d\xf2\x34\x70\xd9\xa7\xe1\xca\xe1\xef\x01\xbd\xc4\xd9\x6a\x60\x8f\x0a\x76\x0d\x09\x00\x0a\xf6\xd6\xb7\xd8\xde\x35\xf5\x76\x08\x7b\x4d\xe4\x72\x03\xd6\xce\x6a\x24\x7b\xd6\xcd\xee\x17\x06\x70\x85\x70\x7d\x77\xc6\x4d\x83\xeb\xd3\xfb\x2b\x84\x89\xbb\x32\x98\xbf\xaf\x1a\xd1\x79\x53\x77\x46\xdc\x18\xfe\x40\xd9\xa4\x77\x43\xbb\x70\x54\x32\x3e\xee\x77\x6b\xac\xfe\x99\x1d\xd1\xca\x18\xc8\x6d\x28\x51\x43\x23\xb5\x44\x5f\x44\xb7\xae\x10\xfb\x0e\xe2\x86\xa0\x02\x1c\x57\xdf\x2d\x9f\x10\xc3\xa8\x16\xfe\x00\xf6\xb5\x18\x7b\x7e\xff\x22\x80\xd5\x88\xdc\xc2\x11\x24\x8f\x61\xcd\xe0\x38\xe3\x81\x69\xfd\x95\xb6\xc5\x19\xd8\x1d\x7a\xc2\xf5\x29\x08\x99\x83\xa7\x8a\xf5\x10\x09\x2c\x0f\x7d\xa9\x36\xc8\xdb\xca\x2c\x5b\x92\x79\x2e\x46\xc6\xdf\xe4\x41\x30\xac\xab\x69\xb0\xa5\x3c\x88\xbb\x88\x10\x53\x7d\xc0\x82\x44\x08\x65\x36\xc3\x47\x46\x79\xa2\x0f\x07\x92\xe1\x93\xb5\xbf\xb2\xd0\xee\xa1\x33\xbd\x73\xab\x6b\x5a\xcb\x45\xba\x05\xa2\x4e\xfb\xbc\x46\x3f\xd9\x62\x3c\xcf\xc6\xa0\x18\xd9\x17\x83\xae\xd0\xcc\x72\xf7\xa1\xa1\xb0\xd2\x14\x97\xdd\xa1\x6b\x60\x2d\x4f\x39\x9f\xad\xd3\xd1\x73\x0c\x79\xdb\x33\x62\x27\x08\x26\xf1\x41\x97\x6b\xb7\x46\xd7\xad\xe8\xe5\x47\x82\x5b\xa8\x10\xae\x71\x7d\x8a\x61\xe2\xa2\xc6\xd2\x47\x96\x0a\xd4\x52\xca\x1b\x83\x06\x0f\xfb\xa9\x1f\x09\xd7\x3c\x9c\x6c\x73\x67\x81\x74\x3b\x31\x4c\xa2\x3f\x57\xba\xcd\x30\xcb\xab\xfb\x49\xe7\x8d\x3f\xda\x7f\x34\x41\x00\x2f\x4e\x4d\x9a\xb5\x5d\xce\x30\x6d\xa2\xee\xbe\x3e\x52\x87\x0a\x93\x9d\x0c\x63\xcc\xe8\xa1\xc8\xb0\x7a\x40\x2f\x19\x96\x64\x43\x97\xd4\x52\x62\x6f\x96\x1f\x08\x45\x22\x6d\x19\x0c\x45\xa2\xfa\x40\x22\xee\xad\xa3\xa1\xdf\x18\xe8\xe5\x60\x75\xe6\x87\x65\xd9\x26\x39\x14\x15\x63\x75\x8f\xae\xb0\x18\x4e\x82\xfd\xa8\x41\xd4\x4f\x5d\x1c\x3f\x6a\x15\x8b\x70\x2d\x80\x1d\x51\x11\x2c\x87\x27\xd3\x74\xbf\x27\x24\xe0\x19\xc5\x34\xd2\x57\x44\x5a\x08\xa7\x37\x3e\x96\x5d\x2f\xb9\x82\x4e\x70\xd5\x10\x90\x45\xfc\xcf\x74\x27\xb8\x53\x99\x2b\x8d\xfe\x39\x79\xec\x0f\x77\xc1\xe8\xd6\xdd\xd9\xb5\x91\x2b\xa0\xd9\xab\x97\xdd\xbe\x5c\xeb\x2b\x40\xf2\xca\x27\x81\xa9\x11\x44\x1d\x97\x7b\x2f\xe1\xbc\xac\x1a\xc2\x5b\x94\xbf\x89\x90\xe6\xd9\xb3\xa3\xc2\xfc\x39\x3b\xa3\x6e\xf3\xc4\xed\x9c\xb6\xfd\x89\xd3\xf6\x35\x87\xed\x4f\x9f\xb5\x3f\xa9\x2d\x5e\x21\x2d\xce\x88\x6b\xf6\x4d\x9f\x6e\xf6\xe2\x9b\xd3\xcd\x09\xa2\xb2\xe4\x99\xb2\xef\x47\x42\x9f\xdd\xd2\x0a\xc4\x99\x96\x6e\x59\x81\x18\xc3\x52\x0c\xda\x85\x86\x7b\x9f\x68\x81\x22\xf7\xbf\x9d\x57\xad\xdb\x70\xcc\xa0\x3c\xe0\x0a\x36\x4b\xf9\xff\x21\xa9\xe1\x5c\x30\xd7\xdf\xa1\xb3\x15\x85\x73\xef\x73\x90\xbf\x42\xe7\x28\x40\x89\xf8\x9b\x07\xb3\xe6\x82\x6f\x96\x15\x6a\xbe\xf1\x3e\x2c\xfe\x9b\xd3\xfa\xef\xb7\xe8\xf9\x0a\x38\x47\x27\xc8\x68\x7c\x85\x9a\x11\xe5\xba\x6d\x01\x7d\xf7\xaf\x50\x13\xf8\x6e\xc1\xfd\x31\x4c\xae\xa8\x99\xce\xa5\x5e\xd6\xf0\x44\x43\xb3\x69\x83\x96\xc3\xa5\x97\x62\x70\x04\x55\xc6\x79\x1b\xd1\x08\x42\xca\x71\xd7\x95\x46\x32\x37\xb5\x71\xc5\xe4\xb6\x47\xe9\xac\x51\x2c\xd9\x64\x1d\x08\xf6\x36\xda\xd7\x85\x0c\x2f\x09\x31\xe0\x54\xcc\x9c\xca\x7e\x87\x53\x82\xc0\xc3\x6a\x5a\x3e\x76\x5b\x54\x35\x08\x9f\x94\xfa\x5e\x17\xd6\x0f\x4b\x25\xe4\x0c\xf3\xb1\x97\x18\x47\x4c\x04\xb0\x29\x95\x11\x36\xcf\x19\xdb\x20\x87\x6d\x07\xdd\x78\x60\x5d\x22\x96\x6e\x15\x41\x8f\x40\x7a\x51\xe2\x57\xe9\x25\x35\x95\x69\x7d\x16\x6d\x8d\xb9\x15\x87\xfd\x64\x1c\x65\xe2\x33\x2b\x65\x84\xd2\x6a\x68\x4e\x00\x58\xbc\xc5\xe1\x59\x37\x9c\x71\x5a\x7d\x39\xfc\x51\x25\x71\xf3\xb6\x55\x3b\xcb\xe7\xdf\xd8\xbd\x88\xab\xd2\x01\x4d\x90\x0e\x50\x95\x3a\x23\x70\x95\x48\x19\xd8\x5e\x5e\xa3\xca\xab\xe0\xb4\x65\x05\xf8\x99\xb3\xdf\x45\x67\xa5\xa8\xe6\xe3\xa9\x8b\x50\x7a\x2b\xc0\x64\x86\xf0\xe1\x46\xe7\x77\xea\xc3\xf5\xf2\xf6\xa3\xc0\xf5\x89\x80\x62\xc9\xd4\x9d\x7e\x44\x25\x93\x11\x8c\x3e\xcf\x99\x31\x90\xb9\x54\x5a\x6e\x60\x1a\x8f\x0b\x46\x9f\xfd\x8c\xb1\xfa\x9d\xda\x94\x7d\x68\xd6\x74\x7a\x42\xc2\xda\x17\xf1\x1d\x72\xc4\x8c\x8b\x5a\x91\x20\x89\x21\x28\x0a\x71\xf9\x88\xcb\x92\xc0\x75\x80\x72\xa4\x77\x1f\xec\x27\xfd\xe1\x88\xb4\x42\x4b\x83\x24\x46\x30\x80\xc8\xd0\x42\xcc\x35\x9b\xf2\x79\xe4\xa8\x9e\xb7\x4f\xb8\x0e\x59\x5a\xd0\xaa\x41\x75\x17\x74\xe7\xc4\x36\x2c\x42\x80\x87\x69\x28\x17\x43\xf4\x4b\x7a\xad\x6e\x96\x93\x76\x18\x9c\xb0\x15\x47\xe3\xfe\x48\x1a\xb1\x19\x9f\x7b\x4c\x60\xc8\x59\x31\x20\xd0\x9c\x69\x3d\xc5\x0e\xa8\x54\xf2\x35\xe9\x73\x94\xa8\xfd\x63\x83\xb9\x7c\xcf\xbf\x59\x28\xb8\x54\x40\x02\x61\xe2\x23\x6f\xdc\x5a\x13\x3f\x31\x17\xb8\x3e\x6d\x5b\x2e\x68\x05\x2c\xf2\x40\xf1\x3e\x02\x89\xbb\x1b\x43\x7a\x31\x7b\x62\x98\x83\x67\xe6\x02\x86\x04\x7c\x3e\x5e\x62\x26\xce\x5e\x4c\x46\x9c\x37\x94\xf5\x17\x77\xd6\xc5\x2b\xaf\xdb\xea\xd1\x97\xd5\x35\xea\x79\xac\x68\x38\x39\xf1\x6e\x10\xd5\x0e\xa9\x50\x53\xa8\xb1\x5d\x08\xc1\xf0\x63\x2b\xc0\x12\xae\x0c\x38\xb0\x27\x28\xd5\x69\x39\x9b\x10\x1a\x72\x77\xc9\x3b\x44\x4a\xf4\xe5\xa4\x5f\xa2\x5d\x8e\xf9\xc9\x68\x9f\x53\xfa\xc5\xe4\xfe\x92\xce\x0e\x02\x24\x1a\xf8\x4d\x0a\x31\x79\xf3\xba\x1d\x11\x33\xb9\xc5\xaf\x88\xe0\x52\xad\xe3\x2d\xf0\x96\x18\x45\x75\x46\x5c\xe2\x68\xfd\x9e\x31\x3a\x86\x33\x4f\x7b\x0f\x00\x7d\x2d\xf9\x15\x3c\xf6\x60\xa5\x83\xa4\x5d\x6e\xef\x55\x2f\x29\x25\xb5\xc8\xe8\x87\x32\x98\x4c\x27\x46\xb0\x96\x38\x92\x34\x89\x87\x8b\x94\x97\x89\xc4\x9f\x54\x2f\x9a\x79\xe3\xbd\x94\xca\xdf\x66\x23\x78\x1d\xb8\x0f\x3a\x33\x71\xe8\xc1\xbd\xd3\x7c\xa0\xcc\xd0\xf6\x48\x59\xd5\xc7\x8c\xfe\xbf\xb9\x66\x2a\x78\x2c\xd5\xa9\x6b\xe6\x24\x92\x60\x79\x90\x50\x6b\xa9\x87\x44\x4b\xc3\x68\x01\x9c\x5b\x2a\x35\xf5\xae\xae\x1f\x05\x87\xb4\xbb\xc5\x95\x3f\xb8\xeb\x88\x01\x33\x59\x18\x48\xa9\x28\x10\x26\x3a\x55\xab\x0f\x03\x60\xd0\x7e\x35\x30\x44\xa6\xda\x4c\xd3\x6f\x84\x68\x1f\xaa\x04\xf3\xf5\x03\xee\xa7\xfe\x8e\x31\xcd\x06\xcf\xd7\x57\x59\x1e\xe6\xc3\x95\xd6\xb9\xf4\xb3\xc2\xf2\x9b\x7e\x9b\xd5\x6f\x46\xb5\xfd\x63\x33\x8f\xf9\x67\x0a\xf3\xff\xac\xf0\x94\xba\xb3\x22\x69\x0c\x93\xa1\xf0\x16\xb8\x6e\x5a\x31\x92\x3b\xe4\xf5\x5e\x01\x72\x88\xfd\x27\xf2\x3a\x83\xd6\x19\xac\xce\x20\x75\x06\xa7\x33\x28\x9d\xc1\xe8\x0c\x42\x67\xf0\x39\x83\xce\x19\x6c\xce\x20\x73\x06\x97\x33\xa8\x9c\xc1\xe4\x5c\x22\x7b\x3c\x36\x19\xd4\x37\x22\xbf\x11\xf9\x2f\x4d\x64\xfd\xb0\xea\xb0\xd9\x66\x72\xe9\x56\x6d\xe6\xb7\x80\x6a\x36\xf7\x2a\x60\xde\x06\xaf\x9c\x07\x22\xa7\x6a\xeb\xbe\x13\x45\x34\xfc\xb4\x84\x8a\xf8\xc7\x2d\x0d\x1f\x8a\xcb\x48\x83\xa4\xca\x8c\x60\xb3\xee\x07\x91\x76\xc3\x05\x61\x6e\xce\xe2\x83\x5f\x06\xcf\x6c\x3d\x9f\x22\xb3\xf7\x07\x5f\x03\x12\x63\x7b\x13\xad\x6f\xa2\xf5\xaf\x25\x5a\xa7\x42\xa4\x79\xab\xfc\xdc\x58\x1f\x94\xe4\xee\xcc\xc4\x03\xf8\x8f\xc5\x02\x5e\x04\xd4\xa5\xca\x69\x2d\xbf\xb4\xe3\x37\x19\x8e\x13\x4e\xf0\xb5\x3e\x05\x59\x85\x50\xb3\x91\x69\xf0\xd1\xa5\x9f\x4e\x0a\xba\xbf\xd2\x94\xf7\x3d\xb8\x28\xcb\x03\x95\x26\xd6\xc1\x1b\xd3\x7e\xb7\x7a\x37\xbe\x04\xbd\x8b\xcf\xc7\x2f\x99\xee\xef\x80\x80\x00\xfb\x99\x7a\xfe\x4b\xe1\x79\x7b\x7b\x01\xd5\xf0\x81\xad\xf2\xf7\x7f\x32\xfa\x5b\x53\xa2\xde\xe8\x17\xd1\x65\xd8\xb5\xa6\x27\xb7\x0b\xb5\x5a\x7d\x3f\xee\xb1\xb0\x46\x63\x80\xdd\xcc\x5e\xad\x82\x8f\xc5\x42\x5c\xba\x63\x2f\xa9\xb4\xf6\xbf\x9c\x7a\xe7\x13\x3c\xe8\x2d\x9a\x96\x8a\x75\x78\xd1\x34\xa4\x1b\x13\xb6\x9f\x99\xc9\xc0\xae\x8b\xac\x05\x8a\x98\xbc\x85\x8a\x3e\xc1\x60\xe7\xa4\xff\xc8\x5b\xf0\xa4\xbd\xd1\xc7\xb5\xfd\x74\xfd\x0a\x7b\xfd\x1c\x7b\xc7\x26\xf0\xf5\xa8\xb9\xfa\x82\x39\xa5\xa2\xd6\x79\x75\x1f\xcc\x7d\x4c\x01\xa5\xd7\x3a\x1e\xe1\xf8\x9a\xf6\xff\x26\x9d\x70\xf1\xd9\x6e\xfc\x58\xfc\x37\x00\x00\xff\xff\x9d\x05\x2c\x22\x4b\x35\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
