// Code generated for package graphql by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xc1\x6e\xe3\x36\x10\x3d\xaf\xbf\x42\x46\x2e\x59\x60\xd1\x0f\xd0\xcd\xb1\x8a\x85\xd1\x8d\x9b\x26\x6e\x7b\x58\x04\xc5\x44\x1c\xdb\x6c\x28\x52\x25\x47\x49\x84\x62\xff\x7d\x41\x89\xb2\x49\x8a\x92\x93\x1c\x82\x84\xf3\x38\x7c\x33\x7c\x33\x43\x51\x5b\x63\xb6\x56\x55\x85\xba\xc4\x7f\x0a\x2c\x95\x06\x42\xb6\x06\x4d\xd9\xff\x8b\x2c\xcb\xb2\x12\x34\xe5\x67\x88\xb5\x2c\x3b\x03\x1b\xc0\x05\x0a\xfe\x82\x9a\xa3\xc9\xb3\xef\x01\xb0\x88\x20\xed\xf2\x71\xf1\x63\xb1\x08\x0f\xf5\xce\xe2\x2c\xcf\x36\x45\xef\x1e\x25\x71\x6a\x37\x45\x9e\x3d\x90\xe6\xf2\xd0\xaf\x3e\x71\x21\xb8\x3c\xac\x18\xd3\x68\x4c\xc4\xcb\xad\x76\xc0\xba\xd1\xe5\x11\x0c\xea\x08\x73\x87\xda\x28\xe9\x02\x98\xe6\x7d\xa2\x6b\x81\x57\x9f\x80\x31\x4e\x5c\x49\x10\x05\x10\x8c\x8f\xf5\x8c\x4b\xb7\xa5\x86\xb6\x42\x49\x0f\x28\xb0\xb4\xd6\x98\x47\x64\x76\xe1\xa1\x50\xf2\x60\x76\x6a\xd5\xd0\xd1\x66\xa0\xb4\xd9\xfb\xb3\x0b\xe3\x46\x29\x81\xe0\x80\x10\xdb\xe3\x44\x5d\x7d\x82\xba\x16\x1c\xd9\x5a\x35\xb5\x92\x6b\xc5\xc6\x61\x9e\x4d\x2e\x50\x86\x7b\x68\x04\xad\x1b\xad\x51\x96\xed\xd9\xe3\x95\xb5\x92\x22\x10\x9c\xb0\x1a\x39\xda\x0d\x16\xe7\xc7\xfe\xb9\x56\x8d\xa4\x3c\xdb\x48\x27\x97\x5a\x2b\xd6\x94\x14\x2f\x73\x13\x64\x02\x59\x14\xe8\x41\x83\x64\x9d\x7f\x2f\x81\x77\x9a\x97\x18\xc5\xf9\x95\xef\x69\x0d\x9a\x8d\xc8\xad\x42\xfb\x94\x04\x47\x5a\x75\x9a\x74\x2a\x69\xf3\x18\xee\x24\x12\xd6\xc2\x26\x95\x9e\xc2\xb7\x4e\x9f\x9f\x3c\x76\x23\xf7\x6a\xe2\x68\x6b\x3a\x95\x68\xf2\x5e\x36\xe7\x2b\x31\x47\x5e\xd7\x5c\x1e\xec\x52\xe4\xef\xc1\x33\xf5\xd8\xe6\xa9\xcb\xf8\x57\xad\x82\x1a\xeb\xd2\x7e\xe1\x56\x9c\x83\xaa\x33\xee\xe0\x6d\x55\xf5\x17\x9e\x44\xf5\xc7\x6c\x71\xca\xde\x7b\x29\xb8\x29\xad\x93\x59\x57\xd5\x56\x49\x1b\xc0\x3d\x8a\xee\x12\xdf\xb5\xe7\xa3\x1b\xbc\xb4\xfc\xcd\xe9\x38\xec\x49\xe7\xc8\x0b\xef\x32\xf8\x08\xc6\x49\xe7\xa4\xfe\x59\x95\xd8\xbb\x1f\x1a\xb4\x62\x18\xd6\xfe\xab\xd2\xcf\x7b\xa1\x5e\xc3\xd5\x0a\xe9\xa8\x58\xb8\x56\x82\xd6\xdc\x36\x17\x7f\x71\x90\xde\x37\x55\x42\xa2\x73\x15\x91\xd9\xed\x31\x5c\x23\xdb\xf1\x0a\xf3\xcc\xfe\xee\x65\x82\x51\x73\xbc\x7e\xc6\x73\x57\xf9\x1c\x1e\x1b\xf6\xd8\xdf\xb0\xb5\x72\x76\x80\xc7\xbe\x03\x79\x10\x2f\x0f\x26\xcf\x2a\xa8\xbf\x9b\x0e\xfa\xf8\xaf\x51\xf2\x97\x7b\x78\xbd\x45\x63\xe0\x80\xf3\x69\x1c\x62\xc8\x5c\x2e\x2d\x72\xc4\xea\xc2\xa4\x69\x0c\xde\x44\x53\x29\xe8\x60\xe1\xfd\x24\xe9\xf8\x15\x38\x30\xe1\x24\x22\x2a\xb5\x55\xcb\x54\xb1\xd0\x6c\xa9\xb1\x79\x75\xcf\x37\x44\x8f\x15\x1f\x77\x8f\x53\xd7\x70\x0d\x3e\x70\xde\xad\xa4\xdd\xfb\x5e\xfd\xb1\xff\x46\xa8\x25\x88\x7b\xdc\xa3\x1d\x42\x51\x0e\x2a\xd0\xcf\x48\xb5\x80\x12\xd7\x23\xdd\xbf\x80\xe6\x20\xe9\xb6\xc3\xdc\xa5\x31\x8e\xe5\x16\xaa\xc8\x60\x54\xa3\x4b\x8c\xc7\xe8\x7f\xd4\x7a\xc3\x6a\x5e\xa2\x63\xc4\x5f\x20\x1a\x1c\x61\xde\x59\x15\x43\x5f\x58\xc5\x87\xc6\x70\xa7\xb6\x3e\x0a\x2e\x0f\x02\xbb\x5b\x4d\x76\xef\x65\x8c\x4a\xe8\xa9\xc7\x68\xf5\x7a\xc9\xcd\x00\x49\xfa\xb8\x72\x88\x1d\xbc\xa1\xbf\xbf\xfb\x7f\x39\xaf\x98\xe5\x22\xad\x19\x57\x60\x4e\x36\x2f\x40\x79\x96\xf8\xf1\xef\x6f\xcf\xb5\x21\xd9\x5d\xf6\x24\x46\x40\x12\x12\xea\x8e\x33\x26\x70\x3b\x42\xf9\x18\x57\xb2\xb3\x7c\x0c\x88\x86\x5c\x57\x9d\xc4\x90\x46\x4c\x84\x36\xc6\x6c\xf5\x1c\xe7\xb3\x16\x5d\xde\xbe\x71\x39\x56\x63\xa9\xaa\x1a\x64\x3b\x3a\x2e\x18\x13\x9c\xc6\x80\x08\x53\x2b\x43\x7d\xb9\xcd\xb1\x06\xba\x94\x21\x8d\x07\xde\x3f\x4a\xa7\x33\xd4\xf5\x32\x7d\x81\x73\x8f\x19\x39\x0a\x6e\x0c\x05\xd6\x47\x25\xe7\xd4\x81\x15\x70\x31\xc3\x39\x29\xd4\xfe\x2b\xc3\xe9\xf4\xf2\x08\xa9\x3b\xb8\x9d\x6a\x04\x5c\xc4\xc8\xbb\xd0\x3a\xf4\x49\x6e\x88\xcb\xc3\xba\x31\xa4\x2a\xd4\x89\xef\x92\x5f\x13\x90\x34\xdd\x14\x32\xea\xcd\x33\x61\x9e\x98\x0d\x4f\x57\x20\xfc\x7d\x7f\xc3\x35\x1d\xa3\xde\x0b\xc6\xd4\x4a\xf7\xdf\x00\xba\x4d\x1b\xb7\x4d\xf5\x14\xbf\x48\x24\xf4\x3a\xee\x64\xe8\x25\xde\x0e\x0b\xc9\xba\xa9\x9d\xfd\xd1\x9c\x1f\xcf\xa5\x4f\x32\x9f\xf8\xbe\x1d\x79\xb8\x75\x95\x19\x3b\x59\x31\xb6\x53\x76\xc7\xf5\x68\xfa\x6c\x8a\xe5\x97\xd3\x8c\xf8\x72\x7a\x39\x05\x63\xe7\xf3\x34\x81\xe0\x98\x02\x05\x12\xfa\xaf\x93\xeb\x94\xbf\x8f\xb9\xb3\x53\xf6\xda\x4e\xed\x0d\x73\x6c\x3f\xca\xf1\xc7\xe2\x67\x00\x00\x00\xff\xff\x4c\x49\xbf\x6f\x24\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4132, mode: os.FileMode(420), modTime: time.Unix(1567424689, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
