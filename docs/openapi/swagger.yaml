definitions:
  cart.AdditionalData:
    properties:
      customAttributes:
        additionalProperties:
          type: string
        description: CustomAttributes list of key values
        type: object
      reservedOrderID:
        description: ReservedOrderID is an ID already known by the Cart of the future
          order ID
        type: string
    type: object
  cart.Address:
    properties:
      additionalAddressLines:
        items:
          type: string
        type: array
      city:
        type: string
      company:
        type: string
      country:
        type: string
      countryCode:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middleName:
        type: string
      postCode:
        type: string
      regionCode:
        type: string
      salutation:
        type: string
      state:
        type: string
      street:
        type: string
      streetNr:
        type: string
      telephone:
        type: string
      title:
        type: string
      vat:
        type: string
    type: object
  cart.AppliedDiscount:
    properties:
      applied:
        $ref: '#/definitions/domain.Price'
        description: 'how much of the discount has been subtracted from cart price,
          IMPORTANT: always negative'
        type: object
      campaignCode:
        description: unique code of the underlying campaign or rule e.g. "summer-campaign-2018"
        type: string
      couponCode:
        description: code of discount e.g. provided by user "summer2018"
        type: string
      isItemRelated:
        description: flag indicating if the discount is applied due to item in cart
        type: boolean
      label:
        description: readable name of discount "Super Summer Sale 2018"
        type: string
      sortOrder:
        description: indicates in which order discount have been applied, low value
          has been applied before high value
        type: integer
      type:
        description: to distinguish between discounts
        type: string
    type: object
  cart.AppliedDiscounts:
    items:
      $ref: '#/definitions/cart.AppliedDiscount'
    type: array
  cart.AppliedGiftCard:
    properties:
      applied:
        $ref: '#/definitions/domain.Price'
        description: how much of the gift card has been subtracted from cart price
        type: object
      code:
        type: string
      customAttributes:
        additionalProperties: true
        description: additional custom attributes
        type: object
      remaining:
        $ref: '#/definitions/domain.Price'
        description: how much of the gift card is still available
        type: object
    type: object
  cart.Cart:
    properties:
      additionalData:
        $ref: '#/definitions/cart.AdditionalData'
        description: AdditionalData   can be used for Custom attributes
        type: object
      appliedCouponCodes:
        items:
          $ref: '#/definitions/cart.CouponCode'
        type: array
      appliedGiftCards:
        description: List of applied gift cards
        items:
          $ref: '#/definitions/cart.AppliedGiftCard'
        type: array
      authenticatedUserID:
        type: string
      belongsToAuthenticatedUser:
        description: BelongsToAuthenticatedUser - false = Guest Cart true = cart from
          the authenticated user
        type: boolean
      billingAddress:
        $ref: '#/definitions/cart.Address'
        description: BillingAddress - the main billing address (relevant for all payments/invoices)
        type: object
      defaultCurrency:
        type: string
      deliveries:
        description: Deliveries - list of desired Deliveries (or Shipments) involved
          in this cart
        items:
          $ref: '#/definitions/cart.Delivery'
        type: array
      entityID:
        description: EntityID is a second identifier that may be used by some backends
        type: string
      id:
        description: ID is the main identifier of the cart
        type: string
      paymentSelection:
        $ref: '#/definitions/cart.PaymentSelection'
        description: PaymentSelection - the saved PaymentSelection (saves "how" the
          customer want to pay)
        type: object
      purchaser:
        $ref: '#/definitions/cart.Person'
        description: Purchaser - additional infos for the legal contact person in
          this order
        type: object
      totalitems:
        description: Additional non taxable totals
        items:
          $ref: '#/definitions/cart.Totalitem'
        type: array
    type: object
  cart.CouponCode:
    properties:
      code:
        type: string
      customAttributes:
        additionalProperties: true
        description: CustomAttributes can hold additional data for coupon code - keys
          and values are project specific
        type: object
    type: object
  cart.Delivery:
    properties:
      cartitems:
        description: Cartitems - list of cartitems
        items:
          $ref: '#/definitions/cart.Item'
        type: array
      deliveryInfo:
        $ref: '#/definitions/cart.DeliveryInfo'
        description: DeliveryInfo - The details for this delivery - normally completed
          during checkout
        type: object
      shippingItem:
        $ref: '#/definitions/cart.ShippingItem'
        description: "ShippingItem\t- The Shipping Costs that may be involved in this
          delivery"
        type: object
    type: object
  cart.DeliveryInfo:
    properties:
      additionalData:
        additionalProperties:
          type: string
        description: AdditionalData  - Possibility for key value based information
          on the delivery - can be used flexible by each project
        type: object
      carrier:
        description: Carrier - Optional the name of the Carrier that should be responsible
          for executing the delivery
        type: string
      code:
        description: |-
          Code - is a project specific identifier for the Delivery - you need it for the AddToCart Request for example
          The code can follow the convention in the Readme: Type_Method_LocationType_LocationCode
        type: string
      deliveryLocation:
        $ref: '#/definitions/cart.DeliveryLocation'
        description: DeliveryLocation The target Location for the delivery
        type: object
      desiredTime:
        description: DesiredTime - Optional - the desired time of the delivery
        type: string
      method:
        description: Method - The shippingmethod something that is project specific
          and that can mean different delivery qualities with different deliverycosts
        type: string
      workflow:
        description: Type - The Type of the Delivery - e.g. delivery or pickup - this
          might trigger different workflows
        type: string
    type: object
  cart.DeliveryLocation:
    properties:
      address:
        $ref: '#/definitions/cart.Address'
        description: Address -  (only relevant for type address)
        type: object
      code:
        description: Code - optional identifier of this location/destination - is
          used in special destination Types
        type: string
      type:
        description: Type - the type of the delivery - use some of the constant defined
          in the package like DeliverylocationTypeAddress
        type: string
      useBillingAddress:
        description: UseBillingAddress - the address should be taken from billing
          (only relevant for type address)
        type: boolean
    type: object
  cart.ExistingCustomerData:
    properties:
      id:
        description: ID of the customer
        type: string
    type: object
  cart.Item:
    properties:
      additionalData:
        additionalProperties:
          type: string
        type: object
      appliedDiscounts:
        $ref: '#/definitions/cart.AppliedDiscounts'
        description: AppliedDiscounts contains the details about the discounts applied
          to this item - they can be "itemrelated" or not
        type: object
      externalReference:
        description: |-
          ExternalReference can be used by cart service implementations to separate the representation in an external
          cart service from the unique item ID
        type: string
      id:
        description: ID of the item - needs to be unique over the whole cart
        type: string
      marketplaceCode:
        type: string
      productName:
        type: string
      qty:
        type: integer
      rowPriceGross:
        $ref: '#/definitions/domain.Price'
        description: RowPriceGross
        type: object
      rowPriceNet:
        $ref: '#/definitions/domain.Price'
        description: RowPriceNet
        type: object
      rowTaxes:
        $ref: '#/definitions/cart.Taxes'
        description: RowPriceGross
        type: object
      singlePriceGross:
        $ref: '#/definitions/domain.Price'
        description: SinglePriceGross brutto (gross) for single product
        type: object
      singlePriceNet:
        $ref: '#/definitions/domain.Price'
        description: SinglePriceNet net price for single product
        type: object
      sourceID:
        description: Source Id of where the items should be initial picked - This
          is set by the SourcingLogic
        type: string
      variantMarketPlaceCode:
        description: VariantMarketPlaceCode is used for Configurable products
        type: string
    type: object
  cart.PaymentSelection:
    type: object
  cart.Person:
    properties:
      address:
        $ref: '#/definitions/cart.Address'
        type: object
      existingCustomerData:
        $ref: '#/definitions/cart.ExistingCustomerData'
        description: ExistingCustomerData if the current purchaser is an existing
          customer - this contains infos about existing customer
        type: object
      personalDetails:
        $ref: '#/definitions/cart.PersonalDetails'
        type: object
    type: object
  cart.PersonalDetails:
    properties:
      dateOfBirth:
        type: string
      nationality:
        type: string
      passportCountry:
        type: string
      passportNumber:
        type: string
    type: object
  cart.ShippingItem:
    properties:
      appliedDiscounts:
        $ref: '#/definitions/cart.AppliedDiscounts'
        type: object
      priceNet:
        $ref: '#/definitions/domain.Price'
        type: object
      taxAmount:
        $ref: '#/definitions/domain.Price'
        type: object
      title:
        type: string
    type: object
  cart.Tax:
    properties:
      amount:
        $ref: '#/definitions/domain.Price'
        type: object
      rate:
        type: string
      type:
        type: string
    type: object
  cart.Taxes:
    items:
      $ref: '#/definitions/cart.Tax'
    type: array
  cart.Teaser:
    properties:
      deliveryCodes:
        items:
          type: string
        type: array
      itemCount:
        type: integer
      productCount:
        type: integer
    type: object
  cart.Totalitem:
    properties:
      code:
        type: string
      price:
        $ref: '#/definitions/domain.Price'
        type: object
      title:
        type: string
      type:
        type: string
    type: object
  controller.CartAPIResult:
    properties:
      cartTeaser:
        $ref: '#/definitions/cart.Teaser'
        type: object
      cartValidationResult:
        $ref: '#/definitions/validation.Result'
        type: object
      data:
        type: object
      dataValidationInfo:
        type: string
      error:
        $ref: '#/definitions/controller.resultError'
        description: Contains details if success is false
        type: object
      success:
        type: boolean
    type: object
  controller.getCartResult:
    properties:
      cart:
        $ref: '#/definitions/cart.Cart'
        type: object
      cartValidationResult:
        $ref: '#/definitions/validation.Result'
        type: object
    type: object
  controller.resultError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  domain.Price:
    type: object
  forms.AddressForm:
    properties:
      addressLine1:
        type: string
      addressLine2:
        type: string
      city:
        type: string
      company:
        type: string
      country:
        type: string
      countryCode:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      middleName:
        type: string
      phoneAreaCode:
        type: string
      phoneCountryCode:
        type: string
      phoneNumber:
        type: string
      postCode:
        type: string
      regionCode:
        type: string
      salutation:
        type: string
      state:
        type: string
      street:
        type: string
      streetNr:
        type: string
      title:
        type: string
      vat:
        type: string
    required:
    - email
    - firstname
    - lastname
    type: object
  forms.BillingAddressForm:
    $ref: '#/definitions/forms.AddressForm'
  validation.ItemValidationError:
    properties:
      errorMessageKey:
        type: string
      itemID:
        type: string
    type: object
  validation.Result:
    properties:
      commonErrorMessageKey:
        type: string
      hasCommonError:
        type: boolean
      itemResults:
        items:
          $ref: '#/definitions/validation.ItemValidationError'
        type: array
    type: object
info:
  contact:
    email: flamingo@aoe.com
    name: Flamingo
    url: https://gitter.im/i-love-flamingo/community#
  license:
    name: MIT
  title: Flamingo Commerce Modules
  version: "1.0"
paths:
  /api/v1/cart:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: cleans the cart and returns the cleaned cart
      tags:
      - cart
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.getCartResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Get the current cart
      tags:
      - cart
  /api/v1/cart/applycombinedvouchergift:
    post:
      consumes:
      - application/json
      description: Use this if you have one user input and that input can be used
        to either enter a voucher or a giftcart
      parameters:
      - description: the couponCode that should be applied as giftcart or voucher
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Giftcart or Voucher (autodetected)
      tags:
      - cart
  /api/v1/cart/applygiftcard:
    put:
      consumes:
      - application/json
      parameters:
      - description: the couponCode that should be applied as giftcart
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Giftcart
      tags:
      - cart
  /api/v1/cart/applyvoucher:
    put:
      consumes:
      - application/json
      parameters:
      - description: the couponCode that should be applied
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Apply Voucher Code
      tags:
      - cart
  /api/v1/cart/billing:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Data need to be posted as application/x-www-form-urlencoded
      parameters:
      - description: billing form
        in: body
        name: billingAddressForm
        required: true
        schema:
          $ref: '#/definitions/forms.BillingAddressForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: adds billing infos to cart
      tags:
      - cart
  /api/v1/cart/delivery/{deliveryCode}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: the idendifier for the delivery in the cart
        in: path
        name: deliveryCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: cleans the given delivery from the cart
      tags:
      - cart
  /api/v1/cart/delivery/{deliveryCode}/additem:
    post:
      consumes:
      - application/json
      parameters:
      - description: the idendifier for the delivery in the cart
        in: path
        name: deliveryCode
        required: true
        type: string
      - description: the product idendifier that should be added
        in: query
        name: marketplaceCode
        required: true
        type: string
      - description: optional the product idendifier of the variant (for configurable
          products) that should be added
        in: query
        name: variantMarketplaceCode
        type: string
      - description: optional the qty that should be added
        in: query
        name: qty
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Add Item to cart
      tags:
      - cart
  /api/v1/cart/removeGiftCard:
    post:
      consumes:
      - application/json
      parameters:
      - description: the couponCode that should be deleted as giftcart
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Remove Giftcart
      tags:
      - cart
  /api/v1/cart/removevoucher:
    delete:
      consumes:
      - application/json
      parameters:
      - description: the couponCode that should be applied
        in: query
        name: couponCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controller.CartAPIResult'
      summary: Remove Voucher Code
      tags:
      - cart
swagger: "2.0"
