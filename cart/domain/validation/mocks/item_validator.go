// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	decorator "flamingo.me/flamingo-commerce/v3/cart/domain/decorator"

	domain "flamingo.me/flamingo-commerce/v3/product/domain"

	mock "github.com/stretchr/testify/mock"

	web "flamingo.me/flamingo/v3/framework/web"
)

// ItemValidator is an autogenerated mock type for the ItemValidator type
type ItemValidator struct {
	mock.Mock
}

type ItemValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *ItemValidator) EXPECT() *ItemValidator_Expecter {
	return &ItemValidator_Expecter{mock: &_m.Mock}
}

// Validate provides a mock function with given fields: ctx, session, _a2, deliveryCode, request, product
func (_m *ItemValidator) Validate(ctx context.Context, session *web.Session, _a2 *decorator.DecoratedCart, deliveryCode string, request cart.AddRequest, product domain.BasicProduct) error {
	ret := _m.Called(ctx, session, _a2, deliveryCode, request, product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *decorator.DecoratedCart, string, cart.AddRequest, domain.BasicProduct) error); ok {
		r0 = rf(ctx, session, _a2, deliveryCode, request, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ItemValidator_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ItemValidator_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - ctx context.Context
//   - session *web.Session
//   - _a2 *decorator.DecoratedCart
//   - deliveryCode string
//   - request cart.AddRequest
//   - product domain.BasicProduct
func (_e *ItemValidator_Expecter) Validate(ctx interface{}, session interface{}, _a2 interface{}, deliveryCode interface{}, request interface{}, product interface{}) *ItemValidator_Validate_Call {
	return &ItemValidator_Validate_Call{Call: _e.mock.On("Validate", ctx, session, _a2, deliveryCode, request, product)}
}

func (_c *ItemValidator_Validate_Call) Run(run func(ctx context.Context, session *web.Session, _a2 *decorator.DecoratedCart, deliveryCode string, request cart.AddRequest, product domain.BasicProduct)) *ItemValidator_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(*decorator.DecoratedCart), args[3].(string), args[4].(cart.AddRequest), args[5].(domain.BasicProduct))
	})
	return _c
}

func (_c *ItemValidator_Validate_Call) Return(_a0 error) *ItemValidator_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ItemValidator_Validate_Call) RunAndReturn(run func(context.Context, *web.Session, *decorator.DecoratedCart, string, cart.AddRequest, domain.BasicProduct) error) *ItemValidator_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewItemValidator creates a new instance of ItemValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemValidator {
	mock := &ItemValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
