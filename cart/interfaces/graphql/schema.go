// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcf\x6f\xdb\x38\x16\xbe\xe7\xaf\xb0\xb1\x17\x0f\x50\x2c\xb0\x7b\xf4\xcd\xb1\xd3\xc2\x98\x26\x4d\x13\x4f\xf7\x50\x14\x01\x23\x3d\xdb\xdc\x52\xa2\x86\xa4\x92\x08\x8b\xf9\xdf\x17\xa4\x48\x89\x3f\x25\x36\x8b\x19\xa0\xd8\xcc\x61\x26\x22\x3f\x3e\x3e\x92\x1f\x1f\x3f\x3e\x7a\x44\xd7\xc0\x62\x4b\xab\x0a\x58\x01\x0f\x3b\x28\x28\x43\x02\xca\x2d\x62\x62\xf1\x9f\x8b\xc5\x62\xb1\x28\x10\x13\xeb\x11\x22\x6b\x96\xaa\xa2\x34\xe0\x1d\x10\xfc\x04\x0c\x03\x5f\x2f\xbe\x3a\xc0\x9d\x07\xe9\x96\xdf\x54\xd3\x13\x84\x55\x97\xdd\x96\x96\xb0\x2a\xf5\xa7\xfc\x58\x2f\xee\x05\xc3\xf5\x69\xf9\x8b\xe7\x40\xd0\xd8\x58\xdd\x10\x72\x8b\xba\x0a\x6a\x71\x07\xbf\xb7\x98\x41\xb9\x17\x50\x71\xaf\xf9\xc3\x2d\xc3\x85\xae\x5a\x0e\x83\xbc\x6f\xab\x0a\xb1\xce\xc7\xea\xe2\xe5\xc5\x1f\x17\x17\xee\x6c\xd9\xd5\x7a\xb2\x4a\xcc\x0b\xda\xd6\xc2\xef\x71\xd3\x34\x04\x43\xb9\x33\xd5\x0a\xcc\xdb\xca\x2f\xb7\x9a\x29\x1f\x3d\xdc\x07\x7c\x14\x5b\xc4\xca\x24\xee\x03\x43\x75\x79\xa0\x02\x91\x7f\x61\x71\x9e\x85\x2b\xa4\xe9\xdc\x69\xb1\xa9\x64\x51\xb4\xdd\x19\xf1\xd0\xed\x4b\x4a\x09\xa0\x7a\x39\x58\x46\x2f\x10\x4c\xbb\x2a\x8c\xcf\xa3\x9e\x3f\x5c\xae\x17\xfb\x5d\x6f\x05\x6a\x81\x45\xb7\xdf\x0d\x2c\x50\xa5\x8f\x98\x10\x5c\x9f\x36\x65\xc9\x80\x07\xd3\xdc\x97\x2a\x60\xd3\xb2\xe2\x8c\x38\x30\x0f\x73\x0b\x8c\xd3\x5a\x33\x38\x4d\x5c\x87\xaf\xa8\x2c\xb1\xc0\xb4\x46\x64\x87\x04\x0a\x3b\xb5\x2a\x7b\x2f\x9b\x9e\x84\xf7\x40\xa0\x90\x75\x01\x01\xbd\xfa\x7e\x68\x40\x68\x7d\xe2\x07\xba\x69\xc5\x59\x8e\xbe\x90\x14\xff\x4d\x0d\xc1\x99\x5f\xe4\xd7\xfb\x93\x84\xfa\xf5\xd9\xd2\xb6\xa1\xb5\xdc\x49\xc1\x00\xc7\x2a\x3d\xc4\x12\x8e\xa8\x25\x62\xdb\x32\x06\x75\xd1\xb9\xf6\x84\xe4\x09\xee\x77\x92\x6b\xe7\x60\x6a\xb4\x19\xf9\xe7\xb6\xa7\xce\xbe\xd6\x81\xa2\x61\xb4\x6c\x0b\xe1\x17\x63\xee\xcc\x02\x94\xde\x28\x4f\x03\x97\x7d\x1a\x2e\x1d\xfe\x1e\xd0\x4b\x9c\xad\x06\xf6\xa8\x60\x37\x90\x00\xa0\x60\x6f\x7d\x8d\xed\x5d\x53\x6f\x87\xb0\xd7\x44\x2e\x37\x60\xed\xac\x46\xb2\x67\xdd\xec\xdb\x85\x01\x5c\x23\x5c\xdf\x9f\x71\xd3\xe0\xfa\x74\x75\x8d\x30\x71\x57\x06\xf3\xab\xaa\x11\x9d\x37\x75\x67\xc4\x8d\xe1\xf7\x94\x4d\x7a\x37\xb4\x0b\x47\x25\xe3\xe3\x7e\xb7\xc2\xea\x3f\xb3\x23\x5a\x1a\x03\xb9\x0d\x25\x6a\x68\xa4\x96\xe8\xb3\xe8\x56\x15\x62\xdf\x41\xdc\x12\x54\x80\xe3\xea\xbb\xc5\x13\x62\x18\xd5\xc2\x1f\xc0\xbe\x16\x63\xcf\x57\x2f\x02\x58\x8d\xc8\x1d\x1c\x41\xf2\x18\x56\x0c\x8e\x33\x1e\x98\xd6\x5f\x68\x5b\x9c\x81\xdd\xa3\x27\x5c\x9f\x82\x90\x39\x78\xaa\x58\x0f\x91\xc0\xf2\xd0\x97\x6a\x83\xbc\xad\xcc\xb2\x25\x99\xe7\x62\x64\xfc\x4d\x1e\x04\xc3\xba\x9a\x06\x5b\xca\x83\xb8\x8b\x08\x31\xd5\x07\x2c\x48\x84\x50\x66\x33\x7c\x60\x94\x27\xfa\x70\x20\x19\x3e\x59\xfb\x2b\x0b\xed\x1e\x3a\xd3\x3b\xb7\xba\xa1\xb5\x5c\xa4\x3b\x20\xea\xb4\xcf\x6b\xf4\x83\x2d\xc6\xf3\x6c\x0c\x8a\x91\x7d\x31\xe8\x0a\xcd\x2c\x77\x1f\x1a\x0a\x2b\x4d\x71\xd9\x1d\xba\x06\x56\xf2\x94\xf3\xd9\x3a\x1d\x3d\xc7\x90\xb7\x3d\x23\x76\x82\x60\x12\x1f\x74\xb9\x76\x6b\x74\xdd\x8a\x5e\x7e\x24\xb8\x83\x0a\xe1\x1a\xd7\xa7\x18\x26\x2e\x6a\x2c\x7d\x64\xa9\x40\x2d\xa5\xbc\x31\x68\xf0\xb0\x9f\xfa\x91\x70\xcd\xc3\xc9\x36\xf7\x16\x48\xb7\x13\xc3\x24\xfa\x73\xa5\xdb\x0c\xb3\xbc\xfc\x36\xe9\xbc\xf1\x47\xfb\x8f\x26\x08\xe0\xc5\xa9\x49\xb3\xb6\xcb\x19\xa6\x4d\xd4\xdd\xd7\x47\xea\x50\x61\xb2\x93\x61\x8c\x19\x3d\x14\x19\x56\x0f\xe8\x25\xc3\x92\x6c\xe8\x92\x5a\x4a\xec\xf5\xe2\x3d\xa1\x48\xa4\x2d\x83\xa1\x48\x54\x1f\x48\xc4\x37\xeb\x68\xe8\x37\x06\x7a\x39\x58\x9d\xf9\x61\x59\xb6\x49\x0e\x45\xc5\x58\xdd\xa3\x2b\x2c\x86\x93\x60\x3f\x6a\x10\xf5\xa9\x8b\xe3\x47\xad\x62\x11\xae\x05\xb0\x23\x2a\x82\xe5\xf0\x64\x9a\xee\xf7\x84\x04\x3c\xa3\x98\x46\xfa\x82\x48\x0b\xe1\xf4\xc6\xc7\xb2\xeb\x25\x57\xd0\x09\xae\x1a\x02\xb2\x88\xff\x95\xee\x04\x77\x2a\x73\xa5\xd1\x9f\x93\xc7\xfe\x70\x17\x8c\x6e\xdd\x9d\x5d\x1b\xb9\x02\x9a\xbd\x7a\xd9\xed\xcb\x95\xbe\x02\x24\xaf\x7c\x12\x98\x1a\x41\xd4\x71\xb9\xf7\x12\xce\xcb\xaa\x21\xbc\x45\xf9\x9b\x08\x69\x9e\x3d\x3b\x2a\xcc\x9f\xb3\x33\xea\x36\x4f\xdc\xce\x69\xdb\x1f\x38\x6d\x5f\x73\xd8\xfe\xf0\x59\xfb\x83\xda\xe2\x15\xd2\xe2\x8c\xb8\x66\xdf\xf4\xe9\x66\x2f\xbe\x39\xdd\x9c\x20\x2a\x4b\x9e\x29\xfb\x7e\x24\xf4\xd9\x2d\xad\x40\x9c\x69\xe9\x96\x15\x88\x31\x2c\xc5\xa0\x5d\x68\xb8\xf7\x91\x16\x28\x72\xff\xdb\x79\xd5\xba\x0d\xc7\x0c\xca\x03\xae\x60\xbd\x90\xff\x1e\x92\x1a\xce\x05\x73\xf5\x1d\x3a\x5b\x51\x38\xf7\x3e\x07\xf9\x2b\x74\x8e\x02\x94\x88\xbf\x79\x30\x6b\x2e\xf8\x7a\x51\xa1\xe6\x2b\xef\xc3\xe2\xbf\x39\xad\xff\x7e\x87\x9e\xaf\x81\x73\x74\x82\x8c\xc6\xd7\xa8\x19\x51\xae\xdb\x16\xd0\x77\xff\x1a\x35\x81\xef\x16\xdc\x1f\xc3\xe4\x8a\x9a\xe9\x5c\xe8\x65\x0d\x4f\x34\x34\x9b\x36\x68\x39\x5c\x7a\x29\x06\x47\x50\x65\x9c\xb7\x11\x8d\x20\xa4\x1c\x77\x5d\x69\x24\x73\x53\x1b\x57\x4c\x6e\x7b\x94\xce\x1a\xc5\x92\x4d\xd6\x81\x60\x6f\xa3\x7d\x5d\xc8\xf0\x92\x10\x03\x4e\xc5\xcc\xa9\xec\x77\x38\x25\x08\x3c\xac\xa6\xe5\x63\xb7\x45\x55\x83\xf0\x49\xa9\xef\x55\x61\x7d\x58\x2a\x21\x67\x98\x8f\xbd\xc4\x38\x62\x22\x80\x4d\xa9\x8c\xb0\x79\xce\xd8\x06\x39\x6c\x3b\xe8\xc6\x03\xeb\x12\xb1\x70\xab\x08\x7a\x04\xd2\x8b\x12\xbf\x4a\x2f\xa9\xa9\x4c\xeb\xb3\x68\x6b\xcc\xad\x38\xec\x27\xe3\x28\x13\x9f\x58\x29\x23\x94\x56\x43\x73\x02\xc0\xe2\x2d\x0e\xcf\xba\xe1\x8c\xd3\xea\xcb\xe1\x8f\x2a\x89\x9b\xb7\xad\xda\x59\x3e\xff\xc6\xee\x45\x5c\x95\x0e\x68\x82\x74\x80\xaa\xd4\x19\x81\xeb\x44\xca\xc0\xf6\xf2\x06\x55\x5e\x05\xa7\x2d\x2b\xc0\xcf\x9c\xfd\x2e\x3a\x2b\x45\x35\x1f\x4f\x5d\x84\xd2\x5b\x01\x26\x33\x84\x0f\x37\x3a\xbf\x53\x1f\xae\x97\xb7\x1f\x05\xae\x4f\x04\x14\x4b\xa6\xee\xf4\x23\x2a\x99\x8c\x60\xf4\x79\xce\x8c\x81\xcc\xa5\xd2\x72\x03\xd3\x78\x5c\x30\xfa\xec\x67\x8c\xd5\x77\x6a\x53\xf6\xa1\x59\xd3\xe9\x09\x09\x6b\x5f\xc4\x77\xc8\x11\x33\x2e\x6a\x45\x82\x24\x86\xa0\x28\xc4\xe5\x23\x2e\x4b\x02\x37\x01\xca\x91\xde\x7d\xb0\x9f\xf4\x87\x23\xd2\x0a\x2d\x0d\x92\x18\xc1\x00\x22\x43\x0b\x31\x37\x6c\xca\xe7\x91\xa3\x7a\xde\x3e\xe2\x3a\x64\x69\x41\xab\x06\xd5\x5d\xd0\x9d\x13\xdb\xb0\x08\x01\x1e\xa6\xa1\x5c\x0c\xd1\x2f\xe9\xb5\xba\x59\x4e\xda\x61\x70\xc2\x56\x1c\x8d\xfb\x23\x69\xc4\x66\x7c\xee\x31\x81\x21\x67\xc5\x80\x40\x73\xa6\xf5\x14\x3b\xa0\x52\xc9\xd7\xa4\xcf\x51\xa2\xf6\x8f\x0d\xe6\xf2\x3d\xff\x66\xa1\xe0\x52\x01\x09\x84\x89\x8f\xbc\x75\x6b\x4d\xfc\xc4\x5c\xe0\xfa\xb4\x6d\xb9\xa0\x15\xb0\xc8\x03\xc5\x55\x04\x12\x77\x37\x86\xf4\x62\xf6\xc4\x30\x07\xcf\xcc\x05\x0c\x09\xf8\x74\xbc\xc4\x4c\x9c\xbd\x98\x8c\x38\x6f\x28\xeb\x2f\xee\xac\x8b\x57\xde\xb4\xd5\xa3\x2f\xab\x6b\xd4\xf3\x58\xd1\x70\x72\xe2\xdd\x20\xaa\x1d\x52\xa1\xa6\x50\x63\xdb\x08\xc1\xf0\x63\x2b\xc0\x12\xae\x0c\x38\xb0\x27\x28\xd5\x69\x39\x9b\x10\x1a\x72\x77\xc9\x3b\x44\x4a\xf4\xe5\xa4\x5f\xa2\x5d\x8e\xf9\xc9\x68\x9f\x53\xfa\xc5\xe4\xfe\x92\xce\x0e\x02\x24\x1a\xf8\x4d\x0a\x31\x79\xf3\xba\x1b\x11\x33\xb9\xc5\x2f\x88\xe0\x52\xad\xe3\x1d\xf0\x96\x18\x45\x75\x46\x5c\xe2\x68\x7d\xc5\x18\x1d\xc3\x99\xa7\xbd\x07\x80\xbe\x96\xfc\x0a\x1e\x7b\xb0\xd2\x41\xd2\x2e\xb7\xf7\xaa\x97\x94\x92\x5a\x64\xf4\x43\x19\x4c\xa6\x13\x23\x58\x4b\x1c\x49\x9a\xc4\xc3\x45\xca\xcb\x44\xe2\x4f\xaa\x17\xcd\xbc\xf1\x5e\x4a\xe5\xb7\xd9\x08\x5e\x07\xee\x83\xce\x4c\x1c\x7a\x70\xef\x34\xef\x29\x33\xb4\x3d\x52\x56\xf5\x31\xa3\xff\x67\xae\x99\x0a\x1e\x0b\x75\xea\x9a\x39\x89\x24\x58\x1e\x24\xd4\x5a\xea\x21\xd1\xd2\x30\x5a\x00\xe7\x96\x4a\x4d\xbd\xab\xeb\x47\xc1\x21\xed\x6e\x71\xe5\x4f\xee\x3a\x62\xc0\x4c\x16\x06\x52\x2a\x0a\x84\x89\x4e\xd5\xea\xfd\x00\x18\xb4\x5f\x0d\x0c\x91\xa9\x36\xd3\xf4\x1b\x21\xda\x87\x2a\xc1\x7c\xfd\x80\xfb\xb1\xbf\x63\x4c\xb3\xc1\xf3\xf5\x55\x96\x87\xf9\x70\xa5\x75\x2e\xfd\xac\xb0\xfc\xa6\xdf\x66\xf5\x9b\x51\x6d\xff\x58\xcf\x63\xfe\x99\xc2\xfc\x3f\x2b\x3c\xa5\xee\xac\x48\x1a\xc3\x64\x28\xbc\x0b\x5c\x37\xad\x18\xc9\x1d\xf2\x7a\xaf\x00\x39\xc4\xfe\x0b\x79\x9d\x41\xeb\x0c\x56\x67\x90\x3a\x83\xd3\x19\x94\xce\x60\x74\x06\xa1\x33\xf8\x9c\x41\xe7\x0c\x36\x67\x90\x39\x83\xcb\x19\x54\xce\x60\x72\x2e\x91\x3d\x1e\x9b\x0c\xea\x1b\x91\xdf\x88\xfc\x53\x13\x59\x3f\xac\x3a\x6c\xb6\x99\x5c\xba\x55\xeb\xf9\x2d\xd0\xd3\x72\xee\x59\xc0\x3c\x0e\x5e\x3b\x2f\x44\x4e\xd5\xd6\x7d\x28\x8a\x88\xf8\x69\x0d\x15\x71\x90\x5b\x22\x3e\x54\x97\x91\x06\x49\x99\x19\xc1\x66\x5d\x10\x22\xed\x86\x1b\xc2\xdc\x9c\xc5\x07\xbf\x08\xde\xd9\x7a\x42\x45\x66\xef\x4f\xbe\x07\x24\xc6\xf6\xa6\x5a\xdf\x54\xeb\xcf\xa5\x5a\xe1\x45\x40\x5d\xaa\x0c\xd3\xe2\x73\x3b\xfe\x42\xc2\xa1\xfb\x3a\xf1\xbf\x01\x2c\x43\xa8\xd9\x55\x34\xf8\x09\xa4\x9f\xdc\x09\xba\xbf\xd6\xfc\xf3\x3d\xd8\x94\xe5\x81\x4a\x13\xab\xe0\xc5\x67\xbf\x5b\xbe\x1b\xdf\x65\xde\xc5\xc3\xc6\x2f\x99\xee\xef\x80\x80\x00\xfb\xd1\x78\xfe\x77\xbb\xf3\xf6\xf6\x02\xaa\xe1\xe7\xae\xca\xdf\xff\xc9\xe8\x6f\x4d\x89\x7a\xa3\x9f\x45\x97\x61\xd7\x9a\x9e\xdc\x2e\xd4\x6a\xf5\xfd\xb8\x31\x7a\x85\xc6\x68\xb7\x9e\xbd\xe8\x04\x3f\xdd\x0a\x71\xe9\x8e\xbd\x14\xcf\xca\xff\x1d\xd3\x3b\xff\xf7\x16\x41\x6f\xd1\x24\x51\xac\xc3\x4d\xd3\x90\x6e\x4c\x9f\x7e\x62\x26\x1f\xba\x2a\xb2\x16\x28\x62\xf2\x0e\x2a\xfa\x04\x83\x9d\x93\xfe\x23\x6f\xc1\x93\xf6\x46\x1f\x57\xf6\x43\xf2\x2b\xec\xf5\x73\xec\x9d\x61\xc0\x35\xdd\xbb\x8d\xfe\xce\x21\xe7\x1f\x17\xff\x0d\x00\x00\xff\xff\x26\x23\xfb\x21\x27\x34\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
