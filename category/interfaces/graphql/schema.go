// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xcd\x4e\xf3\x30\x10\xbc\xe7\x29\xb6\xb7\x56\xfa\x9e\xc0\xc7\xa6\xfa\xa4\x8a\x0b\x50\xc4\xa5\xaa\xd0\xe2\x2c\x8d\xd5\xc4\x0e\xf6\xba\x22\x20\xde\x1d\xe5\xa7\x69\x9c\xba\x9c\x90\x20\xb7\xcc\xec\xcf\xcc\xee\x5a\x69\x26\xfb\x82\x92\x20\x35\x65\x49\x56\xd2\x53\x8a\x4c\x7b\x63\x6b\xf8\x48\x00\x00\xa4\xc9\x48\xc0\x86\xad\xd2\xfb\x59\x8b\x68\x2c\x27\x48\x85\x9c\x87\x08\x4a\x56\x47\x12\xb0\x34\xa6\x20\xd4\x7d\x98\x35\xa5\x61\xca\x46\xf0\x67\x92\x24\x5c\x57\x91\xf6\x2b\x64\x04\x55\x56\x05\x95\xa4\xd9\xfd\x9e\xbe\xc8\x88\x1e\x2c\xd1\xcf\xb7\x77\xfe\xb9\x29\xec\x04\x6c\x83\x4e\xbb\x96\xcd\xd1\xa5\xb9\x2a\x32\x37\xc9\xca\x8c\xf4\xcd\x84\x52\xe3\x35\x0b\x58\x6b\x6e\x55\xc7\x87\xda\x0a\x8f\x0d\xb5\x21\xfe\xb6\x21\xa5\x2b\xcf\x67\xc1\x1b\x42\x2b\xf3\x1b\xaa\x1f\xb1\xf0\xf4\x5f\x15\x4c\xb6\x5f\xc9\x21\x94\x76\x14\xb0\xed\xff\x77\x57\x0b\xdd\xd3\xab\x27\xc7\x7d\x85\x0a\xf7\xb4\x51\xef\x24\xe0\xfc\xad\x35\x0f\xdc\x18\x1f\x73\xce\x58\x5e\xd6\x21\xdb\xb5\x1e\xe8\x95\xb2\x24\x59\x19\x2d\x2e\xe8\x43\x60\xc6\xb5\x01\xdb\x6f\x0d\x77\x86\xe2\xab\x1e\x8c\x39\x5f\x9c\x7c\xc9\x9e\x13\x97\xe1\xc3\x0b\xc8\xbc\xe4\x71\xea\x28\xf6\xb6\x63\x83\xca\x8d\x00\x7a\x63\xd2\x19\xb4\x3a\xee\x3c\x0d\x4f\x33\x7a\x7e\xf3\xee\x54\x4e\x50\x3a\x3e\xb7\x85\x08\x2f\x72\x16\x2f\x33\x97\xb1\xe4\x7f\x83\xbd\x60\xa5\xe2\xca\xaa\x17\x91\x21\x4c\x9d\x7d\x05\x00\x00\xff\xff\x11\x3d\x5b\xf9\x1e\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
