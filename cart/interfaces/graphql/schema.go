// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdc\x38\xd2\xbe\xfb\x57\xd0\xfd\x5e\x7a\x82\xbc\x3b\xd8\x3d\xfa\xd6\xe9\x4e\x82\xc6\x4c\x9c\xc4\xf6\xcc\x1e\x02\xc3\xa0\xa5\xea\x6e\x22\x94\x28\x93\x94\x6d\x61\x91\xff\xbe\xe0\x97\x44\x52\xa4\x24\x27\xbb\x03\xcc\xee\xce\x61\x62\x89\xc5\xaa\x22\xeb\xa9\x0f\x16\xd5\xb2\x6b\x00\x6d\x59\x55\x01\x2f\xe0\x6e\x07\x05\xe3\x58\x42\xb9\xc5\x5c\xa2\x7f\x9c\x21\x84\x50\x81\xb9\xbc\x18\x48\xd4\xc8\xb9\x1e\x28\x1d\xf1\x0e\x28\x79\x04\x4e\x40\x5c\xa0\x2f\x01\xe1\x2e\x22\xe9\xce\x6f\xf5\xd4\x23\x8c\x87\xde\x74\x5b\x56\xc2\xba\xb4\x8f\xea\xe1\x02\x5d\x4b\x4e\xea\xe3\xf9\x4f\x91\x02\xa3\xc9\x8e\xeb\x86\xd2\x4f\xb8\xab\xa0\x96\x57\xf0\xd0\x12\x0e\xe5\x5e\x42\x25\xa2\xe9\x77\x9f\x38\x29\xec\xd0\x79\xbf\xc8\xeb\xb6\xaa\x30\xef\x62\x5a\xfb\xfa\xfc\xec\xdb\xd9\x59\xb8\x5b\xfe\xb0\xdd\xac\x92\x88\x82\xb5\xb5\x8c\x25\x6e\x9a\x86\x12\x28\x77\x6e\xd8\x48\x15\x6d\x15\x0f\x78\xf3\xb4\x92\x11\xdd\x7b\x72\x90\x5b\xcc\xcb\x2c\xdd\x7b\x8e\xeb\xf2\x86\x49\x4c\xff\x4e\xe4\x69\x96\x5c\x53\x3a\xe1\xc1\x8c\x4d\xa5\x5e\x25\xe7\x9d\xb0\x18\xab\xfd\x86\x31\x0a\xb8\xee\x17\x76\x83\x9f\x61\xb4\xef\xfa\xa5\xa3\xb0\x86\xba\x06\x0a\x85\x24\xac\x56\x14\xd7\x0d\x25\xf2\x77\x4c\x5b\x30\xf2\xdf\x74\x1f\x40\x9e\x58\x29\xd6\x95\xf9\xf7\x02\x7d\xb1\x98\xb8\xfd\x69\xa4\x5c\xd2\x42\xd6\x32\xa4\xbc\x40\xfb\x9d\x51\x0f\x6a\x49\x64\xb7\xdf\xf5\xf8\xd2\x6f\xef\x09\xa5\xa4\x3e\x6e\xca\x92\x83\x18\x19\xd0\xbc\xd5\x84\x4d\xcb\x8b\x13\x16\xc0\x23\x9a\x4f\xc0\x05\xab\xad\x6f\xe4\x5d\x22\xf0\x04\x5c\x96\x44\x2d\x1e\xd3\x1d\x96\x78\x2c\xd4\x1b\x34\x5a\x36\xd1\xae\x8d\xa0\x1d\x8d\x9b\xa5\x01\x65\xf5\x51\xdc\xb0\x4d\x2b\x4f\x6a\xf5\x85\x72\x9e\xdf\xf4\x12\x02\xc3\xe1\x78\x3c\xde\x24\x6c\x0c\xbf\x65\x6d\xc3\x6a\xe5\xa3\xa3\x05\x0e\x43\x76\x89\x25\x1c\x70\x4b\xe5\xb6\xe5\x1c\xea\xa2\x0b\xf9\x49\x05\x40\x62\x7c\x34\xe4\x73\xe3\x46\x2c\x1b\xf5\xe7\xd6\x60\x72\x5f\xdb\x10\xd4\x70\x56\xb6\x85\x8c\x5f\x13\x11\xec\x02\x94\xd1\x2a\x8f\xbd\x93\xc4\x10\x3a\x0f\x1c\xe3\x06\x3f\xa7\xdd\xc0\x91\xdd\x6b\xb2\x4b\xc8\x10\xe0\x91\xd3\x7e\x49\x45\x05\x37\xee\x07\xc7\xef\x89\x89\x61\x28\xdc\x79\x93\x7c\xb7\x39\x73\x04\x1f\x30\xa9\xaf\x4f\xa4\x69\x48\x7d\x7c\xfb\x01\x13\x1a\x5a\x86\x88\xb7\x55\x23\xbb\x68\xeb\x4e\x58\x38\xc6\xef\x18\x9f\xd4\xae\x9f\x37\x5e\x95\x8a\xbc\xfb\xdd\x9a\xe8\x7f\x66\x57\x74\xee\x18\x2c\x9d\xa8\xa8\xfa\x49\xda\x44\x9f\x65\xb7\xae\x30\xff\x0a\xf2\x13\xc5\x05\x04\xaa\xbe\x46\x8f\x98\x13\x5c\xcb\x78\x01\xfb\x5a\x0e\x92\xdf\x3e\x4b\xe0\x35\xa6\x57\x70\x00\x85\x63\x58\x73\x38\xcc\x68\xe0\x66\xff\xce\xda\xe2\x04\xfc\x1a\x3f\x92\xfa\x38\x8a\xc5\xbd\xa6\x1a\xf5\x90\x08\x2c\x77\xe6\xad\x65\x28\xda\xca\x99\x2d\x8b\xbc\x90\x46\x05\xf6\x6c\x86\x19\x4d\x78\xcf\x99\x10\x33\x53\x1c\x16\xdc\x9c\x2d\x13\xa3\x24\x80\x29\x75\xc3\x37\x44\xd2\x04\x08\x9d\x03\x69\x89\xd3\x3e\xb6\x44\xa9\xc8\x27\x97\xad\x3a\xc8\x80\xd3\xde\x5e\x5d\xb2\x5a\x19\xf6\x0a\xa8\xae\x3d\x96\x4d\x7a\xe1\x8c\x21\xb9\x0e\x81\x34\xe1\x4b\x7d\x95\x63\xd1\x18\xfa\xae\x83\xbd\xae\x70\xde\x74\x37\x5d\x03\x6b\x95\x19\x63\x84\x4f\x47\xdc\x21\x4c\x6e\x4f\x98\x1f\x61\xb4\x89\x77\xf6\xfd\x80\x87\x71\x99\x12\x47\x8f\x2b\xa8\x30\xa9\x15\xcc\x12\x34\xe9\x12\xcb\xab\xd6\xbc\x9a\xd4\x16\x76\xd1\x1a\x2c\x71\xef\x83\x66\x25\xc2\xe2\x70\x72\xce\xb5\x47\x64\xe7\xc9\x7e\x13\xe3\xbd\xb2\x73\xfa\x5d\x3e\xbf\x9d\x54\xde\xe9\x63\xf5\xc7\x13\x00\x88\x62\xdb\x24\x5b\x5f\xe5\x05\xac\x5d\xa4\xde\xd7\x07\x16\x40\x61\x52\x48\xbf\xc6\x05\x12\x8a\x05\x5c\x6f\xf0\xf3\x02\x4e\x6a\x62\x08\x6a\x55\xf0\x5f\xa0\x77\x94\x61\x99\xe7\x0c\x0e\x22\xc9\x9a\x42\x51\xdc\x7a\xe9\xc4\x38\x06\x7e\xbe\xf1\x84\xc5\xa1\x5c\xcd\xc9\x2e\x45\xc7\x65\x2b\x31\x2c\x46\xfa\xec\xb1\x1f\xea\x16\xfd\x68\x5f\xa7\xd3\xb3\x46\x11\xa9\x25\xf0\x03\x2e\x46\xe6\x88\x4a\x3b\x2b\xf7\x88\x25\x3c\xe1\x54\x5d\xa5\x0b\xe9\x8c\xa1\x5c\xb1\x3d\x06\x76\x24\xe5\x4e\x93\xe5\xf1\x9d\x24\xb7\xaa\x3d\xb4\x98\x92\x03\x19\x27\xb4\xf4\xac\xcf\x8e\xdc\xea\xa8\xa3\x4b\x26\xe8\x64\x31\x3b\xcd\xd9\x2a\x36\x46\x97\x39\x5f\x44\x88\x1b\x47\xd7\xb4\xd0\x9d\x29\x71\x47\x06\x22\x55\x43\x41\xbd\x12\x7f\x02\x53\x8e\x0e\xd5\xee\x4c\x6b\x1f\x27\xab\xb3\xbe\x19\x90\x8c\x96\x3b\x7f\x34\x2f\x3f\x29\x56\x05\xab\x8c\x68\x35\xd4\x6f\x41\xd2\xe1\x33\x39\x20\xe2\xe7\x87\xd1\xf9\xc2\x64\xe6\x08\xb1\xec\x04\x31\x77\x80\x78\x41\x79\xf2\x3d\xd5\xc9\x8b\x8b\x93\x17\x16\x63\xdf\x51\x8b\x9d\xb0\xb0\xd8\x99\x2e\x07\x7c\xe3\xbb\x72\x20\xc8\x3a\xea\xcd\x13\xe3\x5f\x0f\x94\x3d\xcd\xfb\x78\x81\x39\xd7\x01\xca\x7f\xe9\xb0\xf7\x2b\x2b\x70\xe2\x90\xbd\x8b\x86\xed\x1c\x41\x38\x94\x37\xa4\x82\x0b\xa4\xfe\x3f\x7f\xbe\xbf\xdb\xb6\x42\xb2\x6a\x23\x25\x27\xf7\xad\x54\x85\xd4\xe4\x92\x9d\x3c\x94\x8d\x62\x78\xb6\x79\xd1\x0a\x78\x13\x35\x3a\x82\x12\x6d\x41\x06\x4f\x54\x1d\x52\x15\xf8\xa1\x2a\x8d\x32\x6d\x0e\xd9\x72\xd2\x2f\x70\xbe\x29\x96\x6f\xa6\x49\xd7\xf4\x72\xef\xf7\x75\xa1\xfc\x2f\x53\x5e\x04\x03\x33\x79\x3e\x16\x38\x55\x62\x44\xb4\x36\xf8\xdc\x77\x5b\x5c\x35\x98\x1c\x75\x3d\xbf\x2e\xbc\x07\xaf\xee\x58\xb2\xcc\x7b\x53\xb4\x1c\x08\x95\xc0\xa7\xea\x96\xf1\xf4\x25\x6b\xeb\x0b\x6c\x5f\xc1\xd0\x61\xbc\x63\x09\x0a\x87\x28\xbe\x07\x6a\xca\x9c\x78\xc8\x9a\xd4\x0d\xe6\x2b\xbe\xe4\x6c\x22\xbc\x40\x15\xf7\x1a\x19\x97\x1f\x79\xa9\x5c\xd8\xd6\x57\x59\x2f\xf2\x92\x90\x67\xc2\xc4\xd1\xdd\xaf\xe7\x02\xfc\xe8\x37\x69\xf6\x3e\x57\xbf\xd7\x18\xf7\x0d\xa2\x90\xa4\x9b\x12\xcd\xa8\x29\xa1\x07\x6d\x5f\xe2\x43\xa6\x71\xe1\x6b\x79\x89\xab\x68\x40\xb0\x96\x17\x10\xf7\xef\x1e\x64\xe7\x35\xca\xc2\xe8\xf4\x0b\x74\xc1\x19\x7d\x4c\xa1\xab\x90\x11\xcd\x11\xa2\x4e\xe5\xfa\x2b\x74\xfe\x31\xd3\xfc\xd5\x9f\x11\x63\xa1\x31\xb9\x35\xaf\x59\x05\xa9\x8f\x14\x34\x4a\xa6\xba\x04\x03\x55\xb6\x25\xc2\xd9\xd3\x1c\x1b\x47\x32\xd7\xd0\x7b\x59\x60\xfa\x3f\xcb\x3a\xee\x88\xeb\xe7\x9c\x57\x9a\xd8\x6c\xf1\xf4\x88\xa5\xe7\x18\x69\x17\x39\x10\x2e\x64\xad\x51\x90\xa5\xa1\x38\x49\x12\x02\x92\x94\x25\x85\xcb\x11\x55\x50\x91\x9a\x68\x3f\xa9\x8f\xc0\xb4\x95\x36\x79\x66\x69\x24\x07\x48\x2c\x6d\x4c\x73\xc9\xa7\x74\x1e\x40\x6a\xf7\xed\x57\x52\x8f\x61\x5a\xb0\xaa\xc1\x75\x37\x12\x17\x04\x37\x22\xc7\x04\x11\x4d\xc3\x84\xec\xc3\x5f\x56\x6b\x7d\x58\x9d\xe4\xc3\xe1\x48\xbc\x40\x9a\xd6\x47\xe1\x88\xcf\xe8\x6c\x68\x46\x8c\x02\x8b\x01\x85\xe6\xc4\xea\x29\x74\x40\xa5\x7b\xc0\x59\x9d\x93\x40\x35\x77\x1e\xee\x3c\x3f\x7f\x75\xa2\xc9\x31\xdd\x81\xc4\x84\xc6\x94\x9f\xc2\x51\x17\x40\x89\x90\xa4\x3e\x9a\x5a\x09\x78\xa2\x8e\x7a\x9b\x20\x49\xab\x9b\xa2\x8c\x82\xf6\xc4\x32\x7b\xcd\xdc\x11\x05\x4b\xf8\x78\x78\x43\xb8\x3c\x45\x41\x19\x0b\xd1\x30\x6e\x7a\x01\xbc\x4b\x0f\x5e\xb6\xd5\x7d\x5c\x78\xd6\xd8\xe0\x58\xc3\x70\x72\xe3\xc3\x28\xea\xd2\x76\x54\x4f\xce\xd7\x9b\x06\x88\x02\xf8\x23\x94\x3a\x8b\xce\xb7\x9e\x62\x26\x56\xf6\xea\x3d\x48\x24\x1a\x28\xc8\x81\x14\x08\xbb\x61\x74\xdf\xa1\xaf\xd0\xad\x5c\xa6\x88\x83\xfd\x24\xef\xa9\x6e\x48\x44\x6a\xb5\xf0\xb9\x2f\xd3\xdf\x66\x9b\xfc\x59\x7d\x81\x20\xa4\x83\xb4\x3e\xa1\xcf\xf4\x32\x23\x66\x86\xc1\xbf\x4a\xf6\xe4\xba\xfb\xee\x6e\xf6\xd0\x94\x2b\xe2\x97\x34\xe8\x92\x22\x87\x0e\x76\x52\xe6\x54\x3d\xea\xba\xc3\x59\x65\xfb\x82\x32\x99\xc8\x5d\x93\x39\x7b\xd4\xbc\x1a\x28\x66\x2c\xf6\x3b\xa6\xa4\xd4\x6e\x79\x05\xa2\xa5\xae\x42\x3e\x61\xa1\xe8\x58\xfd\x96\x73\x36\x64\xa7\xe8\x2c\xd5\x13\x7c\x00\x21\xf0\x11\x7e\x89\x2d\x47\x74\x5d\xab\xf8\x0a\x3f\xf4\x46\x8d\x1c\x55\x5b\x0e\x7a\x68\x86\xd9\x86\x5c\x82\xd6\x2b\x76\x95\x7b\xa7\xa3\x7f\x4e\xcb\x6f\x67\x49\x31\x9f\x65\x77\x05\x42\x72\x52\x8c\xb6\x86\x08\x37\x32\x14\xfc\xe1\xc6\x54\xf8\x79\x43\x29\x7b\xf2\xc6\xd1\x50\x95\xf6\xd6\xdb\x91\x43\x5f\x34\x7b\xa3\x86\x37\xe3\x5e\x91\x32\xd3\xc7\x56\xa5\xb3\x0d\x6f\x43\xd7\x80\xa9\x67\x17\x84\xa3\xdd\x08\xef\x34\xe7\xf8\x87\x07\xea\x77\x8c\x3b\x1f\x5b\xd9\x11\x97\x19\xd1\x41\x8d\x95\x58\x62\x13\x0f\xd5\xa3\xc9\x67\xe6\xbf\x90\xad\xc7\xcf\x70\x1b\xcc\x8a\xd8\x01\x89\xd6\xb8\x80\xfb\x70\xc1\x09\x79\x8d\xa0\x6a\x64\x87\xc8\xa1\x17\x4b\x84\x0a\x11\xa4\x5c\xb9\x68\x61\xd9\x24\x7a\x6b\x77\x4a\x9c\x07\xfa\xbe\xc7\xb6\xba\x3e\xb1\x27\xa1\xb8\xca\x13\x20\x0e\x0f\x2d\x08\x89\x9e\xb0\x40\xa2\x2d\x0a\x10\xe2\xd0\x52\xda\xa9\xf3\x88\x7a\x00\x2b\xab\x7f\x1c\xca\xfa\xcc\x77\x34\xf6\xaa\xbe\xbf\xd8\xf2\x00\xf5\x7d\x0a\x2f\x16\x9d\x60\xe0\xec\xf7\x8e\x00\x2d\x87\xac\x36\x28\x62\xfc\x45\x58\x33\x2a\x2a\xed\x69\xe3\x1b\x07\xcd\xfc\x5d\x4f\x60\x6b\xd1\xd5\x7b\xa8\x81\x63\x9a\xe3\x78\x34\xc3\x53\x3c\xa7\xa3\xc0\x40\xe2\x96\xb2\x51\x69\x43\xe1\x46\x99\x4f\xcb\x42\x95\x71\xf7\xbf\xa0\x8f\x07\x09\x35\x6a\x05\x94\x0a\x92\x48\x72\x5c\x0b\xaa\xb5\x5a\xd9\xc6\x59\x3a\x7a\xad\x36\x6a\x6f\xf0\x57\x85\x3e\xc3\x52\xb7\x00\x02\x86\x92\x21\x71\x62\x4f\xea\x5f\xa8\x4b\xf5\x8e\xa3\xff\x47\xa4\x46\x05\x16\x80\x6a\xe6\x4b\x33\xc5\x9e\xdd\x03\xfb\xdd\xc8\xaf\xa6\xa9\x30\xed\x81\xd1\x2e\xff\x87\xad\x59\x8b\xdd\x97\x50\x4b\x73\x87\xa1\xf4\xc5\x26\x96\x68\xe8\x79\x28\x0c\xfb\x00\xe9\xcd\x1a\xc7\xa9\xff\x1d\x30\x67\x0f\x98\xee\x58\xf9\xd7\x8b\x79\x9a\xbf\xe5\x68\xfe\x9b\x8f\xa0\xfa\xf8\xe9\xa5\xdb\x14\xcd\x82\x23\x28\xa9\x9b\x56\xe6\x01\xbd\xd7\xc3\x4b\x50\xfd\x07\x82\x7a\x01\xa6\x17\x40\x7a\x01\xa2\x17\x00\x7a\x01\x9e\x17\xc0\x79\x01\x9a\x17\x80\x79\x01\x96\x17\x40\x79\x01\x92\x17\x00\x79\x01\x8e\x17\xc0\xf8\x47\x50\xec\x6e\x79\x2c\x9a\x7d\x24\xaf\x7e\xab\xc9\x43\x0b\x7d\x59\xaa\xcf\x43\x2a\xbb\x10\x93\x14\x3a\x9d\xe0\xdc\xe8\x2a\x51\xc2\x06\xa9\xa4\xbf\x69\xcd\x94\xa5\x65\xa8\x49\x5c\x70\xc5\xee\xd6\x97\x87\x2d\x2d\x8d\x22\x58\x62\x97\x75\xa3\xe2\x14\xdd\x83\x97\x73\x4f\x44\x44\x5a\xcf\x5d\x4f\xad\x3e\x36\xa6\xeb\x81\xdc\x2d\x14\x32\x5f\x08\xbb\xa4\xed\xdf\xf0\x2d\x99\x11\xdd\xff\x45\x53\xec\xa5\xde\xb0\xf1\x25\x96\x80\x7e\x46\x92\x54\xe0\xf6\x2a\xbe\xf6\xcb\x7d\x22\x10\xec\xa9\x7f\x48\xf8\x63\x8d\xfb\xc2\x33\x47\x50\xf5\x4f\x19\x56\x18\xfb\xff\xa8\x7d\x17\x9b\xb5\x27\xdc\x1a\x0b\xfe\xbb\xcc\x39\x79\xf4\x2a\xa3\xcd\xfe\x13\x9c\xbd\xa6\x42\x8f\xdb\x53\xb3\x61\x8b\xf1\x89\x6b\xf4\xea\x95\xeb\xd3\xbe\x7a\xb5\x1c\xab\x0b\x8c\x1d\x53\x4e\x59\x3b\x1b\x5a\x7f\x81\x4e\x5f\x5d\x2d\xef\x9f\xcd\x04\xe8\x71\xeb\x35\xbf\xca\xf8\x13\x80\x2f\x69\xdd\xce\x6f\xb5\x60\x78\x96\xea\xc8\xa0\x23\xc8\xe7\x76\xf8\x1c\x26\x98\xe4\xe1\x26\xf8\xc9\xce\xf9\x98\xd4\xc1\x89\x8d\xbe\xc1\x8a\x1b\x5b\x76\xa7\xa7\xda\x3c\x88\x83\x6c\x79\xdd\x23\xd1\x5e\x3e\x2a\x8c\xf3\xbe\xe5\xa3\xce\x39\x12\x78\x25\x5c\xa4\xc0\xa6\xd5\x83\x1e\x5a\xac\x7f\x78\x61\x63\x03\xa0\x42\xff\x24\x40\xea\xcf\x77\x10\xae\x4d\xf2\x38\x92\x47\xa8\x23\x08\x4d\xe9\xb4\xce\x5d\xa1\x26\xbf\xeb\x7e\x9d\x36\xd4\xa8\x11\x9d\x6a\x6f\x8d\xec\xf3\xc1\x56\x6b\xb1\x89\x36\x65\x79\xc3\x14\x9b\xb1\x6e\xfb\xdd\xf9\xeb\xe1\x12\x76\x81\x36\x53\xf6\xdd\x01\x05\x09\xfe\x17\x22\xf3\x3f\x15\x98\xe7\xb7\x97\x50\xf5\x5f\xd8\x6b\x7d\x7f\x88\xe9\x6f\x8d\x0a\xb2\x8a\xe9\x67\xd9\x2d\xe0\xeb\x6d\xcf\x8c\x88\xd5\xa6\x2c\xc5\xcf\x86\xbf\xd0\xd8\x71\xed\x36\x77\x7d\x6a\x01\xe8\xe3\x2c\x05\x28\xc3\x22\xcc\x4b\x6b\x3c\x64\xc2\xb9\x02\x68\x84\x9e\x71\x43\x30\xe5\x99\x46\x6c\xd4\xf8\x5a\xc7\xdf\x00\xbe\x8e\x03\xe2\x48\x5a\xb2\x75\x96\x12\xb8\x69\x1a\xda\x0d\x4d\xf9\x8f\xdc\x75\xd9\xd7\xc5\x22\xcb\x26\x58\x5e\x41\xc5\x1e\xa1\xe7\x73\xb4\x7f\x2c\x43\x4a\x96\xdf\xa0\xe3\xda\xff\xdc\x64\x11\xbf\x10\x15\xac\x86\x9f\xab\x96\x4a\xd2\x50\xe8\xbf\xb9\x75\xf8\x00\x91\x47\x43\x54\xaf\x81\x58\x0f\x55\xb1\x79\x31\x8a\xe4\xa9\x02\x5e\xff\x4c\x6d\x9a\x4e\xc1\xe3\x36\x85\xe8\x1f\xd6\x3d\x4c\xe7\x62\x2d\xc2\xe7\xac\x62\xe1\xbc\x17\x2e\x61\xab\x0a\x0d\x31\xeb\x73\x9a\x2c\x2e\xfe\x82\xe5\x0f\x79\xd3\xd4\x9d\x7d\xd6\x98\xf4\xe2\xe8\x4b\x94\xe5\xc9\xf7\x45\xc1\x26\xa7\x5b\x90\xbc\xc8\x94\x8d\x42\x3d\xdf\x31\x3e\xfc\x8a\x76\x5d\xa6\x54\x4d\x57\x1f\xd3\x8a\x7f\x3b\xfb\x67\x00\x00\x00\xff\xff\x26\x6d\x77\x1b\xe0\x3b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
