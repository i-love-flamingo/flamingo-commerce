// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcf\x6f\xdc\xb8\x15\xbe\xfb\xaf\x98\x41\x2f\x53\x20\x28\xd0\x1e\xe7\x66\xcf\x24\xc1\x60\x63\x27\xb1\x67\xd3\x43\x10\x18\xb4\xf4\x66\x86\x0d\x45\x6a\x49\xca\xb6\x50\xec\xff\x5e\x90\x22\x25\xfe\x94\x98\x14\xdd\x4b\x77\x0f\x1b\x4b\xfc\xf8\xf8\x48\x7e\x7c\xfc\xde\xd3\xc8\xbe\x85\xd5\x8e\x35\x0d\xf0\x0a\x1e\xf7\x50\x31\x8e\x24\xd4\x3b\xc4\xe5\xea\xdf\x57\xab\xd5\x6a\x55\x21\x2e\xb7\x13\x44\xb5\xac\x75\x43\x6d\xc1\x7b\x20\xf8\x19\x38\x06\xb1\x5d\x7d\xf5\x80\xfb\x00\xd2\xaf\xbf\xe9\xae\x67\x88\x9b\x6e\xfa\x1d\xab\x61\x53\x9b\x47\xf5\xb0\x5d\x3d\x48\x8e\xe9\x79\xfd\xd7\xc0\x81\xa8\xb3\xb5\x7a\x4d\xc8\x27\xd4\x37\x40\xe5\x3d\xfc\xd6\x61\x0e\xf5\x41\x42\x23\x82\xee\x8f\x9f\x38\xae\x4c\xd3\x7a\x9c\xe4\x43\xd7\x34\x88\xf7\x21\xd6\xbc\x5e\x5f\xfd\x7e\x75\xe5\xaf\x96\xdb\x6c\x16\xab\xc6\xa2\x62\x1d\x95\xe1\x88\xd7\x6d\x4b\x30\xd4\x7b\xdb\xac\xc1\xa2\x6b\xc2\xf7\x4e\x37\xed\x63\x80\x7b\x8f\x4f\x72\x87\x78\x9d\xc5\xbd\xe7\x88\xd6\x47\x26\x11\xf9\x27\x96\x97\x45\xb8\x46\xda\xc1\xbd\x1e\xd7\x8d\x7a\x95\xec\x77\x41\x22\x76\xfb\x86\x31\x02\x88\xae\x47\xcb\xe8\x15\xa2\x65\xd7\x2f\xd3\xeb\x68\xd6\x0f\xd7\xdb\xd5\x61\x3f\x58\x01\x2a\xb1\xec\x0f\xfb\x91\x05\xfa\xed\x13\x26\x04\xd3\xf3\x75\x5d\x73\x10\xd1\x32\x0f\x6f\x35\xb0\xed\x78\x75\x41\x02\x78\x80\xf9\x04\x5c\x30\x6a\x18\x9c\x27\xae\xc7\x57\x54\xd7\x58\x62\x46\x11\xd9\x23\x89\xe2\x41\x9d\xc6\xc1\xcb\x76\x20\xe1\x03\x10\xa8\x54\x5b\x44\xc0\xa0\x7d\x98\x1a\x10\x46\xcf\xe2\xc8\xae\x3b\x79\x51\xb3\xaf\x14\xc5\x7f\xd5\x53\xf0\xd6\x17\x85\xed\xe1\x22\xa1\x61\x7f\x76\xac\x6b\x19\x55\x27\x29\x9a\xe0\xd4\x64\xa6\x58\xc3\x09\x75\x44\xee\x3a\xce\x81\x56\xbd\x6f\x4f\x2a\x9e\xe0\xe1\x24\xf9\x76\x8e\xb6\xc5\x98\x51\x7f\xee\x06\xea\x1c\xa8\x09\x14\x2d\x67\x75\x57\xc9\xf0\x35\x16\xde\x2a\x40\x1d\xcc\xf2\x3c\x72\x39\xa4\xe1\xda\xe3\xef\x11\xbd\xa6\xd9\x6a\x61\x4f\x1a\x76\x07\x19\x00\x8a\xce\xd6\xd7\xd4\xd9\xb5\xed\x6e\x08\xfb\x99\xc8\xe5\x07\xac\xbd\xd3\x49\x8d\x6c\xba\x7d\xbb\xb2\x80\x5b\x84\xe9\xc3\x05\xb7\x2d\xa6\xe7\xb7\xb7\x08\x13\x7f\x67\xb0\x78\xdb\xb4\xb2\x0f\x96\xee\x82\x84\x35\xfc\x8e\xf1\x59\xef\xc6\x7e\xf1\xac\x54\x7c\x3c\xec\x37\x58\xff\xb3\x38\xa3\xb5\x35\x50\xda\x51\xa1\xc6\x4e\x7a\x8b\x3e\xcb\x7e\xd3\x20\xfe\x1d\xe4\x27\x82\x2a\xf0\x5c\x7d\xb3\x7a\x46\x1c\x23\x2a\xc3\x09\x1c\xa8\x9c\x46\x7e\xfb\x2a\x81\x53\x44\xee\xe1\x04\x8a\xc7\xb0\xe1\x70\x5a\xf0\xc0\xf6\xfe\xc2\xba\xea\x02\xfc\x01\x3d\x63\x7a\x8e\x42\xe6\xe8\xa9\x66\x3d\x24\x02\xcb\xe3\xf0\xd6\x18\x14\x5d\x63\xb7\x2d\xcb\x3c\x1f\xa3\xe2\x6f\xf6\x22\x18\xf7\xd5\x76\xd8\x31\x11\xc5\x5d\x44\x88\x6d\x3e\x62\x49\x12\x84\xb2\x87\xe1\x3d\x67\x22\x33\x86\x07\x29\xf0\xc9\x39\x5f\x45\x68\xff\xd2\x99\x3f\xb9\xcd\x1d\xa3\x6a\x93\xee\x81\xe8\xdb\xbe\xac\xd3\x0f\xf6\x98\xee\xb3\x29\x28\x26\xce\xc5\xa8\x2b\x0c\xb3\xfc\x73\x68\x29\xac\x35\xc5\x4d\x7f\xec\x5b\xd8\xa8\x5b\x2e\x64\xeb\x7c\xf4\x9c\x42\xde\xee\x82\xf8\x19\xa2\x45\x7c\x34\xef\x8d\x5b\x93\xeb\x4e\xf4\x0a\x23\xc1\x3d\x34\x08\x53\x4c\xcf\x29\x4c\x5a\xd4\x38\xfa\xc8\x51\x81\x46\x4a\x05\x73\x30\xe0\xf1\x3c\x0d\x33\x11\x86\x87\xb3\x7d\x1e\x1c\x90\xe9\x27\xc7\x45\x0c\xd7\xca\xf4\x19\x57\x79\xfd\x6d\xd6\x79\xeb\x8f\xf1\x1f\xcd\x10\x20\x88\x53\xb3\x66\x5d\x97\x0b\x4c\xdb\xa8\x7b\xa0\x27\xe6\x51\x61\x76\x90\x71\x8e\x05\x23\x54\x05\x56\x8f\xe8\xb5\xc0\x92\xea\xe8\x93\x5a\x49\xec\xed\xea\x1d\x61\x48\xe6\x2d\x83\xa5\x48\x52\x1f\x28\xc4\x37\xe7\x6a\x18\x0e\x06\x7a\x3d\x3a\x83\x85\x61\x59\xf5\xc9\x4e\x45\xc7\x58\x33\xa2\x2f\x2c\xc6\x9b\xe0\x30\x69\x10\xfd\x68\x5e\xa7\xaf\x5a\xcd\x22\x4c\x25\xf0\x13\xaa\xa2\xed\x08\x64\x9a\x19\xf7\x8c\x24\xbc\xa0\x94\x46\xfa\x82\x48\x07\xf1\xf2\xa6\xe7\xb2\x1f\x24\x57\x34\x08\x6e\x5a\x02\xea\x95\xf8\x23\xdd\x89\x72\x2a\x9b\xd2\x98\xc7\xd9\x6b\x7f\xcc\x05\x93\x47\x77\xef\xb6\x26\x52\x40\x7b\x56\x6f\xfa\x43\xbd\x31\x29\x40\x36\xe5\x53\xc0\xdc\x0c\x92\x8e\xab\xb3\x97\x71\x5e\x35\x8d\xe1\x2d\xc9\xdf\x4c\x48\x0b\xec\xb9\x51\x61\xf9\x9e\x5d\x50\xb7\x65\xe2\x76\x49\xdb\xfe\xc0\x6d\xfb\x33\x97\xed\x0f\xdf\xb5\x3f\xa8\x2d\x7e\x42\x5a\x5c\x90\x30\xec\x9b\xbf\xdd\xdc\xcd\xb7\xb7\x9b\x17\x44\xd5\x9b\x17\xc6\xbf\x9f\x08\x7b\xf1\xdf\x36\x20\x2f\xac\xf6\xdf\x55\x88\x73\xac\xc4\xa0\xfb\xd2\x72\xef\x03\xab\x50\x22\xff\xdb\x07\xcd\xa6\x8f\xc0\x1c\xea\x23\x6e\x60\xbb\x52\xff\x1f\x8b\x1a\x5e\x82\xb9\xf9\x0e\xbd\xab\x28\xbc\xbc\xcf\x43\xfe\x02\xbd\xa7\x00\x15\xe2\x2f\x01\xcc\x59\x0b\xb1\x5d\x35\xa8\xfd\x2a\x86\xb0\xf8\x2f\xc1\xe8\xdf\xee\xd1\xcb\x2d\x08\x81\xce\x50\xd0\xf9\x16\xb5\x13\xca\x77\xdb\x01\x86\xee\xdf\xa2\x36\xf2\xdd\x81\x87\x73\x98\xdd\x51\xbb\x9c\x2b\xb3\xad\xf1\x8d\x86\x16\xcb\x06\x9d\x80\x9b\xa0\xc4\xe0\x09\xaa\x82\xfb\x36\xa1\x11\xa4\x92\xe3\xbe\x2b\xad\x62\x6e\xee\xe0\xca\xd9\x63\x8f\xf2\x55\xa3\x54\xb1\xc9\xb9\x10\xdc\x63\x74\xa0\x95\x0a\x2f\x19\x31\xe0\x35\x2c\xdc\xca\xe1\x80\x73\x82\x20\xc0\x1a\x5a\x3e\xf5\x3b\xd4\xb4\x08\x9f\xb5\xfa\xde\x54\xce\x83\xa3\x12\x4a\xa6\xf9\x34\x48\x8c\x13\x26\x12\xf8\x9c\xca\x88\xbb\x97\xcc\x6d\x94\xc3\xae\x83\x7e\x3c\x70\x92\x88\x95\xdf\x44\xd0\x13\x90\x41\x94\x84\x4d\x66\x4b\x6d\x63\x5e\x9f\x25\x7b\x63\xe1\xc4\xe1\xb0\x18\xc7\xb8\xfc\xc8\x6b\x15\xa1\x8c\x1a\x5a\x12\x00\x0e\x6f\x71\x7c\xd7\x8d\x77\x9c\x51\x5f\x1e\x7f\xf4\x9b\xb4\x79\xd7\xaa\x5b\xe5\x0b\x33\xf6\x20\xe2\xea\x72\x40\x1b\x95\x03\x74\xa3\xa9\x08\xdc\x66\x4a\x06\xae\x97\x77\xa8\x09\x1a\x04\xeb\x78\x05\x61\xe5\xec\x37\xd9\x3b\x25\xaa\xe5\x78\xea\x23\xb4\xde\x8a\x30\x85\x21\x7c\xcc\xe8\xc2\x41\x43\xb8\xd9\xde\x61\x16\x98\x9e\x09\x68\x96\xcc\xe5\xf4\x13\x2a\x5b\x8c\xe0\xec\x65\xc9\x8c\x85\x2c\x95\xd2\x4a\x03\xd3\x74\x5d\x70\xf6\x12\x56\x8c\xf5\x73\xee\x50\x0e\xa1\xd9\xd0\xe9\x19\x49\xe7\x5c\xa4\x4f\xc8\x09\x73\x21\xa9\x26\x41\x16\x43\x50\x12\xe2\xf3\x11\xd7\x35\x81\xbb\x08\xe5\x49\xef\x21\xd8\xcf\xfa\x23\x10\xe9\xa4\x91\x06\x59\x8c\xe4\x00\x89\xa9\xc5\x98\x3b\x3e\xe7\xf3\xc4\x51\xb3\x6e\x1f\x30\x8d\x59\x5a\xb1\xa6\x45\xb4\x8f\x86\xf3\x62\x1b\x96\x31\x20\xc0\xb4\x4c\xc8\x31\xfa\x65\xbd\xd6\x99\xe5\xac\x1d\x0e\x67\xec\xc4\xd1\xb4\x3f\x8a\x46\x7c\xc1\xe7\x01\x13\x19\xf2\x76\x0c\x08\xb4\x17\x46\xe7\xd8\x01\x8d\x2e\xbe\x66\x7d\x4e\x12\x75\xf8\xd8\x60\x93\xef\xe5\x6f\x16\x1a\xae\x14\x90\x44\x98\x84\xc8\x4f\x7e\xab\x8d\x9f\x58\x48\x4c\xcf\xbb\x4e\x48\xd6\x00\x4f\x7c\xa0\x78\x9b\x80\xa4\xdd\x4d\x21\x83\x98\x3d\x33\xcd\xd1\x33\x9b\x80\x21\x09\x1f\x4f\x37\x98\xcb\x4b\x10\x93\x91\x10\x2d\xe3\x43\xe2\xce\xfb\x74\xe3\x5d\xd7\x3c\x85\xb2\x9a\xa2\x81\xc7\x9a\x86\xb3\x0b\xef\x07\x51\xe3\x90\x0e\x35\x95\x9e\xdb\xb5\x94\x1c\x3f\x75\x12\x1c\xe1\xca\x41\x00\x7f\x86\x5a\xdf\x96\x8b\x05\xa1\xb1\x76\x97\xcd\x21\x72\xa2\xaf\xa4\xfc\x92\x1c\x72\xaa\x4f\x26\xc7\x9c\xd3\x2f\xb6\xf6\x97\x75\x76\x14\x20\xc9\xc0\x6f\x4b\x88\xd9\xcc\xeb\x7e\x42\x2c\xd4\x16\xbf\x20\x82\x6b\xbd\x8f\xf7\x20\x3a\x62\x15\xd5\x05\x09\x85\x63\xf4\x2d\xe7\x6c\x0a\x67\x81\xf6\x1e\x01\x26\x2d\xf9\x05\x02\xf6\x60\xad\x83\x94\x5d\xe1\x9e\xd5\xa0\x28\xa5\xb4\xc8\xe4\x87\x36\x98\x2d\x27\x26\xb0\x8e\x38\x52\x34\x49\x87\x8b\x9c\x97\x99\xc2\x9f\x52\x2f\x86\x79\x53\x5e\xca\xd4\xb3\x3d\x08\xc1\x00\xfe\x07\x9d\x85\x38\xf4\xe8\xe7\x34\xef\x18\xb7\xb4\x3d\x31\xde\x0c\x31\x63\xf8\x6f\xa9\x9b\x0e\x1e\x2b\x7d\xeb\xda\x35\x49\x14\x58\x1e\x15\xd4\xd9\xea\xb1\xd0\xd2\x72\x56\x81\x10\x8e\x4a\xcd\x7d\x57\x37\x1f\x05\xc7\xb2\xbb\xc3\x95\xff\xf1\xd0\x09\x03\x76\xb1\x30\x90\x5a\x53\x20\x2e\x74\xea\x5e\xef\x46\xc0\xa8\xfd\x28\x70\x44\xe6\xfa\xcc\xd3\x6f\x82\x18\x1f\x9a\x0c\xf3\xcd\x07\xdc\x0f\x43\x8e\x31\xcf\x86\xc0\xd7\x9f\xb2\x3c\xae\x87\x2f\xad\x4b\xe9\xe7\x84\xe5\x3f\xf5\xdb\xa2\x7e\xb3\xaa\xed\xef\xdb\x65\xcc\x3f\x72\x98\xff\x67\x85\xa7\xd5\x9d\x13\x49\x53\x98\x02\x85\x77\x85\x69\xdb\xc9\x89\xdc\x31\xaf\x0f\x1a\x50\x42\xec\x3f\x90\xd7\x05\xb4\x2e\x60\x75\x01\xa9\x0b\x38\x5d\x40\xe9\x02\x46\x17\x10\xba\x80\xcf\x05\x74\x2e\x60\x73\x01\x99\x0b\xb8\x5c\x40\xe5\x02\x26\x97\x12\x19\x5e\x25\xd0\x5a\x8b\xce\xd5\xe7\x6e\xfa\x68\xe2\x85\xed\x6d\xe6\x97\x81\xeb\x18\x6a\xef\x4b\x16\xfd\x2a\x22\xd4\x7b\xd1\xf0\xb7\x86\x72\xa1\x07\xd7\x75\x7d\x64\xca\xc4\x26\x2a\x02\x1d\xf6\xeb\x37\x53\xa9\xe6\xcd\x6a\xf1\xa7\x37\x73\xee\xef\x81\x80\x04\xb7\x8e\xbc\xfc\x53\x9e\x65\x7b\x4a\x36\x8e\xbf\x80\xd1\xfe\xfe\x57\x46\x7f\x6d\x55\x36\xa5\x8c\x7e\x96\x7d\x81\x5d\x67\x79\x4a\x87\xd0\xbb\x35\x8c\xe3\x87\xb5\x0d\x9a\xc2\xdb\x76\x31\xf6\x45\x5f\x73\x63\x5c\x7e\xe0\x40\xf5\x6d\xc2\x4f\x9b\x6f\xc2\x4f\x30\xd1\x68\x49\xdd\x98\x1a\x50\x25\x46\xfd\x94\x51\x7d\xe4\x36\x45\xda\x54\x45\x1b\x94\x30\x79\x0f\x0d\x7b\x86\xd1\xce\xd9\xfc\x51\xb6\xe1\x59\x7b\x93\x8f\x1b\xb7\xb6\xbc\x68\xef\xf7\xab\xff\x04\x00\x00\xff\xff\x88\x1e\xdf\x92\xdd\x2b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
