// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4d\x8f\xdb\x36\x13\x3e\xbf\xfe\x15\x5a\xe4\xb2\x2f\x10\x14\x68\x8f\xbe\x79\xed\x24\x30\x92\x75\x36\x89\x93\x1e\x82\x60\xc1\x15\xc7\x32\x1b\x8a\x54\x49\x6a\x37\x42\x91\xff\x5e\x90\xa2\x64\x7e\x49\x62\x53\xa0\x97\x76\x0f\x41\xcc\x79\x38\x9c\xe1\x3c\xf3\x41\xa9\xae\x81\x62\xcb\xeb\x1a\x44\x09\xf7\x3b\x28\xb9\x40\x0a\xf0\x16\x09\x55\xfc\xb1\x2a\x8a\xa2\x28\x91\x50\xeb\x0b\x44\x4b\xae\x8c\x00\x0f\xe0\x1d\x50\xf2\x08\x82\x80\x5c\x17\x9f\x3d\xe0\x2e\x80\x74\x57\x5f\xcc\xd6\x0a\x62\xd1\x4d\xb7\xe5\x18\xae\xb1\xfd\xa9\x7f\xac\x8b\x0f\x4a\x10\x56\x5d\xfd\x3f\x30\x20\xda\xbc\xfa\xbe\x5a\xf9\xae\x38\x1e\x10\xbc\x2e\xf6\xbb\xde\x68\x60\x8a\xa8\x6e\xbf\x1b\x55\x9b\xd5\x07\x42\x29\x61\xd5\x06\x63\x01\x52\x06\x87\xd9\x55\x03\x6c\x5a\x51\x9e\x91\x04\x11\x60\xee\x40\x48\xce\xec\xb5\x4c\xdf\x86\x77\x09\x08\x63\xa2\x08\x67\x88\xee\x90\x42\xf1\xa1\x8e\xb0\xb7\xf2\xd9\xff\x1a\xd4\xd5\xc0\xd4\x07\xa0\x50\x6a\x69\x68\x45\x20\xb6\xce\x01\xe5\xac\x92\x47\xbe\x69\xd5\x59\xfb\x5f\xea\x9b\xfb\x68\x9c\xb8\xe1\x9c\x02\xb2\x40\x14\xca\xc3\x6b\x42\x4d\x43\x09\xe0\x2d\x6f\x1b\xce\x74\x80\x22\x17\x2f\x22\xeb\x24\x86\x13\x6a\xa9\xda\xb6\x42\x00\x2b\x3b\x5f\x9f\xe2\x0a\x51\xa2\xa0\x8e\xf4\x1c\x07\x89\x55\xa3\xff\xbb\xe5\x2d\x53\xeb\x62\xcf\x2c\xff\x1a\xc1\x71\x5b\xaa\x70\x99\x48\xef\x1a\x00\x07\x5e\x56\x02\x31\x6c\xf4\x3b\xb7\x77\x27\x48\x09\xbd\x5c\xb6\xb5\x91\x1e\xd1\xb7\x4d\xdd\xeb\x4e\xc3\x1e\x0c\xec\x00\x13\x00\x7b\x59\xaf\xc8\x49\x6d\x91\xc0\x91\x8b\x1b\x5f\xee\x66\xc6\x8f\x24\x84\xcd\x83\x40\xc7\x10\x24\xbb\xed\x4b\x3a\x4f\xa2\x74\xb2\x89\x33\x1c\x3d\x71\x58\x50\x06\xf6\xa9\x40\xee\x5c\x69\x22\xfb\x35\x46\x8b\x6e\xba\x3d\xbe\xb6\x89\x3a\x99\xed\x1a\x38\xe5\x41\xd2\xf0\x3d\x3b\xf1\x09\xe3\xb5\x68\xac\x6f\x49\x0e\x3a\x16\xcb\x33\x69\x1a\xc2\x2a\xbd\x14\xe8\xfb\xe0\x88\x3c\x62\xbc\x12\xdc\x2b\x25\x86\x1a\x0b\x0c\xcc\x23\xe0\x12\xff\x3c\x2d\x3b\x22\x4b\xad\x64\x56\x55\x7d\xe0\x4c\x3b\xf0\x1e\xa8\xa1\x41\xd6\x9e\xbf\xba\xc1\xb9\x96\x5f\x89\x3a\x0f\x7b\xd2\x77\xe4\xb8\xb7\x0c\x3e\x23\x69\xc9\x37\x66\xfa\x2c\x4b\x74\xec\x87\xee\xe6\x66\x95\x59\x79\xe2\xe2\xeb\x89\xf2\x27\x7f\xb5\x06\x75\xe6\xd8\x5f\x2b\x91\x10\x44\x57\x51\x77\x71\xa0\xde\x1b\x5e\xa2\x44\x89\xde\x05\x62\xbb\x47\x12\x01\xf8\x48\x6a\x58\x17\xfa\xdf\x21\x4d\xfc\x2e\x70\xfd\x15\x3a\xb7\x02\x78\xa5\xd9\x43\xbe\x86\xce\xcb\x7a\xd3\x3d\x02\x98\x73\x17\x72\x5d\xd4\xa8\xf9\x2c\x0d\xfc\xcb\x6f\x92\xb3\x9f\xde\xa3\xa7\x5b\x90\x12\x55\x90\xb1\xf9\x16\x35\x17\x94\x6f\xb6\x03\x0c\xcd\xbf\x45\x4d\x64\xbb\x03\x0f\x7d\x98\x8d\xe8\x70\x9d\x85\x0d\xab\x46\x46\x17\xb4\xd0\xdb\x5b\x09\x37\xc1\x1c\xe0\x35\x0e\x9f\x2a\x49\x73\xdc\x62\x30\x58\x42\x14\x0d\x4c\x69\x34\x71\xa7\xf2\x56\xcd\x66\xbd\x6d\x2a\xa9\x74\x70\x7a\xca\x28\x9e\x30\x33\x84\x0d\x73\x52\xaa\x0a\x06\xd8\xa9\x40\x04\xb0\x71\x76\xac\x1b\x44\x2a\xd6\xf7\x2e\x3f\x79\xc6\x49\x61\xad\x7f\xba\x22\x8a\x1e\x80\x9a\xd5\x22\x14\x59\xff\x07\x61\xaa\xef\xf6\xa1\x4f\xee\x26\xd2\xa9\x59\x41\x74\x25\x17\xea\xad\xc0\x3a\x9d\xf5\x9f\x19\x27\xe6\x9b\xa5\x13\x64\x12\xf7\x85\xb1\x1f\xd8\x31\xc5\x0b\xa7\x59\x49\xab\x77\xb5\xba\x73\xeb\x37\x05\x82\x21\xfa\x1e\x4e\xa0\x27\xa9\x80\x52\x35\x12\x5f\x41\x35\x14\x95\xb0\x8d\x2a\xda\x23\x12\x04\x31\x75\x6b\x30\x77\x69\x8c\xb5\xf2\x80\xea\x40\x20\x79\x2b\x4a\x08\x27\xc1\xdf\x55\xe7\x8c\x5c\xcb\xc5\xc7\x47\x7c\x42\xb4\x85\x08\x93\x59\xef\x86\x8a\xbf\x09\x0f\x0d\xe1\x36\xbc\xbd\x17\x84\x55\x14\x0c\x4b\x92\x7d\xf9\x2a\x44\x4d\x8e\x75\x82\x3f\x2d\xa9\x19\x20\x93\x3a\x9e\x59\xd4\x11\x7d\x03\x57\x87\xf9\x3d\x95\xb3\x7d\x4d\xb2\xd4\x78\x44\xca\xe1\x78\x9a\xed\x27\x22\xa4\x62\x26\xa0\x93\x18\x8a\x92\x10\x9f\x5b\x04\x63\x0a\x87\x08\xe5\x4d\xf2\x7d\x95\x9b\xb5\x47\x22\xda\x2a\xdb\x13\x27\x31\x4a\x00\x24\x5c\x8b\x31\x07\x31\x67\xf3\x85\x6f\xf6\xde\xde\x10\x16\x33\xae\xe4\x75\x83\x58\x17\x1d\xe7\xd5\x29\xa2\x62\x40\x80\x69\xb8\x54\x63\x25\x9b\xb4\x1a\xa9\xa5\x1b\x12\x50\x11\xa7\x26\xa6\xed\xd1\xe5\x55\x2c\xd8\xdc\x63\x22\x45\x5e\xc4\x80\x42\x73\xe6\x6c\x8e\x1d\x50\x23\x42\x67\x6c\x4e\x12\xb5\x7f\x0a\x5b\x9e\x2e\x77\xdd\xc6\xc0\x75\xeb\x57\x88\xd0\x10\x79\xe7\x4b\x87\x5a\x48\xa4\x22\xac\xda\xb6\x52\xf1\x1a\x44\xe2\xf9\xfc\x22\x01\x49\x9b\x9b\x42\x06\xf5\x77\xc6\xcd\xd1\xb2\xe1\xe1\x81\x14\xbc\x3d\xdd\x10\xa1\xce\x41\x7d\x45\x52\x36\x5c\xf4\xaf\x55\xd1\xa5\x85\x87\xb6\x7e\x08\xe7\x49\x86\x7a\x1e\x1b\x1a\xce\x5e\xbc\x5f\x10\xad\x41\xa6\xd4\x94\xc6\xb7\x8d\x52\x82\x3c\xb4\x0a\x9c\x89\x4d\x80\x04\xf1\x08\xd8\x74\x3e\xb7\xc8\x27\x4f\x18\x5f\xe5\x93\xc3\xf3\xd4\xb4\x93\xae\x83\xfe\x94\x96\x3c\xf2\xf2\x41\x21\x79\xe6\xdc\x2c\x32\xbc\xac\x27\x8d\x1d\x87\x89\x64\x11\xd7\xe4\x67\x84\x55\xb1\xf8\xfb\x6a\xa5\xdb\x31\xc3\xc6\x81\xe2\x5d\x7b\x79\x78\x7a\x76\xac\x27\x3e\xac\x5d\xc5\xd0\xfb\x57\xa0\xfc\xe1\xf3\x25\x17\xe1\x48\x71\x1f\x23\x22\x63\x6e\x6d\x89\x0d\xed\xd9\x60\x7c\xe4\x5a\xc9\x75\x34\x2a\xec\x77\x57\xcf\x2f\x0d\xfd\x79\xb1\xf8\xc1\x61\xce\x99\x1d\x50\x50\xe0\x8e\xe6\xcb\x1f\x30\x96\xf5\xe9\xa1\xe8\x5a\x13\x4f\x53\xd4\xd8\xfb\xb7\x94\x7e\x6c\x74\x9e\x6a\xa5\xef\x54\x97\xa1\xd7\xb9\x9e\xdc\x23\x4c\xbc\xfa\x73\xfc\xa8\x5d\xa3\x64\x7c\xe3\xd0\xee\x59\xd3\xaa\xf0\x53\xc8\x14\x05\x12\x59\x90\x80\x5a\x52\x9c\xb8\xa8\xfb\x9a\xd9\xff\x2d\x6d\x33\xc5\xb3\x30\x53\x07\x25\xd8\xd0\x2b\xf1\x61\xe5\x5e\x43\xef\x3f\x79\x90\x61\xb4\x2c\x41\x4a\x67\xe2\x4e\xa7\x6d\x4a\xc1\x60\x31\x01\x8a\x5f\x08\xc1\x45\xf4\x3e\xe9\x77\xbd\x1c\x01\xe3\x30\xc9\x40\x20\x3a\xb7\x67\x80\xcf\x18\x63\x20\xd6\x86\xba\x7f\x0e\xbf\x86\x2e\x7c\xf0\x9b\x2f\x9c\x6f\xfa\x47\xcb\x6c\x61\x0a\x6d\xfd\x21\xcd\xe3\x7d\xf8\xb3\x7a\xfa\xc0\x74\x30\xff\x1b\x22\x73\x87\xc8\x61\x74\xfc\x79\xbd\x8c\xf9\x65\x0a\xf3\x6f\x1e\x33\xcd\x88\x39\xcc\x35\x13\x98\x8c\x31\x73\x45\x74\x35\x5c\x2c\x97\x59\xc4\xfe\x07\x79\x9d\x41\xeb\x0c\x56\x67\x90\x3a\x83\xd3\x19\x94\xce\x60\x74\x06\xa1\x33\xf8\x9c\x41\xe7\x0c\x36\x67\x90\x39\x83\xcb\x19\x54\xce\x60\x72\x26\x91\xff\x0c\x00\x00\xff\xff\x98\xce\x64\x62\x6f\x1d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
