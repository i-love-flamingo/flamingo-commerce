type Commerce_Checkout_StartPlaceOrder_Result {
    uuid: String!
}
# Commerce_Checkout_PlaceOrderContext represents the result of the current (running) place order mutation
type Commerce_Checkout_PlaceOrderContext {
    # The Cart that is going to be placed
    cart: Commerce_DecoratedCart
    # The placed order in case order is already placed
    orderInfos: Commerce_Checkout_PlacedOrderInfos
    # State depending on the state of payment and place order - state may contain additional infos
    state: String! # todo: use correct GraphQL states..
    # A unique id for the process
    uuid: String!
    failedReason: String
}


# Commerce_Checkout_PlacedOrderInfos - infos about the placed orders - typically shown on a suceess page
type Commerce_Checkout_PlacedOrderInfos {
    paymentInfos:        [Commerce_Checkout_PlaceOrderPaymentInfo!]
    placedOrderInfos:    [Commerce_Cart_PlacedOrderInfo!]
    email:               String!
}

type  Commerce_Checkout_PlaceOrderPaymentInfo {
    gateway:         String!
    paymentProvider: String!
    method:          String!
    amount:          Commerce_Price!
    title:           String!
}


interface Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_New implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Wait implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Success implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Failed implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    reason: String!
}

type Commerce_Checkout_PlaceOrderState_State_ShowIFrame implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
}

type Commerce_Checkout_PlaceOrderState_State_ShowHTML implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    HTML: String!
}

type Commerce_Checkout_PlaceOrderState_State_Redirect implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
}

type Commerce_Checkout_PlaceOrderState_State_PostRedirect implements Commerce_Checkout_PlaceOrderState_State {
    name: String!
    URL: String!
    Parameters: [Commerce_Checkout_PlaceOrderState_Form_Parameter!]
}

interface Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}


type Commerce_Checkout_PlaceOrderState_State_FailedReason_Error implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError implements Commerce_Checkout_PlaceOrderState_State_FailedReason {
    reason: String
    validationResult: Commerce_Cart_ValidationResult!
}

type Commerce_Checkout_PlaceOrderState_Form_Parameter {
    key: String!
    value: [String!]
}

extend type Query {
    Commerce_Checkout_ActivePlaceOrder: Boolean!
}

extend type Mutation {
    # Only possible if Statemaschine not active or in a final state
    Commerce_Checkout_StartPlaceOrder(returnUrl: String!): Commerce_Checkout_StartPlaceOrder_Result!
    # Possible if state is not final
    Commerce_Checkout_CancelPlaceOrder: Boolean!
    Commerce_Checkout_RefreshPlaceOrder: Commerce_Checkout_PlaceOrderContext!
    Commerce_Checkout_RefreshPlaceOrderBlocking: Commerce_Checkout_PlaceOrderContext!
}
