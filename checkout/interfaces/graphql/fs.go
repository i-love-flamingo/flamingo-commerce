// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcd\x72\x13\x39\x10\xc7\xef\xf3\x14\xed\xf2\x05\x0e\xf0\x00\x73\x03\xef\xb2\x50\x05\x1b\xe3\x00\x7b\xa0\x52\xae\x8e\xd4\xe3\x51\x45\x23\xcd\xb6\x7a\x12\xa6\xa8\xbc\xfb\x96\x34\xc2\x1e\x7f\x6e\x08\x81\xe0\x53\x22\xa9\xff\xfd\xeb\x56\x4b\xea\x91\xbe\x25\x98\xf9\xa6\x21\x56\xb4\x9c\xd5\xa4\xae\x7c\x27\xcb\x73\x41\x96\xb9\x45\x45\x67\xac\x89\x97\x0b\x0a\x9d\x15\xf8\x5a\x00\x00\x74\x9d\xd1\x25\x9c\x0b\x1b\xb7\x9a\x14\xb7\xc5\xf4\x80\xc0\xc6\x76\xe6\x9d\xd0\x17\x01\xa6\x96\x29\x90\x93\x00\x52\x13\xf0\xa0\xe8\xab\xf4\x9f\xea\x98\xc9\x09\x3c\xe1\xce\x39\xe3\x56\x4f\xa1\x8d\x02\xe0\xa3\x02\x34\x9d\xa0\x18\xef\x8a\x23\xb4\xfb\xce\x06\xd0\x29\x7c\xa8\x09\x66\xc8\x02\x52\xa3\x80\x09\xb0\xf2\xc6\xad\x40\x3c\x5c\xd2\xe0\x42\xa7\x95\x0a\x59\xca\x8d\xf2\x1f\xa4\x3c\xa3\x90\x8e\xb6\x23\xa9\xc1\x22\x53\x19\x07\x0a\xc3\x37\x46\x13\x00\x2d\x13\xea\x7e\xac\x9b\xe6\xde\xb8\xca\x87\xf2\x18\xb7\x3e\x5b\xaf\xc9\x9e\xce\x05\x85\x40\x53\x4b\x4e\x47\x5a\xef\x52\x8e\x42\x1a\xf6\x15\xb4\xd8\x37\x31\x59\xe8\xf4\x56\x9a\x9e\xe5\x25\x0d\xf6\xa0\xbc\x13\x34\x0e\x50\x6b\x13\x53\x87\x16\xcc\xda\x45\x5a\xb6\xde\x41\x98\x82\x78\xed\x4b\xe8\x02\x81\xf2\xcc\xa4\x04\xfe\x62\x6c\xeb\xf7\x6f\x87\xa5\xe1\xf9\xf3\x8c\xf6\x02\x3a\x67\xfe\xed\x08\x8c\x86\xca\x73\xe2\x6a\xd9\x2b\x0a\xe1\x40\x69\xc4\x91\x0a\x8d\x25\xbd\x20\x0c\xde\x7d\x9b\x29\x6e\x8b\xe2\x78\xd5\x8c\x12\x02\xcf\x06\x6a\xc0\x4b\xdf\xc9\xe0\x6d\xb4\x05\x71\x5e\xfa\xd6\x28\xb4\xb6\x87\x50\xfb\x1b\x17\x93\x85\x10\x3a\x45\x14\x02\xb4\xb8\xa2\x93\x45\x33\xf6\x35\xd4\x4c\x4e\x6e\xde\xb3\xfc\xfb\x7c\xaa\xe6\xe6\x1b\x8b\xc9\xc5\xa0\xb1\x23\x5d\xee\x68\x20\xef\xb9\xcf\x96\xd4\xa0\xb1\x6b\xb7\xf9\xb7\x39\x69\x43\x2c\x27\x4f\xc0\x88\x26\x47\xb4\x42\xa1\x1b\xec\xcb\x3d\xbd\x51\xb8\x73\xf6\xd7\x46\x13\x6f\xef\x5d\x43\x52\x7b\x5d\xee\x93\xc4\xbf\xb1\xf1\x9d\x93\xd1\xe4\x9a\x6a\xce\x46\xd1\xb0\x48\x8c\x58\x2a\x0f\xc7\x52\x4c\x8d\x13\xe2\x2a\x16\xf0\xa9\x88\xd2\x71\x58\x0e\x87\xe2\x6b\x31\x8d\x2a\x0e\x9b\x4d\xfd\x16\xd3\xdb\xa2\x98\xfe\xef\xd5\x30\x92\x59\xfe\x4d\x37\x60\x9a\xd6\x52\x93\xee\xa3\x5f\xec\xfd\x1f\x34\xf2\x88\xee\xcf\x3b\x15\xcf\xeb\x23\x12\xbc\x4a\x77\xc2\xc3\x01\xc4\x21\xde\xba\x61\xee\x95\x97\xda\xdf\xbc\xa9\x18\x1b\x7a\x58\xb2\x8f\x8b\xb7\x3f\x8a\xf5\x5a\x1a\xfb\xb0\x50\xaf\x3f\xbc\xfb\x21\xaa\x05\x69\x93\x1e\x8a\x9f\x9a\xaa\xe9\x77\x52\xcd\x7d\x90\x5f\x41\x16\x47\xe6\x18\x4b\x45\x88\x43\x79\xe8\x7d\x78\xe5\xb9\x59\xae\xd7\x4c\x2e\x52\x8e\xbf\xfb\xc2\xcb\x47\x65\x78\x3e\xf3\x7d\xce\xfb\x6f\xe9\x3d\x4e\xdf\x20\xb9\xfc\x93\xd9\xf3\x3d\x52\x75\x37\xb0\xfb\x73\xe5\x67\xec\x77\xc5\x8b\x4f\xf8\x27\xb4\x46\xa7\xbe\xf4\x27\x52\xc6\xa1\xeb\xb5\xa3\xa1\x0d\x1f\xb7\x92\xb1\x95\xf8\xb4\x33\x3f\x39\x11\xdb\x76\x59\x66\x9f\x57\xd4\x6f\x3f\xfc\xd7\x68\x3b\x2a\xe1\x73\x1e\xbb\x88\x82\xf4\x45\xc8\x69\x48\xba\xef\x3b\xe2\x3e\x1b\xef\xfb\x78\xa1\xc4\x5c\xd3\x26\xe2\x12\x5e\x7a\x6f\x09\xdd\x64\x57\xe7\x5d\x6e\xec\xd7\xfd\xfa\x99\xb3\x3d\xb4\x3e\x04\x73\x69\x09\x4c\x35\xf4\xc2\x0d\x06\x55\x1b\x47\xe0\xbc\x00\x26\x75\xf0\xa9\x01\x47\xa8\x4c\xec\x6d\x53\x9b\x7a\x04\x67\xe7\x5b\xe6\x09\x93\x74\xec\x3e\xb2\x5d\xc7\xfc\xf4\x50\x73\x7e\xf8\x13\x68\x92\x41\xe7\x23\xc6\xa1\xeb\x36\x21\xe1\x25\x9e\x23\x24\x33\x74\x8a\xec\xc1\xc4\x1c\x36\x58\x50\xc5\x14\xea\xb1\xc5\x1d\xbe\x7e\xee\xac\xf6\xd2\x7a\x75\x65\xdc\xea\x8e\xaa\xb7\xc5\x7f\x01\x00\x00\xff\xff\xa3\x06\x06\xea\x2e\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
