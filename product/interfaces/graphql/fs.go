// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xef\x6e\xdb\x36\x10\xff\xee\xa7\x60\xbc\x0f\x4e\x30\xd7\x0f\x90\x6f\xae\x9b\x6e\x41\xe3\x36\xab\xbd\x6e\x40\x51\x04\x67\xe9\x64\x11\xa5\x48\x8d\xa4\xd2\x68\x45\xdf\x6a\x4f\xb0\x27\x1b\x8e\xa4\x64\xfd\xb5\xd3\x75\x18\x36\x20\x06\x5a\xa0\xe4\xfd\xe3\xdd\xef\x7e\x3c\xaa\x5c\x5a\xd4\x09\x44\xc8\x56\x2a\xcb\x50\x47\x78\x77\xab\x55\x5c\x44\x96\x7d\x9e\x30\xc6\x98\x2d\x73\xbc\x64\x1b\xab\xb9\xdc\x9f\xb9\x95\x0c\xf4\x47\xb4\xb7\x02\x22\x5c\xa9\xb8\xb3\xc9\x63\x94\x96\x27\x1c\x75\x47\x09\x63\x0e\x97\x3d\x27\x77\x6b\x5a\x3f\x9b\x3b\x99\x5c\xf3\x08\x07\x64\x6e\x69\xfd\x5a\x26\x2a\xc8\x59\x6e\x45\xc7\x6d\x04\x16\xf7\x4a\x73\x34\x03\xfa\xab\x7a\xd3\x0b\xc7\x68\x22\xcd\x73\xcb\x95\x6c\x5b\x31\xa9\xd2\xf6\xc5\xd8\x6e\x86\x76\xf8\x04\x16\xbc\x80\x50\x25\x08\x5b\x0e\xc8\xdc\xf8\x1d\x2f\x06\xd6\x6a\xbe\x2b\xec\x60\xac\xcb\x7a\xf3\x6c\xf2\x65\x32\x99\x4e\xa7\x93\x25\x33\x3c\xcb\x05\xb2\xdc\xcb\xcc\x99\x4d\xc1\xb2\x14\x0c\x93\x8a\xdd\x83\xe6\xb0\x13\xd8\x30\xcb\x40\xc6\xcc\xa6\xa8\x31\x51\x1a\x49\x48\xa3\x00\x3a\x10\xb3\x8a\x29\xda\xa9\x6c\x19\xe7\x81\x6a\xdc\x0f\x65\xe3\xbc\x56\x68\x70\xff\xc8\x50\x5a\xf3\x84\x94\xff\x2e\x52\x22\x25\x13\xbe\x2f\xb4\x43\x44\xa8\x31\x8b\x31\xe1\x12\x0d\x41\x82\xe5\xca\x18\x4e\x9b\x0e\x37\x14\xba\x61\x2a\x61\x50\x09\x2f\xd8\xb5\x65\x4a\x8a\x92\x4c\x59\xe0\xd2\x4c\xb8\x4c\x94\xce\x3c\x7e\x60\xa7\x0a\x5b\x1b\x76\x36\x08\x11\xbb\xa2\xc6\x23\x44\x96\xdf\x63\xb5\xc5\xb8\x35\x28\x92\xc5\x11\x98\xad\x1a\x21\x3f\x81\xed\x7f\x00\x36\x12\xae\xd1\xb3\x41\x81\x91\x83\xd1\x25\x7b\xdf\x53\x7b\xd7\x13\x3b\xfb\x50\x83\x55\xf6\xb0\x62\x98\x92\x48\x70\xcc\x40\x3a\x00\x46\x1a\x2d\x1e\x60\xe6\x78\x0f\x7a\x20\xbf\xe7\x31\x9a\x05\x5b\x0a\xc1\x62\xb0\xe0\xd9\x8e\xf0\xae\x9c\xbd\xb6\x97\x09\x91\xa3\x54\xd6\x75\x03\xfd\x69\x5a\x73\xe8\x07\x61\x54\x8d\x7e\xd6\x47\x3f\xb7\x7f\xfe\x61\x18\x75\x11\x97\x7b\xc3\xce\x3d\xa1\xd6\x41\x12\xcb\xa6\xc8\x0c\x64\x6d\xdb\x17\x47\x7a\x60\xe9\x42\x7c\xe7\x4d\x7c\x4b\x13\x4c\xb7\x29\x76\x3b\x81\x12\x4a\x11\xcd\x9a\xd1\xcc\x0e\x0d\xbf\x41\xf4\x67\x9e\x85\x33\xac\xdb\xfa\x33\x96\x28\xed\x2c\x54\x85\xea\x38\x98\x3e\xf5\xdf\xbf\xdd\x7f\xc7\xea\x0c\x91\x2d\x40\x54\xc5\x9a\x1e\xfa\xb5\x57\xd9\x0e\x76\x56\xe3\x98\xf7\x18\x87\x7b\xe0\xa2\x75\xb5\x1c\x6e\x91\xe9\x37\xf3\x42\x15\xc3\x3d\x4a\x8e\x32\x72\x4e\x72\xd4\xb6\xa4\x46\x86\x28\x42\x63\xaa\xf3\x35\x59\x43\xc0\x0e\x85\x61\x08\x86\x8b\xd2\x47\x01\x87\x76\x3a\x1d\xcb\x72\x44\x38\x30\xd5\x92\xed\xb5\x2a\x72\x77\x49\xd6\x45\x58\xb0\xab\xc5\x7e\xc1\x66\x86\xff\x8e\xb3\xb1\xa6\xee\x9b\x0c\x6d\x1b\xf5\x52\xef\xce\xd0\xa9\x06\xd1\x59\xb8\xad\x79\xeb\xba\xf6\xdd\x48\x4c\x58\xc5\x53\x85\xb3\x9e\xcd\xd9\xec\x86\xfe\xfa\xf5\x66\xe6\x53\xa1\xf2\xaf\x28\xc2\xdd\x1b\x27\xed\x0f\x7e\x05\xa6\x7c\x66\xd5\xb3\x90\xf9\x66\x31\x62\x6e\x72\x01\xe5\x21\x80\x01\xc4\x40\x97\xde\x1f\xc1\x7d\x7f\x3b\x59\xf7\x20\x8a\x86\x94\xab\x9b\x0c\x67\x77\xf9\x82\xa1\x2a\x3e\xbe\x70\x21\x31\x21\xa4\x81\x00\x8c\x05\x3b\xc4\x51\xa3\xa6\x36\xa4\x10\x2a\x3d\xf5\xa5\x3a\xd2\x7e\xf5\x78\xe6\x0b\x9f\x81\x8d\x52\x37\xd0\xd1\x95\xe9\xec\x2d\x9c\x89\x17\x98\xa3\x8c\xb9\xdc\xd3\x2d\xc4\x13\xff\x08\xa0\x7b\xb5\x57\x0d\xa6\x34\xdd\x82\x73\xc6\x2d\xb3\xc4\x81\x54\x57\x2e\x23\x51\xc4\xd8\xe4\xfa\x40\xad\xe4\x75\x87\xa6\xe9\x1a\x59\x54\x68\x8d\x64\xaa\x11\x41\x75\x98\xa0\xfe\x35\x29\x09\xd7\xdf\xd9\xdc\xd5\xef\xba\x97\x04\x72\x59\xc8\x18\xb5\x28\xe9\x84\x27\x60\x75\xca\x4d\xa8\xe5\xe8\xad\x45\x31\x10\xc9\xba\xca\x3a\xdc\xd4\x80\xf2\xf3\x45\x4c\x19\x6b\xa4\x41\x94\x3d\xc0\xa3\x2c\xb2\xaf\xc5\x44\x88\xcb\xf9\x1e\xb3\xec\x66\x6d\x57\x7c\x7c\x80\xa8\x41\x04\xec\x7b\x06\x42\x54\x6c\xdd\xd6\x69\xe2\x9e\x3c\x2c\x57\xdb\xeb\x77\x57\x81\x6b\x6a\xa9\x30\xcd\xd8\x14\xe4\x00\xd9\x5e\x30\x7c\xe0\xc6\x9a\xf9\x00\x0e\xbf\x21\x94\xf5\x72\xbb\xfa\xd1\x47\xf2\x5a\xd5\x52\xff\xb0\xab\x85\xf7\xf5\xfa\xcd\x9d\x77\x47\x05\xfe\x45\x43\x9e\x63\xa0\xd3\x80\x7e\xc3\x32\xe0\xb2\x1a\x1d\x4a\xf7\x98\x26\xf3\x87\x59\x62\xf4\x25\x53\x4b\xd4\xe0\xe2\x72\x7c\xf0\x28\xb7\x08\x06\x75\xb8\xfd\x85\xb8\x64\x6c\x80\xa5\x3b\xc2\x9e\x9b\x69\xb8\x18\xa0\x09\xf7\xc0\xf3\x7a\x63\x31\x3a\x4d\x1f\xdd\x47\x2c\x3f\x29\x1d\x1b\xf2\xeb\x7e\xef\x03\xf6\xbd\x8f\x30\x9c\x0c\xba\xe1\xe6\x94\x9f\x4a\xfb\x73\x73\x84\x63\x9e\xe6\x86\x45\x0f\xf3\x9c\x53\x41\xd0\x92\xcb\xfd\xe5\x51\x95\x2b\x2f\xe4\x94\xbe\x4c\x8e\x87\x72\xb0\x3f\x3a\x3d\xc7\x98\x40\x21\xda\xa4\xc5\xa3\x40\xd3\xdc\xbc\xe0\x26\x52\x85\xb4\x18\x5f\xb2\xe7\x4a\x09\x04\x19\xf4\x1a\x1b\x43\xaa\xd5\xfe\x16\x1f\x6c\x67\x78\xe4\xf2\x56\x71\x69\xcd\x56\x6d\x72\x24\xbe\x7c\x29\x14\xd8\xea\x45\xfb\x30\xbe\x49\x0f\x14\x67\x6e\x78\x2e\x5e\xf9\x6d\xcf\x63\x9b\x54\x7d\xf2\x94\xed\x32\x14\x3e\x0f\xb1\xdc\x19\x77\x99\xc6\xf8\x44\x21\x9b\xa9\x6e\x52\x94\x53\x0a\x83\x67\x10\x6d\x48\xce\x19\xd2\x60\xb2\xe6\x02\xcd\x52\xc6\x6b\xa5\xc3\x63\x61\xe4\xe5\xe2\xee\xf1\x63\xe6\x3c\x23\x46\x25\x8b\x40\xb2\x1d\x7a\xf3\xe1\x1c\x4a\xb3\x8c\x1c\x4d\x8f\xd7\x72\x14\x27\xcd\xbc\x55\xc3\x47\x61\xac\xca\x50\xff\x40\xc3\x43\xe7\x69\x91\x82\x94\x28\xfa\x63\xb4\x50\x11\x88\xf6\x45\x32\xd6\x8a\x31\xaf\x7a\xd1\xb5\x7f\xbf\xf9\x9d\xc8\xb5\xc5\x2c\x8c\xc7\x7b\xb4\x6e\xe9\xbc\x30\xb0\x3f\xf8\xb8\x18\x7b\x41\x39\xd5\x13\x11\x90\x4c\xab\x23\xdc\xaf\x0d\xd2\x0c\xb7\x7e\xab\xb9\x1c\x62\xe8\x4a\x87\x67\x58\x77\x59\x63\x82\x54\xba\xc7\x64\xe6\xf0\xda\xa9\xd2\x53\x2d\xbc\xc2\x92\x66\xd9\x9a\xa8\xba\x0f\xa7\x81\xf1\xbe\xda\x0d\xd2\x29\x98\x7a\xe9\xfc\x23\x96\xcd\x24\x86\xa6\xae\x52\x3d\x2a\x37\xee\xa4\xa7\x6a\x9e\x97\xaf\xb0\x24\x03\xcd\xb8\x2f\x4e\x45\x7a\x3a\x35\xa3\xe3\x31\xad\xdc\xf4\x27\xd4\x81\xa1\xb5\x90\xdc\xf6\xf1\xeb\x7a\xb0\x95\xe4\xd1\x60\xda\x77\xd3\x68\x44\x39\xd8\xb4\xbd\x22\x21\xeb\xc9\x68\x1c\x1c\x17\xdb\x3e\x4e\x74\x6f\x83\x9d\x46\xfa\xff\x04\x5f\x9f\xa0\x6b\x3f\x5c\x3c\x07\x83\x2d\x2e\x3e\x2c\x2f\x33\x52\x1c\xd9\xfc\x59\xf2\xda\xde\xf8\x95\x12\x3e\x5c\x64\x39\xf0\xbd\x7c\x5b\x08\xec\x01\x3e\x46\x59\x12\x95\x56\xca\xa6\xad\xfb\xdd\xe3\xaf\x07\xdf\xb0\xf0\xb0\x12\x60\xcc\x23\x1a\x73\x83\xa0\xa3\xf4\x2d\x9a\x42\xd8\xfa\x6a\xf7\xff\x91\x30\x80\xe8\x10\x6e\x02\x11\xb6\xf7\xbd\x99\xbb\x97\xb4\x71\xf6\x21\xbc\xa0\x8a\xfd\x1e\x4d\xef\xb1\x1a\x44\x37\xf5\x6e\x30\x6a\xdc\xfa\xba\xfd\xed\x25\x08\x1f\x3e\xbd\xa4\x60\xfc\x90\x8d\xb1\x73\xd6\xb8\xb7\xbf\x4c\x26\xf8\x60\x91\xae\x42\x3a\xea\x4f\x05\xea\x6a\x5a\xe9\x9e\xe3\x7c\xec\x91\x30\x3f\xf1\x5d\x65\x80\x2a\x06\x1d\x84\xc0\xcf\x4d\x48\xef\x6f\x05\x1a\xdb\x3f\x57\xd8\x18\x22\xa0\x66\x61\xe8\x6c\x7f\x05\x00\x00\xff\xff\xb9\x34\x5f\xb7\xd7\x1b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
