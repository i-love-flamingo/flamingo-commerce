// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdc\x36\x12\x7f\xf7\xa7\x90\xdd\x97\x6d\x90\x6b\x71\xf7\xe8\xb7\xf5\x6e\x12\x2c\x5a\x3b\x89\xed\xe6\x1e\x82\xc0\xa0\xa5\xd9\x5d\x5e\x28\x52\x26\x29\xdb\xc2\x21\xdf\xfd\xc0\x7f\x12\x49\x91\x92\x9c\x00\x05\x7a\x77\x7d\xe8\x5a\xe2\x70\x38\xe4\xfc\x38\xfc\xcd\x50\x91\x5d\x03\xc5\x86\xd5\x35\xf0\x12\xee\xb6\x50\x32\x8e\x24\x54\x1b\xc4\x65\xf1\xef\x93\xa2\x28\x8a\x12\x71\x79\x3e\x88\xa8\x96\x53\xdd\x50\x39\xe1\x2d\x10\xfc\x08\x1c\x83\x38\x2f\x3e\x07\x82\xdb\x48\xa4\x3b\xfd\xa2\xbb\x1e\x60\xdc\x74\xd1\x6d\x58\x05\xab\xca\x3e\xaa\x87\xf3\xe2\x46\x72\x4c\x0f\xa7\x3f\x47\x06\x8c\x3a\x3b\xad\x6b\x42\x3e\xa0\xae\x06\x2a\xaf\xe1\xa1\xc5\x1c\xaa\x9d\x84\x5a\x44\xdd\xef\x3e\x70\x5c\xda\xa6\xd3\x7e\x92\x37\x6d\x5d\x23\xde\xc5\xb2\xf6\xf5\xe9\xc9\xb7\x93\x93\x70\xb5\xfc\x66\xbb\x58\x15\x16\x25\x6b\xa9\x8c\x47\x5c\x37\x0d\xc1\x50\x6d\x5d\xb3\x19\x55\xb4\x75\xdc\xe0\xf5\xd3\x46\x46\x72\xef\xf0\x5e\x6e\x10\xaf\xb2\x72\xef\x38\xa2\xd5\x2d\x93\x88\xfc\x13\xcb\xe3\xac\xb8\x96\x74\x83\x07\x3d\xd6\xb5\x7a\x95\xec\x77\x44\x62\x6c\xf6\x05\x63\x04\x10\xed\x27\x76\x8b\x9e\x61\xb4\xee\xfa\xa5\x93\xb0\x8e\xba\x01\x02\xa5\xc4\x8c\x2a\x89\x9b\x86\x60\xf9\x09\x91\x16\xcc\xf8\x17\xdd\x25\xc8\x23\xab\xc4\xaa\x36\xbf\xe7\xc5\x67\x8b\x89\x2f\x3f\x8f\x8c\x4b\x7a\xc8\x7a\x06\x57\xe7\xc5\x6e\x6b\xcc\x03\x2a\xb1\xec\x76\xdb\x1e\x5f\xfa\xed\x3d\x26\x04\xd3\xc3\xba\xaa\x38\x88\x91\x03\xcd\x5b\x2d\xd8\xb4\xbc\x3c\x22\x01\x3c\x92\xf9\x00\x5c\x30\x6a\xf7\x46\x7e\x4b\x04\x3b\x01\x55\x15\x56\x93\x47\x64\x8b\x24\x1a\x0f\xea\x35\x1a\x2b\x9b\x68\xd5\x46\xd0\x8e\xda\xcd\xd4\x80\x30\x7a\x10\xb7\x6c\xdd\xca\xa3\x9a\x7d\xa9\x36\xcf\x1f\x7a\x0a\x81\xe3\x50\xdc\x1e\x2f\x12\x32\x8e\xdf\xb0\xb6\x61\x54\xed\xd1\xd1\x04\x87\x26\x3b\xc5\x0a\xf6\xa8\x25\x72\xd3\x72\x0e\xb4\xec\x42\x7d\x52\x01\x10\x9b\x3d\x1a\xea\xb9\x75\x2d\x56\x8d\xfa\x73\x63\x30\xb9\xa3\x36\x04\x35\x9c\x55\x6d\x29\xe3\xd7\x58\x04\xab\x00\x55\x34\xcb\x43\xbf\x49\x62\x08\x9d\x06\x1b\xe3\x16\x3d\xa7\xb7\x81\x13\xbb\xd7\x62\x57\x90\x11\x40\xa3\x4d\xfb\x39\x15\x15\x5c\xbb\x1f\x1c\xbf\x27\x26\x86\xa1\x70\xeb\x75\xf2\xb7\xcd\x89\x13\xb8\x44\x98\xde\x1c\x71\xd3\x60\x7a\x78\x73\x89\x30\x09\x3d\x83\xc5\x9b\xba\x91\x5d\xb4\x74\x47\x24\x9c\xe2\xb7\x8c\x4f\x5a\xd7\xf7\x1b\xcf\x4a\x45\xde\xdd\x76\x85\xf5\xcf\xec\x8c\x4e\x9d\x82\xa5\x1d\x95\x54\xdf\x49\xbb\xe8\xa3\xec\x56\x35\xe2\x5f\x41\x7e\x20\xa8\x84\xc0\xd4\xd7\xc5\x23\xe2\x18\x51\x19\x4f\x60\x47\xe5\x30\xf2\x9b\x67\x09\x9c\x22\x72\x0d\x7b\x50\x38\x86\x15\x87\xfd\x8c\x05\xae\xf7\x27\xd6\x96\x47\xe0\x37\xe8\x11\xd3\xc3\x28\x16\xf7\x96\x6a\xd4\x43\x22\xb0\xdc\x99\xb7\x56\xa1\x68\x6b\xe7\xb6\x2c\xf2\x42\x19\x15\xd8\xb3\x27\x4c\xef\x57\xd7\x61\xc3\xc4\x28\xa0\x23\x42\x5c\xf3\x2d\x96\x24\x01\x28\xb7\x19\xde\x71\x26\x32\x63\x04\x22\x0b\x6c\xf2\xf6\xd7\x22\xe9\xf0\x34\x9b\xde\xb9\xf5\x15\xa3\xca\x49\xd7\x40\x34\x8f\x58\xd6\xe9\x85\x3d\x86\x83\x72\x08\x8a\x89\x7d\xd1\x33\x16\x8b\xac\x70\x1f\x3a\x08\x6b\xb6\x72\xd1\xdd\x76\x0d\xac\xd4\x29\x17\xa3\x75\x3a\x7a\x0e\x21\x6f\x73\x44\xfc\x00\xa3\x45\xbc\xb3\xef\xad\x59\x83\xe9\x5e\xf4\x8a\x23\xc1\x35\xd4\x08\x53\x4c\x0f\x29\x99\x34\x5d\xf2\x98\x97\xc7\x2f\x2d\x49\x8b\xe6\x60\x85\xfb\xfd\x64\x66\x22\x2c\x0e\x27\xfb\xdc\x78\x42\xb6\x9f\xec\x17\x31\x5e\x2b\xdb\xa7\x5f\xe5\xd3\x2f\x93\xc6\x3b\x7b\xac\xfd\x68\x02\x00\x51\x9c\x9a\x54\xeb\x9b\xbc\x40\xb5\x8b\xba\x3b\xba\x67\x01\x14\x26\x07\xe9\xe7\xb8\x60\x84\x72\x81\xd6\x5b\xf4\xbc\x40\x93\xea\x18\x82\x5a\x91\xf7\xf3\xe2\x2d\x61\x48\xe6\x35\x83\x83\x48\x92\x1f\x28\x89\x2f\xde\xd1\x60\x36\x06\x7a\xbe\xf5\x06\x8b\xc3\xb2\xea\x93\x9d\x8a\x8e\xb1\x76\xc4\x90\x58\xf4\x27\xc1\x6e\xe0\x20\xfa\xd1\xbe\x4e\x1f\xb5\x1a\x45\x98\x4a\xe0\x7b\x54\x8e\xdc\x11\xd1\x34\x3b\xee\x01\x49\x78\x42\x29\x8e\xa4\x49\x71\xc6\x51\x8e\x38\x8f\x81\x1d\x8d\x72\xa7\xc5\xf2\xf8\x4e\x8a\x5b\xd3\x1e\x5a\x44\xf0\x1e\x8f\x0f\xa7\x74\xaf\x8f\x4e\xdc\xda\xa8\xa3\x4b\x26\xe8\x64\x31\x3b\xad\xd9\x1a\x36\x46\x97\xc9\x15\x22\xc4\x8d\xa3\x6b\x7a\xd0\xad\xa1\xab\x23\x07\xe1\xba\x21\xa0\x5e\x89\xbf\x80\x2b\x47\x09\xb2\xcb\x4f\xed\xe3\x24\xd3\xea\x13\xfb\x64\xb4\xdc\xfa\xad\x89\x7c\xde\x85\xc7\x8b\x6e\x57\xad\x6c\xd6\x95\xcd\xdf\x95\x60\x6e\x06\x49\xc3\x55\xb8\xcb\x18\xaf\x9a\xfa\x45\x4c\x86\x8c\xcc\x29\x12\xe9\xf3\x03\xf1\x3c\xb5\x99\x49\x28\x96\xe5\x13\x73\xe9\xc4\x0b\x08\xce\xf7\xf0\x9b\x17\xd3\x9b\x17\xd2\xb9\xef\x60\x73\x47\x24\x2c\xfa\xa6\x09\x85\xef\x7c\x47\x28\x82\x73\x4b\xbd\x79\x62\xfc\xeb\x9e\xb0\xa7\xf9\x28\x51\x22\xce\x75\x88\xf3\x5f\x3a\xec\xfd\xce\x4a\x94\x48\xb9\xb7\x51\xb3\xed\x23\x30\x87\xea\x16\xd7\x70\x5e\xa8\xff\xf7\x15\xaa\x20\xa7\x5f\x7d\x85\xce\x27\x71\x41\xaa\x1d\x48\xfe\x06\x5d\x40\xba\x95\xc4\x4f\x91\x98\xb7\x16\xe2\xbc\xa8\x51\xf3\x59\x98\x93\xe8\x5f\x82\xd1\x5f\xae\xd1\xd3\x25\x08\x81\x0e\xb0\xa0\xf3\x25\x6a\x06\xa9\xd0\x6c\x4f\x30\x36\xff\x12\x35\x23\xdb\x3d\xf1\x78\x0e\x93\x1e\x75\xcb\x59\x64\xc3\x3c\x9a\xad\xd4\xb4\x02\x2e\xa2\xaa\x4e\xc0\x61\x17\x50\x9c\x04\x2d\x93\x2a\x03\x0a\x4d\x69\x14\x72\x73\x1b\x57\x4e\x6e\x7b\x94\xaf\x00\xe6\x2b\x87\xd2\x55\xf8\xdc\xfb\x1d\x2d\x55\x78\xc9\xf0\xaf\xa0\x61\x86\x08\xc5\x03\x4e\x71\xb0\x48\xd6\xc2\xf2\xbe\xdb\xa0\xba\x41\xf8\xa0\x13\x9e\x55\xe9\x3d\x78\xc4\x6c\xc9\x34\xef\x0d\xab\xdb\x63\x22\x81\x4f\x11\xbb\x71\xf7\x25\x73\xeb\x33\x10\xdf\xc0\x30\x1e\x78\x79\x5b\x11\x36\x11\x74\x0f\xc4\xf0\xc0\xb8\xc9\xba\xd4\x35\xe6\x29\x71\xb2\x37\x16\x5e\x1c\x8e\x0b\xab\x8c\xcb\xf7\xbc\x52\x11\xca\x12\xd0\x6c\x5c\xf4\x4e\x58\xcf\x85\x89\x3a\x85\x4f\x78\x03\xfc\xe8\x37\x69\xf5\xbe\x56\xbf\xb0\x1a\x17\x49\xa2\x88\xab\x2b\x30\xcd\xa8\x02\xa3\x1b\x6d\x11\xe6\x32\x53\xa5\xf1\xad\xbc\x42\x75\xd4\x20\x58\xcb\x4b\x88\x8b\x95\x0f\xb2\xf3\xaa\x82\xf3\xf1\x34\x94\xd0\x34\x6d\x24\xb3\x30\x84\xf7\x49\x74\x3c\x68\x2c\x6e\xdd\x6b\x66\x81\xe9\x81\x80\x46\xc9\x54\x19\x65\x90\xca\xd6\x7f\x38\x7b\x9a\x53\xe3\x44\xe6\xaa\x97\x2f\x0b\x4c\x3f\x59\xd5\x71\xf9\x5f\x3f\xe7\x76\xa5\x89\xcd\x16\x4f\x8f\x48\x7a\x1b\x23\xbd\x45\xf6\x98\x0b\x49\x35\x0a\xb2\x32\x04\x25\x45\x42\x40\xe2\xaa\x22\x70\x35\x92\x0a\x28\xbb\x89\xf6\x93\xf6\x08\x44\x5a\x69\xb9\x41\x56\x46\x72\x80\xc4\xd4\xc6\x32\x57\x7c\xca\xe6\x01\xa4\x76\xdd\x7e\xc7\x74\x0c\xd3\x92\xd5\x0d\xa2\xdd\x68\xb8\x20\xb8\x61\x39\x16\x88\x64\x1a\x26\x64\x1f\xfe\xb2\x56\xeb\x6c\x7e\x52\x0f\x87\x03\xf6\x02\x69\xda\x1e\x85\x23\x3e\x63\xb3\x91\x19\x29\x0a\x3c\x06\x04\x9a\x23\xa3\x53\xe8\x80\x5a\x17\xbc\xb3\x36\x27\x81\x6a\x2e\x78\x5c\xc1\x63\xfe\x9e\x48\x8b\x2b\x0a\x24\x11\x26\xb1\xe4\x87\xb0\xd5\x05\x50\x2c\x24\xa6\x87\x4d\x2b\x24\xab\x81\x27\x2e\x85\xde\x24\x44\xd2\xe6\xa6\x24\xa3\xa0\x3d\x31\xcd\xde\x32\x97\x81\x21\x09\xef\xf7\x17\x98\xcb\x63\x14\x94\x91\x10\x0d\xe3\xa6\x58\xc2\xbb\x74\xe3\x55\x5b\xdf\xc7\xbc\x9a\x22\x83\x63\x0d\xc3\xc9\x85\x0f\xa3\xa8\x35\x48\x87\x9a\x52\xcf\x6d\x2d\x25\xc7\xf7\xad\x04\x8f\xb9\x72\x10\xc0\x1f\xa1\xd2\xc7\xe5\x6c\x11\xae\xaf\x97\x66\x93\x88\x1c\xeb\x5b\x52\xf2\x4a\x0e\x39\xd4\x84\x93\x63\x4e\x11\x18\x57\x6f\xcd\x1a\xdb\x33\x90\x64\xe4\x77\x65\xdb\x6c\xea\x75\x3d\x48\xcc\xd4\x73\x3f\x21\x82\x2b\xed\xc7\x6b\x10\x2d\x71\x94\xea\x88\x84\x92\x63\xf4\x0d\xe7\x6c\x08\x67\x11\xf9\xee\x05\x6c\x5e\xf2\x1b\x44\xe8\xc1\x9a\x08\x29\xbd\xc2\xdf\xab\x51\x69\x44\x91\x91\xc1\x0e\xad\x30\x5b\xe2\x4a\xc8\x7a\xec\x48\xc1\x24\x1d\x2e\x72\x56\x7e\x3b\x49\x0e\xf3\x51\x76\xd7\xa0\x92\xaf\x72\xb4\x34\x58\xb8\x96\x81\x21\x86\x0b\x53\xa3\xe7\x35\x21\xec\xc9\x6b\x2f\x06\x1a\xd3\x7b\x6f\x8b\xf7\x3d\xcb\xf2\x5a\x8d\x6e\xc6\xbd\x53\x6d\xa6\x32\xac\xb8\x96\xdd\x26\x43\x16\xcd\xd4\xb3\xdb\xb5\xd1\x6a\x84\x37\x7e\x73\xfa\xc3\x0c\xec\x2d\xe3\x6e\x8f\x9d\xd9\x16\x17\x4a\x8b\xbd\x6a\xab\x90\x44\x67\xe6\x94\x67\xbc\x36\x01\xd0\xfc\x17\xaa\xf5\xf4\x19\x6d\x83\x5b\x0b\xb6\x2f\x44\x6b\xb6\x80\xbb\xd6\x77\x83\xbc\x2e\xa0\x6e\x64\x57\xe0\x7d\x3f\x2c\x16\xc5\xa3\xea\x7b\x66\xf9\x87\x53\x93\xa8\x35\xdd\xa9\xe1\x3c\xd0\xf7\x35\xa7\xb3\x9b\x23\x7b\x12\x4a\xab\x3c\x42\xc1\xe1\xa1\x05\x21\x8b\x27\x24\x0a\xd1\x96\x25\x08\xb1\x6f\x09\xe9\x14\x81\x55\x0f\x60\xc7\xea\x1f\x07\x1e\x98\xf9\xca\xc4\x5e\x64\xf7\x57\x45\x1e\xa0\xbe\xcf\xe0\xc5\x43\x27\x14\x38\xff\xbd\xc5\x40\xaa\x42\x34\x50\xe2\x3d\x2e\x3d\x43\xcc\x7e\x11\xd6\x8d\x4a\x4a\xef\xb4\x71\x0d\x5f\x2b\x7f\xdb\x0b\x58\xf2\x72\xf6\x0e\x28\x70\x44\x72\x1a\x0f\xa6\x79\x4a\xe7\x74\x14\x18\x44\xdc\x54\xd6\xc5\x57\xe8\x14\x6e\x94\xfb\xf4\x58\x45\x6d\xb6\xfb\x2f\xc5\xfb\xbd\x04\x5a\xb4\x02\x2a\x05\xc9\x42\x72\x44\x05\xd1\x56\x9d\xd9\x42\x52\x3a\x7a\x9d\xad\xd5\xda\xa0\xaf\x0a\x7d\x46\xa5\xce\x19\x03\x85\x92\x15\xe2\xc8\x9e\xd4\x2f\xd0\x4a\xbd\xe3\xc5\xdf\x0a\x4c\x8b\x12\x09\x28\x28\xf3\x47\x33\xec\xc0\xae\x81\xfd\xaa\xe2\x77\x93\x85\x4e\xef\xc0\x68\x95\xff\xcb\xe6\xac\x87\xdd\x55\x40\xa5\xb9\x15\x50\xf6\x22\x13\x4b\x34\xf4\x3c\x14\x86\x89\x63\x7a\xb1\xc6\x71\xea\xff\x19\xc9\x6c\x46\xe2\xf2\x90\xbf\x9f\xcf\xcb\xfc\x23\x27\xf3\xbf\x9c\xb3\xe8\x7c\xc5\x3b\x6e\x53\x32\x0b\x72\x16\x4c\x9b\x56\xe6\x01\xbd\xd3\xcd\x4b\x50\xfd\x27\x82\x7a\x01\xa6\x17\x40\x7a\x01\xa2\x17\x00\x7a\x01\x9e\x17\xc0\x79\x01\x9a\x17\x80\x79\x01\x96\x17\x40\x79\x01\x92\x17\x00\x79\x01\x8e\x17\xc0\xf8\x47\x50\xec\xae\x05\x2c\x9a\x7d\x24\x9f\xfd\x41\xf1\x43\x0b\x3d\x2d\xd5\xf9\x90\x3a\x5d\xb0\x39\x14\x3a\x7d\xc0\xb9\xd6\xb3\x04\x85\x0d\x8e\x92\xfe\xe6\x31\x43\x4b\xab\xd0\x92\x98\x70\xc5\xdb\xad\xa7\x87\x2d\xa9\x8c\x21\x2a\x85\xb5\xa7\x6e\x44\x4e\x8b\x7b\xf0\xce\xdc\x23\x16\x91\xd5\x73\xf7\x19\x67\xef\x1b\x93\x26\x17\xee\xda\xa2\x30\xdf\xcf\xba\x43\xdb\xbf\xf1\x5a\xd2\x23\xba\x0f\xcb\x5e\x99\x07\x2b\xe2\x53\xfc\x3f\xd7\x35\x2f\xcc\x18\x02\xce\x3e\xe5\x16\x61\xbc\xf7\xa3\xde\x59\xec\x94\x5e\x70\x63\xd6\x3f\xed\x8c\x62\x22\xeb\xa9\xa2\x95\xfa\x0b\xa4\x3d\x53\xbb\xde\x2d\x88\x41\xeb\x62\x70\x21\x5a\xbc\x7a\xe5\x6a\x6a\xaf\x5e\x2d\x07\xda\x02\x4f\xc5\x92\x53\xae\xd2\x51\x0d\x9e\xa5\xa2\xbb\x7a\xff\x7c\x6c\x87\x4f\x1b\x82\x19\x7b\x0b\x1f\x7c\x51\x71\x3a\x16\x75\xfe\x60\xa3\x2f\x72\xe2\xa2\x8c\x35\x75\xaa\x44\x51\x70\x90\x2d\xa7\xbd\x2b\xed\x4d\x8b\x02\x09\xef\xcb\x15\x8a\xa3\x4b\xe0\xb5\x70\xfb\x04\x99\x32\x45\xf1\xd0\x22\xfd\x49\xbd\xdd\x19\x50\x94\xfa\x63\x6f\xa9\x3f\xc5\x28\x10\x35\x81\xef\x80\x1f\x81\x46\x3e\x98\xb2\x69\x95\xbb\x2f\x4a\x7e\xb1\xfb\x3a\xed\xcf\xd1\x27\x60\xa9\xd2\xcc\xc8\x3f\x97\x96\x69\xc4\x2e\x5a\x57\xd5\x2d\x53\x6a\xc6\xb6\xed\xb6\xa7\xaf\x87\x1b\xa7\x05\xd6\x4c\xf9\x77\x0b\x04\x24\xf8\xd7\xe1\xf3\x1f\x81\xcf\xeb\xdb\x49\xa8\xfb\x6f\xa7\xb5\xbd\x3f\xa4\xf4\x8f\xa6\x42\x46\xe9\x47\xd9\x2d\xd0\xeb\x2d\xcf\xcc\x10\x67\xeb\xaa\x12\xbf\x1a\xfd\x42\x63\xc7\x95\x8a\xdc\x5d\x91\x05\xa0\x8f\xb3\x14\xa0\x8c\x8a\x30\x2a\xaf\xd0\x70\x0e\xcc\x1d\xde\x23\xf4\x8c\x8b\x59\xa9\x9d\x69\x86\x8d\x8a\x36\xab\xf8\x8b\xb0\xd7\x71\x44\x19\x8d\x96\x2c\xfb\xa4\x06\x5c\x37\x0d\xe9\x86\x82\xf2\x7b\xee\x2a\xc4\xab\x72\x91\x67\x13\x2a\xaf\xa1\x66\x8f\xd0\xeb\x39\xd8\x3f\x96\x21\x25\xab\x6f\xb0\x71\xe5\xdf\xad\x2f\xd2\x17\xa2\x82\x51\xf8\xb5\x6e\x89\xc4\x0d\x81\xfe\x0b\x4c\x87\x0f\x10\x79\x34\x44\x6c\x05\xc4\x6a\x60\x74\xe6\xc5\xa8\xa4\x94\x22\x9f\xfa\x1f\x20\x4d\xcb\x29\x78\x7c\x49\x21\xfa\x87\x6d\x0f\xcf\x43\xb1\x12\xe1\x73\xd6\xb0\xb0\xdf\xf2\x29\x7c\x3b\xf9\x4f\x00\x00\x00\xff\xff\x3e\x1a\x6b\x42\x29\x38\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
