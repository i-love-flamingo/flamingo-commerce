// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x41\x6e\xdb\x30\x10\xbc\xeb\x15\x6b\xe8\xd2\x5e\xdc\xbb\x6e\x4d\x8c\x00\x41\x5b\xa4\x8d\x81\x5e\x0c\x23\xa0\xc5\xa9\xc4\x86\x22\x1d\x71\x95\xc4\x2d\xfc\xf7\x82\xa4\x2c\x4b\xb2\x54\xfb\x64\x72\x76\x67\x39\xe3\x59\x2b\xb3\x6f\x98\x6e\x6d\x55\xa1\xce\xf1\xb4\x86\xa8\xf3\xf2\xe9\x0b\x0e\x3f\x85\x6e\x70\xa7\x34\xa3\xa6\xbf\x09\x11\xd1\x73\x46\x6b\xae\x95\x29\x16\xe1\xf8\x9a\xd1\xa6\x3d\x6f\x93\x63\x92\x4c\x33\x3d\xe2\xa5\x81\xe3\x96\x62\x2f\x0a\xac\xd5\x1f\x64\x74\xfe\xdc\x1b\xee\xb0\xfe\x7d\x1f\x73\xb6\xe6\x9b\xc3\x10\x8d\xb3\x3b\x78\xa5\x6a\xe4\xac\xac\xc9\x2e\xe0\xe7\x81\x1a\x17\x0a\x36\xff\x97\xbc\xd8\x86\xce\x97\x06\xf5\x68\xec\x89\xf8\x98\x24\xe9\xb4\xe4\xaf\xea\x15\xf1\xeb\x59\x7c\x7a\x85\x2d\x3d\x26\x09\x1f\xf6\xb8\x20\xfb\x06\x16\xad\x79\xe3\xf6\xfe\x8f\x61\x6b\x55\x28\x23\xf4\x8f\xb6\xa6\x8f\x8d\x8d\xbd\x37\x1c\x01\xd3\x54\xdf\x45\x01\x97\x4d\x00\x8f\x70\x8d\xe6\x16\xea\x00\x6f\xf4\xc3\xde\xbb\x3c\xe3\xe2\xba\x2b\x88\xa1\x98\xd4\x74\x2e\x6a\x95\x69\xb1\x83\x1e\xa6\xeb\x97\x82\x96\xe7\xab\x38\x1d\x1a\x39\x43\x7e\x76\x79\x46\x37\xd6\x6a\x08\xb3\x18\x20\x2b\x0c\xa0\x80\xc9\x70\xd7\xe7\x16\xfd\x8b\xd9\x47\x36\x45\x01\xd7\x7b\x24\xe3\x9d\xb3\x4b\xe7\x4b\x55\x94\x5a\x15\x25\x0f\x28\xd3\x49\xce\x68\xea\x29\x0e\xa5\xf2\xfe\x6e\xb6\xe3\xaa\x95\xcd\x9b\x0a\x86\x89\x3e\xd1\x43\x4d\x95\x38\xec\x40\x6f\x20\x69\x0d\x93\x01\x64\xe8\x24\x61\x24\x71\x09\xaa\xac\x6c\x34\x5c\x44\xd8\x92\x90\x92\x04\x41\x16\xf0\x27\x2e\x95\x23\xbb\xfb\x8d\x9c\x97\xcb\xa5\xa7\x79\x53\x5a\x93\x03\xe2\x23\x5c\x98\xe9\x53\x16\xb5\x4d\xe5\x2f\x0a\x4d\xe9\x4e\xe4\xf0\x4f\x96\xb6\x12\xca\x2c\xc3\xf1\xd6\x6a\x1d\xf7\xae\xe5\xeb\x6c\x9b\x4b\x48\x57\xb0\x0d\xa9\x4f\x52\xbc\x33\xbc\x16\xef\x58\xc8\xef\xc9\xa0\x51\xeb\x07\xd7\x5f\xaa\x6c\xee\xaf\xe6\xe3\x14\xe2\x7d\x9f\x24\xed\x6d\xeb\x35\xfe\x8b\xbd\x9e\x9d\x74\xb5\x73\xe1\xa5\xff\x0b\x00\x00\xff\xff\x41\xf4\x26\x36\x7b\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": {schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
