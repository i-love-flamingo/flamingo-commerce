// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4f\x6f\xdc\x38\xf2\xbd\xfb\x53\xc8\xc8\xa5\x7f\x40\xf0\x03\x76\x8f\x7d\x6b\x77\xdb\x41\x63\x62\x8f\xe3\xf4\x64\x0f\x81\x61\xd0\x52\x75\x37\x37\x14\xa9\x21\x29\xdb\xc2\x60\xbe\xfb\x82\x14\x29\xf1\x9f\x24\xc6\x8b\x9d\xcb\xee\x1c\x26\xb0\xf8\xaa\x58\x45\x3d\x16\x1f\x4b\x2d\xbb\x06\x8a\x2d\xab\x6b\xe0\x25\x3c\xed\xa0\x64\x1c\x49\xa8\xb6\x88\xcb\xe2\x8f\x8b\xa2\x28\x8a\x12\x71\xb9\x1e\x21\x6a\xe4\x52\x0f\x54\x16\xbc\x03\x82\x5f\x80\x63\x10\xeb\xe2\xbb\x07\xdc\x05\x90\xee\xf2\x51\x9b\x9e\x20\x1e\xba\xea\xb6\xac\x82\x55\x65\xfe\x54\x7f\xac\x8b\xaf\x92\x63\x7a\xba\xfc\xbf\x20\x80\xc8\xf8\xe2\xcf\x8b\x0b\x3f\x15\x27\x03\x5c\xad\x8b\xfd\xae\x0f\x1a\xa8\xc4\xb2\xdb\xef\x06\xd7\xfa\xe9\x33\x26\x04\xd3\xd3\xa6\xaa\x38\x08\x11\x4c\x66\x9e\x6a\x60\xd3\xf2\xf2\x8c\x04\xf0\x00\x73\x0f\x5c\x30\x6a\x96\x65\x7a\x35\xbc\x45\x40\x55\x85\x25\x66\x14\x91\x1d\x92\x28\x9e\xd4\x19\xec\xa3\x6c\x50\x57\x03\x95\x5f\x81\x40\xa9\xc6\x02\x93\xa7\xfb\x60\xbc\x4f\x0d\x08\xa3\x27\x71\x60\x9b\x56\x9e\x55\xf6\xa5\x5a\xb7\xdf\x74\x0a\x57\x8c\x11\x40\xb4\xf7\x8e\xc2\xf1\x70\x91\x50\xd3\x10\x0c\xd5\x96\xb5\x0d\xa3\xea\xf5\x44\x09\x8e\x43\x26\xc5\x0a\x8e\xa8\x25\x72\xdb\x72\x0e\xb4\xec\x7c\x7f\x92\x49\x44\xb0\x84\x3a\xf2\x73\xb0\x23\xc6\x0d\x16\x5e\x6a\x50\x85\xa1\xf7\x91\x7d\xc2\x47\xb9\x45\xbc\x8a\xfc\x6d\xfc\x71\x97\x84\xef\xe1\x9e\xa1\x5c\xe0\xc3\xae\x88\x31\x7b\xbc\xb0\x80\x5b\x84\xe9\xd7\x33\x6e\x1a\x4c\x4f\xd7\xb7\x08\x13\x7f\x19\xb0\xb8\xae\x1b\xd9\x05\x29\x9d\x91\xb0\x8e\x6f\x18\x9f\x8d\x6e\xb0\x8b\xb3\xda\x4b\xa8\xf7\xbb\x15\xd6\xff\x2c\x66\x74\x69\x1d\xe4\x1a\x2a\xd4\x60\xa4\x5f\xda\x17\xd9\xad\x6a\xc4\x7f\x80\xbc\x27\xa8\x04\x2f\xd4\x8f\xc5\x0b\xe2\x18\x51\x19\x26\xb0\xa7\x72\x9c\xf9\xfa\x4d\x02\xa7\x88\x3c\xc0\x11\x14\x69\x60\xc5\xe1\xb8\x10\x41\xbf\x8e\x12\xea\x2d\x6b\xa9\xd4\x0e\xcd\x8e\xe1\xac\x6a\x4b\xe9\x3e\xb6\x33\x7d\x63\x6d\x79\x06\xfe\x15\xbd\x60\x7a\x72\xb7\xfc\x3d\xc7\x25\x98\xac\x38\xa2\x95\xce\x2b\x1e\xd7\x00\xd1\xd6\x07\xf4\x06\x61\xc5\x78\xd2\x0f\x87\x95\xd1\x94\x86\x44\xd5\x78\xea\x9f\x8e\xce\x2c\x4d\xee\x40\xa6\x23\xf2\x31\xff\xc0\xf2\xbc\xc3\xa2\x54\xe9\x4d\xa4\x70\x46\xc2\x1a\x6c\x99\x50\x28\x7f\xe7\x10\x62\x87\x0f\x58\x92\x04\x81\x45\xfb\xac\x57\xe0\x13\x67\x62\x62\x0e\xb5\x0a\x0a\x72\x40\x6f\x9b\xba\x5f\xea\x34\xac\xf7\x94\x4c\x2e\x9e\x2b\x23\x39\xc7\x63\x16\xba\x0f\xd3\xc2\xe6\x63\xad\xef\x18\x55\xec\x7a\x00\xa2\x0f\x9a\x3c\xa3\x9f\xb4\x38\x23\xb1\x09\xab\x6a\x62\x43\x9b\xea\x37\x6c\x09\xbf\x80\xd8\xbd\xa7\xe6\x16\x57\xdd\xa1\x6b\x60\xa5\xce\xc2\x70\x9b\xcd\xd7\xd8\x91\xeb\xdb\x33\xe2\x27\x88\x16\xf1\xc9\x3c\x37\x61\x8d\xa1\x3b\x65\x37\x2c\x61\x0f\x50\x23\x4c\x31\x3d\x4d\x61\x44\x5b\x87\x5e\x6e\x18\x2f\x55\x85\x9f\x58\xe1\x4f\x43\x9c\xea\x95\x2f\x5a\xd9\x15\xda\x10\x32\xac\xe2\xef\x2d\xe6\x50\xed\xfb\x93\x27\x38\x42\x95\x55\x3f\x64\x6c\x6b\xe0\x27\x18\x98\x15\x4d\xe3\x1c\x2f\x03\x28\x7c\xb7\x91\x75\xb8\x04\x1e\x2d\xbd\xb4\xa6\xc8\x93\x94\x3b\x6e\xf4\x46\xfa\xf4\x99\xdb\x4a\x29\xd6\x45\xc0\x02\x63\x32\x94\xd2\x47\xc7\xca\x16\x86\x59\x4b\x17\xe4\x59\x8f\x94\x0c\x99\x67\x2c\x07\xc0\xe5\xe3\x6c\x3a\x36\x36\x93\x11\x9a\xd9\x4e\xc1\x71\x35\xeb\xd6\x0d\x3c\xc3\xb5\x3d\x7c\xf7\xf4\xc8\xbc\x8d\x35\x3b\xc9\x90\x63\xc6\x0c\x65\x86\xd7\x03\x7a\xcb\xf0\xa4\x0c\xfd\x12\xa1\xb4\xf2\xba\xb8\x21\x0c\xc9\x69\xcf\x60\x49\xa3\x85\x59\x9a\x79\xee\x0b\xee\x0f\xbe\xef\x91\x9f\x47\x47\x47\xf4\xc5\x08\xbd\x1d\x9c\x90\xc2\x33\x5c\xd9\x4c\x26\xac\x0f\x48\x13\x97\x7f\x9a\x0f\xb2\x61\x3f\x1e\xfc\xfa\x4f\xf3\x38\xad\xcb\x34\xd7\x30\x95\xc0\x8f\xa8\x8c\x5e\x5a\x20\xa0\xed\x26\x42\x12\x5e\x51\x4a\xbd\x7e\x43\xa4\x85\xdc\xdd\xb9\xeb\xc5\x70\x34\x09\xae\x1b\x02\xea\x91\xf8\x2b\xc3\x89\xae\x50\xc6\xbb\x25\xfa\xac\x46\x1c\xae\x7e\xc9\x0d\xbe\x73\x47\x13\x37\x3e\xbb\xa3\xaf\xba\x7d\xb5\x32\x97\xb3\xc9\x1b\x9e\x02\x4e\x65\x90\x0c\x5c\xed\xd0\x89\xe0\xd5\xd0\x70\xa7\x4d\xde\x3c\x9c\x88\x85\x53\x20\x02\x7f\x6e\xed\x58\x16\x49\x0b\x52\x32\x4f\x42\x2d\x29\xa8\x9f\x50\x38\xef\x11\x38\x3f\xad\x6f\x7e\x52\xcf\xbd\x4f\xce\x3d\xb0\xd7\x25\xf9\x7d\x46\xc2\x70\x74\x38\x74\x67\xc9\xa4\x28\x62\x1b\x1f\x5e\x41\x56\x4f\x5e\x19\xff\x71\x24\xec\xd5\x7f\x5a\x83\x3c\xb3\xca\x7f\x56\x22\xce\xb1\xd2\xfb\xee\x43\xcb\xd0\xcf\xac\x44\x89\xfb\xfb\x2e\x18\x36\x36\x42\x89\x95\x03\xae\x61\x5d\xa8\xff\x0f\x15\xd8\x6b\x10\xac\x7e\x40\xe7\x6a\x3d\xef\xde\xee\x21\x7f\x81\xce\x13\xf9\x0a\xf1\x21\x80\x39\x6b\x21\xd6\x45\x8d\x9a\xef\xa2\x2f\x9e\xff\x14\x8c\xfe\xff\x03\x7a\xbd\x05\x21\xd0\x09\x32\x8c\x6f\x51\x33\xa2\xfc\xb0\x1d\x60\x18\xfe\x2d\x6a\xa2\xd8\x1d\x78\x98\xc3\xec\x1b\xb5\xcb\x59\xd8\xd3\x2d\x3a\x1d\xd1\x62\xdb\xa7\x15\x70\x15\xb4\x88\x3c\x0d\x97\x71\x76\x27\xf4\x86\x54\x37\x2e\x3f\x94\x46\xf1\x7b\x6a\x7b\xcb\xd9\xe2\x80\x02\xb1\x99\x25\x52\xa5\x15\xd2\xf6\xf9\x9e\x96\xaa\x08\x4d\x08\x0b\x6f\x60\xe1\xec\x0e\x27\xb4\xcd\xb8\x54\xd9\x0d\xb0\x86\x96\xcf\xdd\x16\xd5\x0d\xc2\x27\x7d\x2f\x5a\x95\xce\x1f\x8e\x96\xc8\x49\xf3\xb9\x17\x22\x47\x4c\x24\xf0\x39\x2d\x92\x36\x17\x6d\x3d\x75\xbf\xc8\x49\x7d\x68\xa4\xba\xf1\xfb\xe5\xc2\xb9\xfd\x15\xfe\x10\x41\xcf\x40\x7a\x65\x13\x0e\x99\x37\x6e\x07\xa7\xa5\x60\xd2\x1a\x0b\xa7\x98\x87\x77\x12\xc6\xe5\xaf\xbc\x52\x05\xcc\x48\xaa\x25\x15\xe1\xd0\x1a\xc7\x07\xe6\x70\x50\x1a\x09\xe7\xad\xa3\x7e\x92\x76\xef\x7a\x75\x9b\xb8\x61\x8f\x28\x28\xc8\xba\x01\xd5\x44\x0d\x28\x3d\x68\x7a\x50\xb7\x13\x4d\x2a\x37\xca\x3b\x54\x07\x03\x82\xb5\xbc\x84\xb0\x31\xfa\xbb\xec\x9c\x9e\xd3\x72\xb9\xf5\x11\x5a\xb4\x45\x98\xcc\x0a\x3f\xdc\x34\xc3\x49\x43\xb8\x79\xbd\x7d\x16\x98\x9e\x08\x68\x96\xcc\x75\x75\x46\xd4\x64\x3b\x8a\xb3\xd7\x25\x37\x16\x32\xe7\x63\xfa\x10\x7f\x4f\x65\x1b\xcf\x9b\x84\x6b\x23\x0d\xd2\xdb\xb6\xaf\xed\x86\x70\x2f\x48\x3a\x3b\x27\xbd\x87\x8e\x98\x0b\x49\x35\x4d\x26\x31\x04\x25\x21\x3e\x63\x71\x55\x11\xb8\x8b\x50\x9e\xc2\xef\x4f\x8b\xd9\x78\x04\x22\xad\x34\xda\x62\x12\x23\x39\x40\x22\xb5\x18\x73\xc7\xe7\x62\x1e\x59\x6c\xd6\xed\x33\xa6\x31\x8f\x4b\x56\x37\x88\x76\xd1\x74\x5e\xf5\xc3\x32\x06\x04\x98\x86\x09\x39\xd4\xc7\xc9\xa8\xf5\x35\x77\xd6\x0f\x87\x13\x76\x2a\x6d\x3a\x1e\x45\x23\xbe\x10\x73\x8f\x89\x1c\x79\x6f\x0c\x08\x34\x67\x46\xe7\xd8\x01\xb5\xfe\x20\x30\x19\x73\x92\xa8\xfd\xd7\x26\xdb\x09\x58\xfe\x68\xa5\xe1\x4a\x42\x49\x84\x49\x88\xbc\xf7\x47\x6d\x85\xc5\x42\x62\x7a\xda\xb6\x42\xb2\x1a\x78\xe2\x0b\xd5\x75\x02\x92\x0e\x37\x85\x0c\xaa\xfa\x4c\x9a\x43\x64\xf6\x9e\x87\x24\xfc\x7a\xbc\xc2\x5c\x9e\x83\xaa\x8d\x84\x68\x18\xef\xfb\x03\xbc\x4b\x0f\xde\xb5\xf5\x73\xa8\xcb\x29\xea\x79\xac\x69\x38\xbb\xf0\x7e\x99\x35\x01\xe9\x52\x53\xea\xdc\x36\x52\x72\xfc\xdc\x4a\x70\x94\x2f\x07\x01\xfc\x05\x2a\x7d\x9e\x2e\x76\xa7\x86\xb6\xec\xe4\x25\x64\x4a\x35\xe6\xf4\x82\x92\x53\x8e\xad\xe7\xe4\x9c\x73\x0a\xc7\xf6\x29\x27\x83\x1d\x24\x4a\xb2\xf2\xdb\xee\xf0\x64\x73\xfc\x61\x44\xcc\x5f\xdf\x9e\xbe\x21\x82\x2b\xfd\x1e\x1f\x40\xb4\xc4\x6a\xae\x33\x12\x0a\xc7\xe8\x35\xe7\x6c\x2c\x67\x81\x78\x1f\x00\xe6\x5e\xf3\x0b\x04\xec\xf9\x80\xb5\x54\x52\x8e\x85\xb3\x59\x83\xde\x97\x52\x2b\x63\x1c\xda\x61\x7f\x39\xf9\x90\x08\x38\x01\x2e\xfe\xb8\xd0\x5c\xb2\x6d\xcc\xa8\x18\xe8\x51\x98\x0a\xf4\xc3\x44\x27\x52\x69\x1c\xc3\xbe\xf1\x72\xcb\xd4\xdf\x76\x33\x04\x35\xc9\xff\xd0\xb8\x50\x8b\x9e\xfc\x8b\xd1\x0d\xe3\x96\xba\x47\xc6\xeb\xbe\x6e\xf4\xff\x2d\x99\xe9\x02\x52\xe8\x93\xd7\x2e\x4b\xa2\x97\xf3\xa4\xa0\xce\xeb\x1e\x7a\x3a\x0d\x67\x25\x08\xe1\x68\xd9\x89\x80\xed\x47\xe4\xe1\x7b\x80\xc3\x97\xff\xf0\xd4\x09\x07\x76\xb1\x30\x90\x4a\xb3\x20\xee\xa9\x6a\xab\x9b\x01\x30\x28\x44\x0a\x1c\x91\x39\x1b\x87\x82\x53\xc1\x58\xe2\x15\xba\x91\x91\x66\xbf\xf9\x8a\xff\xb9\xbf\x89\xcc\xb3\x21\x88\xf5\x5d\x9e\x87\xf5\xf0\x05\x78\x2e\xfd\x9c\xd2\xfc\x3f\x0d\xb7\xa8\xe1\xac\x72\xfb\xdb\x7a\x19\xf3\xf7\x29\xcc\x7f\xb3\xca\xd3\x0a\xcf\xa9\xa4\x29\x4c\x86\xca\xbb\xc0\xb4\x69\xe5\x48\xee\x98\xd7\x7b\x0d\xc8\x21\xf6\x5f\xc8\xeb\x0c\x5a\x67\xb0\x3a\x83\xd4\x19\x9c\xce\xa0\x74\x06\xa3\x33\x08\x9d\xc1\xe7\x0c\x3a\x67\xb0\x39\x83\xcc\x19\x5c\xce\xa0\x72\x06\x93\x73\x89\x0c\x6f\x12\x68\xa5\x85\x67\xf1\xa5\x1d\xbf\xcf\x78\x65\x7b\x3d\xf1\x9b\xc3\xc8\xc3\xad\x61\x4d\xe8\x64\x53\x55\x07\xa6\x2c\x56\x51\xb7\x67\xbf\xbb\xfc\x38\xf6\x64\x3e\x16\x8b\xbf\xea\x0a\x22\xf0\xe6\xd9\x01\x01\x09\x6e\x3f\x79\xf9\x57\x62\xcb\xfe\x94\xf8\x1b\x7e\x5c\xa5\xe3\xfd\xb7\x9c\xfe\xd6\xa8\x4b\x91\x72\xfa\x45\x76\x19\x7e\x9d\xe5\xc9\x9d\x42\x9f\xb5\xfd\x3c\x7e\x65\x5a\xa1\xb1\x42\xad\x17\xcb\x57\xf4\xed\x37\xc6\x4d\x4f\x1c\x08\xb7\x55\xf8\x21\xf4\x63\xf8\x29\x26\x9a\x2d\x29\xfd\x52\x13\x6e\x2a\xe7\x17\x39\x2b\xb7\x3d\xbb\xf4\x6a\x2e\xfe\xbc\xf8\x57\x00\x00\x00\xff\xff\xd1\x19\x3b\xa0\x54\x2b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
