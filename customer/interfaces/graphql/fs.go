// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6b\xdb\x40\x10\xbd\xeb\x57\x4c\x7c\xe9\xa5\xe4\x07\xe8\xd6\xd8\x2d\x18\x42\x68\xe3\xde\x4a\x31\x6b\xed\x48\x1a\xba\x9a\x15\xbb\xb3\x24\xa2\xf8\xbf\x17\xed\xca\xb1\x14\x49\xc1\x34\xa7\x78\xdf\x9b\x37\x5f\x4f\x23\x5d\x8b\xb0\xb5\x4d\x83\xae\xc0\xe3\x36\x78\xb1\x0d\xba\xe3\x41\x94\x04\x7f\x7c\x46\x1f\x8c\xc0\xdf\x0c\x00\x80\xfc\xa3\xad\x2a\xd4\x7b\xce\xe1\xc1\x5a\x83\x8a\xef\x22\x10\x3c\xba\xfd\x2e\x87\x83\x38\xe2\xea\x2e\x3b\x67\xd9\x8a\xec\x54\x4f\x5f\x43\xfa\xdf\x2d\x3a\x6f\x59\x99\x9d\x12\x95\x2f\x04\x7f\x8f\x78\x8f\x26\xbe\xd2\xda\xa1\xf7\xe8\x73\xf8\x35\x67\x7f\x49\xe8\xdd\xef\xc8\xd5\x58\xaa\x60\xe4\x50\x53\xdb\x12\x57\x03\xb8\x94\x65\x80\xc6\x51\x0f\x64\xcc\x6d\x41\xeb\x9d\x5f\x8b\x1f\xba\xaf\x90\x35\xba\xbc\xff\x77\x32\x85\x92\x9c\x97\x27\xd5\x60\x3e\x7d\x37\xea\xed\x79\xf2\xde\x90\xd6\x06\x13\x32\x79\x57\xc4\x5f\x1b\x45\xe6\x9d\x4e\xeb\xb0\xa4\xd7\x94\x77\x02\x9c\xc8\x49\xad\x55\x17\xa1\x9f\xd4\x60\x7a\x66\x25\xd4\x6f\x85\xa4\xbb\x65\xc3\xc3\x24\x46\x2b\xde\xef\xde\xd6\x45\x49\x6a\xe0\x3c\x12\xc7\xdd\x0d\xa2\x69\x51\x45\xcc\x33\xff\x1b\x57\x5a\xd8\xa6\x55\x3c\xa7\x4d\x39\x81\xc5\x75\x5b\xab\x31\x5f\xe3\x6c\xbe\x19\x55\x01\x95\x20\x35\xf9\x8b\x9d\xc0\xd7\x36\x18\x0d\x27\xec\x7d\xad\x41\x79\x90\x1a\x2f\x56\x80\x53\xf2\xc2\x85\xbd\x59\xf0\xc9\x35\xdf\xe4\x2b\xf9\x9f\x6c\x7e\xf0\xeb\x62\xba\x8b\x99\xf3\xc5\x74\x63\x1f\xad\x0d\x60\xec\xa9\x35\x4e\x6b\xbd\xcc\xa6\xf8\x9e\x33\xf6\xd4\x0a\xc7\x61\x45\x96\xe7\x4a\x63\x8e\x17\x87\x28\x1f\xeb\x24\xce\x53\x68\x4e\x97\xaf\x67\xce\x11\x34\xd8\xd6\x96\xd7\x7a\x3f\x67\x19\xbe\x0a\xb2\x86\xe8\xe2\x1f\x01\x5d\x37\x38\x76\xb3\x49\x33\x7e\x46\x09\x8e\xd3\x36\x4c\x3c\x7b\x40\x0c\x3e\x9e\x45\x28\xad\x8b\x40\x11\x9c\x43\x16\xf0\xe8\x3d\x59\x9e\x08\xac\xdd\xd4\xa5\xf3\x31\xb9\xb6\x37\x94\x51\x0c\x81\x6b\x85\x80\x75\xa0\x18\xd0\x39\xeb\x7a\xc7\x91\x00\x79\x60\x2b\x57\x8d\xfb\x28\xbf\x2f\xa1\xb3\x01\xb4\xe5\x4f\x02\x2f\x8a\x05\xc4\x42\xad\x58\x1b\x8c\xba\x51\xe1\x33\x14\x35\x16\x7f\xe0\x85\xa4\x5e\x2d\x3e\xf9\xed\xfe\xe3\x11\x2c\xf5\x3e\x34\x7d\xce\xfe\x05\x00\x00\xff\xff\xe8\x80\xd4\xe2\x8a\x06\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
