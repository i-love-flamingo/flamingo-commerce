// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcf\x8e\xdb\x36\x10\xc6\xef\x7e\x8a\x31\x72\x49\x0e\x79\x01\xdd\x12\xb7\x45\x03\x24\x58\xd7\x9b\xa4\x87\x20\x30\x66\xc9\x91\x45\x2c\x45\xaa\xc3\xe1\x6e\x84\x22\xef\x5e\x90\x62\xb4\xf2\xbf\x85\xe3\xf5\xb6\xf5\x61\xb1\x26\x35\xdf\xfc\x66\xfc\x89\x1a\x49\xdf\x11\x2c\x7c\xdb\x12\x2b\x5a\x2f\x1a\x52\xb7\x3e\xca\xfa\x5a\x90\x65\x69\x51\xd1\x15\x6b\xe2\xf5\x8a\x42\xb4\x02\x7f\xcf\x00\x00\x62\x34\xba\x82\x6b\x61\xe3\x36\xf3\xd9\xf7\xd9\x8b\x03\x02\x0f\xb1\x0b\xef\x84\xbe\x09\x30\x75\x4c\x81\x9c\x04\x90\x86\x80\x07\x45\x5f\xe7\x6f\x2a\x32\x93\x13\x78\xc9\xd1\x39\xe3\x36\xaf\xa0\x4b\x02\xe0\x93\x02\xb4\x51\x50\x8c\x77\xb3\x23\xb4\xfb\xc9\x06\xd0\x17\xf0\xb1\x21\x58\x20\x0b\x48\x83\x02\x26\xc0\xc6\x1b\xb7\x01\xf1\x70\x43\x43\x0a\x9d\xaf\x54\xc8\x52\x3d\x28\xff\x42\xca\x33\x0a\xe9\x14\x3b\x91\x1a\x22\x0a\x95\x71\xa0\x30\xfc\x60\x34\x01\xd0\x32\xa1\xee\xa7\xba\x79\xef\x9d\xab\x7d\xa8\x8e\x71\xeb\xab\xf1\x9a\x92\xe9\x5a\x50\x08\x34\x75\xe4\x74\xa2\xf5\x2e\xf7\x28\xe4\x65\x5f\x43\x87\x7d\x9b\x9a\x85\x4e\x6f\xb5\xe9\x75\xb9\xa4\xc5\x1e\x94\x77\x82\xc6\x01\x6a\x6d\x52\xeb\xd0\x82\x19\x53\xe4\xcb\x8e\x02\x65\x9e\xcc\xb0\xce\x7f\xe7\x05\xeb\x0d\x44\x67\xfe\x8a\x04\x46\x43\xed\x39\x33\x75\xec\x15\x85\x70\xd0\x16\xb3\xe3\xc6\x98\xd4\x0c\xaf\x07\x30\xc0\x1b\x1f\x65\x10\x9d\x74\x39\xed\x4b\xdf\x19\x85\xd6\xf6\x10\x1a\x7f\xef\x52\x3f\x10\x42\x54\x44\x21\x40\x87\x1b\x7a\xd4\x17\xd3\x5c\x83\x2d\x4a\xff\xca\xcf\x52\x3e\x5f\x1e\xeb\xc6\xf2\x21\x62\xfe\x75\xd0\xd8\x91\xae\x76\x34\x90\xf7\xd2\x97\x48\x6a\xd1\xd8\x31\x6d\xf9\x4c\xba\x96\x6b\x79\xf4\xb7\x99\xd0\x94\x8a\x36\x28\x74\x8f\x7d\xb5\xa7\x37\x29\x77\xc9\xfe\xce\x68\xe2\x6a\x6b\xb3\x25\x69\xbc\xae\xf6\x49\xd2\xff\xd8\xfa\xe8\x64\xb2\x39\x52\x2d\xd9\xa8\x62\x0c\x31\x62\xa9\x3a\x5c\xcb\xcc\x38\x21\xae\x93\x45\x4f\x34\x5b\x29\xc8\x61\x4b\xd5\x5e\x57\x4e\xd4\x58\xff\x89\x46\xc0\xb4\x9d\xa5\x36\x9f\x37\xff\x66\xee\xeb\xa8\xd2\x1d\xf1\x5f\xa5\xff\x0d\x8d\x25\x7d\xa9\xec\x69\x85\x09\x83\x77\x4f\x68\x48\xe3\xef\xdf\xd5\x8c\x2d\x5d\x92\xea\xd3\xea\xfd\xd3\x90\x7e\xff\xf8\xe1\xfd\x25\x81\x92\xde\xf9\x44\x2b\xd2\x86\x49\x5d\xcc\xb5\x4f\x6e\xd1\xd2\x07\x79\x76\xa8\xb4\xb0\xc4\x64\x0d\x21\x0e\xd5\xe3\x67\x70\xf1\xb7\xe7\x76\x3d\xc6\xcc\xbf\xa6\xc2\x7e\xfa\x90\x29\x77\xc9\x2a\x3b\xbb\xa0\x6e\xdb\x3c\x1f\x5e\x67\xdc\x78\x83\xe4\xfa\x57\x66\xcf\x67\xb4\xed\x34\xb0\xf3\xb9\xca\x93\xe3\xff\x8a\x97\x9e\x9a\x9f\xd1\x1a\x9d\xa7\xbd\x67\xa4\x4c\x4b\x77\x63\xa2\x61\xb8\x9d\xce\x43\xe9\xe9\xfd\x79\x67\xff\x67\xee\xa1\x6d\x97\x16\x86\x5b\xea\xb7\xad\x7f\x87\x36\x52\x05\x5f\xca\x5a\xf6\x32\x7d\x13\x72\x1a\x72\x9e\x3f\x22\x71\x5f\x82\xf7\x73\xbe\x51\x62\xee\xe8\x21\x73\x05\x6f\xbd\xb7\x84\x6e\xbe\xab\xf3\xa1\x8c\xcf\xe3\x54\x7c\xe5\x6c\x0f\x9d\x0f\xc1\xdc\x58\x02\x53\x0f\x13\x67\x8b\x41\x35\xc6\x11\x38\x2f\x80\x59\x1d\x7c\x1e\x73\x11\x6a\x93\x26\xc8\x3c\x37\x1e\xc1\xd9\x79\x63\x78\xc9\x24\x91\xdd\x27\xb6\x63\xcd\xaf\x0e\x4d\x9c\x87\x5f\x34\x7e\x8c\x9c\xcb\x09\xe3\x30\xdb\x9a\x90\xf1\x32\xcf\x11\x92\x05\x3a\x45\xf6\x60\x63\x0e\x07\xac\xa8\x66\x0a\xcd\x34\xe2\x84\x77\x8c\x93\xd5\xde\x5a\xaf\x6e\x8d\xdb\x9c\xa8\xfa\x7d\xf6\x4f\x00\x00\x00\xff\xff\x97\xe8\x8f\xe6\x94\x0d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
