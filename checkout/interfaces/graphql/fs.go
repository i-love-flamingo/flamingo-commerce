// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdb\x72\xd4\x48\x0f\xbe\xcf\x53\x28\x70\xf1\x43\x55\x78\x01\xdf\x85\x01\xfe\xcd\x16\x6c\x66\x13\x0e\x17\x14\x35\xa5\xb8\x35\x71\x17\xed\x96\xe9\x96\x33\xb8\xb6\xf6\xdd\xb7\xfa\x60\x8f\xe7\xc8\x24\x0c\xb0\x9b\x0b\x8a\xe9\xc3\xa7\x4f\x52\xeb\x60\x49\xd7\x10\x4c\xb8\xae\xc9\x95\x34\x9b\x54\x54\x7e\xe6\x56\x66\xd7\x82\x4e\xa6\x06\x4b\xba\x74\x8a\xdc\xec\x8a\x7c\x6b\x04\xfe\x3a\x01\x00\x68\x5b\xad\x0a\xb8\x16\xa7\xed\xed\xe9\xc9\xdf\x27\x8f\xb7\x00\x2c\xef\x4e\xd8\x0a\x7d\x15\x70\xd4\x38\xf2\x64\xc5\x83\x54\x04\x2e\x21\xf2\x3c\xfe\x2a\x5b\xe7\xc8\x0a\x3c\x71\xad\xb5\xda\xde\x3e\x85\x26\x00\x00\x07\x04\xa8\x5b\x41\xd1\x6c\x4f\x76\xb0\xdd\x14\x96\x88\x3e\x86\xb7\x15\xc1\x04\x9d\x80\x54\x28\xa0\x3d\xdc\xb2\xb6\xb7\x20\x0c\x37\x94\x44\xa8\x78\xb2\x44\x27\xc5\x12\xf9\x05\x95\xec\x50\x48\x85\xbb\x23\xa8\x74\x23\xb3\xd2\x16\x4a\xf4\x3d\x47\xed\x01\x8d\x23\x54\xdd\x18\x37\xee\x5d\xd8\x39\xfb\x62\x17\x6f\x75\x39\x9c\xc9\x92\xae\x05\x85\x40\x51\x43\x56\x05\xb6\x6c\xa3\x8d\x7c\x5c\xe6\x39\x34\xd8\xd5\xc1\x58\x68\xd5\x8a\x99\x9e\xe5\x23\x35\x76\x50\xb2\x15\xd4\x16\x50\x29\x1d\x4c\x87\x06\xf4\x20\x22\x1e\xdb\x49\x28\xf2\x89\x1c\x66\xf1\xdf\xd3\x4c\xeb\x1c\x5a\xab\xbf\xb4\x04\x5a\xc1\x9c\x5d\xe4\xd4\x38\x2e\xc9\xfb\xad\xcf\xe2\x64\xf7\xc3\x18\xe9\x0c\xcf\x12\x31\xc0\x1b\x6e\x25\x81\x8e\xac\x1c\xf6\xa5\x6b\x74\x89\xc6\x74\xe0\x2b\x5e\xd8\x60\x0f\x04\xdf\x96\x44\xde\x43\x83\xb7\xb4\xf7\x5d\x8c\x65\xa5\x67\x91\xed\x97\xdd\x92\xff\x3e\xee\xb3\xc6\x74\x79\xe3\xf4\x53\xc2\x58\x83\x2e\xd6\x30\xd0\x6d\x88\xcf\x37\xa9\x46\x6d\x06\xb1\xf9\x6f\x64\xb5\xa8\xcb\x5e\xdf\x8c\xd8\x64\x8d\x6e\x51\x68\x81\x5d\xb1\x81\x37\x52\x77\xea\xf8\x4e\x2b\x72\xc5\xca\x66\x4d\x52\xb1\x2a\x36\x99\x84\xff\x63\xcd\xad\x95\xd1\xe6\xc0\x6a\xea\x74\x99\x1f\x86\x68\x31\x54\x6c\xd7\xe5\x44\x5b\x21\x37\x0f\x4f\xf4\xc0\xc7\x96\x15\xb2\x58\x53\xb1\x61\x95\x03\x31\x66\x1f\x50\x0b\xe8\xba\x31\x54\xc7\x7c\xf3\xb3\x65\xbf\x62\x37\x69\xbd\x70\x1d\xf2\xc2\xaf\xa1\x71\xdd\x96\x21\x30\x7f\x95\xf8\x57\xa8\x0d\xa9\x63\x49\x0f\x2b\x8e\xd0\xb3\x3d\x38\x69\x65\x06\x57\xf1\xd6\x03\xcc\x57\xf1\xe2\x62\xee\xb0\xa6\x63\xea\xf0\xee\xea\xf5\x77\x78\xb4\xe2\xc5\x6f\x6f\xdf\xbc\x3e\x26\xa1\x80\xf7\x70\x46\x57\xa4\xb4\xa3\xf2\x68\xa1\x76\x14\x13\x7d\x40\x63\x48\x72\x8a\x3c\x26\xb3\x47\x09\x79\xa8\xbe\x29\x73\xa6\xc6\x62\x81\x1e\xca\x8a\xd9\x93\x85\xc6\xd1\x9d\xe6\xd6\x9b\xee\xd1\x38\xfd\xbe\xc9\x89\x76\x05\x32\xa4\x70\x57\xc7\xde\x06\x2c\x91\x22\x15\x5a\x93\xd2\x51\x20\x82\x83\xa8\xd6\xc7\xa6\xa5\x22\xc8\x7a\x5d\xd1\x97\x96\xbc\xc0\xf9\xf4\x62\x45\x48\x5e\x3f\x9f\x5e\x1c\x12\x28\xd3\xf5\x4b\xf7\xb1\xf8\xc6\xe5\x6c\xb8\x47\x93\xd4\x79\xa4\x2e\xef\xf7\xeb\xcb\x3f\x80\x6c\xc9\x41\xb5\x6c\x31\x85\x82\x43\x03\xb1\x4b\xa1\x74\xf6\x05\x0a\xae\x99\x6c\x37\xbc\x22\x41\x6d\xfc\x37\xa1\xf3\xb9\x83\x71\xb9\x09\xfe\xf9\x36\x6e\x3e\xb7\x86\x7b\xd9\xe4\xf6\x8b\xac\x6a\x58\x47\x6f\x52\x6a\xa0\xf8\x26\x48\x0c\xae\x45\x08\xd6\xae\xd0\x0a\x78\xf2\x5e\xb3\x3d\x03\xcb\xe1\x87\x80\x4e\x1d\xf2\x62\xf5\xf5\x29\x26\x6f\xff\x17\xba\xea\x2f\xad\x76\x34\x46\xb8\x43\xa3\x55\x7c\x53\xbd\x29\xd3\xc6\xfb\x61\x7d\x14\x64\x89\xe4\xcb\x9e\x9b\x30\x84\x16\x1d\x4a\x0e\x81\x23\xa4\x06\x81\xc2\x09\xad\xdf\xf9\xae\x40\x9d\xb2\x97\x1f\x9e\x3d\xc2\xc2\x14\x43\x0e\x17\x72\xbe\xd8\xdf\xe1\xe5\xa2\xc1\xae\x9e\x0d\x77\x4e\x3f\x05\xc5\xee\xdd\xc2\xac\x94\x9e\x4c\xb5\xaf\x5e\xd9\xe8\xa1\x35\x7a\x40\x3d\x4d\x90\xb3\x97\xce\xf1\x43\x1a\x8b\xc3\x88\x3d\x9c\x57\x0e\x8c\x7f\x2b\xbd\x09\xda\x92\x0c\xa9\xe7\xdd\x77\x34\x67\x3f\xc9\x86\xff\x09\xae\xe1\x23\x67\x99\x54\x7e\xa0\xdb\xc3\xd2\x32\xab\xa5\x59\xc4\xb8\xc0\x85\x8f\xad\xf7\x6b\xfb\xf7\x49\x4a\xab\x61\x9f\x39\x7c\xa6\x6e\x35\x97\xdc\xa1\x69\xa9\x80\x8f\x79\x2d\x26\x07\xfa\x2a\x64\x15\x44\x39\x7f\xb6\xe4\xba\x61\xf2\x70\x11\x2b\x49\xcc\xcc\x58\x8a\xbe\xa3\x95\x4f\xf5\xf1\x77\xf3\x26\xbf\xf3\x78\x61\xc9\xb2\x80\xe7\xcc\x86\xd0\x9e\xee\xb8\x30\x49\xe3\x93\x3c\xfd\xd8\x5f\xfb\xf3\xa1\xd3\x75\xfa\x6f\xf2\x90\x65\xd0\xe0\xd2\x9a\x0e\x1a\xf6\x5e\xdf\x18\x0a\x65\xa8\x9f\x2e\x94\x95\xb6\x14\xeb\x53\xd6\x8c\xe3\x30\x04\x61\xae\x43\xa1\x8b\xc7\xce\x80\x83\xfa\x0b\xed\x09\x1c\x49\xeb\x72\x65\xed\x07\x3d\x79\xce\xf3\x0d\x43\xac\x8d\xa1\x9e\x24\xa4\x77\xce\x0c\x9e\x79\xba\x4d\xd9\xed\xd3\xab\x7e\x8e\x91\x62\xcb\xc7\x4e\x6b\x9d\xcd\xa6\x8b\xce\xb6\x98\x40\xfb\xa8\x7d\x54\x77\x97\x47\xa2\x90\x9d\x2e\x7c\x0c\x13\x43\xe8\x92\x4d\x0c\x7a\x01\x2f\xec\x48\xdd\x83\xc1\x5e\xe9\x01\x7c\x8f\xf0\xff\x93\xec\x17\x9d\xa4\xa0\x55\x40\xd6\xb7\x8e\x7c\xea\x73\x97\x63\xa8\xfe\x15\x44\x8e\xa4\x7c\xe8\x57\x2c\xdc\x18\x2e\x3f\xf7\x11\xbb\x49\xeb\x8a\xe6\x8e\x7c\x35\x26\x76\xd0\x4b\x5d\x23\x5d\xb3\x0f\x8d\x4f\x19\x3c\xb7\x49\xfa\xa6\x83\x05\x6a\x09\xee\xec\x3b\xb6\x55\xca\xc2\x3d\xeb\xb3\x14\xa2\x73\x76\x74\x6f\xea\xcf\xf3\xf9\x83\x83\xed\x9f\x00\x00\x00\xff\xff\x47\x62\x1e\x81\x6a\x15\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
