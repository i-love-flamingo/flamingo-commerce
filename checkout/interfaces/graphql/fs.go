// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcd\x72\xdb\x38\x0c\xbe\xeb\x29\xe0\xf1\xa5\x3d\xb4\x0f\xa0\x5b\xeb\xdd\x6c\x3b\xd3\x6e\x5c\xa7\xed\x1e\x3a\x19\x0f\x42\x42\x16\x27\x14\xa9\x05\xa1\xb8\x9a\x4e\xde\x7d\x87\xa2\x2a\xcb\xbf\x9b\xa6\xd3\xd4\x3a\xd9\x24\xf1\xe1\x03\x08\x80\x80\xb4\x35\xc1\xcc\x57\x15\xb1\xa2\xe5\xac\x24\x75\xeb\x1b\x59\x5e\x09\xb2\xcc\x2d\x2a\xba\x64\x4d\xbc\x5c\x50\x68\xac\xc0\xb7\x0c\x00\xa0\x69\x8c\xce\xe1\x4a\xd8\xb8\xd5\x24\xbb\xcf\xa6\x07\x00\x36\xb2\x33\xef\x84\xbe\x0a\x30\xd5\x4c\x81\x9c\x04\x90\x92\x80\x13\xa2\x2f\xba\x7f\xaa\x61\x26\x27\xf0\x8c\x1b\xe7\x8c\x5b\x3d\x87\x3a\x02\x80\x8f\x08\x50\x35\x82\x62\xbc\xcb\x8e\xb0\xdd\x57\x96\x88\x4e\xe1\x63\x49\x30\x43\x16\x90\x12\x05\x4c\x80\x95\x37\x6e\x05\xe2\xe1\x86\x92\x0a\xdd\x9d\x54\xc8\x92\x6f\x90\xff\x20\xe5\x19\x85\x74\x94\x1d\x41\x25\x89\x9e\x95\x71\xa0\x30\x7c\xe7\x68\x02\xa0\x65\x42\xdd\x8e\x71\xbb\xbd\xb7\xae\xf0\x21\x3f\xc6\x5b\x5f\x0e\x67\x7a\x4d\x57\x82\x42\xa0\xa9\x26\xa7\x23\x5b\xef\x3a\x1f\x85\x6e\xd9\x17\x50\x63\x5b\x45\x67\xa1\xd3\x5b\x6e\x7a\xd1\x1f\xa9\xb0\x05\xe5\x9d\xa0\x71\x80\x5a\x9b\xe8\x3a\xb4\x60\x06\x15\xdd\xb1\xe1\x06\x61\x0a\xe2\xb5\xcf\xa1\x09\x04\xca\x33\x93\x12\xf8\x8b\xb1\x2e\x3f\xbc\x4b\x47\xc3\xcb\x97\x3d\xb5\x57\xd0\x38\xf3\x6f\x43\x60\x34\x14\x9e\x3b\x5e\x35\x7b\x45\x21\x1c\x08\x8d\xb8\x52\xa0\xb1\xa4\x17\x84\xc1\xbb\xef\x3b\xd9\x7d\x96\x1d\x8f\x9a\x91\x43\xe0\x45\x62\x0d\x78\xe3\x1b\x49\xda\x46\x57\x10\xf7\xa5\xad\x8d\x42\x6b\x5b\x08\xa5\x5f\xbb\xe8\x2c\x84\xd0\x28\xa2\x10\xa0\xc6\x15\x9d\x0c\x9a\xb1\xae\x14\x33\xbd\x73\xfb\x3b\xeb\xbf\x2f\xa7\x62\x6e\xbe\x91\x98\x5c\x27\x8c\x1d\xe8\x7c\x07\x03\x79\x4f\x7d\x2f\x49\x15\x1a\x3b\xa8\xed\xbf\x4d\xa6\x25\x5b\x4e\x66\xc0\x88\x4d\x6f\xd1\x0a\x85\xd6\xd8\xe6\x7b\x78\x23\x73\xe7\xec\xef\x8c\x26\xde\xbe\xbb\x8a\xa4\xf4\x3a\xdf\x67\x12\x7f\x63\xe5\x1b\x27\xa3\xcd\x81\xd5\x9c\x8d\xa2\x74\x48\x8c\x58\xca\x0f\xdb\x32\xcd\xa6\xc6\x09\x71\x11\x23\xf8\x94\x49\x5d\x3e\x2c\x53\x56\x7c\xcb\xa6\x11\xc6\x84\x0b\xe3\xd0\xe6\xf0\xda\x7b\x4b\xe8\xd2\xaa\xc3\x6a\x13\xd6\xd9\x34\xea\xf8\xdf\x8a\x31\x02\x5f\xfe\x4d\x6b\x30\x55\x6d\xa9\xea\xca\xd4\x59\x70\xfa\x07\x8d\x9c\x1d\xa9\xab\x46\xc5\x94\x3f\x3b\x5e\x17\x5d\xb1\xf9\xd5\xb4\xe2\x12\xf7\x05\xed\xc7\x98\xa5\x32\xf8\x18\x87\x97\x7e\xfd\xb6\x60\xac\xe8\x29\x8c\xfb\xb4\x78\xf7\x53\xd1\x51\xfa\xf5\x1b\xa9\xec\x53\x50\x7d\xf3\xf1\xfd\x4f\x71\x5d\x90\x36\xdd\x83\x77\xfe\x6e\x9d\xfb\x20\xbf\x8f\x6e\x5c\x99\x63\x8c\x40\x21\x0e\xf9\xa1\x27\xf1\xc2\x73\xb5\x1c\xce\x4c\xae\x3b\x1b\x7f\xb8\xc4\x6f\xa5\x4a\xff\x84\xf1\x7e\xfb\xf0\x88\xba\x90\x20\x97\x7f\x32\x7b\x7e\x84\x03\x1f\x46\xec\xf1\xbc\xfa\x97\xfb\x5c\xe9\xc5\xae\xe5\x33\x5a\xa3\xbb\x56\xfc\x17\xb2\x8c\x4b\x77\x83\xa2\x34\x79\x8c\x0b\x6d\xec\x9e\x3e\xef\xec\x4f\x4e\xd8\xb6\x1d\x96\xbd\xce\x5b\x6a\xb7\x7b\x9d\x3b\xb4\x0d\xe5\xf0\xa5\x5f\xbb\x8e\x80\xf4\x55\xc8\x69\xe8\x70\x3f\x34\xc4\x6d\x2f\xbc\xaf\xe3\x95\x12\x73\x47\x1b\x8b\x87\xec\x9a\xec\xe2\xbc\xef\x67\x99\x61\x44\xb9\x74\xb6\x85\xda\x87\x60\x6e\x2c\x81\x29\x52\xfb\x5f\x61\x50\xa5\x71\x04\xce\x0b\x60\x87\x0e\xbe\x9b\x39\x10\x8a\x98\xbf\xa9\x33\x3f\x42\x67\x67\x7c\x7b\xc6\x24\x0d\xbb\x4f\x6c\x07\x9b\x9f\x1f\x7a\xba\x0e\x4f\x7d\x93\x9e\xe8\x7c\xc4\x31\x0d\x1a\x26\x74\xf4\x3a\x3e\x47\x98\xcc\xd0\x29\xb2\x07\x1d\x73\x58\x60\x41\x05\x53\x28\xc7\x12\x0f\x18\xf8\x1e\x8c\xf6\xda\x7a\x75\x6b\xdc\xea\x81\xa8\xf7\xd9\x7f\x01\x00\x00\xff\xff\xba\x50\x58\x06\x21\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
