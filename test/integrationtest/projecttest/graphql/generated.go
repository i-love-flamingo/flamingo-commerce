// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"math/big"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"flamingo.me/flamingo-commerce/v3/cart/domain/cart"
	"flamingo.me/flamingo-commerce/v3/cart/domain/placeorder"
	"flamingo.me/flamingo-commerce/v3/cart/domain/validation"
	"flamingo.me/flamingo-commerce/v3/cart/interfaces/controller/forms"
	"flamingo.me/flamingo-commerce/v3/cart/interfaces/graphql/dto"
	domain3 "flamingo.me/flamingo-commerce/v3/category/domain"
	"flamingo.me/flamingo-commerce/v3/category/interfaces/graphql/categorydto"
	"flamingo.me/flamingo-commerce/v3/checkout/application"
	"flamingo.me/flamingo-commerce/v3/checkout/domain/placeorder/process"
	dto1 "flamingo.me/flamingo-commerce/v3/checkout/interfaces/graphql/dto"
	domain5 "flamingo.me/flamingo-commerce/v3/customer/domain"
	"flamingo.me/flamingo-commerce/v3/customer/interfaces/graphql/dtocustomer"
	"flamingo.me/flamingo-commerce/v3/price/domain"
	domain1 "flamingo.me/flamingo-commerce/v3/product/domain"
	graphql1 "flamingo.me/flamingo-commerce/v3/product/interfaces/graphql"
	graphqlproductdto "flamingo.me/flamingo-commerce/v3/product/interfaces/graphql/product/dto"
	domain2 "flamingo.me/flamingo-commerce/v3/search/domain"
	"flamingo.me/flamingo-commerce/v3/search/interfaces/graphql/searchdto"
	domain4 "flamingo.me/form/domain"
	graphql2 "flamingo.me/graphql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Commerce_Cart_AdditionalData() Commerce_Cart_AdditionalDataResolver
	Commerce_Cart_Cart() Commerce_Cart_CartResolver
	Commerce_Cart_DefaultPaymentSelection() Commerce_Cart_DefaultPaymentSelectionResolver
	Commerce_Cart_DeliveryInfo() Commerce_Cart_DeliveryInfoResolver
	Commerce_Cart_Item() Commerce_Cart_ItemResolver
	Commerce_Cart_ShippingItem() Commerce_Cart_ShippingItemResolver
	Commerce_Product_PriceInfo() Commerce_Product_PriceInfoResolver
	Commerce_Search_Meta() Commerce_Search_MetaResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Commerce_Cart_AdditionalData struct {
		CustomAttributes func(childComplexity int) int
		ReservedOrderID  func(childComplexity int) int
	}

	Commerce_Cart_Address struct {
		AdditionalAddressLines func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		Country                func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		Email                  func(childComplexity int) int
		Firstname              func(childComplexity int) int
		Lastname               func(childComplexity int) int
		MiddleName             func(childComplexity int) int
		PostCode               func(childComplexity int) int
		RegionCode             func(childComplexity int) int
		Salutation             func(childComplexity int) int
		State                  func(childComplexity int) int
		Street                 func(childComplexity int) int
		StreetNr               func(childComplexity int) int
		Telephone              func(childComplexity int) int
		Title                  func(childComplexity int) int
		Vat                    func(childComplexity int) int
	}

	Commerce_Cart_AddressForm struct {
		AddressLine1 func(childComplexity int) int
		AddressLine2 func(childComplexity int) int
		City         func(childComplexity int) int
		Company      func(childComplexity int) int
		Country      func(childComplexity int) int
		CountryCode  func(childComplexity int) int
		Email        func(childComplexity int) int
		Firstname    func(childComplexity int) int
		Lastname     func(childComplexity int) int
		MiddleName   func(childComplexity int) int
		PhoneNumber  func(childComplexity int) int
		PostCode     func(childComplexity int) int
		RegionCode   func(childComplexity int) int
		Salutation   func(childComplexity int) int
		State        func(childComplexity int) int
		Street       func(childComplexity int) int
		StreetNr     func(childComplexity int) int
		Title        func(childComplexity int) int
		Vat          func(childComplexity int) int
	}

	Commerce_Cart_AppliedDiscount struct {
		Applied       func(childComplexity int) int
		CampaignCode  func(childComplexity int) int
		CouponCode    func(childComplexity int) int
		IsItemRelated func(childComplexity int) int
		Label         func(childComplexity int) int
		SortOrder     func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	Commerce_Cart_AppliedDiscounts struct {
		ByCampaignCode func(childComplexity int, campaignCode string) int
		ByType         func(childComplexity int, filterType string) int
		Items          func(childComplexity int) int
	}

	Commerce_Cart_AppliedGiftCard struct {
		Applied      func(childComplexity int) int
		Code         func(childComplexity int) int
		HasRemaining func(childComplexity int) int
		Remaining    func(childComplexity int) int
	}

	Commerce_Cart_BillingAddressForm struct {
		FormData       func(childComplexity int) int
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	Commerce_Cart_Cart struct {
		AdditionalData               func(childComplexity int) int
		AllShippingTitles            func(childComplexity int) int
		AppliedCouponCodes           func(childComplexity int) int
		AppliedGiftCards             func(childComplexity int) int
		AuthenticatedUserID          func(childComplexity int) int
		BelongsToAuthenticatedUser   func(childComplexity int) int
		BillingAddress               func(childComplexity int) int
		DefaultCurrency              func(childComplexity int) int
		Deliveries                   func(childComplexity int) int
		EntityID                     func(childComplexity int) int
		GetByExternalReference       func(childComplexity int, ref string) int
		GetByItemID                  func(childComplexity int, itemID string) int
		GetCartTeaser                func(childComplexity int) int
		GetDeliveryByCode            func(childComplexity int, deliveryCode string) int
		GetDeliveryByItemID          func(childComplexity int, itemID string) int
		GetDeliveryCodes             func(childComplexity int) int
		GetMainShippingEMail         func(childComplexity int) int
		GetPaymentReference          func(childComplexity int) int
		GetTotalItemsByType          func(childComplexity int, typeCode string) int
		GetTotalQty                  func(childComplexity int, marketPlaceCode string, variantCode string) int
		GetVoucherSavings            func(childComplexity int) int
		GrandTotal                   func(childComplexity int) int
		GrandTotalCharges            func(childComplexity int) int
		HasAppliedCouponCode         func(childComplexity int) int
		HasAppliedGiftCards          func(childComplexity int) int
		HasDeliveryForCode           func(childComplexity int, deliveryCode string) int
		HasRemainingGiftCards        func(childComplexity int) int
		HasShippingCosts             func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsEmpty                      func(childComplexity int) int
		IsPaymentSelected            func(childComplexity int) int
		ItemCount                    func(childComplexity int) int
		ItemRelatedDiscountAmount    func(childComplexity int) int
		NonItemRelatedDiscountAmount func(childComplexity int) int
		PaymentSelection             func(childComplexity int) int
		ProductCount                 func(childComplexity int) int
		Purchaser                    func(childComplexity int) int
		ShippingGross                func(childComplexity int) int
		ShippingGrossWithDiscounts   func(childComplexity int) int
		ShippingNet                  func(childComplexity int) int
		ShippingNetWithDiscounts     func(childComplexity int) int
		SubTotalGross                func(childComplexity int) int
		SubTotalGrossWithDiscounts   func(childComplexity int) int
		SubTotalNet                  func(childComplexity int) int
		SubTotalNetWithDiscounts     func(childComplexity int) int
		SumTotalTaxAmount            func(childComplexity int) int
		TotalDiscountAmount          func(childComplexity int) int
		Totalitems                   func(childComplexity int) int
	}

	Commerce_Cart_CouponCode struct {
		Code func(childComplexity int) int
	}

	Commerce_Cart_CustomAttributes struct {
		Get func(childComplexity int, key string) int
	}

	Commerce_Cart_DecoratedCart struct {
		Cart                       func(childComplexity int) int
		CartSummary                func(childComplexity int) int
		DecoratedDeliveries        func(childComplexity int) int
		GetAllPaymentRequiredItems func(childComplexity int) int
		GetDecoratedDeliveryByCode func(childComplexity int, deliveryCode string) int
	}

	Commerce_Cart_DecoratedDelivery struct {
		DecoratedItems func(childComplexity int) int
		Delivery       func(childComplexity int) int
	}

	Commerce_Cart_DecoratedItem struct {
		Item    func(childComplexity int) int
		Product func(childComplexity int) int
	}

	Commerce_Cart_DefaultPaymentSelection struct {
		CartSplit  func(childComplexity int) int
		Gateway    func(childComplexity int) int
		TotalValue func(childComplexity int) int
	}

	Commerce_Cart_Delivery struct {
		Cartitems                    func(childComplexity int) int
		DeliveryInfo                 func(childComplexity int) int
		GrandTotal                   func(childComplexity int) int
		HasItems                     func(childComplexity int) int
		ItemRelatedDiscountAmount    func(childComplexity int) int
		NonItemRelatedDiscountAmount func(childComplexity int) int
		ShippingItem                 func(childComplexity int) int
		SubTotalGross                func(childComplexity int) int
		SubTotalGrossWithDiscounts   func(childComplexity int) int
		SubTotalNet                  func(childComplexity int) int
		SubTotalNetWithDiscounts     func(childComplexity int) int
		SumTotalTaxAmount            func(childComplexity int) int
		TotalDiscountAmount          func(childComplexity int) int
	}

	Commerce_Cart_DeliveryAddressForm struct {
		Carrier           func(childComplexity int) int
		DeliveryCode      func(childComplexity int) int
		DesiredTime       func(childComplexity int) int
		FormData          func(childComplexity int) int
		Method            func(childComplexity int) int
		Processed         func(childComplexity int) int
		UseBillingAddress func(childComplexity int) int
		ValidationInfo    func(childComplexity int) int
	}

	Commerce_Cart_DeliveryInfo struct {
		AdditionalData   func(childComplexity int) int
		Carrier          func(childComplexity int) int
		Code             func(childComplexity int) int
		DeliveryLocation func(childComplexity int) int
		DesiredTime      func(childComplexity int) int
		Method           func(childComplexity int) int
		Workflow         func(childComplexity int) int
	}

	Commerce_Cart_DeliveryLocation struct {
		Address           func(childComplexity int) int
		Code              func(childComplexity int) int
		Type              func(childComplexity int) int
		UseBillingAddress func(childComplexity int) int
	}

	Commerce_Cart_ExistingCustomerData struct {
		ID func(childComplexity int) int
	}

	Commerce_Cart_Form_Error struct {
		DefaultLabel func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	Commerce_Cart_Form_FieldError struct {
		DefaultLabel func(childComplexity int) int
		FieldName    func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	Commerce_Cart_Form_ValidationInfo struct {
		FieldErrors   func(childComplexity int) int
		GeneralErrors func(childComplexity int) int
	}

	Commerce_Cart_Item struct {
		AdditionalDataKeys     func(childComplexity int) int
		AdditionalDataValues   func(childComplexity int) int
		AppliedDiscounts       func(childComplexity int) int
		ExternalReference      func(childComplexity int) int
		GetAdditionalData      func(childComplexity int, key string) int
		HasAdditionalDataKey   func(childComplexity int, key string) int
		ID                     func(childComplexity int) int
		MarketplaceCode        func(childComplexity int) int
		ProductName            func(childComplexity int) int
		Qty                    func(childComplexity int) int
		RowPriceGross          func(childComplexity int) int
		RowPriceNet            func(childComplexity int) int
		SinglePriceGross       func(childComplexity int) int
		SinglePriceNet         func(childComplexity int) int
		SourceID               func(childComplexity int) int
		VariantMarketPlaceCode func(childComplexity int) int
	}

	Commerce_Cart_ItemValidationError struct {
		ErrorMessageKey func(childComplexity int) int
		ItemID          func(childComplexity int) int
	}

	Commerce_Cart_KeyValue struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Commerce_Cart_PaymentSelection_Split struct {
		Charge    func(childComplexity int) int
		Qualifier func(childComplexity int) int
	}

	Commerce_Cart_PaymentSelection_SplitQualifier struct {
		ChargeReference func(childComplexity int) int
		ChargeType      func(childComplexity int) int
		Method          func(childComplexity int) int
	}

	Commerce_Cart_Person struct {
		Address              func(childComplexity int) int
		ExistingCustomerData func(childComplexity int) int
		PersonalDetails      func(childComplexity int) int
	}

	Commerce_Cart_PersonalDetails struct {
		DateOfBirth     func(childComplexity int) int
		Nationality     func(childComplexity int) int
		PassportCountry func(childComplexity int) int
		PassportNumber  func(childComplexity int) int
	}

	Commerce_Cart_PlacedOrderInfo struct {
		DeliveryCode func(childComplexity int) int
		OrderNumber  func(childComplexity int) int
	}

	Commerce_Cart_PricedCartItem struct {
		Amount func(childComplexity int) int
		ItemID func(childComplexity int) int
	}

	Commerce_Cart_PricedItems struct {
		CartItems     func(childComplexity int) int
		ShippingItems func(childComplexity int) int
		TotalItems    func(childComplexity int) int
	}

	Commerce_Cart_PricedShippingItem struct {
		Amount           func(childComplexity int) int
		DeliveryInfoCode func(childComplexity int) int
	}

	Commerce_Cart_PricedTotalItem struct {
		Amount func(childComplexity int) int
		Code   func(childComplexity int) int
	}

	Commerce_Cart_QtyRestrictionResult struct {
		IsRestricted        func(childComplexity int) int
		MaxAllowed          func(childComplexity int) int
		RemainingDifference func(childComplexity int) int
		RestrictorName      func(childComplexity int) int
	}

	Commerce_Cart_SelectedPaymentResult struct {
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	Commerce_Cart_ShippingItem struct {
		AppliedDiscounts         func(childComplexity int) int
		PriceGross               func(childComplexity int) int
		PriceNet                 func(childComplexity int) int
		Tax                      func(childComplexity int) int
		TaxAmount                func(childComplexity int) int
		Title                    func(childComplexity int) int
		TotalWithDiscountInclTax func(childComplexity int) int
	}

	Commerce_Cart_Summary struct {
		Discounts                                        func(childComplexity int) int
		GrandTotalWithGiftCards                          func(childComplexity int) int
		HasAppliedDiscounts                              func(childComplexity int) int
		SumPaymentSelectionCartSplitValueAmountByMethods func(childComplexity int, methods []string) int
		SumTaxes                                         func(childComplexity int) int
		SumTotalDiscountWithGiftCardsAmount              func(childComplexity int) int
		TotalDiscountAmount                              func(childComplexity int) int
		TotalGiftCardAmount                              func(childComplexity int) int
	}

	Commerce_Cart_Tax struct {
		Amount func(childComplexity int) int
		Rate   func(childComplexity int) int
		Type   func(childComplexity int) int
	}

	Commerce_Cart_Taxes struct {
		GetByType func(childComplexity int, taxType string) int
		Items     func(childComplexity int) int
	}

	Commerce_Cart_Teaser struct {
		DeliveryCodes func(childComplexity int) int
		ItemCount     func(childComplexity int) int
		ProductCount  func(childComplexity int) int
	}

	Commerce_Cart_Totalitem struct {
		Code  func(childComplexity int) int
		Price func(childComplexity int) int
		Title func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	Commerce_Cart_UpdateDeliveryShippingOptions_Result struct {
		Processed func(childComplexity int) int
	}

	Commerce_Cart_ValidationResult struct {
		CommonErrorMessageKey func(childComplexity int) int
		HasCommonError        func(childComplexity int) int
		ItemResults           func(childComplexity int) int
	}

	Commerce_CategoryData struct {
		Active     func(childComplexity int) int
		Attributes func(childComplexity int) int
		Code       func(childComplexity int) int
		Name       func(childComplexity int) int
		Path       func(childComplexity int) int
		Promoted   func(childComplexity int) int
	}

	Commerce_CategoryTree struct {
		Active        func(childComplexity int) int
		Code          func(childComplexity int) int
		DocumentCount func(childComplexity int) int
		HasChilds     func(childComplexity int) int
		Name          func(childComplexity int) int
		Path          func(childComplexity int) int
		SubTrees      func(childComplexity int) int
	}

	Commerce_Category_Attribute struct {
		Code   func(childComplexity int) int
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	Commerce_Category_AttributeValue struct {
		Label func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Commerce_Category_Attributes struct {
		All func(childComplexity int) int
		Get func(childComplexity int, code string) int
		Has func(childComplexity int, code string) int
	}

	Commerce_Category_SearchResult struct {
		Category            func(childComplexity int) int
		ProductSearchResult func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderContext struct {
		Cart       func(childComplexity int) int
		OrderInfos func(childComplexity int) int
		State      func(childComplexity int) int
		UUID       func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderPaymentInfo struct {
		Amount          func(childComplexity int) int
		Gateway         func(childComplexity int) int
		Method          func(childComplexity int) int
		PaymentProvider func(childComplexity int) int
		Title           func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_Form_Parameter struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_PaymentRequestAPI struct {
		CompleteURL           func(childComplexity int) int
		Details               func(childComplexity int) int
		MerchantValidationURL func(childComplexity int) int
		MethodData            func(childComplexity int) int
		Options               func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_Failed struct {
		Name   func(childComplexity int) int
		Reason func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer struct {
		Reason func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError struct {
		Reason           func(childComplexity int) int
		ValidationResult func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_FailedReason_Error struct {
		Reason func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer struct {
		Reason func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError struct {
		Reason func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_PostRedirect struct {
		Name       func(childComplexity int) int
		Parameters func(childComplexity int) int
		URL        func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_Redirect struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_ShowHTML struct {
		HTML func(childComplexity int) int
		Name func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_ShowIframe struct {
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment struct {
		Name              func(childComplexity int) int
		PaymentMethod     func(childComplexity int) int
		PaymentRequestAPI func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_Success struct {
		Name func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK struct {
		Data func(childComplexity int) int
		Name func(childComplexity int) int
		URL  func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_Wait struct {
		Name func(childComplexity int) int
	}

	Commerce_Checkout_PlaceOrderState_State_WaitForCustomer struct {
		Name func(childComplexity int) int
	}

	Commerce_Checkout_PlacedOrderInfos struct {
		Email            func(childComplexity int) int
		PaymentInfos     func(childComplexity int) int
		PlacedOrderInfos func(childComplexity int) int
	}

	Commerce_Checkout_StartPlaceOrder_Result struct {
		UUID func(childComplexity int) int
	}

	Commerce_Customer_Address struct {
		AdditionalAddressLines func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		DefaultBilling         func(childComplexity int) int
		DefaultShipping        func(childComplexity int) int
		Email                  func(childComplexity int) int
		Firstname              func(childComplexity int) int
		ID                     func(childComplexity int) int
		Lastname               func(childComplexity int) int
		PostCode               func(childComplexity int) int
		Prefix                 func(childComplexity int) int
		RegionCode             func(childComplexity int) int
		State                  func(childComplexity int) int
		Street                 func(childComplexity int) int
		StreetNr               func(childComplexity int) int
		Telephone              func(childComplexity int) int
	}

	Commerce_Customer_PersonData struct {
		Birthday    func(childComplexity int) int
		FirstName   func(childComplexity int) int
		Gender      func(childComplexity int) int
		LastName    func(childComplexity int) int
		MainEmail   func(childComplexity int) int
		MiddleName  func(childComplexity int) int
		Nationality func(childComplexity int) int
		Prefix      func(childComplexity int) int
	}

	Commerce_Customer_Result struct {
		Addresses              func(childComplexity int) int
		DefaultBillingAddress  func(childComplexity int) int
		DefaultShippingAddress func(childComplexity int) int
		GetAddress             func(childComplexity int, id string) int
		ID                     func(childComplexity int) int
		PersonalData           func(childComplexity int) int
	}

	Commerce_Customer_Status_Result struct {
		IsLoggedIn func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	Commerce_Price struct {
		Currency    func(childComplexity int) int
		FloatAmount func(childComplexity int) int
	}

	Commerce_Price_Charge struct {
		Price     func(childComplexity int) int
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Commerce_Price_ChargeQualifier struct {
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	Commerce_Price_Charges struct {
		GetByChargeQualifierForced func(childComplexity int, qualifier domain.ChargeQualifier) int
		GetByTypeForced            func(childComplexity int, ctype string) int
		HasChargeQualifier         func(childComplexity int, qualifier domain.ChargeQualifier) int
		HasType                    func(childComplexity int, ctype string) int
		Items                      func(childComplexity int) int
	}

	Commerce_Product_ActiveVariantProduct struct {
		ActiveVariationSelections func(childComplexity int) int
		Attributes                func(childComplexity int) int
		AvailablePrices           func(childComplexity int) int
		Badges                    func(childComplexity int) int
		Categories                func(childComplexity int) int
		Description               func(childComplexity int) int
		Identifier                func(childComplexity int) int
		Loyalty                   func(childComplexity int) int
		MarketPlaceCode           func(childComplexity int) int
		Media                     func(childComplexity int) int
		Meta                      func(childComplexity int) int
		Price                     func(childComplexity int) int
		ShortDescription          func(childComplexity int) int
		Title                     func(childComplexity int) int
		Type                      func(childComplexity int) int
		VariantMarketPlaceCode    func(childComplexity int) int
		VariationSelections       func(childComplexity int) int
	}

	Commerce_Product_ActiveVariationSelection struct {
		Code     func(childComplexity int) int
		Label    func(childComplexity int) int
		UnitCode func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Commerce_Product_Attribute struct {
		Code      func(childComplexity int) int
		CodeLabel func(childComplexity int) int
		Label     func(childComplexity int) int
		Labels    func(childComplexity int) int
		UnitCode  func(childComplexity int) int
		Value     func(childComplexity int) int
		Values    func(childComplexity int) int
	}

	Commerce_Product_Attributes struct {
		Attribute       func(childComplexity int, key string) int
		AttributeKeys   func(childComplexity int) int
		Attributes      func(childComplexity int) int
		AttributesByKey func(childComplexity int, keys []string) int
		HasAttribute    func(childComplexity int, key string) int
	}

	Commerce_Product_Badge struct {
		Code  func(childComplexity int) int
		Label func(childComplexity int) int
	}

	Commerce_Product_Badges struct {
		All   func(childComplexity int) int
		First func(childComplexity int) int
	}

	Commerce_Product_BundleProduct struct {
		Attributes       func(childComplexity int) int
		AvailablePrices  func(childComplexity int) int
		Badges           func(childComplexity int) int
		Categories       func(childComplexity int) int
		Choices          func(childComplexity int) int
		Description      func(childComplexity int) int
		Identifier       func(childComplexity int) int
		Loyalty          func(childComplexity int) int
		MarketPlaceCode  func(childComplexity int) int
		Media            func(childComplexity int) int
		Meta             func(childComplexity int) int
		Price            func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	Commerce_Product_Categories struct {
		All  func(childComplexity int) int
		Main func(childComplexity int) int
	}

	Commerce_Product_CategoryTeaser struct {
		Code   func(childComplexity int) int
		Name   func(childComplexity int) int
		Parent func(childComplexity int) int
		Path   func(childComplexity int) int
	}

	Commerce_Product_Choice struct {
		Active       func(childComplexity int) int
		ActiveOption func(childComplexity int) int
		Identifier   func(childComplexity int) int
		Label        func(childComplexity int) int
		Options      func(childComplexity int) int
		Required     func(childComplexity int) int
	}

	Commerce_Product_ConfigurableProduct struct {
		Attributes       func(childComplexity int) int
		AvailablePrices  func(childComplexity int) int
		Badges           func(childComplexity int) int
		Categories       func(childComplexity int) int
		Description      func(childComplexity int) int
		Identifier       func(childComplexity int) int
		Loyalty          func(childComplexity int) int
		MarketPlaceCode  func(childComplexity int) int
		Media            func(childComplexity int) int
		Meta             func(childComplexity int) int
		Price            func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
		VariantSelection func(childComplexity int) int
	}

	Commerce_Product_Loyalty struct {
		Earning func(childComplexity int) int
		Price   func(childComplexity int) int
	}

	Commerce_Product_Loyalty_EarningInfo struct {
		Default func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	Commerce_Product_Loyalty_PriceInfo struct {
		Context          func(childComplexity int) int
		Default          func(childComplexity int) int
		DiscountText     func(childComplexity int) int
		Discounted       func(childComplexity int) int
		IsDiscounted     func(childComplexity int) int
		MaxPointsToSpent func(childComplexity int) int
		MinPointsToSpent func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	Commerce_Product_Media struct {
		All      func(childComplexity int) int
		GetMedia func(childComplexity int, usage string) int
	}

	Commerce_Product_MediaItem struct {
		MimeType  func(childComplexity int) int
		Reference func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		Usage     func(childComplexity int) int
	}

	Commerce_Product_Meta struct {
		Keywords func(childComplexity int) int
	}

	Commerce_Product_Option struct {
		Product func(childComplexity int) int
		Qty     func(childComplexity int) int
	}

	Commerce_Product_PriceContext struct {
		ChannelCode   func(childComplexity int) int
		CustomerGroup func(childComplexity int) int
		DeliveryCode  func(childComplexity int) int
		Locale        func(childComplexity int) int
	}

	Commerce_Product_PriceInfo struct {
		ActiveBase        func(childComplexity int) int
		ActiveBaseAmount  func(childComplexity int) int
		ActiveBaseUnit    func(childComplexity int) int
		CampaignRules     func(childComplexity int) int
		Context           func(childComplexity int) int
		Default           func(childComplexity int) int
		DenyMoreDiscounts func(childComplexity int) int
		DiscountText      func(childComplexity int) int
		Discounted        func(childComplexity int) int
		IsDiscounted      func(childComplexity int) int
		TaxClass          func(childComplexity int) int
	}

	Commerce_Product_SearchResult struct {
		Actions          func(childComplexity int) int
		Facets           func(childComplexity int) int
		HasSelectedFacet func(childComplexity int) int
		Products         func(childComplexity int) int
		Promotion        func(childComplexity int) int
		SearchMeta       func(childComplexity int) int
		Suggestions      func(childComplexity int) int
	}

	Commerce_Product_SimpleProduct struct {
		Attributes       func(childComplexity int) int
		AvailablePrices  func(childComplexity int) int
		Badges           func(childComplexity int) int
		Categories       func(childComplexity int) int
		Description      func(childComplexity int) int
		Identifier       func(childComplexity int) int
		Loyalty          func(childComplexity int) int
		MarketPlaceCode  func(childComplexity int) int
		Media            func(childComplexity int) int
		Meta             func(childComplexity int) int
		Price            func(childComplexity int) int
		ShortDescription func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	Commerce_Product_VariantSelection struct {
		Attributes func(childComplexity int) int
		Variants   func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Attribute struct {
		Code    func(childComplexity int) int
		Label   func(childComplexity int) int
		Options func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Attribute_Option struct {
		Label                       func(childComplexity int) int
		OtherAttributesRestrictions func(childComplexity int) int
		UnitCode                    func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Match struct {
		Attributes func(childComplexity int) int
		Variant    func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Match_Attributes struct {
		Key   func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Match_Variant struct {
		MarketplaceCode func(childComplexity int) int
	}

	Commerce_Product_VariantSelection_Option_OtherAttributesRestriction struct {
		AvailableOptions func(childComplexity int) int
		Code             func(childComplexity int) int
	}

	Commerce_Product_VariationSelection struct {
		Code    func(childComplexity int) int
		Label   func(childComplexity int) int
		Options func(childComplexity int) int
	}

	Commerce_Product_VariationSelection_Option struct {
		Label    func(childComplexity int) int
		State    func(childComplexity int) int
		UnitCode func(childComplexity int) int
		Variant  func(childComplexity int) int
	}

	Commerce_Product_VariationSelection_OptionVariant struct {
		MarketPlaceCode func(childComplexity int) int
	}

	Commerce_Search_Action struct {
		Content func(childComplexity int) int
		Type    func(childComplexity int) int
	}

	Commerce_Search_ListFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	Commerce_Search_ListFacetItem struct {
		Count    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Commerce_Search_Meta struct {
		NumPages      func(childComplexity int) int
		NumResults    func(childComplexity int) int
		OriginalQuery func(childComplexity int) int
		Page          func(childComplexity int) int
		Query         func(childComplexity int) int
		SortOptions   func(childComplexity int) int
	}

	Commerce_Search_Promotion struct {
		Content func(childComplexity int) int
		Media   func(childComplexity int) int
		Title   func(childComplexity int) int
		URL     func(childComplexity int) int
	}

	Commerce_Search_PromotionMedia struct {
		MimeType  func(childComplexity int) int
		Reference func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		Usage     func(childComplexity int) int
	}

	Commerce_Search_RangeFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	Commerce_Search_RangeFacetItem struct {
		Count       func(childComplexity int) int
		Label       func(childComplexity int) int
		Max         func(childComplexity int) int
		Min         func(childComplexity int) int
		Selected    func(childComplexity int) int
		SelectedMax func(childComplexity int) int
		SelectedMin func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	Commerce_Search_SortOption struct {
		Field    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
	}

	Commerce_Search_Suggestion struct {
		Highlight func(childComplexity int) int
		Text      func(childComplexity int) int
	}

	Commerce_Search_TreeFacet struct {
		HasSelectedItem func(childComplexity int) int
		Items           func(childComplexity int) int
		Label           func(childComplexity int) int
		Name            func(childComplexity int) int
		Position        func(childComplexity int) int
	}

	Commerce_Search_TreeFacetItem struct {
		Active   func(childComplexity int) int
		Count    func(childComplexity int) int
		Items    func(childComplexity int) int
		Label    func(childComplexity int) int
		Selected func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Mutation struct {
		CommerceCartAddToCart                      func(childComplexity int, addToCartInput dto.AddToCart) int
		CommerceCartApplyCouponCodeOrGiftCard      func(childComplexity int, code string) int
		CommerceCartClean                          func(childComplexity int) int
		CommerceCartDeleteCartDelivery             func(childComplexity int, deliveryCode string) int
		CommerceCartDeleteItem                     func(childComplexity int, itemID string, deliveryCode string) int
		CommerceCartRemoveCouponCode               func(childComplexity int, couponCode string) int
		CommerceCartRemoveGiftCard                 func(childComplexity int, giftCardCode string) int
		CommerceCartUpdateAdditionalData           func(childComplexity int, additionalData []*dto.KeyValue) int
		CommerceCartUpdateBillingAddress           func(childComplexity int, addressForm *forms.AddressForm) int
		CommerceCartUpdateDeliveriesAdditionalData func(childComplexity int, data []*dto.DeliveryAdditionalData) int
		CommerceCartUpdateDeliveryAddresses        func(childComplexity int, deliveryAdresses []*forms.DeliveryForm) int
		CommerceCartUpdateDeliveryShippingOptions  func(childComplexity int, shippingOptions []*dto.DeliveryShippingOption) int
		CommerceCartUpdateItemBundleConfig         func(childComplexity int, itemID string, bundleConfig []*dto.ChoiceConfiguration) int
		CommerceCartUpdateItemQty                  func(childComplexity int, itemID string, deliveryCode string, qty int) int
		CommerceCartUpdateSelectedPayment          func(childComplexity int, gateway string, method string) int
		CommerceCheckoutCancelPlaceOrder           func(childComplexity int) int
		CommerceCheckoutClearPlaceOrder            func(childComplexity int) int
		CommerceCheckoutRefreshPlaceOrder          func(childComplexity int) int
		CommerceCheckoutRefreshPlaceOrderBlocking  func(childComplexity int) int
		CommerceCheckoutStartPlaceOrder            func(childComplexity int, returnURL string) int
		Flamingo                                   func(childComplexity int) int
	}

	Query struct {
		CommerceCartDecoratedCart        func(childComplexity int) int
		CommerceCartQtyRestriction       func(childComplexity int, marketplaceCode string, variantCode *string, deliveryCode string) int
		CommerceCartValidator            func(childComplexity int) int
		CommerceCategory                 func(childComplexity int, categoryCode string, categorySearchRequest *searchdto.CommerceSearchRequest) int
		CommerceCategoryTree             func(childComplexity int, activeCategoryCode string) int
		CommerceCheckoutActivePlaceOrder func(childComplexity int) int
		CommerceCheckoutCurrentContext   func(childComplexity int) int
		CommerceCustomer                 func(childComplexity int) int
		CommerceCustomerStatus           func(childComplexity int) int
		CommerceProduct                  func(childComplexity int, marketPlaceCode string, variantMarketPlaceCode *string, bundleConfiguration []*graphqlproductdto.ChoiceConfiguration) int
		CommerceProductSearch            func(childComplexity int, searchRequest searchdto.CommerceSearchRequest) int
		Flamingo                         func(childComplexity int) int
	}
}

type Commerce_Cart_AdditionalDataResolver interface {
	CustomAttributes(ctx context.Context, obj *cart.AdditionalData) (*dto.CustomAttributes, error)
}
type Commerce_Cart_CartResolver interface {
	GetDeliveryByCode(ctx context.Context, obj *cart.Cart, deliveryCode string) (*cart.Delivery, error)
}
type Commerce_Cart_DefaultPaymentSelectionResolver interface {
	CartSplit(ctx context.Context, obj *cart.DefaultPaymentSelection) ([]*dto.PaymentSelectionSplit, error)
}
type Commerce_Cart_DeliveryInfoResolver interface {
	AdditionalData(ctx context.Context, obj *cart.DeliveryInfo) (*dto.CustomAttributes, error)
}
type Commerce_Cart_ItemResolver interface {
	AppliedDiscounts(ctx context.Context, obj *cart.Item) (*dto.CartAppliedDiscounts, error)
}
type Commerce_Cart_ShippingItemResolver interface {
	AppliedDiscounts(ctx context.Context, obj *cart.ShippingItem) (*dto.CartAppliedDiscounts, error)
}
type Commerce_Product_PriceInfoResolver interface {
	ActiveBase(ctx context.Context, obj *domain1.PriceInfo) (*domain.Price, error)
}
type Commerce_Search_MetaResolver interface {
	SortOptions(ctx context.Context, obj *domain2.SearchMeta) ([]*searchdto.CommerceSearchSortOption, error)
}
type MutationResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceCartAddToCart(ctx context.Context, addToCartInput dto.AddToCart) (*dto.DecoratedCart, error)
	CommerceCartDeleteCartDelivery(ctx context.Context, deliveryCode string) (*dto.DecoratedCart, error)
	CommerceCartDeleteItem(ctx context.Context, itemID string, deliveryCode string) (*dto.DecoratedCart, error)
	CommerceCartUpdateItemQty(ctx context.Context, itemID string, deliveryCode string, qty int) (*dto.DecoratedCart, error)
	CommerceCartUpdateItemBundleConfig(ctx context.Context, itemID string, bundleConfig []*dto.ChoiceConfiguration) (*dto.DecoratedCart, error)
	CommerceCartUpdateBillingAddress(ctx context.Context, addressForm *forms.AddressForm) (*dto.BillingAddressForm, error)
	CommerceCartUpdateSelectedPayment(ctx context.Context, gateway string, method string) (*dto.SelectedPaymentResult, error)
	CommerceCartApplyCouponCodeOrGiftCard(ctx context.Context, code string) (*dto.DecoratedCart, error)
	CommerceCartRemoveGiftCard(ctx context.Context, giftCardCode string) (*dto.DecoratedCart, error)
	CommerceCartRemoveCouponCode(ctx context.Context, couponCode string) (*dto.DecoratedCart, error)
	CommerceCartUpdateDeliveryAddresses(ctx context.Context, deliveryAdresses []*forms.DeliveryForm) ([]*dto.DeliveryAddressForm, error)
	CommerceCartUpdateDeliveryShippingOptions(ctx context.Context, shippingOptions []*dto.DeliveryShippingOption) (*dto.UpdateShippingOptionsResult, error)
	CommerceCartClean(ctx context.Context) (bool, error)
	CommerceCartUpdateAdditionalData(ctx context.Context, additionalData []*dto.KeyValue) (*dto.DecoratedCart, error)
	CommerceCartUpdateDeliveriesAdditionalData(ctx context.Context, data []*dto.DeliveryAdditionalData) (*dto.DecoratedCart, error)
	CommerceCheckoutStartPlaceOrder(ctx context.Context, returnURL string) (*dto1.StartPlaceOrderResult, error)
	CommerceCheckoutCancelPlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutClearPlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutRefreshPlaceOrder(ctx context.Context) (*dto1.PlaceOrderContext, error)
	CommerceCheckoutRefreshPlaceOrderBlocking(ctx context.Context) (*dto1.PlaceOrderContext, error)
}
type QueryResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceProduct(ctx context.Context, marketPlaceCode string, variantMarketPlaceCode *string, bundleConfiguration []*graphqlproductdto.ChoiceConfiguration) (graphqlproductdto.Product, error)
	CommerceProductSearch(ctx context.Context, searchRequest searchdto.CommerceSearchRequest) (*graphql1.SearchResultDTO, error)
	CommerceCustomerStatus(ctx context.Context) (*dtocustomer.CustomerStatusResult, error)
	CommerceCustomer(ctx context.Context) (*dtocustomer.CustomerResult, error)
	CommerceCartDecoratedCart(ctx context.Context) (*dto.DecoratedCart, error)
	CommerceCartValidator(ctx context.Context) (*validation.Result, error)
	CommerceCartQtyRestriction(ctx context.Context, marketplaceCode string, variantCode *string, deliveryCode string) (*validation.RestrictionResult, error)
	CommerceCheckoutActivePlaceOrder(ctx context.Context) (bool, error)
	CommerceCheckoutCurrentContext(ctx context.Context) (*dto1.PlaceOrderContext, error)
	CommerceCategoryTree(ctx context.Context, activeCategoryCode string) (domain3.Tree, error)
	CommerceCategory(ctx context.Context, categoryCode string, categorySearchRequest *searchdto.CommerceSearchRequest) (*categorydto.CategorySearchResult, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Commerce_Cart_AdditionalData.customAttributes":
		if e.complexity.Commerce_Cart_AdditionalData.CustomAttributes == nil {
			break
		}

		return e.complexity.Commerce_Cart_AdditionalData.CustomAttributes(childComplexity), true

	case "Commerce_Cart_AdditionalData.reservedOrderID":
		if e.complexity.Commerce_Cart_AdditionalData.ReservedOrderID == nil {
			break
		}

		return e.complexity.Commerce_Cart_AdditionalData.ReservedOrderID(childComplexity), true

	case "Commerce_Cart_Address.additionalAddressLines":
		if e.complexity.Commerce_Cart_Address.AdditionalAddressLines == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.AdditionalAddressLines(childComplexity), true

	case "Commerce_Cart_Address.city":
		if e.complexity.Commerce_Cart_Address.City == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.City(childComplexity), true

	case "Commerce_Cart_Address.company":
		if e.complexity.Commerce_Cart_Address.Company == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Company(childComplexity), true

	case "Commerce_Cart_Address.country":
		if e.complexity.Commerce_Cart_Address.Country == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Country(childComplexity), true

	case "Commerce_Cart_Address.countryCode":
		if e.complexity.Commerce_Cart_Address.CountryCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.CountryCode(childComplexity), true

	case "Commerce_Cart_Address.email":
		if e.complexity.Commerce_Cart_Address.Email == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Email(childComplexity), true

	case "Commerce_Cart_Address.firstname":
		if e.complexity.Commerce_Cart_Address.Firstname == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Firstname(childComplexity), true

	case "Commerce_Cart_Address.lastname":
		if e.complexity.Commerce_Cart_Address.Lastname == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Lastname(childComplexity), true

	case "Commerce_Cart_Address.middleName":
		if e.complexity.Commerce_Cart_Address.MiddleName == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.MiddleName(childComplexity), true

	case "Commerce_Cart_Address.postCode":
		if e.complexity.Commerce_Cart_Address.PostCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.PostCode(childComplexity), true

	case "Commerce_Cart_Address.regionCode":
		if e.complexity.Commerce_Cart_Address.RegionCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.RegionCode(childComplexity), true

	case "Commerce_Cart_Address.salutation":
		if e.complexity.Commerce_Cart_Address.Salutation == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Salutation(childComplexity), true

	case "Commerce_Cart_Address.state":
		if e.complexity.Commerce_Cart_Address.State == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.State(childComplexity), true

	case "Commerce_Cart_Address.street":
		if e.complexity.Commerce_Cart_Address.Street == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Street(childComplexity), true

	case "Commerce_Cart_Address.streetNr":
		if e.complexity.Commerce_Cart_Address.StreetNr == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.StreetNr(childComplexity), true

	case "Commerce_Cart_Address.telephone":
		if e.complexity.Commerce_Cart_Address.Telephone == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Telephone(childComplexity), true

	case "Commerce_Cart_Address.title":
		if e.complexity.Commerce_Cart_Address.Title == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Title(childComplexity), true

	case "Commerce_Cart_Address.vat":
		if e.complexity.Commerce_Cart_Address.Vat == nil {
			break
		}

		return e.complexity.Commerce_Cart_Address.Vat(childComplexity), true

	case "Commerce_Cart_AddressForm.addressLine1":
		if e.complexity.Commerce_Cart_AddressForm.AddressLine1 == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.AddressLine1(childComplexity), true

	case "Commerce_Cart_AddressForm.addressLine2":
		if e.complexity.Commerce_Cart_AddressForm.AddressLine2 == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.AddressLine2(childComplexity), true

	case "Commerce_Cart_AddressForm.city":
		if e.complexity.Commerce_Cart_AddressForm.City == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.City(childComplexity), true

	case "Commerce_Cart_AddressForm.company":
		if e.complexity.Commerce_Cart_AddressForm.Company == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Company(childComplexity), true

	case "Commerce_Cart_AddressForm.country":
		if e.complexity.Commerce_Cart_AddressForm.Country == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Country(childComplexity), true

	case "Commerce_Cart_AddressForm.countryCode":
		if e.complexity.Commerce_Cart_AddressForm.CountryCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.CountryCode(childComplexity), true

	case "Commerce_Cart_AddressForm.email":
		if e.complexity.Commerce_Cart_AddressForm.Email == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Email(childComplexity), true

	case "Commerce_Cart_AddressForm.firstname":
		if e.complexity.Commerce_Cart_AddressForm.Firstname == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Firstname(childComplexity), true

	case "Commerce_Cart_AddressForm.lastname":
		if e.complexity.Commerce_Cart_AddressForm.Lastname == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Lastname(childComplexity), true

	case "Commerce_Cart_AddressForm.middleName":
		if e.complexity.Commerce_Cart_AddressForm.MiddleName == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.MiddleName(childComplexity), true

	case "Commerce_Cart_AddressForm.phoneNumber":
		if e.complexity.Commerce_Cart_AddressForm.PhoneNumber == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.PhoneNumber(childComplexity), true

	case "Commerce_Cart_AddressForm.postCode":
		if e.complexity.Commerce_Cart_AddressForm.PostCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.PostCode(childComplexity), true

	case "Commerce_Cart_AddressForm.regionCode":
		if e.complexity.Commerce_Cart_AddressForm.RegionCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.RegionCode(childComplexity), true

	case "Commerce_Cart_AddressForm.salutation":
		if e.complexity.Commerce_Cart_AddressForm.Salutation == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Salutation(childComplexity), true

	case "Commerce_Cart_AddressForm.state":
		if e.complexity.Commerce_Cart_AddressForm.State == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.State(childComplexity), true

	case "Commerce_Cart_AddressForm.street":
		if e.complexity.Commerce_Cart_AddressForm.Street == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Street(childComplexity), true

	case "Commerce_Cart_AddressForm.streetNr":
		if e.complexity.Commerce_Cart_AddressForm.StreetNr == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.StreetNr(childComplexity), true

	case "Commerce_Cart_AddressForm.title":
		if e.complexity.Commerce_Cart_AddressForm.Title == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Title(childComplexity), true

	case "Commerce_Cart_AddressForm.vat":
		if e.complexity.Commerce_Cart_AddressForm.Vat == nil {
			break
		}

		return e.complexity.Commerce_Cart_AddressForm.Vat(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.applied":
		if e.complexity.Commerce_Cart_AppliedDiscount.Applied == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.Applied(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.campaignCode":
		if e.complexity.Commerce_Cart_AppliedDiscount.CampaignCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.CampaignCode(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.couponCode":
		if e.complexity.Commerce_Cart_AppliedDiscount.CouponCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.CouponCode(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.isItemRelated":
		if e.complexity.Commerce_Cart_AppliedDiscount.IsItemRelated == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.IsItemRelated(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.label":
		if e.complexity.Commerce_Cart_AppliedDiscount.Label == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.Label(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.sortOrder":
		if e.complexity.Commerce_Cart_AppliedDiscount.SortOrder == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.SortOrder(childComplexity), true

	case "Commerce_Cart_AppliedDiscount.type":
		if e.complexity.Commerce_Cart_AppliedDiscount.Type == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscount.Type(childComplexity), true

	case "Commerce_Cart_AppliedDiscounts.byCampaignCode":
		if e.complexity.Commerce_Cart_AppliedDiscounts.ByCampaignCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_AppliedDiscounts.ByCampaignCode(childComplexity, args["campaignCode"].(string)), true

	case "Commerce_Cart_AppliedDiscounts.byType":
		if e.complexity.Commerce_Cart_AppliedDiscounts.ByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_AppliedDiscounts_byType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_AppliedDiscounts.ByType(childComplexity, args["filterType"].(string)), true

	case "Commerce_Cart_AppliedDiscounts.items":
		if e.complexity.Commerce_Cart_AppliedDiscounts.Items == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedDiscounts.Items(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.applied":
		if e.complexity.Commerce_Cart_AppliedGiftCard.Applied == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedGiftCard.Applied(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.code":
		if e.complexity.Commerce_Cart_AppliedGiftCard.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedGiftCard.Code(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.hasRemaining":
		if e.complexity.Commerce_Cart_AppliedGiftCard.HasRemaining == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedGiftCard.HasRemaining(childComplexity), true

	case "Commerce_Cart_AppliedGiftCard.remaining":
		if e.complexity.Commerce_Cart_AppliedGiftCard.Remaining == nil {
			break
		}

		return e.complexity.Commerce_Cart_AppliedGiftCard.Remaining(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.formData":
		if e.complexity.Commerce_Cart_BillingAddressForm.FormData == nil {
			break
		}

		return e.complexity.Commerce_Cart_BillingAddressForm.FormData(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.processed":
		if e.complexity.Commerce_Cart_BillingAddressForm.Processed == nil {
			break
		}

		return e.complexity.Commerce_Cart_BillingAddressForm.Processed(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.validationInfo":
		if e.complexity.Commerce_Cart_BillingAddressForm.ValidationInfo == nil {
			break
		}

		return e.complexity.Commerce_Cart_BillingAddressForm.ValidationInfo(childComplexity), true

	case "Commerce_Cart_Cart.additionalData":
		if e.complexity.Commerce_Cart_Cart.AdditionalData == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.AdditionalData(childComplexity), true

	case "Commerce_Cart_Cart.allShippingTitles":
		if e.complexity.Commerce_Cart_Cart.AllShippingTitles == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.AllShippingTitles(childComplexity), true

	case "Commerce_Cart_Cart.appliedCouponCodes":
		if e.complexity.Commerce_Cart_Cart.AppliedCouponCodes == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.AppliedCouponCodes(childComplexity), true

	case "Commerce_Cart_Cart.appliedGiftCards":
		if e.complexity.Commerce_Cart_Cart.AppliedGiftCards == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.AppliedGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.authenticatedUserID":
		if e.complexity.Commerce_Cart_Cart.AuthenticatedUserID == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.AuthenticatedUserID(childComplexity), true

	case "Commerce_Cart_Cart.belongsToAuthenticatedUser":
		if e.complexity.Commerce_Cart_Cart.BelongsToAuthenticatedUser == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.BelongsToAuthenticatedUser(childComplexity), true

	case "Commerce_Cart_Cart.billingAddress":
		if e.complexity.Commerce_Cart_Cart.BillingAddress == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.BillingAddress(childComplexity), true

	case "Commerce_Cart_Cart.defaultCurrency":
		if e.complexity.Commerce_Cart_Cart.DefaultCurrency == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.DefaultCurrency(childComplexity), true

	case "Commerce_Cart_Cart.deliveries":
		if e.complexity.Commerce_Cart_Cart.Deliveries == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.Deliveries(childComplexity), true

	case "Commerce_Cart_Cart.entityID":
		if e.complexity.Commerce_Cart_Cart.EntityID == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.EntityID(childComplexity), true

	case "Commerce_Cart_Cart.getByExternalReference":
		if e.complexity.Commerce_Cart_Cart.GetByExternalReference == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getByExternalReference_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetByExternalReference(childComplexity, args["ref"].(string)), true

	case "Commerce_Cart_Cart.getByItemID":
		if e.complexity.Commerce_Cart_Cart.GetByItemID == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getByItemID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetByItemID(childComplexity, args["itemID"].(string)), true

	case "Commerce_Cart_Cart.getCartTeaser":
		if e.complexity.Commerce_Cart_Cart.GetCartTeaser == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GetCartTeaser(childComplexity), true

	case "Commerce_Cart_Cart.getDeliveryByCode":
		if e.complexity.Commerce_Cart_Cart.GetDeliveryByCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetDeliveryByCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_Cart.getDeliveryByItemID":
		if e.complexity.Commerce_Cart_Cart.GetDeliveryByItemID == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getDeliveryByItemID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetDeliveryByItemID(childComplexity, args["itemID"].(string)), true

	case "Commerce_Cart_Cart.getDeliveryCodes":
		if e.complexity.Commerce_Cart_Cart.GetDeliveryCodes == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GetDeliveryCodes(childComplexity), true

	case "Commerce_Cart_Cart.getMainShippingEMail":
		if e.complexity.Commerce_Cart_Cart.GetMainShippingEMail == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GetMainShippingEMail(childComplexity), true

	case "Commerce_Cart_Cart.getPaymentReference":
		if e.complexity.Commerce_Cart_Cart.GetPaymentReference == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GetPaymentReference(childComplexity), true

	case "Commerce_Cart_Cart.getTotalItemsByType":
		if e.complexity.Commerce_Cart_Cart.GetTotalItemsByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getTotalItemsByType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetTotalItemsByType(childComplexity, args["typeCode"].(string)), true

	case "Commerce_Cart_Cart.getTotalQty":
		if e.complexity.Commerce_Cart_Cart.GetTotalQty == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_getTotalQty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.GetTotalQty(childComplexity, args["marketPlaceCode"].(string), args["variantCode"].(string)), true

	case "Commerce_Cart_Cart.getVoucherSavings":
		if e.complexity.Commerce_Cart_Cart.GetVoucherSavings == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GetVoucherSavings(childComplexity), true

	case "Commerce_Cart_Cart.grandTotal":
		if e.complexity.Commerce_Cart_Cart.GrandTotal == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GrandTotal(childComplexity), true

	case "Commerce_Cart_Cart.grandTotalCharges":
		if e.complexity.Commerce_Cart_Cart.GrandTotalCharges == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.GrandTotalCharges(childComplexity), true

	case "Commerce_Cart_Cart.hasAppliedCouponCode":
		if e.complexity.Commerce_Cart_Cart.HasAppliedCouponCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.HasAppliedCouponCode(childComplexity), true

	case "Commerce_Cart_Cart.hasAppliedGiftCards":
		if e.complexity.Commerce_Cart_Cart.HasAppliedGiftCards == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.HasAppliedGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.hasDeliveryForCode":
		if e.complexity.Commerce_Cart_Cart.HasDeliveryForCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Cart_hasDeliveryForCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Cart.HasDeliveryForCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_Cart.hasRemainingGiftCards":
		if e.complexity.Commerce_Cart_Cart.HasRemainingGiftCards == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.HasRemainingGiftCards(childComplexity), true

	case "Commerce_Cart_Cart.hasShippingCosts":
		if e.complexity.Commerce_Cart_Cart.HasShippingCosts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.HasShippingCosts(childComplexity), true

	case "Commerce_Cart_Cart.id":
		if e.complexity.Commerce_Cart_Cart.ID == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ID(childComplexity), true

	case "Commerce_Cart_Cart.isEmpty":
		if e.complexity.Commerce_Cart_Cart.IsEmpty == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.IsEmpty(childComplexity), true

	case "Commerce_Cart_Cart.isPaymentSelected":
		if e.complexity.Commerce_Cart_Cart.IsPaymentSelected == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.IsPaymentSelected(childComplexity), true

	case "Commerce_Cart_Cart.itemCount":
		if e.complexity.Commerce_Cart_Cart.ItemCount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ItemCount(childComplexity), true

	case "Commerce_Cart_Cart.itemRelatedDiscountAmount":
		if e.complexity.Commerce_Cart_Cart.ItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.nonItemRelatedDiscountAmount":
		if e.complexity.Commerce_Cart_Cart.NonItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.NonItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.paymentSelection":
		if e.complexity.Commerce_Cart_Cart.PaymentSelection == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.PaymentSelection(childComplexity), true

	case "Commerce_Cart_Cart.productCount":
		if e.complexity.Commerce_Cart_Cart.ProductCount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ProductCount(childComplexity), true

	case "Commerce_Cart_Cart.purchaser":
		if e.complexity.Commerce_Cart_Cart.Purchaser == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.Purchaser(childComplexity), true

	case "Commerce_Cart_Cart.shippingGross":
		if e.complexity.Commerce_Cart_Cart.ShippingGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ShippingGross(childComplexity), true

	case "Commerce_Cart_Cart.shippingGrossWithDiscounts":
		if e.complexity.Commerce_Cart_Cart.ShippingGrossWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ShippingGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.shippingNet":
		if e.complexity.Commerce_Cart_Cart.ShippingNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ShippingNet(childComplexity), true

	case "Commerce_Cart_Cart.shippingNetWithDiscounts":
		if e.complexity.Commerce_Cart_Cart.ShippingNetWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.ShippingNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.subTotalGross":
		if e.complexity.Commerce_Cart_Cart.SubTotalGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.SubTotalGross(childComplexity), true

	case "Commerce_Cart_Cart.subTotalGrossWithDiscounts":
		if e.complexity.Commerce_Cart_Cart.SubTotalGrossWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.SubTotalGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.subTotalNet":
		if e.complexity.Commerce_Cart_Cart.SubTotalNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.SubTotalNet(childComplexity), true

	case "Commerce_Cart_Cart.subTotalNetWithDiscounts":
		if e.complexity.Commerce_Cart_Cart.SubTotalNetWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.SubTotalNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Cart.sumTotalTaxAmount":
		if e.complexity.Commerce_Cart_Cart.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.SumTotalTaxAmount(childComplexity), true

	case "Commerce_Cart_Cart.totalDiscountAmount":
		if e.complexity.Commerce_Cart_Cart.TotalDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.TotalDiscountAmount(childComplexity), true

	case "Commerce_Cart_Cart.totalitems":
		if e.complexity.Commerce_Cart_Cart.Totalitems == nil {
			break
		}

		return e.complexity.Commerce_Cart_Cart.Totalitems(childComplexity), true

	case "Commerce_Cart_CouponCode.code":
		if e.complexity.Commerce_Cart_CouponCode.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_CouponCode.Code(childComplexity), true

	case "Commerce_Cart_CustomAttributes.get":
		if e.complexity.Commerce_Cart_CustomAttributes.Get == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_CustomAttributes_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_CustomAttributes.Get(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_DecoratedCart.cart":
		if e.complexity.Commerce_Cart_DecoratedCart.Cart == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedCart.Cart(childComplexity), true

	case "Commerce_Cart_DecoratedCart.cartSummary":
		if e.complexity.Commerce_Cart_DecoratedCart.CartSummary == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedCart.CartSummary(childComplexity), true

	case "Commerce_Cart_DecoratedCart.decoratedDeliveries":
		if e.complexity.Commerce_Cart_DecoratedCart.DecoratedDeliveries == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedCart.DecoratedDeliveries(childComplexity), true

	case "Commerce_Cart_DecoratedCart.getAllPaymentRequiredItems":
		if e.complexity.Commerce_Cart_DecoratedCart.GetAllPaymentRequiredItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedCart.GetAllPaymentRequiredItems(childComplexity), true

	case "Commerce_Cart_DecoratedCart.getDecoratedDeliveryByCode":
		if e.complexity.Commerce_Cart_DecoratedCart.GetDecoratedDeliveryByCode == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_DecoratedCart.GetDecoratedDeliveryByCode(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart_DecoratedDelivery.decoratedItems":
		if e.complexity.Commerce_Cart_DecoratedDelivery.DecoratedItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedDelivery.DecoratedItems(childComplexity), true

	case "Commerce_Cart_DecoratedDelivery.delivery":
		if e.complexity.Commerce_Cart_DecoratedDelivery.Delivery == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedDelivery.Delivery(childComplexity), true

	case "Commerce_Cart_DecoratedItem.item":
		if e.complexity.Commerce_Cart_DecoratedItem.Item == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedItem.Item(childComplexity), true

	case "Commerce_Cart_DecoratedItem.product":
		if e.complexity.Commerce_Cart_DecoratedItem.Product == nil {
			break
		}

		return e.complexity.Commerce_Cart_DecoratedItem.Product(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.cartSplit":
		if e.complexity.Commerce_Cart_DefaultPaymentSelection.CartSplit == nil {
			break
		}

		return e.complexity.Commerce_Cart_DefaultPaymentSelection.CartSplit(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.gateway":
		if e.complexity.Commerce_Cart_DefaultPaymentSelection.Gateway == nil {
			break
		}

		return e.complexity.Commerce_Cart_DefaultPaymentSelection.Gateway(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.totalValue":
		if e.complexity.Commerce_Cart_DefaultPaymentSelection.TotalValue == nil {
			break
		}

		return e.complexity.Commerce_Cart_DefaultPaymentSelection.TotalValue(childComplexity), true

	case "Commerce_Cart_Delivery.cartitems":
		if e.complexity.Commerce_Cart_Delivery.Cartitems == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.Cartitems(childComplexity), true

	case "Commerce_Cart_Delivery.deliveryInfo":
		if e.complexity.Commerce_Cart_Delivery.DeliveryInfo == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.DeliveryInfo(childComplexity), true

	case "Commerce_Cart_Delivery.grandTotal":
		if e.complexity.Commerce_Cart_Delivery.GrandTotal == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.GrandTotal(childComplexity), true

	case "Commerce_Cart_Delivery.hasItems":
		if e.complexity.Commerce_Cart_Delivery.HasItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.HasItems(childComplexity), true

	case "Commerce_Cart_Delivery.itemRelatedDiscountAmount":
		if e.complexity.Commerce_Cart_Delivery.ItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.ItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Delivery.nonItemRelatedDiscountAmount":
		if e.complexity.Commerce_Cart_Delivery.NonItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.NonItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_Cart_Delivery.shippingItem":
		if e.complexity.Commerce_Cart_Delivery.ShippingItem == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.ShippingItem(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalGross":
		if e.complexity.Commerce_Cart_Delivery.SubTotalGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.SubTotalGross(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalGrossWithDiscounts":
		if e.complexity.Commerce_Cart_Delivery.SubTotalGrossWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.SubTotalGrossWithDiscounts(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalNet":
		if e.complexity.Commerce_Cart_Delivery.SubTotalNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.SubTotalNet(childComplexity), true

	case "Commerce_Cart_Delivery.subTotalNetWithDiscounts":
		if e.complexity.Commerce_Cart_Delivery.SubTotalNetWithDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.SubTotalNetWithDiscounts(childComplexity), true

	case "Commerce_Cart_Delivery.sumTotalTaxAmount":
		if e.complexity.Commerce_Cart_Delivery.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.SumTotalTaxAmount(childComplexity), true

	case "Commerce_Cart_Delivery.totalDiscountAmount":
		if e.complexity.Commerce_Cart_Delivery.TotalDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Delivery.TotalDiscountAmount(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.carrier":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.Carrier == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.Carrier(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.deliveryCode":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.DeliveryCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.DeliveryCode(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.desiredTime":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.DesiredTime == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.DesiredTime(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.formData":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.FormData == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.FormData(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.method":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.Method == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.Method(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.processed":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.Processed == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.Processed(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.useBillingAddress":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.UseBillingAddress == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.UseBillingAddress(childComplexity), true

	case "Commerce_Cart_DeliveryAddressForm.validationInfo":
		if e.complexity.Commerce_Cart_DeliveryAddressForm.ValidationInfo == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryAddressForm.ValidationInfo(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.additionalData":
		if e.complexity.Commerce_Cart_DeliveryInfo.AdditionalData == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.AdditionalData(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.carrier":
		if e.complexity.Commerce_Cart_DeliveryInfo.Carrier == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.Carrier(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.code":
		if e.complexity.Commerce_Cart_DeliveryInfo.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.Code(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.deliveryLocation":
		if e.complexity.Commerce_Cart_DeliveryInfo.DeliveryLocation == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.DeliveryLocation(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.desiredTime":
		if e.complexity.Commerce_Cart_DeliveryInfo.DesiredTime == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.DesiredTime(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.method":
		if e.complexity.Commerce_Cart_DeliveryInfo.Method == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.Method(childComplexity), true

	case "Commerce_Cart_DeliveryInfo.workflow":
		if e.complexity.Commerce_Cart_DeliveryInfo.Workflow == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryInfo.Workflow(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.address":
		if e.complexity.Commerce_Cart_DeliveryLocation.Address == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryLocation.Address(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.code":
		if e.complexity.Commerce_Cart_DeliveryLocation.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryLocation.Code(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.type":
		if e.complexity.Commerce_Cart_DeliveryLocation.Type == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryLocation.Type(childComplexity), true

	case "Commerce_Cart_DeliveryLocation.useBillingAddress":
		if e.complexity.Commerce_Cart_DeliveryLocation.UseBillingAddress == nil {
			break
		}

		return e.complexity.Commerce_Cart_DeliveryLocation.UseBillingAddress(childComplexity), true

	case "Commerce_Cart_ExistingCustomerData.id":
		if e.complexity.Commerce_Cart_ExistingCustomerData.ID == nil {
			break
		}

		return e.complexity.Commerce_Cart_ExistingCustomerData.ID(childComplexity), true

	case "Commerce_Cart_Form_Error.defaultLabel":
		if e.complexity.Commerce_Cart_Form_Error.DefaultLabel == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_Error.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_Error.messageKey":
		if e.complexity.Commerce_Cart_Form_Error.MessageKey == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_Error.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_FieldError.defaultLabel":
		if e.complexity.Commerce_Cart_Form_FieldError.DefaultLabel == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_FieldError.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_FieldError.fieldName":
		if e.complexity.Commerce_Cart_Form_FieldError.FieldName == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_FieldError.FieldName(childComplexity), true

	case "Commerce_Cart_Form_FieldError.messageKey":
		if e.complexity.Commerce_Cart_Form_FieldError.MessageKey == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_FieldError.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.fieldErrors":
		if e.complexity.Commerce_Cart_Form_ValidationInfo.FieldErrors == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_ValidationInfo.FieldErrors(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.generalErrors":
		if e.complexity.Commerce_Cart_Form_ValidationInfo.GeneralErrors == nil {
			break
		}

		return e.complexity.Commerce_Cart_Form_ValidationInfo.GeneralErrors(childComplexity), true

	case "Commerce_Cart_Item.additionalDataKeys":
		if e.complexity.Commerce_Cart_Item.AdditionalDataKeys == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.AdditionalDataKeys(childComplexity), true

	case "Commerce_Cart_Item.additionalDataValues":
		if e.complexity.Commerce_Cart_Item.AdditionalDataValues == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.AdditionalDataValues(childComplexity), true

	case "Commerce_Cart_Item.appliedDiscounts":
		if e.complexity.Commerce_Cart_Item.AppliedDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.AppliedDiscounts(childComplexity), true

	case "Commerce_Cart_Item.externalReference":
		if e.complexity.Commerce_Cart_Item.ExternalReference == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.ExternalReference(childComplexity), true

	case "Commerce_Cart_Item.getAdditionalData":
		if e.complexity.Commerce_Cart_Item.GetAdditionalData == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Item_getAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Item.GetAdditionalData(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_Item.hasAdditionalDataKey":
		if e.complexity.Commerce_Cart_Item.HasAdditionalDataKey == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Item_hasAdditionalDataKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Item.HasAdditionalDataKey(childComplexity, args["key"].(string)), true

	case "Commerce_Cart_Item.id":
		if e.complexity.Commerce_Cart_Item.ID == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.ID(childComplexity), true

	case "Commerce_Cart_Item.marketplaceCode":
		if e.complexity.Commerce_Cart_Item.MarketplaceCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.MarketplaceCode(childComplexity), true

	case "Commerce_Cart_Item.productName":
		if e.complexity.Commerce_Cart_Item.ProductName == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.ProductName(childComplexity), true

	case "Commerce_Cart_Item.qty":
		if e.complexity.Commerce_Cart_Item.Qty == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.Qty(childComplexity), true

	case "Commerce_Cart_Item.rowPriceGross":
		if e.complexity.Commerce_Cart_Item.RowPriceGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.RowPriceGross(childComplexity), true

	case "Commerce_Cart_Item.rowPriceNet":
		if e.complexity.Commerce_Cart_Item.RowPriceNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.RowPriceNet(childComplexity), true

	case "Commerce_Cart_Item.singlePriceGross":
		if e.complexity.Commerce_Cart_Item.SinglePriceGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.SinglePriceGross(childComplexity), true

	case "Commerce_Cart_Item.singlePriceNet":
		if e.complexity.Commerce_Cart_Item.SinglePriceNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.SinglePriceNet(childComplexity), true

	case "Commerce_Cart_Item.sourceID":
		if e.complexity.Commerce_Cart_Item.SourceID == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.SourceID(childComplexity), true

	case "Commerce_Cart_Item.variantMarketPlaceCode":
		if e.complexity.Commerce_Cart_Item.VariantMarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_Item.VariantMarketPlaceCode(childComplexity), true

	case "Commerce_Cart_ItemValidationError.errorMessageKey":
		if e.complexity.Commerce_Cart_ItemValidationError.ErrorMessageKey == nil {
			break
		}

		return e.complexity.Commerce_Cart_ItemValidationError.ErrorMessageKey(childComplexity), true

	case "Commerce_Cart_ItemValidationError.itemID":
		if e.complexity.Commerce_Cart_ItemValidationError.ItemID == nil {
			break
		}

		return e.complexity.Commerce_Cart_ItemValidationError.ItemID(childComplexity), true

	case "Commerce_Cart_KeyValue.key":
		if e.complexity.Commerce_Cart_KeyValue.Key == nil {
			break
		}

		return e.complexity.Commerce_Cart_KeyValue.Key(childComplexity), true

	case "Commerce_Cart_KeyValue.value":
		if e.complexity.Commerce_Cart_KeyValue.Value == nil {
			break
		}

		return e.complexity.Commerce_Cart_KeyValue.Value(childComplexity), true

	case "Commerce_Cart_PaymentSelection_Split.charge":
		if e.complexity.Commerce_Cart_PaymentSelection_Split.Charge == nil {
			break
		}

		return e.complexity.Commerce_Cart_PaymentSelection_Split.Charge(childComplexity), true

	case "Commerce_Cart_PaymentSelection_Split.qualifier":
		if e.complexity.Commerce_Cart_PaymentSelection_Split.Qualifier == nil {
			break
		}

		return e.complexity.Commerce_Cart_PaymentSelection_Split.Qualifier(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.reference":
		if e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.ChargeReference == nil {
			break
		}

		return e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.ChargeReference(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.type":
		if e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.ChargeType == nil {
			break
		}

		return e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.ChargeType(childComplexity), true

	case "Commerce_Cart_PaymentSelection_SplitQualifier.method":
		if e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.Method == nil {
			break
		}

		return e.complexity.Commerce_Cart_PaymentSelection_SplitQualifier.Method(childComplexity), true

	case "Commerce_Cart_Person.address":
		if e.complexity.Commerce_Cart_Person.Address == nil {
			break
		}

		return e.complexity.Commerce_Cart_Person.Address(childComplexity), true

	case "Commerce_Cart_Person.existingCustomerData":
		if e.complexity.Commerce_Cart_Person.ExistingCustomerData == nil {
			break
		}

		return e.complexity.Commerce_Cart_Person.ExistingCustomerData(childComplexity), true

	case "Commerce_Cart_Person.personalDetails":
		if e.complexity.Commerce_Cart_Person.PersonalDetails == nil {
			break
		}

		return e.complexity.Commerce_Cart_Person.PersonalDetails(childComplexity), true

	case "Commerce_Cart_PersonalDetails.dateOfBirth":
		if e.complexity.Commerce_Cart_PersonalDetails.DateOfBirth == nil {
			break
		}

		return e.complexity.Commerce_Cart_PersonalDetails.DateOfBirth(childComplexity), true

	case "Commerce_Cart_PersonalDetails.nationality":
		if e.complexity.Commerce_Cart_PersonalDetails.Nationality == nil {
			break
		}

		return e.complexity.Commerce_Cart_PersonalDetails.Nationality(childComplexity), true

	case "Commerce_Cart_PersonalDetails.passportCountry":
		if e.complexity.Commerce_Cart_PersonalDetails.PassportCountry == nil {
			break
		}

		return e.complexity.Commerce_Cart_PersonalDetails.PassportCountry(childComplexity), true

	case "Commerce_Cart_PersonalDetails.passportNumber":
		if e.complexity.Commerce_Cart_PersonalDetails.PassportNumber == nil {
			break
		}

		return e.complexity.Commerce_Cart_PersonalDetails.PassportNumber(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.deliveryCode":
		if e.complexity.Commerce_Cart_PlacedOrderInfo.DeliveryCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_PlacedOrderInfo.DeliveryCode(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.orderNumber":
		if e.complexity.Commerce_Cart_PlacedOrderInfo.OrderNumber == nil {
			break
		}

		return e.complexity.Commerce_Cart_PlacedOrderInfo.OrderNumber(childComplexity), true

	case "Commerce_Cart_PricedCartItem.amount":
		if e.complexity.Commerce_Cart_PricedCartItem.Amount == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedCartItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedCartItem.itemID":
		if e.complexity.Commerce_Cart_PricedCartItem.ItemID == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedCartItem.ItemID(childComplexity), true

	case "Commerce_Cart_PricedItems.cartItems":
		if e.complexity.Commerce_Cart_PricedItems.CartItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedItems.CartItems(childComplexity), true

	case "Commerce_Cart_PricedItems.shippingItems":
		if e.complexity.Commerce_Cart_PricedItems.ShippingItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedItems.ShippingItems(childComplexity), true

	case "Commerce_Cart_PricedItems.totalItems":
		if e.complexity.Commerce_Cart_PricedItems.TotalItems == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedItems.TotalItems(childComplexity), true

	case "Commerce_Cart_PricedShippingItem.amount":
		if e.complexity.Commerce_Cart_PricedShippingItem.Amount == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedShippingItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedShippingItem.deliveryInfoCode":
		if e.complexity.Commerce_Cart_PricedShippingItem.DeliveryInfoCode == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedShippingItem.DeliveryInfoCode(childComplexity), true

	case "Commerce_Cart_PricedTotalItem.amount":
		if e.complexity.Commerce_Cart_PricedTotalItem.Amount == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedTotalItem.Amount(childComplexity), true

	case "Commerce_Cart_PricedTotalItem.code":
		if e.complexity.Commerce_Cart_PricedTotalItem.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_PricedTotalItem.Code(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.isRestricted":
		if e.complexity.Commerce_Cart_QtyRestrictionResult.IsRestricted == nil {
			break
		}

		return e.complexity.Commerce_Cart_QtyRestrictionResult.IsRestricted(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.maxAllowed":
		if e.complexity.Commerce_Cart_QtyRestrictionResult.MaxAllowed == nil {
			break
		}

		return e.complexity.Commerce_Cart_QtyRestrictionResult.MaxAllowed(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.remainingDifference":
		if e.complexity.Commerce_Cart_QtyRestrictionResult.RemainingDifference == nil {
			break
		}

		return e.complexity.Commerce_Cart_QtyRestrictionResult.RemainingDifference(childComplexity), true

	case "Commerce_Cart_QtyRestrictionResult.restrictorName":
		if e.complexity.Commerce_Cart_QtyRestrictionResult.RestrictorName == nil {
			break
		}

		return e.complexity.Commerce_Cart_QtyRestrictionResult.RestrictorName(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.processed":
		if e.complexity.Commerce_Cart_SelectedPaymentResult.Processed == nil {
			break
		}

		return e.complexity.Commerce_Cart_SelectedPaymentResult.Processed(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.validationInfo":
		if e.complexity.Commerce_Cart_SelectedPaymentResult.ValidationInfo == nil {
			break
		}

		return e.complexity.Commerce_Cart_SelectedPaymentResult.ValidationInfo(childComplexity), true

	case "Commerce_Cart_ShippingItem.appliedDiscounts":
		if e.complexity.Commerce_Cart_ShippingItem.AppliedDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.AppliedDiscounts(childComplexity), true

	case "Commerce_Cart_ShippingItem.priceGross":
		if e.complexity.Commerce_Cart_ShippingItem.PriceGross == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.PriceGross(childComplexity), true

	case "Commerce_Cart_ShippingItem.priceNet":
		if e.complexity.Commerce_Cart_ShippingItem.PriceNet == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.PriceNet(childComplexity), true

	case "Commerce_Cart_ShippingItem.tax":
		if e.complexity.Commerce_Cart_ShippingItem.Tax == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.Tax(childComplexity), true

	case "Commerce_Cart_ShippingItem.taxAmount":
		if e.complexity.Commerce_Cart_ShippingItem.TaxAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.TaxAmount(childComplexity), true

	case "Commerce_Cart_ShippingItem.title":
		if e.complexity.Commerce_Cart_ShippingItem.Title == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.Title(childComplexity), true

	case "Commerce_Cart_ShippingItem.totalWithDiscountInclTax":
		if e.complexity.Commerce_Cart_ShippingItem.TotalWithDiscountInclTax == nil {
			break
		}

		return e.complexity.Commerce_Cart_ShippingItem.TotalWithDiscountInclTax(childComplexity), true

	case "Commerce_Cart_Summary.discounts":
		if e.complexity.Commerce_Cart_Summary.Discounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.Discounts(childComplexity), true

	case "Commerce_Cart_Summary.grandTotalWithGiftCards":
		if e.complexity.Commerce_Cart_Summary.GrandTotalWithGiftCards == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.GrandTotalWithGiftCards(childComplexity), true

	case "Commerce_Cart_Summary.hasAppliedDiscounts":
		if e.complexity.Commerce_Cart_Summary.HasAppliedDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.HasAppliedDiscounts(childComplexity), true

	case "Commerce_Cart_Summary.sumPaymentSelectionCartSplitValueAmountByMethods":
		if e.complexity.Commerce_Cart_Summary.SumPaymentSelectionCartSplitValueAmountByMethods == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Summary.SumPaymentSelectionCartSplitValueAmountByMethods(childComplexity, args["methods"].([]string)), true

	case "Commerce_Cart_Summary.sumTaxes":
		if e.complexity.Commerce_Cart_Summary.SumTaxes == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.SumTaxes(childComplexity), true

	case "Commerce_Cart_Summary.sumTotalDiscountWithGiftCardsAmount":
		if e.complexity.Commerce_Cart_Summary.SumTotalDiscountWithGiftCardsAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.SumTotalDiscountWithGiftCardsAmount(childComplexity), true

	case "Commerce_Cart_Summary.totalDiscountAmount":
		if e.complexity.Commerce_Cart_Summary.TotalDiscountAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.TotalDiscountAmount(childComplexity), true

	case "Commerce_Cart_Summary.totalGiftCardAmount":
		if e.complexity.Commerce_Cart_Summary.TotalGiftCardAmount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Summary.TotalGiftCardAmount(childComplexity), true

	case "Commerce_Cart_Tax.amount":
		if e.complexity.Commerce_Cart_Tax.Amount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Tax.Amount(childComplexity), true

	case "Commerce_Cart_Tax.rate":
		if e.complexity.Commerce_Cart_Tax.Rate == nil {
			break
		}

		return e.complexity.Commerce_Cart_Tax.Rate(childComplexity), true

	case "Commerce_Cart_Tax.type":
		if e.complexity.Commerce_Cart_Tax.Type == nil {
			break
		}

		return e.complexity.Commerce_Cart_Tax.Type(childComplexity), true

	case "Commerce_Cart_Taxes.getByType":
		if e.complexity.Commerce_Cart_Taxes.GetByType == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_Taxes_getByType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Cart_Taxes.GetByType(childComplexity, args["taxType"].(string)), true

	case "Commerce_Cart_Taxes.items":
		if e.complexity.Commerce_Cart_Taxes.Items == nil {
			break
		}

		return e.complexity.Commerce_Cart_Taxes.Items(childComplexity), true

	case "Commerce_Cart_Teaser.DeliveryCodes":
		if e.complexity.Commerce_Cart_Teaser.DeliveryCodes == nil {
			break
		}

		return e.complexity.Commerce_Cart_Teaser.DeliveryCodes(childComplexity), true

	case "Commerce_Cart_Teaser.ItemCount":
		if e.complexity.Commerce_Cart_Teaser.ItemCount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Teaser.ItemCount(childComplexity), true

	case "Commerce_Cart_Teaser.productCount":
		if e.complexity.Commerce_Cart_Teaser.ProductCount == nil {
			break
		}

		return e.complexity.Commerce_Cart_Teaser.ProductCount(childComplexity), true

	case "Commerce_Cart_Totalitem.code":
		if e.complexity.Commerce_Cart_Totalitem.Code == nil {
			break
		}

		return e.complexity.Commerce_Cart_Totalitem.Code(childComplexity), true

	case "Commerce_Cart_Totalitem.price":
		if e.complexity.Commerce_Cart_Totalitem.Price == nil {
			break
		}

		return e.complexity.Commerce_Cart_Totalitem.Price(childComplexity), true

	case "Commerce_Cart_Totalitem.title":
		if e.complexity.Commerce_Cart_Totalitem.Title == nil {
			break
		}

		return e.complexity.Commerce_Cart_Totalitem.Title(childComplexity), true

	case "Commerce_Cart_Totalitem.type":
		if e.complexity.Commerce_Cart_Totalitem.Type == nil {
			break
		}

		return e.complexity.Commerce_Cart_Totalitem.Type(childComplexity), true

	case "Commerce_Cart_UpdateDeliveryShippingOptions_Result.processed":
		if e.complexity.Commerce_Cart_UpdateDeliveryShippingOptions_Result.Processed == nil {
			break
		}

		return e.complexity.Commerce_Cart_UpdateDeliveryShippingOptions_Result.Processed(childComplexity), true

	case "Commerce_Cart_ValidationResult.commonErrorMessageKey":
		if e.complexity.Commerce_Cart_ValidationResult.CommonErrorMessageKey == nil {
			break
		}

		return e.complexity.Commerce_Cart_ValidationResult.CommonErrorMessageKey(childComplexity), true

	case "Commerce_Cart_ValidationResult.hasCommonError":
		if e.complexity.Commerce_Cart_ValidationResult.HasCommonError == nil {
			break
		}

		return e.complexity.Commerce_Cart_ValidationResult.HasCommonError(childComplexity), true

	case "Commerce_Cart_ValidationResult.itemResults":
		if e.complexity.Commerce_Cart_ValidationResult.ItemResults == nil {
			break
		}

		return e.complexity.Commerce_Cart_ValidationResult.ItemResults(childComplexity), true

	case "Commerce_CategoryData.active":
		if e.complexity.Commerce_CategoryData.Active == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Active(childComplexity), true

	case "Commerce_CategoryData.attributes":
		if e.complexity.Commerce_CategoryData.Attributes == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Attributes(childComplexity), true

	case "Commerce_CategoryData.code":
		if e.complexity.Commerce_CategoryData.Code == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Code(childComplexity), true

	case "Commerce_CategoryData.name":
		if e.complexity.Commerce_CategoryData.Name == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Name(childComplexity), true

	case "Commerce_CategoryData.path":
		if e.complexity.Commerce_CategoryData.Path == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Path(childComplexity), true

	case "Commerce_CategoryData.promoted":
		if e.complexity.Commerce_CategoryData.Promoted == nil {
			break
		}

		return e.complexity.Commerce_CategoryData.Promoted(childComplexity), true

	case "Commerce_CategoryTree.active":
		if e.complexity.Commerce_CategoryTree.Active == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.Active(childComplexity), true

	case "Commerce_CategoryTree.code":
		if e.complexity.Commerce_CategoryTree.Code == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.Code(childComplexity), true

	case "Commerce_CategoryTree.documentCount":
		if e.complexity.Commerce_CategoryTree.DocumentCount == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.DocumentCount(childComplexity), true

	case "Commerce_CategoryTree.hasChilds":
		if e.complexity.Commerce_CategoryTree.HasChilds == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.HasChilds(childComplexity), true

	case "Commerce_CategoryTree.name":
		if e.complexity.Commerce_CategoryTree.Name == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.Name(childComplexity), true

	case "Commerce_CategoryTree.path":
		if e.complexity.Commerce_CategoryTree.Path == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.Path(childComplexity), true

	case "Commerce_CategoryTree.subTrees":
		if e.complexity.Commerce_CategoryTree.SubTrees == nil {
			break
		}

		return e.complexity.Commerce_CategoryTree.SubTrees(childComplexity), true

	case "Commerce_Category_Attribute.code":
		if e.complexity.Commerce_Category_Attribute.Code == nil {
			break
		}

		return e.complexity.Commerce_Category_Attribute.Code(childComplexity), true

	case "Commerce_Category_Attribute.label":
		if e.complexity.Commerce_Category_Attribute.Label == nil {
			break
		}

		return e.complexity.Commerce_Category_Attribute.Label(childComplexity), true

	case "Commerce_Category_Attribute.values":
		if e.complexity.Commerce_Category_Attribute.Values == nil {
			break
		}

		return e.complexity.Commerce_Category_Attribute.Values(childComplexity), true

	case "Commerce_Category_AttributeValue.label":
		if e.complexity.Commerce_Category_AttributeValue.Label == nil {
			break
		}

		return e.complexity.Commerce_Category_AttributeValue.Label(childComplexity), true

	case "Commerce_Category_AttributeValue.value":
		if e.complexity.Commerce_Category_AttributeValue.Value == nil {
			break
		}

		return e.complexity.Commerce_Category_AttributeValue.Value(childComplexity), true

	case "Commerce_Category_Attributes.all":
		if e.complexity.Commerce_Category_Attributes.All == nil {
			break
		}

		return e.complexity.Commerce_Category_Attributes.All(childComplexity), true

	case "Commerce_Category_Attributes.get":
		if e.complexity.Commerce_Category_Attributes.Get == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Category_Attributes.Get(childComplexity, args["code"].(string)), true

	case "Commerce_Category_Attributes.has":
		if e.complexity.Commerce_Category_Attributes.Has == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_has_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Category_Attributes.Has(childComplexity, args["code"].(string)), true

	case "Commerce_Category_SearchResult.category":
		if e.complexity.Commerce_Category_SearchResult.Category == nil {
			break
		}

		return e.complexity.Commerce_Category_SearchResult.Category(childComplexity), true

	case "Commerce_Category_SearchResult.productSearchResult":
		if e.complexity.Commerce_Category_SearchResult.ProductSearchResult == nil {
			break
		}

		return e.complexity.Commerce_Category_SearchResult.ProductSearchResult(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.cart":
		if e.complexity.Commerce_Checkout_PlaceOrderContext.Cart == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderContext.Cart(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.orderInfos":
		if e.complexity.Commerce_Checkout_PlaceOrderContext.OrderInfos == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderContext.OrderInfos(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.state":
		if e.complexity.Commerce_Checkout_PlaceOrderContext.State == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderContext.State(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.uuid":
		if e.complexity.Commerce_Checkout_PlaceOrderContext.UUID == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderContext.UUID(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.amount":
		if e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Amount == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Amount(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.gateway":
		if e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Gateway == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Gateway(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.method":
		if e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Method == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Method(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.paymentProvider":
		if e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.PaymentProvider == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.PaymentProvider(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.title":
		if e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Title == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderPaymentInfo.Title(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_Form_Parameter.key":
		if e.complexity.Commerce_Checkout_PlaceOrderState_Form_Parameter.Key == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_Form_Parameter.Key(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_Form_Parameter.value":
		if e.complexity.Commerce_Checkout_PlaceOrderState_Form_Parameter.Value == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_Form_Parameter.Value(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.completeURL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.CompleteURL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.CompleteURL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.details":
		if e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.Details == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.Details(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.merchantValidationURL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.MerchantValidationURL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.MerchantValidationURL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.methodData":
		if e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.MethodData == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.MethodData(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.options":
		if e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.Options == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_PaymentRequestAPI.Options(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Failed.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Failed.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Failed.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Failed.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Failed.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Failed.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.validationResult":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.ValidationResult == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError.ValidationResult(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_Error.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_Error.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_Error.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError.reason":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError.Reason == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.Parameters":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.Parameters == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.Parameters(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_PostRedirect.URL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.URL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_PostRedirect.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Redirect.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Redirect.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Redirect.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Redirect.URL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Redirect.URL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Redirect.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowHTML.HTML":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowHTML.HTML == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowHTML.HTML(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowHTML.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowHTML.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowHTML.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowIframe.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowIframe.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowIframe.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowIframe.URL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowIframe.URL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowIframe.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.paymentMethod":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.PaymentMethod == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.PaymentMethod(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.paymentRequestAPI":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.PaymentRequestAPI == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment.PaymentRequestAPI(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Success.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Success.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Success.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.data":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.Data == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.Data(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.URL":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.URL == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK.URL(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Wait.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_Wait.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_Wait.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_WaitForCustomer.name":
		if e.complexity.Commerce_Checkout_PlaceOrderState_State_WaitForCustomer.Name == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlaceOrderState_State_WaitForCustomer.Name(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.email":
		if e.complexity.Commerce_Checkout_PlacedOrderInfos.Email == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlacedOrderInfos.Email(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.paymentInfos":
		if e.complexity.Commerce_Checkout_PlacedOrderInfos.PaymentInfos == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlacedOrderInfos.PaymentInfos(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.placedOrderInfos":
		if e.complexity.Commerce_Checkout_PlacedOrderInfos.PlacedOrderInfos == nil {
			break
		}

		return e.complexity.Commerce_Checkout_PlacedOrderInfos.PlacedOrderInfos(childComplexity), true

	case "Commerce_Checkout_StartPlaceOrder_Result.uuid":
		if e.complexity.Commerce_Checkout_StartPlaceOrder_Result.UUID == nil {
			break
		}

		return e.complexity.Commerce_Checkout_StartPlaceOrder_Result.UUID(childComplexity), true

	case "Commerce_Customer_Address.additionalAddressLines":
		if e.complexity.Commerce_Customer_Address.AdditionalAddressLines == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.AdditionalAddressLines(childComplexity), true

	case "Commerce_Customer_Address.city":
		if e.complexity.Commerce_Customer_Address.City == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.City(childComplexity), true

	case "Commerce_Customer_Address.company":
		if e.complexity.Commerce_Customer_Address.Company == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Company(childComplexity), true

	case "Commerce_Customer_Address.countryCode":
		if e.complexity.Commerce_Customer_Address.CountryCode == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.CountryCode(childComplexity), true

	case "Commerce_Customer_Address.defaultBilling":
		if e.complexity.Commerce_Customer_Address.DefaultBilling == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.DefaultBilling(childComplexity), true

	case "Commerce_Customer_Address.defaultShipping":
		if e.complexity.Commerce_Customer_Address.DefaultShipping == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.DefaultShipping(childComplexity), true

	case "Commerce_Customer_Address.email":
		if e.complexity.Commerce_Customer_Address.Email == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Email(childComplexity), true

	case "Commerce_Customer_Address.firstName":
		if e.complexity.Commerce_Customer_Address.Firstname == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Firstname(childComplexity), true

	case "Commerce_Customer_Address.id":
		if e.complexity.Commerce_Customer_Address.ID == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.ID(childComplexity), true

	case "Commerce_Customer_Address.lastName":
		if e.complexity.Commerce_Customer_Address.Lastname == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Lastname(childComplexity), true

	case "Commerce_Customer_Address.postCode":
		if e.complexity.Commerce_Customer_Address.PostCode == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.PostCode(childComplexity), true

	case "Commerce_Customer_Address.prefix":
		if e.complexity.Commerce_Customer_Address.Prefix == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Prefix(childComplexity), true

	case "Commerce_Customer_Address.regionCode":
		if e.complexity.Commerce_Customer_Address.RegionCode == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.RegionCode(childComplexity), true

	case "Commerce_Customer_Address.state":
		if e.complexity.Commerce_Customer_Address.State == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.State(childComplexity), true

	case "Commerce_Customer_Address.street":
		if e.complexity.Commerce_Customer_Address.Street == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Street(childComplexity), true

	case "Commerce_Customer_Address.streetNumber":
		if e.complexity.Commerce_Customer_Address.StreetNr == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.StreetNr(childComplexity), true

	case "Commerce_Customer_Address.telephone":
		if e.complexity.Commerce_Customer_Address.Telephone == nil {
			break
		}

		return e.complexity.Commerce_Customer_Address.Telephone(childComplexity), true

	case "Commerce_Customer_PersonData.birthday":
		if e.complexity.Commerce_Customer_PersonData.Birthday == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.Birthday(childComplexity), true

	case "Commerce_Customer_PersonData.firstName":
		if e.complexity.Commerce_Customer_PersonData.FirstName == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.FirstName(childComplexity), true

	case "Commerce_Customer_PersonData.gender":
		if e.complexity.Commerce_Customer_PersonData.Gender == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.Gender(childComplexity), true

	case "Commerce_Customer_PersonData.lastName":
		if e.complexity.Commerce_Customer_PersonData.LastName == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.LastName(childComplexity), true

	case "Commerce_Customer_PersonData.mainEmail":
		if e.complexity.Commerce_Customer_PersonData.MainEmail == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.MainEmail(childComplexity), true

	case "Commerce_Customer_PersonData.middleName":
		if e.complexity.Commerce_Customer_PersonData.MiddleName == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.MiddleName(childComplexity), true

	case "Commerce_Customer_PersonData.nationality":
		if e.complexity.Commerce_Customer_PersonData.Nationality == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.Nationality(childComplexity), true

	case "Commerce_Customer_PersonData.prefix":
		if e.complexity.Commerce_Customer_PersonData.Prefix == nil {
			break
		}

		return e.complexity.Commerce_Customer_PersonData.Prefix(childComplexity), true

	case "Commerce_Customer_Result.addresses":
		if e.complexity.Commerce_Customer_Result.Addresses == nil {
			break
		}

		return e.complexity.Commerce_Customer_Result.Addresses(childComplexity), true

	case "Commerce_Customer_Result.defaultBillingAddress":
		if e.complexity.Commerce_Customer_Result.DefaultBillingAddress == nil {
			break
		}

		return e.complexity.Commerce_Customer_Result.DefaultBillingAddress(childComplexity), true

	case "Commerce_Customer_Result.defaultShippingAddress":
		if e.complexity.Commerce_Customer_Result.DefaultShippingAddress == nil {
			break
		}

		return e.complexity.Commerce_Customer_Result.DefaultShippingAddress(childComplexity), true

	case "Commerce_Customer_Result.getAddress":
		if e.complexity.Commerce_Customer_Result.GetAddress == nil {
			break
		}

		args, err := ec.field_Commerce_Customer_Result_getAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Customer_Result.GetAddress(childComplexity, args["id"].(string)), true

	case "Commerce_Customer_Result.id":
		if e.complexity.Commerce_Customer_Result.ID == nil {
			break
		}

		return e.complexity.Commerce_Customer_Result.ID(childComplexity), true

	case "Commerce_Customer_Result.personalData":
		if e.complexity.Commerce_Customer_Result.PersonalData == nil {
			break
		}

		return e.complexity.Commerce_Customer_Result.PersonalData(childComplexity), true

	case "Commerce_Customer_Status_Result.isLoggedIn":
		if e.complexity.Commerce_Customer_Status_Result.IsLoggedIn == nil {
			break
		}

		return e.complexity.Commerce_Customer_Status_Result.IsLoggedIn(childComplexity), true

	case "Commerce_Customer_Status_Result.userID":
		if e.complexity.Commerce_Customer_Status_Result.UserID == nil {
			break
		}

		return e.complexity.Commerce_Customer_Status_Result.UserID(childComplexity), true

	case "Commerce_Price.currency":
		if e.complexity.Commerce_Price.Currency == nil {
			break
		}

		return e.complexity.Commerce_Price.Currency(childComplexity), true

	case "Commerce_Price.amount":
		if e.complexity.Commerce_Price.FloatAmount == nil {
			break
		}

		return e.complexity.Commerce_Price.FloatAmount(childComplexity), true

	case "Commerce_Price_Charge.price":
		if e.complexity.Commerce_Price_Charge.Price == nil {
			break
		}

		return e.complexity.Commerce_Price_Charge.Price(childComplexity), true

	case "Commerce_Price_Charge.reference":
		if e.complexity.Commerce_Price_Charge.Reference == nil {
			break
		}

		return e.complexity.Commerce_Price_Charge.Reference(childComplexity), true

	case "Commerce_Price_Charge.type":
		if e.complexity.Commerce_Price_Charge.Type == nil {
			break
		}

		return e.complexity.Commerce_Price_Charge.Type(childComplexity), true

	case "Commerce_Price_Charge.value":
		if e.complexity.Commerce_Price_Charge.Value == nil {
			break
		}

		return e.complexity.Commerce_Price_Charge.Value(childComplexity), true

	case "Commerce_Price_ChargeQualifier.reference":
		if e.complexity.Commerce_Price_ChargeQualifier.Reference == nil {
			break
		}

		return e.complexity.Commerce_Price_ChargeQualifier.Reference(childComplexity), true

	case "Commerce_Price_ChargeQualifier.type":
		if e.complexity.Commerce_Price_ChargeQualifier.Type == nil {
			break
		}

		return e.complexity.Commerce_Price_ChargeQualifier.Type(childComplexity), true

	case "Commerce_Price_Charges.getByChargeQualifierForced":
		if e.complexity.Commerce_Price_Charges.GetByChargeQualifierForced == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_getByChargeQualifierForced_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Price_Charges.GetByChargeQualifierForced(childComplexity, args["qualifier"].(domain.ChargeQualifier)), true

	case "Commerce_Price_Charges.getByTypeForced":
		if e.complexity.Commerce_Price_Charges.GetByTypeForced == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_getByTypeForced_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Price_Charges.GetByTypeForced(childComplexity, args["ctype"].(string)), true

	case "Commerce_Price_Charges.hasChargeQualifier":
		if e.complexity.Commerce_Price_Charges.HasChargeQualifier == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_hasChargeQualifier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Price_Charges.HasChargeQualifier(childComplexity, args["qualifier"].(domain.ChargeQualifier)), true

	case "Commerce_Price_Charges.hasType":
		if e.complexity.Commerce_Price_Charges.HasType == nil {
			break
		}

		args, err := ec.field_Commerce_Price_Charges_hasType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Price_Charges.HasType(childComplexity, args["ctype"].(string)), true

	case "Commerce_Price_Charges.items":
		if e.complexity.Commerce_Price_Charges.Items == nil {
			break
		}

		return e.complexity.Commerce_Price_Charges.Items(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.activeVariationSelections":
		if e.complexity.Commerce_Product_ActiveVariantProduct.ActiveVariationSelections == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.ActiveVariationSelections(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.attributes":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Attributes(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.availablePrices":
		if e.complexity.Commerce_Product_ActiveVariantProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.badges":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Badges == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Badges(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.categories":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Categories == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Categories(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.description":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Description == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Description(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.identifier":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Identifier == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Identifier(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.loyalty":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Loyalty == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Loyalty(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.marketPlaceCode":
		if e.complexity.Commerce_Product_ActiveVariantProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.media":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Media == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Media(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.meta":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Meta == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Meta(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.price":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Price == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Price(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.shortDescription":
		if e.complexity.Commerce_Product_ActiveVariantProduct.ShortDescription == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.title":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Title == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Title(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.type":
		if e.complexity.Commerce_Product_ActiveVariantProduct.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.Type(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.variantMarketPlaceCode":
		if e.complexity.Commerce_Product_ActiveVariantProduct.VariantMarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.VariantMarketPlaceCode(childComplexity), true

	case "Commerce_Product_ActiveVariantProduct.variationSelections":
		if e.complexity.Commerce_Product_ActiveVariantProduct.VariationSelections == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariantProduct.VariationSelections(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.code":
		if e.complexity.Commerce_Product_ActiveVariationSelection.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariationSelection.Code(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.label":
		if e.complexity.Commerce_Product_ActiveVariationSelection.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariationSelection.Label(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.unitCode":
		if e.complexity.Commerce_Product_ActiveVariationSelection.UnitCode == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariationSelection.UnitCode(childComplexity), true

	case "Commerce_Product_ActiveVariationSelection.value":
		if e.complexity.Commerce_Product_ActiveVariationSelection.Value == nil {
			break
		}

		return e.complexity.Commerce_Product_ActiveVariationSelection.Value(childComplexity), true

	case "Commerce_Product_Attribute.code":
		if e.complexity.Commerce_Product_Attribute.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.Code(childComplexity), true

	case "Commerce_Product_Attribute.codeLabel":
		if e.complexity.Commerce_Product_Attribute.CodeLabel == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.CodeLabel(childComplexity), true

	case "Commerce_Product_Attribute.label":
		if e.complexity.Commerce_Product_Attribute.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.Label(childComplexity), true

	case "Commerce_Product_Attribute.labels":
		if e.complexity.Commerce_Product_Attribute.Labels == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.Labels(childComplexity), true

	case "Commerce_Product_Attribute.unitCode":
		if e.complexity.Commerce_Product_Attribute.UnitCode == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.UnitCode(childComplexity), true

	case "Commerce_Product_Attribute.value":
		if e.complexity.Commerce_Product_Attribute.Value == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.Value(childComplexity), true

	case "Commerce_Product_Attribute.values":
		if e.complexity.Commerce_Product_Attribute.Values == nil {
			break
		}

		return e.complexity.Commerce_Product_Attribute.Values(childComplexity), true

	case "Commerce_Product_Attributes.getAttribute":
		if e.complexity.Commerce_Product_Attributes.Attribute == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_getAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Product_Attributes.Attribute(childComplexity, args["key"].(string)), true

	case "Commerce_Product_Attributes.attributeKeys":
		if e.complexity.Commerce_Product_Attributes.AttributeKeys == nil {
			break
		}

		return e.complexity.Commerce_Product_Attributes.AttributeKeys(childComplexity), true

	case "Commerce_Product_Attributes.attributes":
		if e.complexity.Commerce_Product_Attributes.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_Attributes.Attributes(childComplexity), true

	case "Commerce_Product_Attributes.getAttributesByKey":
		if e.complexity.Commerce_Product_Attributes.AttributesByKey == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_getAttributesByKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Product_Attributes.AttributesByKey(childComplexity, args["keys"].([]string)), true

	case "Commerce_Product_Attributes.hasAttribute":
		if e.complexity.Commerce_Product_Attributes.HasAttribute == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Attributes_hasAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Product_Attributes.HasAttribute(childComplexity, args["key"].(string)), true

	case "Commerce_Product_Badge.code":
		if e.complexity.Commerce_Product_Badge.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_Badge.Code(childComplexity), true

	case "Commerce_Product_Badge.label":
		if e.complexity.Commerce_Product_Badge.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_Badge.Label(childComplexity), true

	case "Commerce_Product_Badges.all":
		if e.complexity.Commerce_Product_Badges.All == nil {
			break
		}

		return e.complexity.Commerce_Product_Badges.All(childComplexity), true

	case "Commerce_Product_Badges.first":
		if e.complexity.Commerce_Product_Badges.First == nil {
			break
		}

		return e.complexity.Commerce_Product_Badges.First(childComplexity), true

	case "Commerce_Product_BundleProduct.attributes":
		if e.complexity.Commerce_Product_BundleProduct.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Attributes(childComplexity), true

	case "Commerce_Product_BundleProduct.availablePrices":
		if e.complexity.Commerce_Product_BundleProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_BundleProduct.badges":
		if e.complexity.Commerce_Product_BundleProduct.Badges == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Badges(childComplexity), true

	case "Commerce_Product_BundleProduct.categories":
		if e.complexity.Commerce_Product_BundleProduct.Categories == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Categories(childComplexity), true

	case "Commerce_Product_BundleProduct.choices":
		if e.complexity.Commerce_Product_BundleProduct.Choices == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Choices(childComplexity), true

	case "Commerce_Product_BundleProduct.description":
		if e.complexity.Commerce_Product_BundleProduct.Description == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Description(childComplexity), true

	case "Commerce_Product_BundleProduct.identifier":
		if e.complexity.Commerce_Product_BundleProduct.Identifier == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Identifier(childComplexity), true

	case "Commerce_Product_BundleProduct.loyalty":
		if e.complexity.Commerce_Product_BundleProduct.Loyalty == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Loyalty(childComplexity), true

	case "Commerce_Product_BundleProduct.marketPlaceCode":
		if e.complexity.Commerce_Product_BundleProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_BundleProduct.media":
		if e.complexity.Commerce_Product_BundleProduct.Media == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Media(childComplexity), true

	case "Commerce_Product_BundleProduct.meta":
		if e.complexity.Commerce_Product_BundleProduct.Meta == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Meta(childComplexity), true

	case "Commerce_Product_BundleProduct.price":
		if e.complexity.Commerce_Product_BundleProduct.Price == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Price(childComplexity), true

	case "Commerce_Product_BundleProduct.shortDescription":
		if e.complexity.Commerce_Product_BundleProduct.ShortDescription == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_BundleProduct.title":
		if e.complexity.Commerce_Product_BundleProduct.Title == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Title(childComplexity), true

	case "Commerce_Product_BundleProduct.type":
		if e.complexity.Commerce_Product_BundleProduct.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_BundleProduct.Type(childComplexity), true

	case "Commerce_Product_Categories.all":
		if e.complexity.Commerce_Product_Categories.All == nil {
			break
		}

		return e.complexity.Commerce_Product_Categories.All(childComplexity), true

	case "Commerce_Product_Categories.main":
		if e.complexity.Commerce_Product_Categories.Main == nil {
			break
		}

		return e.complexity.Commerce_Product_Categories.Main(childComplexity), true

	case "Commerce_Product_CategoryTeaser.code":
		if e.complexity.Commerce_Product_CategoryTeaser.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_CategoryTeaser.Code(childComplexity), true

	case "Commerce_Product_CategoryTeaser.name":
		if e.complexity.Commerce_Product_CategoryTeaser.Name == nil {
			break
		}

		return e.complexity.Commerce_Product_CategoryTeaser.Name(childComplexity), true

	case "Commerce_Product_CategoryTeaser.parent":
		if e.complexity.Commerce_Product_CategoryTeaser.Parent == nil {
			break
		}

		return e.complexity.Commerce_Product_CategoryTeaser.Parent(childComplexity), true

	case "Commerce_Product_CategoryTeaser.path":
		if e.complexity.Commerce_Product_CategoryTeaser.Path == nil {
			break
		}

		return e.complexity.Commerce_Product_CategoryTeaser.Path(childComplexity), true

	case "Commerce_Product_Choice.active":
		if e.complexity.Commerce_Product_Choice.Active == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.Active(childComplexity), true

	case "Commerce_Product_Choice.activeOption":
		if e.complexity.Commerce_Product_Choice.ActiveOption == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.ActiveOption(childComplexity), true

	case "Commerce_Product_Choice.identifier":
		if e.complexity.Commerce_Product_Choice.Identifier == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.Identifier(childComplexity), true

	case "Commerce_Product_Choice.label":
		if e.complexity.Commerce_Product_Choice.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.Label(childComplexity), true

	case "Commerce_Product_Choice.options":
		if e.complexity.Commerce_Product_Choice.Options == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.Options(childComplexity), true

	case "Commerce_Product_Choice.required":
		if e.complexity.Commerce_Product_Choice.Required == nil {
			break
		}

		return e.complexity.Commerce_Product_Choice.Required(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.attributes":
		if e.complexity.Commerce_Product_ConfigurableProduct.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Attributes(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.availablePrices":
		if e.complexity.Commerce_Product_ConfigurableProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.badges":
		if e.complexity.Commerce_Product_ConfigurableProduct.Badges == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Badges(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.categories":
		if e.complexity.Commerce_Product_ConfigurableProduct.Categories == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Categories(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.description":
		if e.complexity.Commerce_Product_ConfigurableProduct.Description == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Description(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.identifier":
		if e.complexity.Commerce_Product_ConfigurableProduct.Identifier == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Identifier(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.loyalty":
		if e.complexity.Commerce_Product_ConfigurableProduct.Loyalty == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Loyalty(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.marketPlaceCode":
		if e.complexity.Commerce_Product_ConfigurableProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.media":
		if e.complexity.Commerce_Product_ConfigurableProduct.Media == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Media(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.meta":
		if e.complexity.Commerce_Product_ConfigurableProduct.Meta == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Meta(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.price":
		if e.complexity.Commerce_Product_ConfigurableProduct.Price == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Price(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.shortDescription":
		if e.complexity.Commerce_Product_ConfigurableProduct.ShortDescription == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.title":
		if e.complexity.Commerce_Product_ConfigurableProduct.Title == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Title(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.type":
		if e.complexity.Commerce_Product_ConfigurableProduct.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.Type(childComplexity), true

	case "Commerce_Product_ConfigurableProduct.variantSelection":
		if e.complexity.Commerce_Product_ConfigurableProduct.VariantSelection == nil {
			break
		}

		return e.complexity.Commerce_Product_ConfigurableProduct.VariantSelection(childComplexity), true

	case "Commerce_Product_Loyalty.earning":
		if e.complexity.Commerce_Product_Loyalty.Earning == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty.Earning(childComplexity), true

	case "Commerce_Product_Loyalty.price":
		if e.complexity.Commerce_Product_Loyalty.Price == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty.Price(childComplexity), true

	case "Commerce_Product_Loyalty_EarningInfo.default":
		if e.complexity.Commerce_Product_Loyalty_EarningInfo.Default == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_EarningInfo.Default(childComplexity), true

	case "Commerce_Product_Loyalty_EarningInfo.type":
		if e.complexity.Commerce_Product_Loyalty_EarningInfo.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_EarningInfo.Type(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.context":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.Context == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.Context(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.default":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.Default == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.Default(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.discountText":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.DiscountText(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.discounted":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.Discounted == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.Discounted(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.isDiscounted":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.maxPointsToSpent":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.MaxPointsToSpent == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.MaxPointsToSpent(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.minPointsToSpent":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.MinPointsToSpent == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.MinPointsToSpent(childComplexity), true

	case "Commerce_Product_Loyalty_PriceInfo.type":
		if e.complexity.Commerce_Product_Loyalty_PriceInfo.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_Loyalty_PriceInfo.Type(childComplexity), true

	case "Commerce_Product_Media.all":
		if e.complexity.Commerce_Product_Media.All == nil {
			break
		}

		return e.complexity.Commerce_Product_Media.All(childComplexity), true

	case "Commerce_Product_Media.getMedia":
		if e.complexity.Commerce_Product_Media.GetMedia == nil {
			break
		}

		args, err := ec.field_Commerce_Product_Media_getMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Commerce_Product_Media.GetMedia(childComplexity, args["usage"].(string)), true

	case "Commerce_Product_MediaItem.mimeType":
		if e.complexity.Commerce_Product_MediaItem.MimeType == nil {
			break
		}

		return e.complexity.Commerce_Product_MediaItem.MimeType(childComplexity), true

	case "Commerce_Product_MediaItem.reference":
		if e.complexity.Commerce_Product_MediaItem.Reference == nil {
			break
		}

		return e.complexity.Commerce_Product_MediaItem.Reference(childComplexity), true

	case "Commerce_Product_MediaItem.title":
		if e.complexity.Commerce_Product_MediaItem.Title == nil {
			break
		}

		return e.complexity.Commerce_Product_MediaItem.Title(childComplexity), true

	case "Commerce_Product_MediaItem.type":
		if e.complexity.Commerce_Product_MediaItem.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_MediaItem.Type(childComplexity), true

	case "Commerce_Product_MediaItem.usage":
		if e.complexity.Commerce_Product_MediaItem.Usage == nil {
			break
		}

		return e.complexity.Commerce_Product_MediaItem.Usage(childComplexity), true

	case "Commerce_Product_Meta.keywords":
		if e.complexity.Commerce_Product_Meta.Keywords == nil {
			break
		}

		return e.complexity.Commerce_Product_Meta.Keywords(childComplexity), true

	case "Commerce_Product_Option.product":
		if e.complexity.Commerce_Product_Option.Product == nil {
			break
		}

		return e.complexity.Commerce_Product_Option.Product(childComplexity), true

	case "Commerce_Product_Option.qty":
		if e.complexity.Commerce_Product_Option.Qty == nil {
			break
		}

		return e.complexity.Commerce_Product_Option.Qty(childComplexity), true

	case "Commerce_Product_PriceContext.channelCode":
		if e.complexity.Commerce_Product_PriceContext.ChannelCode == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceContext.ChannelCode(childComplexity), true

	case "Commerce_Product_PriceContext.customerGroup":
		if e.complexity.Commerce_Product_PriceContext.CustomerGroup == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceContext.CustomerGroup(childComplexity), true

	case "Commerce_Product_PriceContext.deliveryCode":
		if e.complexity.Commerce_Product_PriceContext.DeliveryCode == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceContext.DeliveryCode(childComplexity), true

	case "Commerce_Product_PriceContext.locale":
		if e.complexity.Commerce_Product_PriceContext.Locale == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceContext.Locale(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBase":
		if e.complexity.Commerce_Product_PriceInfo.ActiveBase == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.ActiveBase(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBaseAmount":
		if e.complexity.Commerce_Product_PriceInfo.ActiveBaseAmount == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.ActiveBaseAmount(childComplexity), true

	case "Commerce_Product_PriceInfo.activeBaseUnit":
		if e.complexity.Commerce_Product_PriceInfo.ActiveBaseUnit == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.ActiveBaseUnit(childComplexity), true

	case "Commerce_Product_PriceInfo.campaignRules":
		if e.complexity.Commerce_Product_PriceInfo.CampaignRules == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.CampaignRules(childComplexity), true

	case "Commerce_Product_PriceInfo.context":
		if e.complexity.Commerce_Product_PriceInfo.Context == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.Context(childComplexity), true

	case "Commerce_Product_PriceInfo.default":
		if e.complexity.Commerce_Product_PriceInfo.Default == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.Default(childComplexity), true

	case "Commerce_Product_PriceInfo.denyMoreDiscounts":
		if e.complexity.Commerce_Product_PriceInfo.DenyMoreDiscounts == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.DenyMoreDiscounts(childComplexity), true

	case "Commerce_Product_PriceInfo.discountText":
		if e.complexity.Commerce_Product_PriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.DiscountText(childComplexity), true

	case "Commerce_Product_PriceInfo.discounted":
		if e.complexity.Commerce_Product_PriceInfo.Discounted == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.Discounted(childComplexity), true

	case "Commerce_Product_PriceInfo.isDiscounted":
		if e.complexity.Commerce_Product_PriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_Product_PriceInfo.taxClass":
		if e.complexity.Commerce_Product_PriceInfo.TaxClass == nil {
			break
		}

		return e.complexity.Commerce_Product_PriceInfo.TaxClass(childComplexity), true

	case "Commerce_Product_SearchResult.actions":
		if e.complexity.Commerce_Product_SearchResult.Actions == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.Actions(childComplexity), true

	case "Commerce_Product_SearchResult.facets":
		if e.complexity.Commerce_Product_SearchResult.Facets == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.Facets(childComplexity), true

	case "Commerce_Product_SearchResult.hasSelectedFacet":
		if e.complexity.Commerce_Product_SearchResult.HasSelectedFacet == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.HasSelectedFacet(childComplexity), true

	case "Commerce_Product_SearchResult.products":
		if e.complexity.Commerce_Product_SearchResult.Products == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.Products(childComplexity), true

	case "Commerce_Product_SearchResult.promotion":
		if e.complexity.Commerce_Product_SearchResult.Promotion == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.Promotion(childComplexity), true

	case "Commerce_Product_SearchResult.searchMeta":
		if e.complexity.Commerce_Product_SearchResult.SearchMeta == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.SearchMeta(childComplexity), true

	case "Commerce_Product_SearchResult.suggestions":
		if e.complexity.Commerce_Product_SearchResult.Suggestions == nil {
			break
		}

		return e.complexity.Commerce_Product_SearchResult.Suggestions(childComplexity), true

	case "Commerce_Product_SimpleProduct.attributes":
		if e.complexity.Commerce_Product_SimpleProduct.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Attributes(childComplexity), true

	case "Commerce_Product_SimpleProduct.availablePrices":
		if e.complexity.Commerce_Product_SimpleProduct.AvailablePrices == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.AvailablePrices(childComplexity), true

	case "Commerce_Product_SimpleProduct.badges":
		if e.complexity.Commerce_Product_SimpleProduct.Badges == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Badges(childComplexity), true

	case "Commerce_Product_SimpleProduct.categories":
		if e.complexity.Commerce_Product_SimpleProduct.Categories == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Categories(childComplexity), true

	case "Commerce_Product_SimpleProduct.description":
		if e.complexity.Commerce_Product_SimpleProduct.Description == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Description(childComplexity), true

	case "Commerce_Product_SimpleProduct.identifier":
		if e.complexity.Commerce_Product_SimpleProduct.Identifier == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Identifier(childComplexity), true

	case "Commerce_Product_SimpleProduct.loyalty":
		if e.complexity.Commerce_Product_SimpleProduct.Loyalty == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Loyalty(childComplexity), true

	case "Commerce_Product_SimpleProduct.marketPlaceCode":
		if e.complexity.Commerce_Product_SimpleProduct.MarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.MarketPlaceCode(childComplexity), true

	case "Commerce_Product_SimpleProduct.media":
		if e.complexity.Commerce_Product_SimpleProduct.Media == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Media(childComplexity), true

	case "Commerce_Product_SimpleProduct.meta":
		if e.complexity.Commerce_Product_SimpleProduct.Meta == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Meta(childComplexity), true

	case "Commerce_Product_SimpleProduct.price":
		if e.complexity.Commerce_Product_SimpleProduct.Price == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Price(childComplexity), true

	case "Commerce_Product_SimpleProduct.shortDescription":
		if e.complexity.Commerce_Product_SimpleProduct.ShortDescription == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.ShortDescription(childComplexity), true

	case "Commerce_Product_SimpleProduct.title":
		if e.complexity.Commerce_Product_SimpleProduct.Title == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Title(childComplexity), true

	case "Commerce_Product_SimpleProduct.type":
		if e.complexity.Commerce_Product_SimpleProduct.Type == nil {
			break
		}

		return e.complexity.Commerce_Product_SimpleProduct.Type(childComplexity), true

	case "Commerce_Product_VariantSelection.attributes":
		if e.complexity.Commerce_Product_VariantSelection.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection.Attributes(childComplexity), true

	case "Commerce_Product_VariantSelection.variants":
		if e.complexity.Commerce_Product_VariantSelection.Variants == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection.Variants(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute.code":
		if e.complexity.Commerce_Product_VariantSelection_Attribute.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute.Code(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute.label":
		if e.complexity.Commerce_Product_VariantSelection_Attribute.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute.Label(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute.options":
		if e.complexity.Commerce_Product_VariantSelection_Attribute.Options == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute.Options(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute_Option.label":
		if e.complexity.Commerce_Product_VariantSelection_Attribute_Option.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute_Option.Label(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute_Option.otherAttributesRestrictions":
		if e.complexity.Commerce_Product_VariantSelection_Attribute_Option.OtherAttributesRestrictions == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute_Option.OtherAttributesRestrictions(childComplexity), true

	case "Commerce_Product_VariantSelection_Attribute_Option.unitCode":
		if e.complexity.Commerce_Product_VariantSelection_Attribute_Option.UnitCode == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Attribute_Option.UnitCode(childComplexity), true

	case "Commerce_Product_VariantSelection_Match.attributes":
		if e.complexity.Commerce_Product_VariantSelection_Match.Attributes == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Match.Attributes(childComplexity), true

	case "Commerce_Product_VariantSelection_Match.variant":
		if e.complexity.Commerce_Product_VariantSelection_Match.Variant == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Match.Variant(childComplexity), true

	case "Commerce_Product_VariantSelection_Match_Attributes.key":
		if e.complexity.Commerce_Product_VariantSelection_Match_Attributes.Key == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Match_Attributes.Key(childComplexity), true

	case "Commerce_Product_VariantSelection_Match_Attributes.value":
		if e.complexity.Commerce_Product_VariantSelection_Match_Attributes.Value == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Match_Attributes.Value(childComplexity), true

	case "Commerce_Product_VariantSelection_Match_Variant.marketplaceCode":
		if e.complexity.Commerce_Product_VariantSelection_Match_Variant.MarketplaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Match_Variant.MarketplaceCode(childComplexity), true

	case "Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.availableOptions":
		if e.complexity.Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.AvailableOptions == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.AvailableOptions(childComplexity), true

	case "Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.code":
		if e.complexity.Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_VariantSelection_Option_OtherAttributesRestriction.Code(childComplexity), true

	case "Commerce_Product_VariationSelection.code":
		if e.complexity.Commerce_Product_VariationSelection.Code == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection.Code(childComplexity), true

	case "Commerce_Product_VariationSelection.label":
		if e.complexity.Commerce_Product_VariationSelection.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection.Label(childComplexity), true

	case "Commerce_Product_VariationSelection.options":
		if e.complexity.Commerce_Product_VariationSelection.Options == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection.Options(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.label":
		if e.complexity.Commerce_Product_VariationSelection_Option.Label == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection_Option.Label(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.state":
		if e.complexity.Commerce_Product_VariationSelection_Option.State == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection_Option.State(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.unitCode":
		if e.complexity.Commerce_Product_VariationSelection_Option.UnitCode == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection_Option.UnitCode(childComplexity), true

	case "Commerce_Product_VariationSelection_Option.variant":
		if e.complexity.Commerce_Product_VariationSelection_Option.Variant == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection_Option.Variant(childComplexity), true

	case "Commerce_Product_VariationSelection_OptionVariant.marketPlaceCode":
		if e.complexity.Commerce_Product_VariationSelection_OptionVariant.MarketPlaceCode == nil {
			break
		}

		return e.complexity.Commerce_Product_VariationSelection_OptionVariant.MarketPlaceCode(childComplexity), true

	case "Commerce_Search_Action.content":
		if e.complexity.Commerce_Search_Action.Content == nil {
			break
		}

		return e.complexity.Commerce_Search_Action.Content(childComplexity), true

	case "Commerce_Search_Action.type":
		if e.complexity.Commerce_Search_Action.Type == nil {
			break
		}

		return e.complexity.Commerce_Search_Action.Type(childComplexity), true

	case "Commerce_Search_ListFacet.hasSelectedItem":
		if e.complexity.Commerce_Search_ListFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_ListFacet.items":
		if e.complexity.Commerce_Search_ListFacet.Items == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacet.Items(childComplexity), true

	case "Commerce_Search_ListFacet.label":
		if e.complexity.Commerce_Search_ListFacet.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacet.Label(childComplexity), true

	case "Commerce_Search_ListFacet.name":
		if e.complexity.Commerce_Search_ListFacet.Name == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacet.Name(childComplexity), true

	case "Commerce_Search_ListFacet.position":
		if e.complexity.Commerce_Search_ListFacet.Position == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacet.Position(childComplexity), true

	case "Commerce_Search_ListFacetItem.count":
		if e.complexity.Commerce_Search_ListFacetItem.Count == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacetItem.Count(childComplexity), true

	case "Commerce_Search_ListFacetItem.label":
		if e.complexity.Commerce_Search_ListFacetItem.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacetItem.Label(childComplexity), true

	case "Commerce_Search_ListFacetItem.selected":
		if e.complexity.Commerce_Search_ListFacetItem.Selected == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacetItem.Selected(childComplexity), true

	case "Commerce_Search_ListFacetItem.value":
		if e.complexity.Commerce_Search_ListFacetItem.Value == nil {
			break
		}

		return e.complexity.Commerce_Search_ListFacetItem.Value(childComplexity), true

	case "Commerce_Search_Meta.numPages":
		if e.complexity.Commerce_Search_Meta.NumPages == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.NumPages(childComplexity), true

	case "Commerce_Search_Meta.numResults":
		if e.complexity.Commerce_Search_Meta.NumResults == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.NumResults(childComplexity), true

	case "Commerce_Search_Meta.originalQuery":
		if e.complexity.Commerce_Search_Meta.OriginalQuery == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.OriginalQuery(childComplexity), true

	case "Commerce_Search_Meta.page":
		if e.complexity.Commerce_Search_Meta.Page == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.Page(childComplexity), true

	case "Commerce_Search_Meta.query":
		if e.complexity.Commerce_Search_Meta.Query == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.Query(childComplexity), true

	case "Commerce_Search_Meta.sortOptions":
		if e.complexity.Commerce_Search_Meta.SortOptions == nil {
			break
		}

		return e.complexity.Commerce_Search_Meta.SortOptions(childComplexity), true

	case "Commerce_Search_Promotion.content":
		if e.complexity.Commerce_Search_Promotion.Content == nil {
			break
		}

		return e.complexity.Commerce_Search_Promotion.Content(childComplexity), true

	case "Commerce_Search_Promotion.media":
		if e.complexity.Commerce_Search_Promotion.Media == nil {
			break
		}

		return e.complexity.Commerce_Search_Promotion.Media(childComplexity), true

	case "Commerce_Search_Promotion.title":
		if e.complexity.Commerce_Search_Promotion.Title == nil {
			break
		}

		return e.complexity.Commerce_Search_Promotion.Title(childComplexity), true

	case "Commerce_Search_Promotion.url":
		if e.complexity.Commerce_Search_Promotion.URL == nil {
			break
		}

		return e.complexity.Commerce_Search_Promotion.URL(childComplexity), true

	case "Commerce_Search_PromotionMedia.mimeType":
		if e.complexity.Commerce_Search_PromotionMedia.MimeType == nil {
			break
		}

		return e.complexity.Commerce_Search_PromotionMedia.MimeType(childComplexity), true

	case "Commerce_Search_PromotionMedia.reference":
		if e.complexity.Commerce_Search_PromotionMedia.Reference == nil {
			break
		}

		return e.complexity.Commerce_Search_PromotionMedia.Reference(childComplexity), true

	case "Commerce_Search_PromotionMedia.title":
		if e.complexity.Commerce_Search_PromotionMedia.Title == nil {
			break
		}

		return e.complexity.Commerce_Search_PromotionMedia.Title(childComplexity), true

	case "Commerce_Search_PromotionMedia.type":
		if e.complexity.Commerce_Search_PromotionMedia.Type == nil {
			break
		}

		return e.complexity.Commerce_Search_PromotionMedia.Type(childComplexity), true

	case "Commerce_Search_PromotionMedia.usage":
		if e.complexity.Commerce_Search_PromotionMedia.Usage == nil {
			break
		}

		return e.complexity.Commerce_Search_PromotionMedia.Usage(childComplexity), true

	case "Commerce_Search_RangeFacet.hasSelectedItem":
		if e.complexity.Commerce_Search_RangeFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_RangeFacet.items":
		if e.complexity.Commerce_Search_RangeFacet.Items == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacet.Items(childComplexity), true

	case "Commerce_Search_RangeFacet.label":
		if e.complexity.Commerce_Search_RangeFacet.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacet.Label(childComplexity), true

	case "Commerce_Search_RangeFacet.name":
		if e.complexity.Commerce_Search_RangeFacet.Name == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacet.Name(childComplexity), true

	case "Commerce_Search_RangeFacet.position":
		if e.complexity.Commerce_Search_RangeFacet.Position == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacet.Position(childComplexity), true

	case "Commerce_Search_RangeFacetItem.count":
		if e.complexity.Commerce_Search_RangeFacetItem.Count == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Count(childComplexity), true

	case "Commerce_Search_RangeFacetItem.label":
		if e.complexity.Commerce_Search_RangeFacetItem.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Label(childComplexity), true

	case "Commerce_Search_RangeFacetItem.max":
		if e.complexity.Commerce_Search_RangeFacetItem.Max == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Max(childComplexity), true

	case "Commerce_Search_RangeFacetItem.min":
		if e.complexity.Commerce_Search_RangeFacetItem.Min == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Min(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selected":
		if e.complexity.Commerce_Search_RangeFacetItem.Selected == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Selected(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selectedMax":
		if e.complexity.Commerce_Search_RangeFacetItem.SelectedMax == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.SelectedMax(childComplexity), true

	case "Commerce_Search_RangeFacetItem.selectedMin":
		if e.complexity.Commerce_Search_RangeFacetItem.SelectedMin == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.SelectedMin(childComplexity), true

	case "Commerce_Search_RangeFacetItem.value":
		if e.complexity.Commerce_Search_RangeFacetItem.Value == nil {
			break
		}

		return e.complexity.Commerce_Search_RangeFacetItem.Value(childComplexity), true

	case "Commerce_Search_SortOption.field":
		if e.complexity.Commerce_Search_SortOption.Field == nil {
			break
		}

		return e.complexity.Commerce_Search_SortOption.Field(childComplexity), true

	case "Commerce_Search_SortOption.label":
		if e.complexity.Commerce_Search_SortOption.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_SortOption.Label(childComplexity), true

	case "Commerce_Search_SortOption.selected":
		if e.complexity.Commerce_Search_SortOption.Selected == nil {
			break
		}

		return e.complexity.Commerce_Search_SortOption.Selected(childComplexity), true

	case "Commerce_Search_Suggestion.highlight":
		if e.complexity.Commerce_Search_Suggestion.Highlight == nil {
			break
		}

		return e.complexity.Commerce_Search_Suggestion.Highlight(childComplexity), true

	case "Commerce_Search_Suggestion.text":
		if e.complexity.Commerce_Search_Suggestion.Text == nil {
			break
		}

		return e.complexity.Commerce_Search_Suggestion.Text(childComplexity), true

	case "Commerce_Search_TreeFacet.hasSelectedItem":
		if e.complexity.Commerce_Search_TreeFacet.HasSelectedItem == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacet.HasSelectedItem(childComplexity), true

	case "Commerce_Search_TreeFacet.items":
		if e.complexity.Commerce_Search_TreeFacet.Items == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacet.Items(childComplexity), true

	case "Commerce_Search_TreeFacet.label":
		if e.complexity.Commerce_Search_TreeFacet.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacet.Label(childComplexity), true

	case "Commerce_Search_TreeFacet.name":
		if e.complexity.Commerce_Search_TreeFacet.Name == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacet.Name(childComplexity), true

	case "Commerce_Search_TreeFacet.position":
		if e.complexity.Commerce_Search_TreeFacet.Position == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacet.Position(childComplexity), true

	case "Commerce_Search_TreeFacetItem.active":
		if e.complexity.Commerce_Search_TreeFacetItem.Active == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Active(childComplexity), true

	case "Commerce_Search_TreeFacetItem.count":
		if e.complexity.Commerce_Search_TreeFacetItem.Count == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Count(childComplexity), true

	case "Commerce_Search_TreeFacetItem.items":
		if e.complexity.Commerce_Search_TreeFacetItem.Items == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Items(childComplexity), true

	case "Commerce_Search_TreeFacetItem.label":
		if e.complexity.Commerce_Search_TreeFacetItem.Label == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Label(childComplexity), true

	case "Commerce_Search_TreeFacetItem.selected":
		if e.complexity.Commerce_Search_TreeFacetItem.Selected == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Selected(childComplexity), true

	case "Commerce_Search_TreeFacetItem.value":
		if e.complexity.Commerce_Search_TreeFacetItem.Value == nil {
			break
		}

		return e.complexity.Commerce_Search_TreeFacetItem.Value(childComplexity), true

	case "Mutation.Commerce_Cart_AddToCart":
		if e.complexity.Mutation.CommerceCartAddToCart == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_AddToCart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartAddToCart(childComplexity, args["addToCartInput"].(dto.AddToCart)), true

	case "Mutation.Commerce_Cart_ApplyCouponCodeOrGiftCard":
		if e.complexity.Mutation.CommerceCartApplyCouponCodeOrGiftCard == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartApplyCouponCodeOrGiftCard(childComplexity, args["code"].(string)), true

	case "Mutation.Commerce_Cart_Clean":
		if e.complexity.Mutation.CommerceCartClean == nil {
			break
		}

		return e.complexity.Mutation.CommerceCartClean(childComplexity), true

	case "Mutation.Commerce_Cart_DeleteCartDelivery":
		if e.complexity.Mutation.CommerceCartDeleteCartDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_DeleteCartDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartDeleteCartDelivery(childComplexity, args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_DeleteItem":
		if e.complexity.Mutation.CommerceCartDeleteItem == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_DeleteItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartDeleteItem(childComplexity, args["itemID"].(string), args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_RemoveCouponCode":
		if e.complexity.Mutation.CommerceCartRemoveCouponCode == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_RemoveCouponCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartRemoveCouponCode(childComplexity, args["couponCode"].(string)), true

	case "Mutation.Commerce_Cart_RemoveGiftCard":
		if e.complexity.Mutation.CommerceCartRemoveGiftCard == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_RemoveGiftCard_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartRemoveGiftCard(childComplexity, args["giftCardCode"].(string)), true

	case "Mutation.Commerce_Cart_UpdateAdditionalData":
		if e.complexity.Mutation.CommerceCartUpdateAdditionalData == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateAdditionalData(childComplexity, args["additionalData"].([]*dto.KeyValue)), true

	case "Mutation.Commerce_Cart_UpdateBillingAddress":
		if e.complexity.Mutation.CommerceCartUpdateBillingAddress == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateBillingAddress(childComplexity, args["addressForm"].(*forms.AddressForm)), true

	case "Mutation.Commerce_Cart_UpdateDeliveriesAdditionalData":
		if e.complexity.Mutation.CommerceCartUpdateDeliveriesAdditionalData == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveriesAdditionalData(childComplexity, args["data"].([]*dto.DeliveryAdditionalData)), true

	case "Mutation.Commerce_Cart_UpdateDeliveryAddresses":
		if e.complexity.Mutation.CommerceCartUpdateDeliveryAddresses == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveryAddresses(childComplexity, args["deliveryAdresses"].([]*forms.DeliveryForm)), true

	case "Mutation.Commerce_Cart_UpdateDeliveryShippingOptions":
		if e.complexity.Mutation.CommerceCartUpdateDeliveryShippingOptions == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateDeliveryShippingOptions(childComplexity, args["shippingOptions"].([]*dto.DeliveryShippingOption)), true

	case "Mutation.Commerce_Cart_UpdateItemBundleConfig":
		if e.complexity.Mutation.CommerceCartUpdateItemBundleConfig == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateItemBundleConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateItemBundleConfig(childComplexity, args["itemID"].(string), args["bundleConfig"].([]*dto.ChoiceConfiguration)), true

	case "Mutation.Commerce_Cart_UpdateItemQty":
		if e.complexity.Mutation.CommerceCartUpdateItemQty == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateItemQty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateItemQty(childComplexity, args["itemID"].(string), args["deliveryCode"].(string), args["qty"].(int)), true

	case "Mutation.Commerce_Cart_UpdateSelectedPayment":
		if e.complexity.Mutation.CommerceCartUpdateSelectedPayment == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateSelectedPayment(childComplexity, args["gateway"].(string), args["method"].(string)), true

	case "Mutation.Commerce_Checkout_CancelPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_ClearPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutClearPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutClearPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_RefreshPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_RefreshPlaceOrderBlocking":
		if e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrderBlocking == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutRefreshPlaceOrderBlocking(childComplexity), true

	case "Mutation.Commerce_Checkout_StartPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutStartPlaceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCheckoutStartPlaceOrder(childComplexity, args["returnUrl"].(string)), true

	case "Mutation.flamingo":
		if e.complexity.Mutation.Flamingo == nil {
			break
		}

		return e.complexity.Mutation.Flamingo(childComplexity), true

	case "Query.Commerce_Cart_DecoratedCart":
		if e.complexity.Query.CommerceCartDecoratedCart == nil {
			break
		}

		return e.complexity.Query.CommerceCartDecoratedCart(childComplexity), true

	case "Query.Commerce_Cart_QtyRestriction":
		if e.complexity.Query.CommerceCartQtyRestriction == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Cart_QtyRestriction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCartQtyRestriction(childComplexity, args["marketplaceCode"].(string), args["variantCode"].(*string), args["deliveryCode"].(string)), true

	case "Query.Commerce_Cart_Validator":
		if e.complexity.Query.CommerceCartValidator == nil {
			break
		}

		return e.complexity.Query.CommerceCartValidator(childComplexity), true

	case "Query.Commerce_Category":
		if e.complexity.Query.CommerceCategory == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategory(childComplexity, args["categoryCode"].(string), args["categorySearchRequest"].(*searchdto.CommerceSearchRequest)), true

	case "Query.Commerce_CategoryTree":
		if e.complexity.Query.CommerceCategoryTree == nil {
			break
		}

		args, err := ec.field_Query_Commerce_CategoryTree_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategoryTree(childComplexity, args["activeCategoryCode"].(string)), true

	case "Query.Commerce_Checkout_ActivePlaceOrder":
		if e.complexity.Query.CommerceCheckoutActivePlaceOrder == nil {
			break
		}

		return e.complexity.Query.CommerceCheckoutActivePlaceOrder(childComplexity), true

	case "Query.Commerce_Checkout_CurrentContext":
		if e.complexity.Query.CommerceCheckoutCurrentContext == nil {
			break
		}

		return e.complexity.Query.CommerceCheckoutCurrentContext(childComplexity), true

	case "Query.Commerce_Customer":
		if e.complexity.Query.CommerceCustomer == nil {
			break
		}

		return e.complexity.Query.CommerceCustomer(childComplexity), true

	case "Query.Commerce_Customer_Status":
		if e.complexity.Query.CommerceCustomerStatus == nil {
			break
		}

		return e.complexity.Query.CommerceCustomerStatus(childComplexity), true

	case "Query.Commerce_Product":
		if e.complexity.Query.CommerceProduct == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProduct(childComplexity, args["marketPlaceCode"].(string), args["variantMarketPlaceCode"].(*string), args["bundleConfiguration"].([]*graphqlproductdto.ChoiceConfiguration)), true

	case "Query.Commerce_Product_Search":
		if e.complexity.Query.CommerceProductSearch == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_Search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProductSearch(childComplexity, args["searchRequest"].(searchdto.CommerceSearchRequest)), true

	case "Query.flamingo":
		if e.complexity.Query.Flamingo == nil {
			break
		}

		return e.complexity.Query.Flamingo(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCommerce_Cart_AddToCartInput,
		ec.unmarshalInputCommerce_Cart_AddressFormInput,
		ec.unmarshalInputCommerce_Cart_ChoiceConfigurationInput,
		ec.unmarshalInputCommerce_Cart_DeliveryAdditionalDataInput,
		ec.unmarshalInputCommerce_Cart_DeliveryAddressInput,
		ec.unmarshalInputCommerce_Cart_DeliveryShippingOptionInput,
		ec.unmarshalInputCommerce_Cart_KeyValueInput,
		ec.unmarshalInputCommerce_Price_ChargeQualifierInput,
		ec.unmarshalInputCommerce_Product_ChoiceConfigurationInput,
		ec.unmarshalInputCommerce_Search_KeyValueFilter,
		ec.unmarshalInputCommerce_Search_Request,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

//go:embed "schema/schema.graphql" "schema/flamingo.me_flamingo-commerce_v3_price_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_search_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_product_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_customer_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_cart_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_checkout_interfaces_graphql-Service.graphql" "schema/flamingo.me_flamingo-commerce_v3_category_interfaces_graphql-Service.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema/schema.graphql", Input: sourceData("schema/schema.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_price_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_price_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_search_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_search_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_product_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_product_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_customer_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_customer_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_cart_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_cart_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_checkout_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_checkout_interfaces_graphql-Service.graphql"), BuiltIn: false},
	{Name: "schema/flamingo.me_flamingo-commerce_v3_category_interfaces_graphql-Service.graphql", Input: sourceData("schema/flamingo.me_flamingo-commerce_v3_category_interfaces_graphql-Service.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["campaignCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("campaignCode"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["campaignCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_AppliedDiscounts_byType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["filterType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterType"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getByExternalReference_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ref"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ref"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ref"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getByItemID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getDeliveryByItemID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getTotalItemsByType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["typeCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["typeCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_getTotalQty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketPlaceCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketPlaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketPlaceCode"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["variantCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Cart_hasDeliveryForCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_CustomAttributes_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Item_getAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Item_hasAdditionalDataKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["methods"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("methods"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["methods"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_Taxes_getByType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["taxType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taxType"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taxType"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_has_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Customer_Result_getAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_getByChargeQualifierForced_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.ChargeQualifier
	if tmp, ok := rawArgs["qualifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualifier"))
		arg0, err = ec.unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qualifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_getByTypeForced_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ctype"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctype"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ctype"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_hasChargeQualifier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.ChargeQualifier
	if tmp, ok := rawArgs["qualifier"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qualifier"))
		arg0, err = ec.unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qualifier"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Price_Charges_hasType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["ctype"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ctype"))
		arg0, err = ec.unmarshalOString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ctype"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_getAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_getAttributesByKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["keys"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keys"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["keys"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Attributes_hasAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Product_Media_getMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["usage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("usage"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usage"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_AddToCart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.AddToCart
	if tmp, ok := rawArgs["addToCartInput"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addToCartInput"))
		arg0, err = ec.unmarshalNCommerce_Cart_AddToCartInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐAddToCart(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addToCartInput"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_DeleteCartDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_DeleteItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_RemoveCouponCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["couponCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("couponCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["couponCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_RemoveGiftCard_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["giftCardCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("giftCardCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["giftCardCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.KeyValue
	if tmp, ok := rawArgs["additionalData"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalData"))
		arg0, err = ec.unmarshalNCommerce_Cart_KeyValueInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["additionalData"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *forms.AddressForm
	if tmp, ok := rawArgs["addressForm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressForm"))
		arg0, err = ec.unmarshalOCommerce_Cart_AddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addressForm"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.DeliveryAdditionalData
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg0, err = ec.unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalDataᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*forms.DeliveryForm
	if tmp, ok := rawArgs["deliveryAdresses"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryAdresses"))
		arg0, err = ec.unmarshalOCommerce_Cart_DeliveryAddressInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryFormᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryAdresses"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*dto.DeliveryShippingOption
	if tmp, ok := rawArgs["shippingOptions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shippingOptions"))
		arg0, err = ec.unmarshalOCommerce_Cart_DeliveryShippingOptionInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOptionᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["shippingOptions"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateItemBundleConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 []*dto.ChoiceConfiguration
	if tmp, ok := rawArgs["bundleConfig"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundleConfig"))
		arg1, err = ec.unmarshalNCommerce_Cart_ChoiceConfigurationInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfigurationᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bundleConfig"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateItemQty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["qty"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qty"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qty"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gateway"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gateway"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gateway"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["method"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["method"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["returnUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("returnUrl"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["returnUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Cart_QtyRestriction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketplaceCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketplaceCode"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["variantCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantCode"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantCode"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_CategoryTree_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activeCategoryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("activeCategoryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activeCategoryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["categoryCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categoryCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryCode"] = arg0
	var arg1 *searchdto.CommerceSearchRequest
	if tmp, ok := rawArgs["categorySearchRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categorySearchRequest"))
		arg1, err = ec.unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySearchRequest"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_Search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 searchdto.CommerceSearchRequest
	if tmp, ok := rawArgs["searchRequest"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchRequest"))
		arg0, err = ec.unmarshalNCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketPlaceCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketPlaceCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketPlaceCode"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["variantMarketPlaceCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantMarketPlaceCode"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["variantMarketPlaceCode"] = arg1
	var arg2 []*graphqlproductdto.ChoiceConfiguration
	if tmp, ok := rawArgs["bundleConfiguration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundleConfiguration"))
		arg2, err = ec.unmarshalOCommerce_Product_ChoiceConfigurationInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceConfigurationᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bundleConfiguration"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Commerce_Cart_AdditionalData_customAttributes(ctx context.Context, field graphql.CollectedField, obj *cart.AdditionalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AdditionalData_customAttributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_AdditionalData().CustomAttributes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CustomAttributes)
	fc.Result = res
	return ec.marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AdditionalData_customAttributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AdditionalData",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "get":
				return ec.fieldContext_Commerce_Cart_CustomAttributes_get(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_CustomAttributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AdditionalData_reservedOrderID(ctx context.Context, field graphql.CollectedField, obj *cart.AdditionalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AdditionalData_reservedOrderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedOrderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AdditionalData_reservedOrderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AdditionalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_vat(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_vat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_vat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_firstname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_firstname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_firstname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_lastname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_lastname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_lastname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_middleName(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_middleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_middleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_title(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_salutation(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_salutation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_salutation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_street(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_street(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_street(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_streetNr(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_streetNr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_streetNr(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_additionalAddressLines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalAddressLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_company(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_city(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_postCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_postCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_postCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_state(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_regionCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_regionCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_regionCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_country(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_countryCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_countryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_telephone(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_telephone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_telephone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Address_email(ctx context.Context, field graphql.CollectedField, obj *cart.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Address_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Address_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_vat(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_vat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_vat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_firstname(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_firstname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_firstname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_lastname(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_lastname(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_lastname(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_middleName(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_middleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_middleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_title(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_salutation(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_salutation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_salutation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_street(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_street(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_street(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_streetNr(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_streetNr(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_streetNr(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_addressLine1(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_addressLine1(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_addressLine1(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_addressLine2(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_addressLine2(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_addressLine2(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_company(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_city(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_postCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_postCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_postCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_state(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_regionCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_regionCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_regionCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_country(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_countryCode(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_countryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AddressForm_email(ctx context.Context, field graphql.CollectedField, obj *forms.AddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AddressForm_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AddressForm_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_campaignCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_campaignCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_campaignCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_couponCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_couponCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CouponCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_couponCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_label(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_applied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_applied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_type(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_isItemRelated(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_isItemRelated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsItemRelated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_isItemRelated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount_sortOrder(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscount_sortOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOrder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscount_sortOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscount",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_items(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedDiscount)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscountᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscounts",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "campaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_campaignCode(ctx, field)
			case "couponCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_couponCode(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_label(ctx, field)
			case "applied":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_applied(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_type(ctx, field)
			case "isItemRelated":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_isItemRelated(ctx, field)
			case "sortOrder":
				return ec.fieldContext_Commerce_Cart_AppliedDiscount_sortOrder(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscount", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByCampaignCode(fc.Args["campaignCode"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscounts",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
			case "byCampaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
			case "byType":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscounts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_AppliedDiscounts_byCampaignCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts_byType(ctx context.Context, field graphql.CollectedField, obj *dto.CartAppliedDiscounts) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ByType(fc.Args["filterType"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedDiscounts",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
			case "byCampaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
			case "byType":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscounts", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_AppliedDiscounts_byType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_code(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedGiftCard_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedGiftCard_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedGiftCard_applied(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedGiftCard_applied(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_remaining(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedGiftCard_remaining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remaining, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedGiftCard_remaining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedGiftCard",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard_hasRemaining(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_AppliedGiftCard_hasRemaining(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRemaining(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_AppliedGiftCard_hasRemaining(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_AppliedGiftCard",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_formData(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_BillingAddressForm_formData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(forms.AddressForm)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_BillingAddressForm_formData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_BillingAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vat":
				return ec.fieldContext_Commerce_Cart_AddressForm_vat(ctx, field)
			case "firstname":
				return ec.fieldContext_Commerce_Cart_AddressForm_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_Commerce_Cart_AddressForm_lastname(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Cart_AddressForm_middleName(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_AddressForm_title(ctx, field)
			case "salutation":
				return ec.fieldContext_Commerce_Cart_AddressForm_salutation(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Cart_AddressForm_street(ctx, field)
			case "streetNr":
				return ec.fieldContext_Commerce_Cart_AddressForm_streetNr(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Commerce_Cart_AddressForm_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Commerce_Cart_AddressForm_addressLine2(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Cart_AddressForm_company(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Cart_AddressForm_city(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_postCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Cart_AddressForm_state(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_regionCode(ctx, field)
			case "country":
				return ec.fieldContext_Commerce_Cart_AddressForm_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_countryCode(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Commerce_Cart_AddressForm_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Cart_AddressForm_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AddressForm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_BillingAddressForm_validationInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_BillingAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_BillingAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fieldErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field)
			case "generalErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Form_ValidationInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_processed(ctx context.Context, field graphql.CollectedField, obj *dto.BillingAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_BillingAddressForm_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_BillingAddressForm_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_BillingAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_id(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_entityID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_entityID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_entityID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_billingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_billingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_billingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vat":
				return ec.fieldContext_Commerce_Cart_Address_vat(ctx, field)
			case "firstname":
				return ec.fieldContext_Commerce_Cart_Address_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_Commerce_Cart_Address_lastname(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Cart_Address_middleName(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_Address_title(ctx, field)
			case "salutation":
				return ec.fieldContext_Commerce_Cart_Address_salutation(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Cart_Address_street(ctx, field)
			case "streetNr":
				return ec.fieldContext_Commerce_Cart_Address_streetNr(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Cart_Address_additionalAddressLines(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Cart_Address_company(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Cart_Address_city(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Cart_Address_postCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Cart_Address_state(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Cart_Address_regionCode(ctx, field)
			case "country":
				return ec.fieldContext_Commerce_Cart_Address_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Cart_Address_countryCode(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Cart_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Cart_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_purchaser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_purchaser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purchaser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Person)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Person2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_purchaser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "address":
				return ec.fieldContext_Commerce_Cart_Person_address(ctx, field)
			case "personalDetails":
				return ec.fieldContext_Commerce_Cart_Person_personalDetails(ctx, field)
			case "existingCustomerData":
				return ec.fieldContext_Commerce_Cart_Person_existingCustomerData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Person", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_deliveries(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_deliveries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliveries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Delivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Delivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_deliveries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryInfo":
				return ec.fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx, field)
			case "cartitems":
				return ec.fieldContext_Commerce_Cart_Delivery_cartitems(ctx, field)
			case "shippingItem":
				return ec.fieldContext_Commerce_Cart_Delivery_shippingItem(ctx, field)
			case "subTotalGross":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx, field)
			case "grandTotal":
				return ec.fieldContext_Commerce_Cart_Delivery_grandTotal(ctx, field)
			case "sumTotalTaxAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field)
			case "subTotalNet":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx, field)
			case "nonItemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field)
			case "itemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field)
			case "subTotalGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field)
			case "subTotalNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field)
			case "hasItems":
				return ec.fieldContext_Commerce_Cart_Delivery_hasItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Delivery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_additionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_additionalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.AdditionalData)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_additionalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customAttributes":
				return ec.fieldContext_Commerce_Cart_AdditionalData_customAttributes(ctx, field)
			case "reservedOrderID":
				return ec.fieldContext_Commerce_Cart_AdditionalData_reservedOrderID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AdditionalData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_paymentSelection(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_paymentSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSelection, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.PaymentSelection)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_paymentSelection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongsToAuthenticatedUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_authenticatedUserID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_authenticatedUserID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticatedUserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_authenticatedUserID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_appliedCouponCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_appliedCouponCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedCouponCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.CouponCode)
	fc.Result = res
	return ec.marshalOCommerce_Cart_CouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_appliedCouponCodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Cart_CouponCode_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_CouponCode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_defaultCurrency(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_defaultCurrency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_defaultCurrency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_totalitems(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_totalitems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totalitems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Totalitem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_totalitems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Cart_Totalitem_code(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_Totalitem_title(ctx, field)
			case "price":
				return ec.fieldContext_Commerce_Cart_Totalitem_price(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_Totalitem_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Totalitem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_itemCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_itemCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_itemCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_productCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_productCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductCount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_productCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_isPaymentSelected(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_isPaymentSelected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPaymentSelected(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_isPaymentSelected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_grandTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_grandTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_sumTotalTaxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_subTotalNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_subTotalNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_appliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_appliedGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedGiftCards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedGiftCard)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCardᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_appliedGiftCards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Cart_AppliedGiftCard_code(ctx, field)
			case "applied":
				return ec.fieldContext_Commerce_Cart_AppliedGiftCard_applied(ctx, field)
			case "remaining":
				return ec.fieldContext_Commerce_Cart_AppliedGiftCard_remaining(ctx, field)
			case "hasRemaining":
				return ec.fieldContext_Commerce_Cart_AppliedGiftCard_hasRemaining(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedGiftCard", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getDeliveryByCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_Cart().GetDeliveryByCode(rctx, obj, fc.Args["deliveryCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Delivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getDeliveryByCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryInfo":
				return ec.fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx, field)
			case "cartitems":
				return ec.fieldContext_Commerce_Cart_Delivery_cartitems(ctx, field)
			case "shippingItem":
				return ec.fieldContext_Commerce_Cart_Delivery_shippingItem(ctx, field)
			case "subTotalGross":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx, field)
			case "grandTotal":
				return ec.fieldContext_Commerce_Cart_Delivery_grandTotal(ctx, field)
			case "sumTotalTaxAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field)
			case "subTotalNet":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx, field)
			case "nonItemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field)
			case "itemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field)
			case "subTotalGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field)
			case "subTotalNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field)
			case "hasItems":
				return ec.fieldContext_Commerce_Cart_Delivery_hasItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Delivery", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getDeliveryByCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getDeliveryCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryCodes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getDeliveryCodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getMainShippingEMail(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getMainShippingEMail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetMainShippingEMail(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getMainShippingEMail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_isEmpty(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_isEmpty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsEmpty(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_isEmpty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_hasDeliveryForCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_hasDeliveryForCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasDeliveryForCode(fc.Args["deliveryCode"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_hasDeliveryForCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_hasDeliveryForCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getDeliveryByItemID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getDeliveryByItemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryByItemID(fc.Args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Delivery)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getDeliveryByItemID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryInfo":
				return ec.fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx, field)
			case "cartitems":
				return ec.fieldContext_Commerce_Cart_Delivery_cartitems(ctx, field)
			case "shippingItem":
				return ec.fieldContext_Commerce_Cart_Delivery_shippingItem(ctx, field)
			case "subTotalGross":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx, field)
			case "grandTotal":
				return ec.fieldContext_Commerce_Cart_Delivery_grandTotal(ctx, field)
			case "sumTotalTaxAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field)
			case "subTotalNet":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx, field)
			case "nonItemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field)
			case "itemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field)
			case "subTotalGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field)
			case "subTotalNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field)
			case "hasItems":
				return ec.fieldContext_Commerce_Cart_Delivery_hasItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Delivery", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getDeliveryByItemID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getByItemID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getByItemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByItemID(fc.Args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Item)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getByItemID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_Item_id(ctx, field)
			case "externalReference":
				return ec.fieldContext_Commerce_Cart_Item_externalReference(ctx, field)
			case "marketplaceCode":
				return ec.fieldContext_Commerce_Cart_Item_marketplaceCode(ctx, field)
			case "variantMarketPlaceCode":
				return ec.fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx, field)
			case "productName":
				return ec.fieldContext_Commerce_Cart_Item_productName(ctx, field)
			case "sourceID":
				return ec.fieldContext_Commerce_Cart_Item_sourceID(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Cart_Item_qty(ctx, field)
			case "additionalDataKeys":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx, field)
			case "additionalDataValues":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataValues(ctx, field)
			case "getAdditionalData":
				return ec.fieldContext_Commerce_Cart_Item_getAdditionalData(ctx, field)
			case "hasAdditionalDataKey":
				return ec.fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx, field)
			case "singlePriceGross":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceGross(ctx, field)
			case "singlePriceNet":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceNet(ctx, field)
			case "rowPriceGross":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceGross(ctx, field)
			case "rowPriceNet":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceNet(ctx, field)
			case "appliedDiscounts":
				return ec.fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Item", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getByItemID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getTotalQty(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getTotalQty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTotalQty(fc.Args["marketPlaceCode"].(string), fc.Args["variantCode"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getTotalQty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getTotalQty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getByExternalReference(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getByExternalReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByExternalReference(fc.Args["ref"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Item)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getByExternalReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_Item_id(ctx, field)
			case "externalReference":
				return ec.fieldContext_Commerce_Cart_Item_externalReference(ctx, field)
			case "marketplaceCode":
				return ec.fieldContext_Commerce_Cart_Item_marketplaceCode(ctx, field)
			case "variantMarketPlaceCode":
				return ec.fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx, field)
			case "productName":
				return ec.fieldContext_Commerce_Cart_Item_productName(ctx, field)
			case "sourceID":
				return ec.fieldContext_Commerce_Cart_Item_sourceID(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Cart_Item_qty(ctx, field)
			case "additionalDataKeys":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx, field)
			case "additionalDataValues":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataValues(ctx, field)
			case "getAdditionalData":
				return ec.fieldContext_Commerce_Cart_Item_getAdditionalData(ctx, field)
			case "hasAdditionalDataKey":
				return ec.fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx, field)
			case "singlePriceGross":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceGross(ctx, field)
			case "singlePriceNet":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceNet(ctx, field)
			case "rowPriceGross":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceGross(ctx, field)
			case "rowPriceNet":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceNet(ctx, field)
			case "appliedDiscounts":
				return ec.fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Item", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getByExternalReference_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getVoucherSavings(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getVoucherSavings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetVoucherSavings(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getVoucherSavings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getCartTeaser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getCartTeaser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetCartTeaser(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*cart.Teaser)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Teaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getCartTeaser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "productCount":
				return ec.fieldContext_Commerce_Cart_Teaser_productCount(ctx, field)
			case "ItemCount":
				return ec.fieldContext_Commerce_Cart_Teaser_ItemCount(ctx, field)
			case "DeliveryCodes":
				return ec.fieldContext_Commerce_Cart_Teaser_DeliveryCodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Teaser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_shippingNet(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_shippingNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_shippingNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_shippingNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_shippingNetWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingNetWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_shippingNetWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_shippingGross(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_shippingGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_shippingGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_shippingGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_shippingGrossWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingGrossWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_shippingGrossWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_hasShippingCosts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_hasShippingCosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasShippingCosts(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_hasShippingCosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_allShippingTitles(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_allShippingTitles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllShippingTitles(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_allShippingTitles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalGross(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_subTotalGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_subTotalGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGrossWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNetWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_totalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_totalDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_totalDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_nonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_nonItemRelatedDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonItemRelatedDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_nonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_itemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_itemRelatedDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemRelatedDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_itemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_hasAppliedCouponCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_hasAppliedCouponCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedCouponCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_hasAppliedCouponCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getPaymentReference(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getPaymentReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetPaymentReference(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getPaymentReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_getTotalItemsByType(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_getTotalItemsByType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetTotalItemsByType(fc.Args["typeCode"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Totalitem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_getTotalItemsByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Cart_Totalitem_code(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_Totalitem_title(ctx, field)
			case "price":
				return ec.fieldContext_Commerce_Cart_Totalitem_price(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_Totalitem_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Totalitem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Cart_getTotalItemsByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_grandTotalCharges(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_grandTotalCharges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotalCharges(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Charges)
	fc.Result = res
	return ec.marshalNCommerce_Price_Charges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_grandTotalCharges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Price_Charges_items(ctx, field)
			case "hasType":
				return ec.fieldContext_Commerce_Price_Charges_hasType(ctx, field)
			case "hasChargeQualifier":
				return ec.fieldContext_Commerce_Price_Charges_hasChargeQualifier(ctx, field)
			case "getByChargeQualifierForced":
				return ec.fieldContext_Commerce_Price_Charges_getByChargeQualifierForced(ctx, field)
			case "getByTypeForced":
				return ec.fieldContext_Commerce_Price_Charges_getByTypeForced(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price_Charges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_hasAppliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_hasAppliedGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedGiftCards(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_hasAppliedGiftCards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Cart_hasRemainingGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Cart_hasRemainingGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRemainingGiftCards(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Cart_hasRemainingGiftCards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Cart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_CouponCode_code(ctx context.Context, field graphql.CollectedField, obj *cart.CouponCode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_CouponCode_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_CouponCode_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_CouponCode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_CustomAttributes_get(ctx context.Context, field graphql.CollectedField, obj *dto.CustomAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_CustomAttributes_get(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get(fc.Args["key"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.KeyValue)
	fc.Result = res
	return ec.marshalOCommerce_Cart_KeyValue2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_CustomAttributes_get(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_CustomAttributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Commerce_Cart_KeyValue_key(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Cart_KeyValue_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_KeyValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_CustomAttributes_get_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_cart(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Cart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedCart_cart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedCart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_Cart_id(ctx, field)
			case "entityID":
				return ec.fieldContext_Commerce_Cart_Cart_entityID(ctx, field)
			case "billingAddress":
				return ec.fieldContext_Commerce_Cart_Cart_billingAddress(ctx, field)
			case "purchaser":
				return ec.fieldContext_Commerce_Cart_Cart_purchaser(ctx, field)
			case "deliveries":
				return ec.fieldContext_Commerce_Cart_Cart_deliveries(ctx, field)
			case "additionalData":
				return ec.fieldContext_Commerce_Cart_Cart_additionalData(ctx, field)
			case "paymentSelection":
				return ec.fieldContext_Commerce_Cart_Cart_paymentSelection(ctx, field)
			case "belongsToAuthenticatedUser":
				return ec.fieldContext_Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx, field)
			case "authenticatedUserID":
				return ec.fieldContext_Commerce_Cart_Cart_authenticatedUserID(ctx, field)
			case "appliedCouponCodes":
				return ec.fieldContext_Commerce_Cart_Cart_appliedCouponCodes(ctx, field)
			case "defaultCurrency":
				return ec.fieldContext_Commerce_Cart_Cart_defaultCurrency(ctx, field)
			case "totalitems":
				return ec.fieldContext_Commerce_Cart_Cart_totalitems(ctx, field)
			case "itemCount":
				return ec.fieldContext_Commerce_Cart_Cart_itemCount(ctx, field)
			case "productCount":
				return ec.fieldContext_Commerce_Cart_Cart_productCount(ctx, field)
			case "isPaymentSelected":
				return ec.fieldContext_Commerce_Cart_Cart_isPaymentSelected(ctx, field)
			case "grandTotal":
				return ec.fieldContext_Commerce_Cart_Cart_grandTotal(ctx, field)
			case "sumTotalTaxAmount":
				return ec.fieldContext_Commerce_Cart_Cart_sumTotalTaxAmount(ctx, field)
			case "subTotalNet":
				return ec.fieldContext_Commerce_Cart_Cart_subTotalNet(ctx, field)
			case "appliedGiftCards":
				return ec.fieldContext_Commerce_Cart_Cart_appliedGiftCards(ctx, field)
			case "getDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_Cart_getDeliveryByCode(ctx, field)
			case "getDeliveryCodes":
				return ec.fieldContext_Commerce_Cart_Cart_getDeliveryCodes(ctx, field)
			case "getMainShippingEMail":
				return ec.fieldContext_Commerce_Cart_Cart_getMainShippingEMail(ctx, field)
			case "isEmpty":
				return ec.fieldContext_Commerce_Cart_Cart_isEmpty(ctx, field)
			case "hasDeliveryForCode":
				return ec.fieldContext_Commerce_Cart_Cart_hasDeliveryForCode(ctx, field)
			case "getDeliveryByItemID":
				return ec.fieldContext_Commerce_Cart_Cart_getDeliveryByItemID(ctx, field)
			case "getByItemID":
				return ec.fieldContext_Commerce_Cart_Cart_getByItemID(ctx, field)
			case "getTotalQty":
				return ec.fieldContext_Commerce_Cart_Cart_getTotalQty(ctx, field)
			case "getByExternalReference":
				return ec.fieldContext_Commerce_Cart_Cart_getByExternalReference(ctx, field)
			case "getVoucherSavings":
				return ec.fieldContext_Commerce_Cart_Cart_getVoucherSavings(ctx, field)
			case "getCartTeaser":
				return ec.fieldContext_Commerce_Cart_Cart_getCartTeaser(ctx, field)
			case "shippingNet":
				return ec.fieldContext_Commerce_Cart_Cart_shippingNet(ctx, field)
			case "shippingNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Cart_shippingNetWithDiscounts(ctx, field)
			case "shippingGross":
				return ec.fieldContext_Commerce_Cart_Cart_shippingGross(ctx, field)
			case "shippingGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Cart_shippingGrossWithDiscounts(ctx, field)
			case "hasShippingCosts":
				return ec.fieldContext_Commerce_Cart_Cart_hasShippingCosts(ctx, field)
			case "allShippingTitles":
				return ec.fieldContext_Commerce_Cart_Cart_allShippingTitles(ctx, field)
			case "subTotalGross":
				return ec.fieldContext_Commerce_Cart_Cart_subTotalGross(ctx, field)
			case "subTotalGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx, field)
			case "subTotalNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Cart_totalDiscountAmount(ctx, field)
			case "nonItemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Cart_nonItemRelatedDiscountAmount(ctx, field)
			case "itemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Cart_itemRelatedDiscountAmount(ctx, field)
			case "hasAppliedCouponCode":
				return ec.fieldContext_Commerce_Cart_Cart_hasAppliedCouponCode(ctx, field)
			case "getPaymentReference":
				return ec.fieldContext_Commerce_Cart_Cart_getPaymentReference(ctx, field)
			case "getTotalItemsByType":
				return ec.fieldContext_Commerce_Cart_Cart_getTotalItemsByType(ctx, field)
			case "grandTotalCharges":
				return ec.fieldContext_Commerce_Cart_Cart_grandTotalCharges(ctx, field)
			case "hasAppliedGiftCards":
				return ec.fieldContext_Commerce_Cart_Cart_hasAppliedGiftCards(ctx, field)
			case "hasRemainingGiftCards":
				return ec.fieldContext_Commerce_Cart_Cart_hasRemainingGiftCards(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Cart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedDeliveries(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.DecoratedDelivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDeliveryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedCart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "delivery":
				return ec.fieldContext_Commerce_Cart_DecoratedDelivery_delivery(ctx, field)
			case "decoratedItems":
				return ec.fieldContext_Commerce_Cart_DecoratedDelivery_decoratedItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedDelivery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDecoratedDeliveryByCode(fc.Args["deliveryCode"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedDelivery)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedCart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "delivery":
				return ec.fieldContext_Commerce_Cart_DecoratedDelivery_delivery(ctx, field)
			case "decoratedItems":
				return ec.fieldContext_Commerce_Cart_DecoratedDelivery_decoratedItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedDelivery", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAllPaymentRequiredItems(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.PricedItems)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PricedItems2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedItems(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedCart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cartItems":
				return ec.fieldContext_Commerce_Cart_PricedItems_cartItems(ctx, field)
			case "shippingItems":
				return ec.fieldContext_Commerce_Cart_PricedItems_shippingItems(ctx, field)
			case "totalItems":
				return ec.fieldContext_Commerce_Cart_PricedItems_totalItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PricedItems", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedCart_cartSummary(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartSummary(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.CartSummary)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Summary2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartSummary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedCart",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "discounts":
				return ec.fieldContext_Commerce_Cart_Summary_discounts(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Summary_totalDiscountAmount(ctx, field)
			case "totalGiftCardAmount":
				return ec.fieldContext_Commerce_Cart_Summary_totalGiftCardAmount(ctx, field)
			case "grandTotalWithGiftCards":
				return ec.fieldContext_Commerce_Cart_Summary_grandTotalWithGiftCards(ctx, field)
			case "sumTotalDiscountWithGiftCardsAmount":
				return ec.fieldContext_Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx, field)
			case "hasAppliedDiscounts":
				return ec.fieldContext_Commerce_Cart_Summary_hasAppliedDiscounts(ctx, field)
			case "sumTaxes":
				return ec.fieldContext_Commerce_Cart_Summary_sumTaxes(ctx, field)
			case "sumPaymentSelectionCartSplitValueAmountByMethods":
				return ec.fieldContext_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Summary", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery_delivery(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedDelivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedDelivery_delivery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Delivery)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedDelivery_delivery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedDelivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryInfo":
				return ec.fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx, field)
			case "cartitems":
				return ec.fieldContext_Commerce_Cart_Delivery_cartitems(ctx, field)
			case "shippingItem":
				return ec.fieldContext_Commerce_Cart_Delivery_shippingItem(ctx, field)
			case "subTotalGross":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx, field)
			case "grandTotal":
				return ec.fieldContext_Commerce_Cart_Delivery_grandTotal(ctx, field)
			case "sumTotalTaxAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field)
			case "subTotalNet":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx, field)
			case "totalDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx, field)
			case "nonItemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field)
			case "itemRelatedDiscountAmount":
				return ec.fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field)
			case "subTotalGrossWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field)
			case "subTotalNetWithDiscounts":
				return ec.fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field)
			case "hasItems":
				return ec.fieldContext_Commerce_Cart_Delivery_hasItems(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Delivery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery_decoratedItems(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedDelivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedDelivery_decoratedItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedItems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.DecoratedCartItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedDelivery_decoratedItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedDelivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "item":
				return ec.fieldContext_Commerce_Cart_DecoratedItem_item(ctx, field)
			case "product":
				return ec.fieldContext_Commerce_Cart_DecoratedItem_product(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedItem_item(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCartItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedItem_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.Item)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedItem_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_Item_id(ctx, field)
			case "externalReference":
				return ec.fieldContext_Commerce_Cart_Item_externalReference(ctx, field)
			case "marketplaceCode":
				return ec.fieldContext_Commerce_Cart_Item_marketplaceCode(ctx, field)
			case "variantMarketPlaceCode":
				return ec.fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx, field)
			case "productName":
				return ec.fieldContext_Commerce_Cart_Item_productName(ctx, field)
			case "sourceID":
				return ec.fieldContext_Commerce_Cart_Item_sourceID(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Cart_Item_qty(ctx, field)
			case "additionalDataKeys":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx, field)
			case "additionalDataValues":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataValues(ctx, field)
			case "getAdditionalData":
				return ec.fieldContext_Commerce_Cart_Item_getAdditionalData(ctx, field)
			case "hasAdditionalDataKey":
				return ec.fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx, field)
			case "singlePriceGross":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceGross(ctx, field)
			case "singlePriceNet":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceNet(ctx, field)
			case "rowPriceGross":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceGross(ctx, field)
			case "rowPriceNet":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceNet(ctx, field)
			case "appliedDiscounts":
				return ec.fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Item", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DecoratedItem_product(ctx context.Context, field graphql.CollectedField, obj *dto.DecoratedCartItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DecoratedItem_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DecoratedItem_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DecoratedItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_gateway(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DefaultPaymentSelection_gateway(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DefaultPaymentSelection_gateway(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DefaultPaymentSelection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_totalValue(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DefaultPaymentSelection_totalValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalValue(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DefaultPaymentSelection_totalValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DefaultPaymentSelection",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_DefaultPaymentSelection().CartSplit(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.PaymentSelectionSplit)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PaymentSelection_Split2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DefaultPaymentSelection",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "qualifier":
				return ec.fieldContext_Commerce_Cart_PaymentSelection_Split_qualifier(ctx, field)
			case "charge":
				return ec.fieldContext_Commerce_Cart_PaymentSelection_Split_charge(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PaymentSelection_Split", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_deliveryInfo(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_deliveryInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_code(ctx, field)
			case "workflow":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_workflow(ctx, field)
			case "method":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_method(ctx, field)
			case "carrier":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_carrier(ctx, field)
			case "deliveryLocation":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_deliveryLocation(ctx, field)
			case "desiredTime":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_desiredTime(ctx, field)
			case "additionalData":
				return ec.fieldContext_Commerce_Cart_DeliveryInfo_additionalData(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DeliveryInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_cartitems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_cartitems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cartitems, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Item)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Item2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_cartitems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_Item_id(ctx, field)
			case "externalReference":
				return ec.fieldContext_Commerce_Cart_Item_externalReference(ctx, field)
			case "marketplaceCode":
				return ec.fieldContext_Commerce_Cart_Item_marketplaceCode(ctx, field)
			case "variantMarketPlaceCode":
				return ec.fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx, field)
			case "productName":
				return ec.fieldContext_Commerce_Cart_Item_productName(ctx, field)
			case "sourceID":
				return ec.fieldContext_Commerce_Cart_Item_sourceID(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Cart_Item_qty(ctx, field)
			case "additionalDataKeys":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx, field)
			case "additionalDataValues":
				return ec.fieldContext_Commerce_Cart_Item_additionalDataValues(ctx, field)
			case "getAdditionalData":
				return ec.fieldContext_Commerce_Cart_Item_getAdditionalData(ctx, field)
			case "hasAdditionalDataKey":
				return ec.fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx, field)
			case "singlePriceGross":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceGross(ctx, field)
			case "singlePriceNet":
				return ec.fieldContext_Commerce_Cart_Item_singlePriceNet(ctx, field)
			case "rowPriceGross":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceGross(ctx, field)
			case "rowPriceNet":
				return ec.fieldContext_Commerce_Cart_Item_rowPriceNet(ctx, field)
			case "appliedDiscounts":
				return ec.fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Item", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_shippingItem(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_shippingItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingItem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.ShippingItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_shippingItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_Commerce_Cart_ShippingItem_title(ctx, field)
			case "priceNet":
				return ec.fieldContext_Commerce_Cart_ShippingItem_priceNet(ctx, field)
			case "taxAmount":
				return ec.fieldContext_Commerce_Cart_ShippingItem_taxAmount(ctx, field)
			case "priceGross":
				return ec.fieldContext_Commerce_Cart_ShippingItem_priceGross(ctx, field)
			case "appliedDiscounts":
				return ec.fieldContext_Commerce_Cart_ShippingItem_appliedDiscounts(ctx, field)
			case "totalWithDiscountInclTax":
				return ec.fieldContext_Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx, field)
			case "tax":
				return ec.fieldContext_Commerce_Cart_ShippingItem_tax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_ShippingItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalGross(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_subTotalGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_grandTotal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_grandTotal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_subTotalNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_totalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_totalDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NonItemRelatedDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemRelatedDiscountAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGrossWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNetWithDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Delivery_hasItems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Delivery_hasItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasItems(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Delivery_hasItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Delivery",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_formData(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_formData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(forms.AddressForm)
	fc.Result = res
	return ec.marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_formData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vat":
				return ec.fieldContext_Commerce_Cart_AddressForm_vat(ctx, field)
			case "firstname":
				return ec.fieldContext_Commerce_Cart_AddressForm_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_Commerce_Cart_AddressForm_lastname(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Cart_AddressForm_middleName(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_AddressForm_title(ctx, field)
			case "salutation":
				return ec.fieldContext_Commerce_Cart_AddressForm_salutation(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Cart_AddressForm_street(ctx, field)
			case "streetNr":
				return ec.fieldContext_Commerce_Cart_AddressForm_streetNr(ctx, field)
			case "addressLine1":
				return ec.fieldContext_Commerce_Cart_AddressForm_addressLine1(ctx, field)
			case "addressLine2":
				return ec.fieldContext_Commerce_Cart_AddressForm_addressLine2(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Cart_AddressForm_company(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Cart_AddressForm_city(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_postCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Cart_AddressForm_state(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_regionCode(ctx, field)
			case "country":
				return ec.fieldContext_Commerce_Cart_AddressForm_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Cart_AddressForm_countryCode(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Commerce_Cart_AddressForm_phoneNumber(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Cart_AddressForm_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AddressForm", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseBillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_method(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_carrier(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_carrier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_carrier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_desiredTime(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_desiredTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_desiredTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_validationInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fieldErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field)
			case "generalErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Form_ValidationInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm_processed(ctx context.Context, field graphql.CollectedField, obj *dto.DeliveryAddressForm) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryAddressForm_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryAddressForm_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryAddressForm",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_workflow(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_workflow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workflow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_workflow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_method(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_carrier(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_carrier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_carrier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_deliveryLocation(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_deliveryLocation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryLocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryLocation)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_deliveryLocation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Cart_DeliveryLocation_type(ctx, field)
			case "address":
				return ec.fieldContext_Commerce_Cart_DeliveryLocation_address(ctx, field)
			case "useBillingAddress":
				return ec.fieldContext_Commerce_Cart_DeliveryLocation_useBillingAddress(ctx, field)
			case "code":
				return ec.fieldContext_Commerce_Cart_DeliveryLocation_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DeliveryLocation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_desiredTime(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_desiredTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_desiredTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo_additionalData(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryInfo_additionalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_DeliveryInfo().AdditionalData(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CustomAttributes)
	fc.Result = res
	return ec.marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryInfo_additionalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "get":
				return ec.fieldContext_Commerce_Cart_CustomAttributes_get(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_CustomAttributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_type(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryLocation_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryLocation_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_address(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryLocation_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryLocation_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vat":
				return ec.fieldContext_Commerce_Cart_Address_vat(ctx, field)
			case "firstname":
				return ec.fieldContext_Commerce_Cart_Address_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_Commerce_Cart_Address_lastname(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Cart_Address_middleName(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_Address_title(ctx, field)
			case "salutation":
				return ec.fieldContext_Commerce_Cart_Address_salutation(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Cart_Address_street(ctx, field)
			case "streetNr":
				return ec.fieldContext_Commerce_Cart_Address_streetNr(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Cart_Address_additionalAddressLines(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Cart_Address_company(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Cart_Address_city(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Cart_Address_postCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Cart_Address_state(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Cart_Address_regionCode(ctx, field)
			case "country":
				return ec.fieldContext_Commerce_Cart_Address_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Cart_Address_countryCode(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Cart_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Cart_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_useBillingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryLocation_useBillingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseBillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryLocation_useBillingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_DeliveryLocation_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_DeliveryLocation_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_DeliveryLocation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ExistingCustomerData_id(ctx context.Context, field graphql.CollectedField, obj *cart.ExistingCustomerData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ExistingCustomerData_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ExistingCustomerData_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ExistingCustomerData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_Error_messageKey(ctx context.Context, field graphql.CollectedField, obj *domain4.Error) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_Error_messageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_Error_messageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_Error",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_Error_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *domain4.Error) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_Error_defaultLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_Error_defaultLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_Error",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_messageKey(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_FieldError_messageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_FieldError_messageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_FieldError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_FieldError_defaultLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_FieldError_defaultLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_FieldError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_fieldName(ctx context.Context, field graphql.CollectedField, obj *dto.FieldError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_FieldError_fieldName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_FieldError_fieldName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_FieldError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx context.Context, field graphql.CollectedField, obj *dto.ValidationInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.FieldError)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_ValidationInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "messageKey":
				return ec.fieldContext_Commerce_Cart_Form_FieldError_messageKey(ctx, field)
			case "defaultLabel":
				return ec.fieldContext_Commerce_Cart_Form_FieldError_defaultLabel(ctx, field)
			case "fieldName":
				return ec.fieldContext_Commerce_Cart_Form_FieldError_fieldName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Form_FieldError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_generalErrors(ctx context.Context, field graphql.CollectedField, obj *dto.ValidationInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralErrors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain4.Error)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Form_ValidationInfo_generalErrors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Form_ValidationInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "messageKey":
				return ec.fieldContext_Commerce_Cart_Form_Error_messageKey(ctx, field)
			case "defaultLabel":
				return ec.fieldContext_Commerce_Cart_Form_Error_defaultLabel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Form_Error", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_id(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_externalReference(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_externalReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_externalReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_marketplaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_marketplaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketplaceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_marketplaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantMarketPlaceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_productName(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_productName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_productName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_sourceID(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_sourceID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_sourceID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_qty(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_qty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_qty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_additionalDataKeys(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataKeys(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_additionalDataKeys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_additionalDataValues(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_additionalDataValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataValues(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_additionalDataValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_getAdditionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_getAdditionalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAdditionalData(fc.Args["key"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_getAdditionalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Item_getAdditionalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_hasAdditionalDataKey(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAdditionalDataKey(fc.Args["key"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_hasAdditionalDataKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Item_hasAdditionalDataKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_singlePriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_singlePriceGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_singlePriceGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_singlePriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_singlePriceNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_singlePriceNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_rowPriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_rowPriceGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_rowPriceGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_rowPriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_rowPriceNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_rowPriceNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Item_appliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Item) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_Item().AppliedDiscounts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Item_appliedDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Item",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
			case "byCampaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
			case "byType":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscounts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ItemValidationError_itemID(ctx context.Context, field graphql.CollectedField, obj *validation.ItemValidationError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ItemValidationError_itemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ItemValidationError_itemID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ItemValidationError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ItemValidationError_errorMessageKey(ctx context.Context, field graphql.CollectedField, obj *validation.ItemValidationError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ItemValidationError_errorMessageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorMessageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ItemValidationError_errorMessageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ItemValidationError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_KeyValue_key(ctx context.Context, field graphql.CollectedField, obj *dto.KeyValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_KeyValue_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_KeyValue_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_KeyValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_KeyValue_value(ctx context.Context, field graphql.CollectedField, obj *dto.KeyValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_KeyValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_KeyValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_KeyValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split_qualifier(ctx context.Context, field graphql.CollectedField, obj *dto.PaymentSelectionSplit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PaymentSelection_Split_qualifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qualifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.SplitQualifier)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PaymentSelection_SplitQualifier2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐSplitQualifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PaymentSelection_Split_qualifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PaymentSelection_Split",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx, field)
			case "method":
				return ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PaymentSelection_SplitQualifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split_charge(ctx context.Context, field graphql.CollectedField, obj *dto.PaymentSelectionSplit) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PaymentSelection_Split_charge(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Charge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PaymentSelection_Split_charge(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PaymentSelection_Split",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Price_Charge_price(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Price_Charge_value(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Price_Charge_type(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Price_Charge_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price_Charge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx context.Context, field graphql.CollectedField, obj *cart.SplitQualifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChargeReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PaymentSelection_SplitQualifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Person_address(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Person_address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Person_address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "vat":
				return ec.fieldContext_Commerce_Cart_Address_vat(ctx, field)
			case "firstname":
				return ec.fieldContext_Commerce_Cart_Address_firstname(ctx, field)
			case "lastname":
				return ec.fieldContext_Commerce_Cart_Address_lastname(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Cart_Address_middleName(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Cart_Address_title(ctx, field)
			case "salutation":
				return ec.fieldContext_Commerce_Cart_Address_salutation(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Cart_Address_street(ctx, field)
			case "streetNr":
				return ec.fieldContext_Commerce_Cart_Address_streetNr(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Cart_Address_additionalAddressLines(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Cart_Address_company(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Cart_Address_city(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Cart_Address_postCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Cart_Address_state(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Cart_Address_regionCode(ctx, field)
			case "country":
				return ec.fieldContext_Commerce_Cart_Address_country(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Cart_Address_countryCode(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Cart_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Cart_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Person_personalDetails(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Person_personalDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.PersonalDetails)
	fc.Result = res
	return ec.marshalNCommerce_Cart_PersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Person_personalDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dateOfBirth":
				return ec.fieldContext_Commerce_Cart_PersonalDetails_dateOfBirth(ctx, field)
			case "passportCountry":
				return ec.fieldContext_Commerce_Cart_PersonalDetails_passportCountry(ctx, field)
			case "passportNumber":
				return ec.fieldContext_Commerce_Cart_PersonalDetails_passportNumber(ctx, field)
			case "nationality":
				return ec.fieldContext_Commerce_Cart_PersonalDetails_nationality(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PersonalDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Person_existingCustomerData(ctx context.Context, field graphql.CollectedField, obj *cart.Person) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Person_existingCustomerData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingCustomerData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.ExistingCustomerData)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Person_existingCustomerData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Person",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Cart_ExistingCustomerData_id(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_ExistingCustomerData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PersonalDetails_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PersonalDetails_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PersonalDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_passportCountry(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PersonalDetails_passportCountry(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PersonalDetails_passportCountry(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PersonalDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_passportNumber(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PersonalDetails_passportNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PersonalDetails_passportNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PersonalDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PersonalDetails_nationality(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PersonalDetails_nationality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PersonalDetails_nationality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PersonalDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_orderNumber(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PlacedOrderInfo_orderNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PlacedOrderInfo_orderNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PlacedOrderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PlacedOrderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedCartItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedCartItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedCartItem_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedCartItem_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedCartItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedCartItem_itemID(ctx context.Context, field graphql.CollectedField, obj *dto.PricedCartItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedCartItem_itemID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedCartItem_itemID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedCartItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedItems_cartItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedItems_cartItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CartItems(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedCartItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedCartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedItems_cartItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedItems",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_PricedCartItem_amount(ctx, field)
			case "itemID":
				return ec.fieldContext_Commerce_Cart_PricedCartItem_itemID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PricedCartItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedItems_shippingItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedItems_shippingItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingItems(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedShippingItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedShippingItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedItems_shippingItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedItems",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_PricedShippingItem_amount(ctx, field)
			case "deliveryInfoCode":
				return ec.fieldContext_Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PricedShippingItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedItems_totalItems(ctx context.Context, field graphql.CollectedField, obj *dto.PricedItems) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedItems_totalItems(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalItems(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.PricedTotalItem)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PricedTotalItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedItems_totalItems(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedItems",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_PricedTotalItem_amount(ctx, field)
			case "code":
				return ec.fieldContext_Commerce_Cart_PricedTotalItem_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PricedTotalItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedShippingItem_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedShippingItem_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx context.Context, field graphql.CollectedField, obj *dto.PricedShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryInfoCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem_amount(ctx context.Context, field graphql.CollectedField, obj *dto.PricedTotalItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedTotalItem_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedTotalItem_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedTotalItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem_code(ctx context.Context, field graphql.CollectedField, obj *dto.PricedTotalItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_PricedTotalItem_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_PricedTotalItem_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_PricedTotalItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_isRestricted(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_QtyRestrictionResult_isRestricted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRestricted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_QtyRestrictionResult_isRestricted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_QtyRestrictionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_QtyRestrictionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RemainingDifference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_QtyRestrictionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult_restrictorName(ctx context.Context, field graphql.CollectedField, obj *validation.RestrictionResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_QtyRestrictionResult_restrictorName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictorName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_QtyRestrictionResult_restrictorName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_QtyRestrictionResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto.SelectedPaymentResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_SelectedPaymentResult_validationInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ValidationInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_SelectedPaymentResult_validationInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_SelectedPaymentResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "fieldErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field)
			case "generalErrors":
				return ec.fieldContext_Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Form_ValidationInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_processed(ctx context.Context, field graphql.CollectedField, obj *dto.SelectedPaymentResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_SelectedPaymentResult_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_SelectedPaymentResult_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_SelectedPaymentResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_title(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_priceNet(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_priceNet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceNet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_priceNet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_taxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_taxAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_taxAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_priceGross(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_priceGross(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceGross, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_priceGross(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_appliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_appliedDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Cart_ShippingItem().AppliedDiscounts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_appliedDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
			case "byCampaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
			case "byType":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscounts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalWithDiscountInclTax(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ShippingItem_tax(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ShippingItem_tax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tax(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ShippingItem_tax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ShippingItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_Tax_amount(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_Tax_type(ctx, field)
			case "rate":
				return ec.fieldContext_Commerce_Cart_Tax_rate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Tax", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_discounts(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_discounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounts(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.CartAppliedDiscounts)
	fc.Result = res
	return ec.marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_discounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_items(ctx, field)
			case "byCampaignCode":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field)
			case "byType":
				return ec.fieldContext_Commerce_Cart_AppliedDiscounts_byType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_AppliedDiscounts", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_totalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_totalDiscountAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDiscountAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_totalDiscountAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_totalGiftCardAmount(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_totalGiftCardAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalGiftCardAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_totalGiftCardAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_grandTotalWithGiftCards(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_grandTotalWithGiftCards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotalWithGiftCards(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_grandTotalWithGiftCards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalDiscountWithGiftCardsAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_hasAppliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_hasAppliedDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAppliedDiscounts(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_hasAppliedDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_sumTaxes(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_sumTaxes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTaxes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Taxes)
	fc.Result = res
	return ec.marshalOCommerce_Cart_Taxes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐTaxes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_sumTaxes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "items":
				return ec.fieldContext_Commerce_Cart_Taxes_items(ctx, field)
			case "getByType":
				return ec.fieldContext_Commerce_Cart_Taxes_getByType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Taxes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx context.Context, field graphql.CollectedField, obj *dto.CartSummary) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumPaymentSelectionCartSplitValueAmountByMethods(fc.Args["methods"].([]string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Summary",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Tax_amount(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Tax_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Tax_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Tax_type(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Tax_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Tax_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Tax_rate(ctx context.Context, field graphql.CollectedField, obj *cart.Tax) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Tax_rate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*big.Float)
	fc.Result = res
	return ec.marshalOFloat2ᚖmathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Tax_rate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Tax",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Taxes_items(ctx context.Context, field graphql.CollectedField, obj *dto.Taxes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Taxes_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Taxes_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Taxes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_Tax_amount(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_Tax_type(ctx, field)
			case "rate":
				return ec.fieldContext_Commerce_Cart_Tax_rate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Tax", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Taxes_getByType(ctx context.Context, field graphql.CollectedField, obj *dto.Taxes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Taxes_getByType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByType(fc.Args["taxType"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Tax)
	fc.Result = res
	return ec.marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Taxes_getByType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Taxes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Cart_Tax_amount(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Cart_Tax_type(ctx, field)
			case "rate":
				return ec.fieldContext_Commerce_Cart_Tax_rate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_Tax", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Cart_Taxes_getByType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Teaser_productCount(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Teaser_productCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Teaser_productCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Teaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Teaser_ItemCount(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Teaser_ItemCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Teaser_ItemCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Teaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Teaser_DeliveryCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Teaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Teaser_DeliveryCodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Teaser_DeliveryCodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Teaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Totalitem_code(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Totalitem_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Totalitem_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Totalitem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Totalitem_title(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Totalitem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Totalitem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Totalitem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Totalitem_price(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Totalitem_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Totalitem_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Totalitem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_Totalitem_type(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_Totalitem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_Totalitem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_Totalitem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx context.Context, field graphql.CollectedField, obj *dto.UpdateShippingOptionsResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_UpdateDeliveryShippingOptions_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_hasCommonError(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ValidationResult_hasCommonError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasCommonError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ValidationResult_hasCommonError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ValidationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonErrorMessageKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ValidationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_itemResults(ctx context.Context, field graphql.CollectedField, obj *validation.Result) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Cart_ValidationResult_itemResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]validation.ItemValidationError)
	fc.Result = res
	return ec.marshalOCommerce_Cart_ItemValidationError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationErrorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Cart_ValidationResult_itemResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Cart_ValidationResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "itemID":
				return ec.fieldContext_Commerce_Cart_ItemValidationError_itemID(ctx, field)
			case "errorMessageKey":
				return ec.fieldContext_Commerce_Cart_ItemValidationError_errorMessageKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_ItemValidationError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_code(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_name(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_path(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_active(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_promoted(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_promoted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promoted(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_promoted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryData_attributes(ctx context.Context, field graphql.CollectedField, obj *domain3.CategoryData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryData_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryData_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryData",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "get":
				return ec.fieldContext_Commerce_Category_Attributes_get(ctx, field)
			case "has":
				return ec.fieldContext_Commerce_Category_Attributes_has(ctx, field)
			case "all":
				return ec.fieldContext_Commerce_Category_Attributes_all(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Category_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_code(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_name(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_path(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_active(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_subTrees(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_subTrees(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTrees(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.Tree)
	fc.Result = res
	return ec.marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_subTrees(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_hasChilds(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_hasChilds(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChilds(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_hasChilds(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_CategoryTree_documentCount(ctx context.Context, field graphql.CollectedField, obj *domain3.TreeData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_CategoryTree_documentCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentCount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_CategoryTree_documentCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_CategoryTree",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attribute_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attribute_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attribute_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attribute_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attribute_values(ctx context.Context, field graphql.CollectedField, obj *domain3.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attribute_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.AttributeValue)
	fc.Result = res
	return ec.marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attribute_values(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Commerce_Category_AttributeValue_value(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Category_AttributeValue_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Category_AttributeValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_AttributeValue_value(ctx context.Context, field graphql.CollectedField, obj *domain3.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_AttributeValue_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_AttributeValue_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_AttributeValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_AttributeValue_label(ctx context.Context, field graphql.CollectedField, obj *domain3.AttributeValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_AttributeValue_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_AttributeValue_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_AttributeValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attributes_get(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attributes_get(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get(fc.Args["code"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain3.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attributes_get(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Category_Attribute_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Category_Attribute_label(ctx, field)
			case "values":
				return ec.fieldContext_Commerce_Category_Attribute_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Category_Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Category_Attributes_get_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attributes_has(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attributes_has(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Has(fc.Args["code"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attributes_has(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Category_Attributes_has_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_Attributes_all(ctx context.Context, field graphql.CollectedField, obj domain3.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_Attributes_all(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_Attributes_all(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Category_Attribute_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Category_Attribute_label(ctx, field)
			case "values":
				return ec.fieldContext_Commerce_Category_Attribute_values(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Category_Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_SearchResult_category(ctx context.Context, field graphql.CollectedField, obj *categorydto.CategorySearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_SearchResult_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Category)
	fc.Result = res
	return ec.marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_SearchResult_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_SearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Category_SearchResult_productSearchResult(ctx context.Context, field graphql.CollectedField, obj *categorydto.CategorySearchResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Category_SearchResult_productSearchResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductSearchResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.SearchResultDTO)
	fc.Result = res
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Category_SearchResult_productSearchResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Category_SearchResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "products":
				return ec.fieldContext_Commerce_Product_SearchResult_products(ctx, field)
			case "facets":
				return ec.fieldContext_Commerce_Product_SearchResult_facets(ctx, field)
			case "suggestions":
				return ec.fieldContext_Commerce_Product_SearchResult_suggestions(ctx, field)
			case "searchMeta":
				return ec.fieldContext_Commerce_Product_SearchResult_searchMeta(ctx, field)
			case "hasSelectedFacet":
				return ec.fieldContext_Commerce_Product_SearchResult_hasSelectedFacet(ctx, field)
			case "promotion":
				return ec.fieldContext_Commerce_Product_SearchResult_promotion(ctx, field)
			case "actions":
				return ec.fieldContext_Commerce_Product_SearchResult_actions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_SearchResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_cart(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderContext_cart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderContext_cart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_orderInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto1.PlacedOrderInfos)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderContext_orderInfos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "paymentInfos":
				return ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx, field)
			case "placedOrderInfos":
				return ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlacedOrderInfos", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_state(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderContext_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto1.State)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderContext_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_uuid(ctx context.Context, field graphql.CollectedField, obj *dto1.PlaceOrderContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderContext_uuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderContext_uuid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx context.Context, field graphql.CollectedField, obj *application.PlaceOrderPaymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx context.Context, field graphql.CollectedField, obj *dto1.FormParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_Form_Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx context.Context, field graphql.CollectedField, obj *dto1.FormParameter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_Form_Parameter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MethodData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MerchantValidationURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx context.Context, field graphql.CollectedField, obj *dto1.PaymentRequestAPI) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompleteURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_PaymentRequestAPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Failed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Failed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx context.Context, field graphql.CollectedField, obj *dto1.Failed) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(process.FailedReason)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_State_FailedReason2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐFailedReason(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Failed",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField, obj *process.CanceledByCustomerReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx context.Context, field graphql.CollectedField, obj *process.CartValidationErrorReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx context.Context, field graphql.CollectedField, obj *process.CartValidationErrorReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(validation.Result)
	fc.Result = res
	return ec.marshalNCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasCommonError":
				return ec.fieldContext_Commerce_Cart_ValidationResult_hasCommonError(ctx, field)
			case "commonErrorMessageKey":
				return ec.fieldContext_Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field)
			case "itemResults":
				return ec.fieldContext_Commerce_Cart_ValidationResult_itemResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_ValidationResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx context.Context, field graphql.CollectedField, obj *process.ErrorOccurredReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_Error",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField, obj *process.PaymentCanceledByCustomerReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx context.Context, field graphql.CollectedField, obj *process.PaymentErrorOccurredReason) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx context.Context, field graphql.CollectedField, obj *dto1.PostRedirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto1.FormParameter)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlaceOrderState_Form_Parameter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_PostRedirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderState_Form_Parameter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Redirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Redirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.Redirect) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Redirect",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowHTML) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowHTML",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowHTML) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowHTML",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowIframe) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowIframe",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowIframe) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowIframe",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx context.Context, field graphql.CollectedField, obj *dto1.ShowWalletPayment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentRequestAPI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto1.PaymentRequestAPI)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderState_PaymentRequestAPI2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPaymentRequestAPI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "methodData":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx, field)
			case "details":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx, field)
			case "options":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx, field)
			case "merchantValidationURL":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx, field)
			case "completeURL":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderState_PaymentRequestAPI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Success) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Success_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Success_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Success",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_name(ctx context.Context, field graphql.CollectedField, obj *dto1.TriggerClientSDK) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_URL(ctx context.Context, field graphql.CollectedField, obj *dto1.TriggerClientSDK) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_URL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_data(ctx context.Context, field graphql.CollectedField, obj *dto1.TriggerClientSDK) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx context.Context, field graphql.CollectedField, obj *dto1.Wait) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_Wait",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx context.Context, field graphql.CollectedField, obj *dto1.WaitForCustomer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlaceOrderState_State_WaitForCustomer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]application.PlaceOrderPaymentInfo)
	fc.Result = res
	return ec.marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlacedOrderInfos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gateway":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx, field)
			case "paymentProvider":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx, field)
			case "method":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx, field)
			case "amount":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderPaymentInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacedOrderInfos, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]placeorder.PlacedOrderInfo)
	fc.Result = res
	return ec.marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlacedOrderInfos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "orderNumber":
				return ec.fieldContext_Commerce_Cart_PlacedOrderInfo_orderNumber(ctx, field)
			case "deliveryCode":
				return ec.fieldContext_Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_PlacedOrderInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_email(ctx context.Context, field graphql.CollectedField, obj *dto1.PlacedOrderInfos) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_PlacedOrderInfos_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_PlacedOrderInfos_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_PlacedOrderInfos",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx context.Context, field graphql.CollectedField, obj *dto1.StartPlaceOrderResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Checkout_StartPlaceOrder_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_id(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalAddressLines, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_city(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_city(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_city(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_company(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_countryCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_countryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_countryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_defaultBilling(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_defaultBilling(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBilling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_defaultBilling(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_defaultShipping(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_defaultShipping(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultShipping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_defaultShipping(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_firstName(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_lastName(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_postCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_postCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_postCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_prefix(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_regionCode(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_regionCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_regionCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_street(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_street(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_street(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_streetNumber(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_streetNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_streetNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_state(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_telephone(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_telephone(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_telephone(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Address_email(ctx context.Context, field graphql.CollectedField, obj *domain5.Address) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Address_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Address_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Address",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_gender(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_firstName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_firstName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_firstName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_lastName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_middleName(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_middleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_middleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_mainEmail(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_mainEmail(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainEmail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_mainEmail(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_prefix(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_birthday(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_birthday(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalODate2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_birthday(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_PersonData_nationality(ctx context.Context, field graphql.CollectedField, obj *domain5.PersonData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_PersonData_nationality(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_PersonData_nationality(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_PersonData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_id(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_personalData(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_personalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain5.PersonData)
	fc.Result = res
	return ec.marshalNCommerce_Customer_PersonData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐPersonData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_personalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "gender":
				return ec.fieldContext_Commerce_Customer_PersonData_gender(ctx, field)
			case "firstName":
				return ec.fieldContext_Commerce_Customer_PersonData_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Commerce_Customer_PersonData_lastName(ctx, field)
			case "middleName":
				return ec.fieldContext_Commerce_Customer_PersonData_middleName(ctx, field)
			case "mainEmail":
				return ec.fieldContext_Commerce_Customer_PersonData_mainEmail(ctx, field)
			case "prefix":
				return ec.fieldContext_Commerce_Customer_PersonData_prefix(ctx, field)
			case "birthday":
				return ec.fieldContext_Commerce_Customer_PersonData_birthday(ctx, field)
			case "nationality":
				return ec.fieldContext_Commerce_Customer_PersonData_nationality(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_PersonData", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_getAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_getAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAddress(fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_getAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Customer_Address_id(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Customer_Address_city(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Customer_Address_company(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Customer_Address_countryCode(ctx, field)
			case "defaultBilling":
				return ec.fieldContext_Commerce_Customer_Address_defaultBilling(ctx, field)
			case "defaultShipping":
				return ec.fieldContext_Commerce_Customer_Address_defaultShipping(ctx, field)
			case "firstName":
				return ec.fieldContext_Commerce_Customer_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Commerce_Customer_Address_lastName(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Customer_Address_postCode(ctx, field)
			case "prefix":
				return ec.fieldContext_Commerce_Customer_Address_prefix(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Customer_Address_regionCode(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Customer_Address_street(ctx, field)
			case "streetNumber":
				return ec.fieldContext_Commerce_Customer_Address_streetNumber(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Customer_Address_state(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Customer_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Customer_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Address", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Customer_Result_getAddress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_addresses(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_addresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Addresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_addresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Customer_Address_id(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Customer_Address_city(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Customer_Address_company(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Customer_Address_countryCode(ctx, field)
			case "defaultBilling":
				return ec.fieldContext_Commerce_Customer_Address_defaultBilling(ctx, field)
			case "defaultShipping":
				return ec.fieldContext_Commerce_Customer_Address_defaultShipping(ctx, field)
			case "firstName":
				return ec.fieldContext_Commerce_Customer_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Commerce_Customer_Address_lastName(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Customer_Address_postCode(ctx, field)
			case "prefix":
				return ec.fieldContext_Commerce_Customer_Address_prefix(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Customer_Address_regionCode(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Customer_Address_street(ctx, field)
			case "streetNumber":
				return ec.fieldContext_Commerce_Customer_Address_streetNumber(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Customer_Address_state(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Customer_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Customer_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_defaultShippingAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_defaultShippingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultShippingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_defaultShippingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Customer_Address_id(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Customer_Address_city(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Customer_Address_company(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Customer_Address_countryCode(ctx, field)
			case "defaultBilling":
				return ec.fieldContext_Commerce_Customer_Address_defaultBilling(ctx, field)
			case "defaultShipping":
				return ec.fieldContext_Commerce_Customer_Address_defaultShipping(ctx, field)
			case "firstName":
				return ec.fieldContext_Commerce_Customer_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Commerce_Customer_Address_lastName(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Customer_Address_postCode(ctx, field)
			case "prefix":
				return ec.fieldContext_Commerce_Customer_Address_prefix(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Customer_Address_regionCode(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Customer_Address_street(ctx, field)
			case "streetNumber":
				return ec.fieldContext_Commerce_Customer_Address_streetNumber(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Customer_Address_state(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Customer_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Customer_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Result_defaultBillingAddress(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Result_defaultBillingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultBillingAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain5.Address)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Result_defaultBillingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Customer_Address_id(ctx, field)
			case "additionalAddressLines":
				return ec.fieldContext_Commerce_Customer_Address_additionalAddressLines(ctx, field)
			case "city":
				return ec.fieldContext_Commerce_Customer_Address_city(ctx, field)
			case "company":
				return ec.fieldContext_Commerce_Customer_Address_company(ctx, field)
			case "countryCode":
				return ec.fieldContext_Commerce_Customer_Address_countryCode(ctx, field)
			case "defaultBilling":
				return ec.fieldContext_Commerce_Customer_Address_defaultBilling(ctx, field)
			case "defaultShipping":
				return ec.fieldContext_Commerce_Customer_Address_defaultShipping(ctx, field)
			case "firstName":
				return ec.fieldContext_Commerce_Customer_Address_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Commerce_Customer_Address_lastName(ctx, field)
			case "postCode":
				return ec.fieldContext_Commerce_Customer_Address_postCode(ctx, field)
			case "prefix":
				return ec.fieldContext_Commerce_Customer_Address_prefix(ctx, field)
			case "regionCode":
				return ec.fieldContext_Commerce_Customer_Address_regionCode(ctx, field)
			case "street":
				return ec.fieldContext_Commerce_Customer_Address_street(ctx, field)
			case "streetNumber":
				return ec.fieldContext_Commerce_Customer_Address_streetNumber(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Customer_Address_state(ctx, field)
			case "telephone":
				return ec.fieldContext_Commerce_Customer_Address_telephone(ctx, field)
			case "email":
				return ec.fieldContext_Commerce_Customer_Address_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Address", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Status_Result_isLoggedIn(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerStatusResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Status_Result_isLoggedIn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLoggedIn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Status_Result_isLoggedIn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Status_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Customer_Status_Result_userID(ctx context.Context, field graphql.CollectedField, obj *dtocustomer.CustomerStatusResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Customer_Status_Result_userID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Customer_Status_Result_userID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Customer_Status_Result",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_amount(ctx context.Context, field graphql.CollectedField, obj *domain.Price) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FloatAmount(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_currency(ctx context.Context, field graphql.CollectedField, obj *domain.Price) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charge_price(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charge_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charge_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charge_value(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charge_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charge_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charge_type(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charge_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charge_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charge_reference(ctx context.Context, field graphql.CollectedField, obj *domain.Charge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charge_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charge_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_ChargeQualifier_type(ctx context.Context, field graphql.CollectedField, obj *domain.ChargeQualifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_ChargeQualifier_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_ChargeQualifier_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_ChargeQualifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_ChargeQualifier_reference(ctx context.Context, field graphql.CollectedField, obj *domain.ChargeQualifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_ChargeQualifier_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_ChargeQualifier_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_ChargeQualifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charges_items(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charges_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charges_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Price_Charge_price(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Price_Charge_value(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Price_Charge_type(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Price_Charge_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price_Charge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charges_hasType(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charges_hasType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasType(fc.Args["ctype"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charges_hasType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Price_Charges_hasType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charges_hasChargeQualifier(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charges_hasChargeQualifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChargeQualifier(fc.Args["qualifier"].(domain.ChargeQualifier)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charges_hasChargeQualifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Price_Charges_hasChargeQualifier_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charges_getByChargeQualifierForced(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charges_getByChargeQualifierForced(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByChargeQualifierForced(fc.Args["qualifier"].(domain.ChargeQualifier)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charges_getByChargeQualifierForced(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Price_Charge_price(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Price_Charge_value(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Price_Charge_type(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Price_Charge_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price_Charge", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Price_Charges_getByChargeQualifierForced_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Price_Charges_getByTypeForced(ctx context.Context, field graphql.CollectedField, obj *domain.Charges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Price_Charges_getByTypeForced(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetByTypeForced(fc.Args["ctype"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Charge)
	fc.Result = res
	return ec.marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Price_Charges_getByTypeForced(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Price_Charges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Price_Charge_price(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Price_Charge_value(ctx, field)
			case "type":
				return ec.fieldContext_Commerce_Price_Charge_type(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Price_Charge_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price_Charge", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Price_Charges_getByTypeForced_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Media_all(ctx, field)
			case "getMedia":
				return ec.fieldContext_Commerce_Product_Media_getMedia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_availablePrices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_availablePrices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "main":
				return ec.fieldContext_Commerce_Product_Categories_main(ctx, field)
			case "all":
				return ec.fieldContext_Commerce_Product_Categories_all(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Categories", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_shortDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keywords":
				return ec.fieldContext_Commerce_Product_Meta_keywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_loyalty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_loyalty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Product_Loyalty_price(ctx, field)
			case "earning":
				return ec.fieldContext_Commerce_Product_Loyalty_earning(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributeKeys":
				return ec.fieldContext_Commerce_Product_Attributes_attributeKeys(ctx, field)
			case "attributes":
				return ec.fieldContext_Commerce_Product_Attributes_attributes(ctx, field)
			case "hasAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_hasAttribute(ctx, field)
			case "getAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_getAttribute(ctx, field)
			case "getAttributesByKey":
				return ec.fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantMarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_variationSelections(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_variationSelections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariationSelections(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariationSelection)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_variationSelections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_VariationSelection_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_VariationSelection_label(ctx, field)
			case "options":
				return ec.fieldContext_Commerce_Product_VariationSelection_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariationSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveVariationSelections(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.ActiveVariationSelection)
	fc.Result = res
	return ec.marshalOCommerce_Product_ActiveVariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelectionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_ActiveVariationSelection_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_ActiveVariationSelection_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Product_ActiveVariationSelection_value(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_ActiveVariationSelection_unitCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_ActiveVariationSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariantProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariantProduct_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariantProduct_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariantProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Badges_all(ctx, field)
			case "first":
				return ec.fieldContext_Commerce_Product_Badges_first(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariationSelection_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariationSelection_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariationSelection_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariationSelection_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_value(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariationSelection_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariationSelection_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection_unitCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ActiveVariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ActiveVariationSelection_unitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ActiveVariationSelection_unitCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ActiveVariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_codeLabel(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_codeLabel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeLabel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_codeLabel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_value(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_unitCode(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_unitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_unitCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_values(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_values(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attribute_labels(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attribute_labels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attribute_labels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attribute",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attributes_attributeKeys(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attributes_attributeKeys(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttributeKeys(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attributes_attributeKeys(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attributes_attributes(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attributes_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attributes_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_Attribute_code(ctx, field)
			case "codeLabel":
				return ec.fieldContext_Commerce_Product_Attribute_codeLabel(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Attribute_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Product_Attribute_value(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_Attribute_unitCode(ctx, field)
			case "values":
				return ec.fieldContext_Commerce_Product_Attribute_values(ctx, field)
			case "labels":
				return ec.fieldContext_Commerce_Product_Attribute_labels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attributes_hasAttribute(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attributes_hasAttribute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAttribute(fc.Args["key"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attributes_hasAttribute(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Product_Attributes_hasAttribute_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attributes_getAttribute(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attributes_getAttribute(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute(fc.Args["key"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attributes_getAttribute(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_Attribute_code(ctx, field)
			case "codeLabel":
				return ec.fieldContext_Commerce_Product_Attribute_codeLabel(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Attribute_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Product_Attribute_value(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_Attribute_unitCode(ctx, field)
			case "values":
				return ec.fieldContext_Commerce_Product_Attribute_values(ctx, field)
			case "labels":
				return ec.fieldContext_Commerce_Product_Attribute_labels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Product_Attributes_getAttribute_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Attributes_getAttributesByKey(ctx context.Context, field graphql.CollectedField, obj domain1.Attributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttributesByKey(fc.Args["keys"].([]string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Attribute)
	fc.Result = res
	return ec.marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Attributes",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_Attribute_code(ctx, field)
			case "codeLabel":
				return ec.fieldContext_Commerce_Product_Attribute_codeLabel(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Attribute_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Product_Attribute_value(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_Attribute_unitCode(ctx, field)
			case "values":
				return ec.fieldContext_Commerce_Product_Attribute_values(ctx, field)
			case "labels":
				return ec.fieldContext_Commerce_Product_Attribute_labels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attribute", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Product_Attributes_getAttributesByKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Badge_code(ctx context.Context, field graphql.CollectedField, obj *domain1.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Badge_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Badge_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Badge_label(ctx context.Context, field graphql.CollectedField, obj *domain1.Badge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Badge_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Badge_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Badge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Badges_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductBadges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Badges_all(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Badge)
	fc.Result = res
	return ec.marshalOCommerce_Product_Badge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Badges_all(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Badges",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_Badge_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Badge_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Badges_first(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductBadges) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Badges_first(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.First(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.Badge)
	fc.Result = res
	return ec.marshalOCommerce_Product_Badge2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Badges_first(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Badges",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_Badge_code(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Badge_label(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_marketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Media_all(ctx, field)
			case "getMedia":
				return ec.fieldContext_Commerce_Product_Media_getMedia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_availablePrices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_availablePrices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "main":
				return ec.fieldContext_Commerce_Product_Categories_main(ctx, field)
			case "all":
				return ec.fieldContext_Commerce_Product_Categories_all(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Categories", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_shortDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keywords":
				return ec.fieldContext_Commerce_Product_Meta_keywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_loyalty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_loyalty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Product_Loyalty_price(ctx, field)
			case "earning":
				return ec.fieldContext_Commerce_Product_Loyalty_earning(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributeKeys":
				return ec.fieldContext_Commerce_Product_Attributes_attributeKeys(ctx, field)
			case "attributes":
				return ec.fieldContext_Commerce_Product_Attributes_attributes(ctx, field)
			case "hasAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_hasAttribute(ctx, field)
			case "getAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_getAttribute(ctx, field)
			case "getAttributesByKey":
				return ec.fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Badges_all(ctx, field)
			case "first":
				return ec.fieldContext_Commerce_Product_Badges_first(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_BundleProduct_choices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.BundleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_BundleProduct_choices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Choices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.Choice)
	fc.Result = res
	return ec.marshalOCommerce_Product_Choice2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_BundleProduct_choices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_BundleProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "identifier":
				return ec.fieldContext_Commerce_Product_Choice_identifier(ctx, field)
			case "required":
				return ec.fieldContext_Commerce_Product_Choice_required(ctx, field)
			case "label":
				return ec.fieldContext_Commerce_Product_Choice_label(ctx, field)
			case "options":
				return ec.fieldContext_Commerce_Product_Choice_options(ctx, field)
			case "active":
				return ec.fieldContext_Commerce_Product_Choice_active(ctx, field)
			case "activeOption":
				return ec.fieldContext_Commerce_Product_Choice_activeOption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Choice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Categories_main(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductCategories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Categories_main(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Main, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Categories_main(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Categories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_code(ctx, field)
			case "path":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_path(ctx, field)
			case "name":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_name(ctx, field)
			case "parent":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_parent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_CategoryTeaser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Categories_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductCategories) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Categories_all(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalOCommerce_Product_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Categories_all(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Categories",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_code(ctx, field)
			case "path":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_path(ctx, field)
			case "name":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_name(ctx, field)
			case "parent":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_parent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_CategoryTeaser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_code(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_CategoryTeaser_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_CategoryTeaser_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_CategoryTeaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_path(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_CategoryTeaser_path(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_CategoryTeaser_path(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_CategoryTeaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_name(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_CategoryTeaser_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_CategoryTeaser_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_CategoryTeaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_CategoryTeaser_parent(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryTeaser) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_CategoryTeaser_parent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.CategoryTeaser)
	fc.Result = res
	return ec.marshalOCommerce_Product_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_CategoryTeaser_parent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_CategoryTeaser",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_code(ctx, field)
			case "path":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_path(ctx, field)
			case "name":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_name(ctx, field)
			case "parent":
				return ec.fieldContext_Commerce_Product_CategoryTeaser_parent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_CategoryTeaser", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_required(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_required(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_options(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.Option)
	fc.Result = res
	return ec.marshalOCommerce_Product_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_options(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "product":
				return ec.fieldContext_Commerce_Product_Option_product(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Product_Option_qty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_active(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Choice_activeOption(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Choice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Choice_activeOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveOption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*graphqlproductdto.Option)
	fc.Result = res
	return ec.marshalOCommerce_Product_Option2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Choice_activeOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Choice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "product":
				return ec.fieldContext_Commerce_Product_Option_product(ctx, field)
			case "qty":
				return ec.fieldContext_Commerce_Product_Option_qty(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Media_all(ctx, field)
			case "getMedia":
				return ec.fieldContext_Commerce_Product_Media_getMedia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_availablePrices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_availablePrices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "main":
				return ec.fieldContext_Commerce_Product_Categories_main(ctx, field)
			case "all":
				return ec.fieldContext_Commerce_Product_Categories_all(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Categories", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_shortDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keywords":
				return ec.fieldContext_Commerce_Product_Meta_keywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_loyalty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_loyalty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Product_Loyalty_price(ctx, field)
			case "earning":
				return ec.fieldContext_Commerce_Product_Loyalty_earning(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributeKeys":
				return ec.fieldContext_Commerce_Product_Attributes_attributeKeys(ctx, field)
			case "attributes":
				return ec.fieldContext_Commerce_Product_Attributes_attributes(ctx, field)
			case "hasAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_hasAttribute(ctx, field)
			case "getAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_getAttribute(ctx, field)
			case "getAttributesByKey":
				return ec.fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_variantSelection(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_variantSelection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantSelection(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariantSelection)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_variantSelection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "variants":
				return ec.fieldContext_Commerce_Product_VariantSelection_variants(ctx, field)
			case "attributes":
				return ec.fieldContext_Commerce_Product_VariantSelection_attributes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ConfigurableProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_ConfigurableProduct_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_ConfigurableProduct_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_ConfigurableProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Badges_all(ctx, field)
			case "first":
				return ec.fieldContext_Commerce_Product_Badges_first(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductLoyalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.LoyaltyPriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_Loyalty_PriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_type(ctx, field)
			case "default":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_default(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_discountText(ctx, field)
			case "minPointsToSpent":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx, field)
			case "maxPointsToSpent":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_context(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_earning(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductLoyalty) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_earning(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Earning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.LoyaltyEarningInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_Loyalty_EarningInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyEarningInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_earning(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Product_Loyalty_EarningInfo_type(ctx, field)
			case "default":
				return ec.fieldContext_Commerce_Product_Loyalty_EarningInfo_default(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty_EarningInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo_type(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyEarningInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_EarningInfo_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_EarningInfo_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_EarningInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyEarningInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_EarningInfo_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_EarningInfo_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_EarningInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_type(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_discounted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_discountText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPointsToSpent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	fc.Result = res
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPointsToSpent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*big.Float)
	fc.Result = res
	return ec.marshalNFloat2ᚖmathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo_context(ctx context.Context, field graphql.CollectedField, obj *domain1.LoyaltyPriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Loyalty_PriceInfo_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceContext)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Loyalty_PriceInfo_context(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Loyalty_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerGroup":
				return ec.fieldContext_Commerce_Product_PriceContext_customerGroup(ctx, field)
			case "deliveryCode":
				return ec.fieldContext_Commerce_Product_PriceContext_deliveryCode(ctx, field)
			case "channelCode":
				return ec.fieldContext_Commerce_Product_PriceContext_channelCode(ctx, field)
			case "locale":
				return ec.fieldContext_Commerce_Product_PriceContext_locale(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Media_all(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Media_all(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Media)
	fc.Result = res
	return ec.marshalOCommerce_Product_MediaItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Media_all(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Product_MediaItem_type(ctx, field)
			case "mimeType":
				return ec.fieldContext_Commerce_Product_MediaItem_mimeType(ctx, field)
			case "usage":
				return ec.fieldContext_Commerce_Product_MediaItem_usage(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Product_MediaItem_title(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Product_MediaItem_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_MediaItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Media_getMedia(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMedia) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Media_getMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetMedia(fc.Args["usage"].(string)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain1.Media)
	fc.Result = res
	return ec.marshalNCommerce_Product_MediaItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Media_getMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Media",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Product_MediaItem_type(ctx, field)
			case "mimeType":
				return ec.fieldContext_Commerce_Product_MediaItem_mimeType(ctx, field)
			case "usage":
				return ec.fieldContext_Commerce_Product_MediaItem_usage(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Product_MediaItem_title(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Product_MediaItem_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_MediaItem", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Commerce_Product_Media_getMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_MediaItem_type(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_MediaItem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_MediaItem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_MediaItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_MediaItem_mimeType(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_MediaItem_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_MediaItem_mimeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_MediaItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_MediaItem_usage(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_MediaItem_usage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_MediaItem_usage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_MediaItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_MediaItem_title(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_MediaItem_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_MediaItem_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_MediaItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_MediaItem_reference(ctx context.Context, field graphql.CollectedField, obj *domain1.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_MediaItem_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_MediaItem_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_MediaItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Meta_keywords(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.ProductMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Meta_keywords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Meta_keywords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Option_product(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Option_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Option_product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_Option_qty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.Option) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_Option_qty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_Option_qty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceContext_customerGroup(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceContext_customerGroup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerGroup, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceContext_customerGroup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceContext_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceContext_deliveryCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceContext_deliveryCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceContext_channelCode(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceContext_channelCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceContext_channelCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceContext_locale(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceContext_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceContext_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_default(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_discounted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_discountText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBase(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Product_PriceInfo().ActiveBase(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Price)
	fc.Result = res
	return ec.marshalNCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_activeBase(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_Commerce_Price_amount(ctx, field)
			case "currency":
				return ec.fieldContext_Commerce_Price_currency(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Price", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBaseAmount(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	fc.Result = res
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_activeBaseUnit(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_campaignRules(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_denyMoreDiscounts(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DenyMoreDiscounts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_context(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceContext)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_context(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "customerGroup":
				return ec.fieldContext_Commerce_Product_PriceContext_customerGroup(ctx, field)
			case "deliveryCode":
				return ec.fieldContext_Commerce_Product_PriceContext_deliveryCode(ctx, field)
			case "channelCode":
				return ec.fieldContext_Commerce_Product_PriceContext_channelCode(ctx, field)
			case "locale":
				return ec.fieldContext_Commerce_Product_PriceContext_locale(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_PriceInfo_taxClass(ctx context.Context, field graphql.CollectedField, obj *domain1.PriceInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxClass, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_PriceInfo_taxClass(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_PriceInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_products(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_products(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_products(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_facets(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_facets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facets(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]searchdto.CommerceSearchFacet)
	fc.Result = res
	return ec.marshalNCommerce_Search_Facet2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_facets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_suggestions(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_suggestions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggestions(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain2.Suggestion)
	fc.Result = res
	return ec.marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_suggestions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "text":
				return ec.fieldContext_Commerce_Search_Suggestion_text(ctx, field)
			case "highlight":
				return ec.fieldContext_Commerce_Search_Suggestion_highlight(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_Suggestion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_searchMeta(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_searchMeta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchMeta(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.SearchMeta)
	fc.Result = res
	return ec.marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_searchMeta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "query":
				return ec.fieldContext_Commerce_Search_Meta_query(ctx, field)
			case "originalQuery":
				return ec.fieldContext_Commerce_Search_Meta_originalQuery(ctx, field)
			case "page":
				return ec.fieldContext_Commerce_Search_Meta_page(ctx, field)
			case "numPages":
				return ec.fieldContext_Commerce_Search_Meta_numPages(ctx, field)
			case "numResults":
				return ec.fieldContext_Commerce_Search_Meta_numResults(ctx, field)
			case "sortOptions":
				return ec.fieldContext_Commerce_Search_Meta_sortOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_hasSelectedFacet(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_hasSelectedFacet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedFacet(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_hasSelectedFacet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_promotion(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_promotion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promotion(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*searchdto.PromotionDTO)
	fc.Result = res
	return ec.marshalOCommerce_Search_Promotion2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐPromotionDTO(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_promotion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_Commerce_Search_Promotion_title(ctx, field)
			case "content":
				return ec.fieldContext_Commerce_Search_Promotion_content(ctx, field)
			case "url":
				return ec.fieldContext_Commerce_Search_Promotion_url(ctx, field)
			case "media":
				return ec.fieldContext_Commerce_Search_Promotion_media(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_Promotion", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SearchResult_actions(ctx context.Context, field graphql.CollectedField, obj *graphql1.SearchResultDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SearchResult_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain2.Action)
	fc.Result = res
	return ec.marshalOCommerce_Search_Action2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SearchResult_actions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SearchResult",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Search_Action_type(ctx, field)
			case "content":
				return ec.fieldContext_Commerce_Search_Action_content(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_Action", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_type(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_marketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_marketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_identifier(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_media(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMedia)
	fc.Result = res
	return ec.marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Media_all(ctx, field)
			case "getMedia":
				return ec.fieldContext_Commerce_Product_Media_getMedia(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_price(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_price(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.PriceInfo)
	fc.Result = res
	return ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_price(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_availablePrices(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_availablePrices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.PriceInfo)
	fc.Result = res
	return ec.marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_availablePrices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "default":
				return ec.fieldContext_Commerce_Product_PriceInfo_default(ctx, field)
			case "discounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_discounted(ctx, field)
			case "discountText":
				return ec.fieldContext_Commerce_Product_PriceInfo_discountText(ctx, field)
			case "activeBase":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBase(ctx, field)
			case "activeBaseAmount":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseAmount(ctx, field)
			case "activeBaseUnit":
				return ec.fieldContext_Commerce_Product_PriceInfo_activeBaseUnit(ctx, field)
			case "isDiscounted":
				return ec.fieldContext_Commerce_Product_PriceInfo_isDiscounted(ctx, field)
			case "campaignRules":
				return ec.fieldContext_Commerce_Product_PriceInfo_campaignRules(ctx, field)
			case "denyMoreDiscounts":
				return ec.fieldContext_Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field)
			case "context":
				return ec.fieldContext_Commerce_Product_PriceInfo_context(ctx, field)
			case "taxClass":
				return ec.fieldContext_Commerce_Product_PriceInfo_taxClass(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_PriceInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_title(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_categories(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductCategories)
	fc.Result = res
	return ec.marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "main":
				return ec.fieldContext_Commerce_Product_Categories_main(ctx, field)
			case "all":
				return ec.fieldContext_Commerce_Product_Categories_all(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Categories", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_description(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_shortDescription(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_shortDescription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_shortDescription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_meta(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductMeta)
	fc.Result = res
	return ec.marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "keywords":
				return ec.fieldContext_Commerce_Product_Meta_keywords(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_loyalty(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_loyalty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Loyalty(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductLoyalty)
	fc.Result = res
	return ec.marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_loyalty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "price":
				return ec.fieldContext_Commerce_Product_Loyalty_price(ctx, field)
			case "earning":
				return ec.fieldContext_Commerce_Product_Loyalty_earning(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Loyalty", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	fc.Result = res
	return ec.marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributeKeys":
				return ec.fieldContext_Commerce_Product_Attributes_attributeKeys(ctx, field)
			case "attributes":
				return ec.fieldContext_Commerce_Product_Attributes_attributes(ctx, field)
			case "hasAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_hasAttribute(ctx, field)
			case "getAttribute":
				return ec.fieldContext_Commerce_Product_Attributes_getAttribute(ctx, field)
			case "getAttributesByKey":
				return ec.fieldContext_Commerce_Product_Attributes_getAttributesByKey(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_SimpleProduct_badges(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.SimpleProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_SimpleProduct_badges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Badges(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.ProductBadges)
	fc.Result = res
	return ec.marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_SimpleProduct_badges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_SimpleProduct",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "all":
				return ec.fieldContext_Commerce_Product_Badges_all(ctx, field)
			case "first":
				return ec.fieldContext_Commerce_Product_Badges_first(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_Badges", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_variants(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_variants(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariantSelectionMatch)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection_Match2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_variants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "attributes":
				return ec.fieldContext_Commerce_Product_VariantSelection_Match_attributes(ctx, field)
			case "variant":
				return ec.fieldContext_Commerce_Product_VariantSelection_Match_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Match", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariantSelectionAttribute)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_label(ctx, field)
			case "code":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_code(ctx, field)
			case "options":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_options(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Attribute", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_options(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttribute) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariantSelectionAttributeOption)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection_Attribute_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_options(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_label(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_unitCode(ctx, field)
			case "otherAttributesRestrictions":
				return ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_otherAttributesRestrictions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Attribute_Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_Option_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttributeOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_Option_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_Option_unitCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttributeOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_unitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_Option_unitCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_Option_otherAttributesRestrictions(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionAttributeOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Attribute_Option_otherAttributesRestrictions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherAttributesRestrictions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.OtherAttributesRestriction)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection_Option_OtherAttributesRestriction2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOtherAttributesRestrictionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Attribute_Option_otherAttributesRestrictions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Attribute_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_code(ctx, field)
			case "availableOptions":
				return ec.fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_availableOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Option_OtherAttributesRestriction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_attributes(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionMatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Match_attributes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariantSelectionMatchAttributes)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariantSelection_Match_Attributes2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchAttributesᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Match_attributes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Match",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "key":
				return ec.fieldContext_Commerce_Product_VariantSelection_Match_Attributes_key(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Product_VariantSelection_Match_Attributes_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Match_Attributes", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_variant(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionMatch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Match_variant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariantSelectionMatchVariant)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariantSelection_Match_Variant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Match_variant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Match",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "marketplaceCode":
				return ec.fieldContext_Commerce_Product_VariantSelection_Match_Variant_marketplaceCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariantSelection_Match_Variant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_Attributes_key(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionMatchAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Match_Attributes_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Match_Attributes_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Match_Attributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_Attributes_value(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionMatchAttributes) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Match_Attributes_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Match_Attributes_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Match_Attributes",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_Variant_marketplaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariantSelectionMatchVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Match_Variant_marketplaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketplaceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Match_Variant_marketplaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Match_Variant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.OtherAttributesRestriction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Option_OtherAttributesRestriction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_availableOptions(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.OtherAttributesRestriction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_availableOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableOptions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_availableOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariantSelection_Option_OtherAttributesRestriction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_code(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_options(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_options(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Options, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]graphqlproductdto.VariationSelectionOption)
	fc.Result = res
	return ec.marshalOCommerce_Product_VariationSelection_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_options(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Product_VariationSelection_Option_label(ctx, field)
			case "unitCode":
				return ec.fieldContext_Commerce_Product_VariationSelection_Option_unitCode(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Product_VariationSelection_Option_state(ctx, field)
			case "variant":
				return ec.fieldContext_Commerce_Product_VariationSelection_Option_variant(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariationSelection_Option", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_label(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_Option_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_Option_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_unitCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_Option_unitCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_Option_unitCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_state(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_Option_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariationSelectionOptionState)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_Option_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Commerce_Product_VariationSelection_OptionState does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option_variant(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_Option_variant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Variant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.VariationSelectionOptionVariant)
	fc.Result = res
	return ec.marshalNCommerce_Product_VariationSelection_OptionVariant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionVariant(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_Option_variant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection_Option",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "marketPlaceCode":
				return ec.fieldContext_Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_VariationSelection_OptionVariant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *graphqlproductdto.VariationSelectionOptionVariant) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Product_VariationSelection_OptionVariant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Action_type(ctx context.Context, field graphql.CollectedField, obj *domain2.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Action_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Action_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Action_content(ctx context.Context, field graphql.CollectedField, obj *domain2.Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Action_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Action_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacet_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacet_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacet_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacet_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacet_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacet_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacet_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchListFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_ListFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacet_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Search_ListFacetItem_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Search_ListFacetItem_value(ctx, field)
			case "selected":
				return ec.fieldContext_Commerce_Search_ListFacetItem_selected(ctx, field)
			case "count":
				return ec.fieldContext_Commerce_Search_ListFacetItem_count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_ListFacetItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacet_hasSelectedItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacetItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacetItem_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacetItem_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacetItem_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacetItem_selected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacetItem_selected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_ListFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchListFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_ListFacetItem_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_ListFacetItem_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_ListFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_query(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_query(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_query(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_originalQuery(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_originalQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalQuery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_originalQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_page(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_page(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_page(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_numPages(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_numPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_numPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_numResults(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_numResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumResults, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_numResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Meta_sortOptions(ctx context.Context, field graphql.CollectedField, obj *domain2.SearchMeta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Meta_sortOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Commerce_Search_Meta().SortOptions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchSortOption)
	fc.Result = res
	return ec.marshalOCommerce_Search_SortOption2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOptionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Meta_sortOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Meta",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Search_SortOption_label(ctx, field)
			case "field":
				return ec.fieldContext_Commerce_Search_SortOption_field(ctx, field)
			case "selected":
				return ec.fieldContext_Commerce_Search_SortOption_selected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_SortOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Promotion_title(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Promotion_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Promotion_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Promotion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Promotion_content(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Promotion_content(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Promotion_content(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Promotion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Promotion_url(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Promotion_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Promotion_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Promotion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Promotion_media(ctx context.Context, field graphql.CollectedField, obj *searchdto.PromotionDTO) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Promotion_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain2.Media)
	fc.Result = res
	return ec.marshalOCommerce_Search_PromotionMedia2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Promotion_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Promotion",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_Commerce_Search_PromotionMedia_type(ctx, field)
			case "mimeType":
				return ec.fieldContext_Commerce_Search_PromotionMedia_mimeType(ctx, field)
			case "usage":
				return ec.fieldContext_Commerce_Search_PromotionMedia_usage(ctx, field)
			case "title":
				return ec.fieldContext_Commerce_Search_PromotionMedia_title(ctx, field)
			case "reference":
				return ec.fieldContext_Commerce_Search_PromotionMedia_reference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_PromotionMedia", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_type(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_PromotionMedia_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_PromotionMedia_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_PromotionMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_mimeType(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_PromotionMedia_mimeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_PromotionMedia_mimeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_PromotionMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_usage(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_PromotionMedia_usage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_PromotionMedia_usage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_PromotionMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_title(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_PromotionMedia_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_PromotionMedia_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_PromotionMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_PromotionMedia_reference(ctx context.Context, field graphql.CollectedField, obj *domain2.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_PromotionMedia_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_PromotionMedia_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_PromotionMedia",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacet_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacet_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacet_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacet_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacet_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacet_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacet_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchRangeFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_RangeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacet_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_value(ctx, field)
			case "selected":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_selected(ctx, field)
			case "count":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_count(ctx, field)
			case "min":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_min(ctx, field)
			case "max":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_max(ctx, field)
			case "selectedMin":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_selectedMin(ctx, field)
			case "selectedMax":
				return ec.fieldContext_Commerce_Search_RangeFacetItem_selectedMax(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_RangeFacetItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacet_hasSelectedItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_selected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_selected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_min(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_min(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Min(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_min(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_max(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_max(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_max(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selectedMin(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_selectedMin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedMin(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_selectedMin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_RangeFacetItem_selectedMax(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchRangeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_RangeFacetItem_selectedMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedMax(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_RangeFacetItem_selectedMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_RangeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_SortOption_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_SortOption_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_SortOption_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_SortOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_SortOption_field(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_SortOption_field(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_SortOption_field(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_SortOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_SortOption_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchSortOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_SortOption_selected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_SortOption_selected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_SortOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Suggestion_text(ctx context.Context, field graphql.CollectedField, obj *domain2.Suggestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Suggestion_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Suggestion_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Suggestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_Suggestion_highlight(ctx context.Context, field graphql.CollectedField, obj *domain2.Suggestion) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_Suggestion_highlight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Highlight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_Suggestion_highlight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_Suggestion",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacet_name(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacet_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacet_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacet_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacet_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacet_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacet_position(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacet_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacet_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacet_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacet_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchTreeFacetItem)
	fc.Result = res
	return ec.marshalNCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacet_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_value(ctx, field)
			case "selected":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_selected(ctx, field)
			case "count":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_count(ctx, field)
			case "active":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_active(ctx, field)
			case "items":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_TreeFacetItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacet_hasSelectedItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasSelectedItem(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacet_hasSelectedItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacet",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_label(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_value(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_selected(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_selected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Selected(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_selected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_count(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_active(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Commerce_Search_TreeFacetItem_items(ctx context.Context, field graphql.CollectedField, obj *searchdto.CommerceSearchTreeFacetItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Commerce_Search_TreeFacetItem_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*searchdto.CommerceSearchTreeFacetItem)
	fc.Result = res
	return ec.marshalOCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Commerce_Search_TreeFacetItem_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Commerce_Search_TreeFacetItem",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "label":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_label(ctx, field)
			case "value":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_value(ctx, field)
			case "selected":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_selected(ctx, field)
			case "count":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_count(ctx, field)
			case "active":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_active(ctx, field)
			case "items":
				return ec.fieldContext_Commerce_Search_TreeFacetItem_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Search_TreeFacetItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_flamingo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_flamingo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Flamingo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_flamingo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_AddToCart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_AddToCart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartAddToCart(rctx, fc.Args["addToCartInput"].(dto.AddToCart))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_AddToCart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_AddToCart_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_DeleteCartDelivery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_DeleteCartDelivery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartDeleteCartDelivery(rctx, fc.Args["deliveryCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_DeleteCartDelivery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_DeleteCartDelivery_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_DeleteItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_DeleteItem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartDeleteItem(rctx, fc.Args["itemID"].(string), fc.Args["deliveryCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_DeleteItem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_DeleteItem_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateItemQty(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateItemQty(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateItemQty(rctx, fc.Args["itemID"].(string), fc.Args["deliveryCode"].(string), fc.Args["qty"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateItemQty(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateItemQty_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateItemBundleConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateItemBundleConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateItemBundleConfig(rctx, fc.Args["itemID"].(string), fc.Args["bundleConfig"].([]*dto.ChoiceConfiguration))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateItemBundleConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateItemBundleConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateBillingAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateBillingAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateBillingAddress(rctx, fc.Args["addressForm"].(*forms.AddressForm))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.BillingAddressForm)
	fc.Result = res
	return ec.marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateBillingAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "formData":
				return ec.fieldContext_Commerce_Cart_BillingAddressForm_formData(ctx, field)
			case "validationInfo":
				return ec.fieldContext_Commerce_Cart_BillingAddressForm_validationInfo(ctx, field)
			case "processed":
				return ec.fieldContext_Commerce_Cart_BillingAddressForm_processed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_BillingAddressForm", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateSelectedPayment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateSelectedPayment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateSelectedPayment(rctx, fc.Args["gateway"].(string), fc.Args["method"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SelectedPaymentResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateSelectedPayment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "validationInfo":
				return ec.fieldContext_Commerce_Cart_SelectedPaymentResult_validationInfo(ctx, field)
			case "processed":
				return ec.fieldContext_Commerce_Cart_SelectedPaymentResult_processed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_SelectedPaymentResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartApplyCouponCodeOrGiftCard(rctx, fc.Args["code"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_RemoveGiftCard(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_RemoveGiftCard(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartRemoveGiftCard(rctx, fc.Args["giftCardCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_RemoveGiftCard(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_RemoveGiftCard_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_RemoveCouponCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_RemoveCouponCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartRemoveCouponCode(rctx, fc.Args["couponCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_RemoveCouponCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_RemoveCouponCode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveryAddresses(rctx, fc.Args["deliveryAdresses"].([]*forms.DeliveryForm))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto.DeliveryAddressForm)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DeliveryAddressForm2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deliveryCode":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx, field)
			case "formData":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_formData(ctx, field)
			case "useBillingAddress":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx, field)
			case "method":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_method(ctx, field)
			case "carrier":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_carrier(ctx, field)
			case "desiredTime":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_desiredTime(ctx, field)
			case "validationInfo":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_validationInfo(ctx, field)
			case "processed":
				return ec.fieldContext_Commerce_Cart_DeliveryAddressForm_processed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DeliveryAddressForm", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateDeliveryAddresses_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveryShippingOptions(rctx, fc.Args["shippingOptions"].([]*dto.DeliveryShippingOption))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.UpdateShippingOptionsResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "processed":
				return ec.fieldContext_Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_UpdateDeliveryShippingOptions_Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateDeliveryShippingOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_Clean(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_Clean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartClean(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_Clean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateAdditionalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateAdditionalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateAdditionalData(rctx, fc.Args["additionalData"].([]*dto.KeyValue))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateAdditionalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateAdditionalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateDeliveriesAdditionalData(rctx, fc.Args["data"].([]*dto.DeliveryAdditionalData))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Checkout_StartPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Checkout_StartPlaceOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutStartPlaceOrder(rctx, fc.Args["returnUrl"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.StartPlaceOrderResult)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_StartPlaceOrder_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Checkout_StartPlaceOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "uuid":
				return ec.fieldContext_Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_StartPlaceOrder_Result", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Checkout_CancelPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Checkout_CancelPlaceOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutCancelPlaceOrder(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Checkout_CancelPlaceOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Checkout_ClearPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Checkout_ClearPlaceOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutClearPlaceOrder(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Checkout_ClearPlaceOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutRefreshPlaceOrder(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_cart(ctx, field)
			case "orderInfos":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_state(ctx, field)
			case "uuid":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutRefreshPlaceOrderBlocking(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_cart(ctx, field)
			case "orderInfos":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_state(ctx, field)
			case "uuid":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_flamingo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_flamingo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Flamingo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_flamingo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Product(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProduct(rctx, fc.Args["marketPlaceCode"].(string), fc.Args["variantMarketPlaceCode"].(*string), fc.Args["bundleConfiguration"].([]*graphqlproductdto.ChoiceConfiguration))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(graphqlproductdto.Product)
	fc.Result = res
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Product(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Commerce_Product_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Product_Search(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Product_Search(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProductSearch(rctx, fc.Args["searchRequest"].(searchdto.CommerceSearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*graphql1.SearchResultDTO)
	fc.Result = res
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Product_Search(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "products":
				return ec.fieldContext_Commerce_Product_SearchResult_products(ctx, field)
			case "facets":
				return ec.fieldContext_Commerce_Product_SearchResult_facets(ctx, field)
			case "suggestions":
				return ec.fieldContext_Commerce_Product_SearchResult_suggestions(ctx, field)
			case "searchMeta":
				return ec.fieldContext_Commerce_Product_SearchResult_searchMeta(ctx, field)
			case "hasSelectedFacet":
				return ec.fieldContext_Commerce_Product_SearchResult_hasSelectedFacet(ctx, field)
			case "promotion":
				return ec.fieldContext_Commerce_Product_SearchResult_promotion(ctx, field)
			case "actions":
				return ec.fieldContext_Commerce_Product_SearchResult_actions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Product_SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Commerce_Product_Search_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Customer_Status(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Customer_Status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCustomerStatus(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dtocustomer.CustomerStatusResult)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Status_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerStatusResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Customer_Status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isLoggedIn":
				return ec.fieldContext_Commerce_Customer_Status_Result_isLoggedIn(ctx, field)
			case "userID":
				return ec.fieldContext_Commerce_Customer_Status_Result_userID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Status_Result", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Customer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Customer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCustomer(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dtocustomer.CustomerResult)
	fc.Result = res
	return ec.marshalOCommerce_Customer_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Customer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Commerce_Customer_Result_id(ctx, field)
			case "personalData":
				return ec.fieldContext_Commerce_Customer_Result_personalData(ctx, field)
			case "getAddress":
				return ec.fieldContext_Commerce_Customer_Result_getAddress(ctx, field)
			case "addresses":
				return ec.fieldContext_Commerce_Customer_Result_addresses(ctx, field)
			case "defaultShippingAddress":
				return ec.fieldContext_Commerce_Customer_Result_defaultShippingAddress(ctx, field)
			case "defaultBillingAddress":
				return ec.fieldContext_Commerce_Customer_Result_defaultBillingAddress(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Customer_Result", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Cart_DecoratedCart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Cart_DecoratedCart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartDecoratedCart(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DecoratedCart)
	fc.Result = res
	return ec.marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Cart_DecoratedCart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cart(ctx, field)
			case "decoratedDeliveries":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field)
			case "getDecoratedDeliveryByCode":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field)
			case "getAllPaymentRequiredItems":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field)
			case "cartSummary":
				return ec.fieldContext_Commerce_Cart_DecoratedCart_cartSummary(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_DecoratedCart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Cart_Validator(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Cart_Validator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartValidator(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*validation.Result)
	fc.Result = res
	return ec.marshalNCommerce_Cart_ValidationResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Cart_Validator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasCommonError":
				return ec.fieldContext_Commerce_Cart_ValidationResult_hasCommonError(ctx, field)
			case "commonErrorMessageKey":
				return ec.fieldContext_Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field)
			case "itemResults":
				return ec.fieldContext_Commerce_Cart_ValidationResult_itemResults(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_ValidationResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Cart_QtyRestriction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Cart_QtyRestriction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCartQtyRestriction(rctx, fc.Args["marketplaceCode"].(string), fc.Args["variantCode"].(*string), fc.Args["deliveryCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*validation.RestrictionResult)
	fc.Result = res
	return ec.marshalNCommerce_Cart_QtyRestrictionResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Cart_QtyRestriction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isRestricted":
				return ec.fieldContext_Commerce_Cart_QtyRestrictionResult_isRestricted(ctx, field)
			case "maxAllowed":
				return ec.fieldContext_Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx, field)
			case "remainingDifference":
				return ec.fieldContext_Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx, field)
			case "restrictorName":
				return ec.fieldContext_Commerce_Cart_QtyRestrictionResult_restrictorName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Cart_QtyRestrictionResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Commerce_Cart_QtyRestriction_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Checkout_ActivePlaceOrder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Checkout_ActivePlaceOrder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCheckoutActivePlaceOrder(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Checkout_ActivePlaceOrder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Checkout_CurrentContext(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Checkout_CurrentContext(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCheckoutCurrentContext(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.PlaceOrderContext)
	fc.Result = res
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Checkout_CurrentContext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cart":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_cart(ctx, field)
			case "orderInfos":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field)
			case "state":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_state(ctx, field)
			case "uuid":
				return ec.fieldContext_Commerce_Checkout_PlaceOrderContext_uuid(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Checkout_PlaceOrderContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_CategoryTree(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_CategoryTree(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategoryTree(rctx, fc.Args["activeCategoryCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain3.Tree)
	fc.Result = res
	return ec.marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_CategoryTree(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Commerce_CategoryTree_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Commerce_Category(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Commerce_Category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategory(rctx, fc.Args["categoryCode"].(string), fc.Args["categorySearchRequest"].(*searchdto.CommerceSearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*categorydto.CategorySearchResult)
	fc.Result = res
	return ec.marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋcategorydtoᚐCategorySearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Commerce_Category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "category":
				return ec.fieldContext_Commerce_Category_SearchResult_category(ctx, field)
			case "productSearchResult":
				return ec.fieldContext_Commerce_Category_SearchResult_productSearchResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Commerce_Category_SearchResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Commerce_Category_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCommerce_Cart_AddToCartInput(ctx context.Context, obj interface{}) (dto.AddToCart, error) {
	var it dto.AddToCart
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"marketplaceCode", "qty", "deliveryCode", "variantMarketplaceCode", "bundleConfiguration"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "marketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplaceCode"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MarketplaceCode = data
		case "qty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qty"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Qty = data
		case "deliveryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryCode = data
		case "variantMarketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantMarketplaceCode"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantMarketplaceCode = data
		case "bundleConfiguration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bundleConfiguration"))
			data, err := ec.unmarshalOCommerce_Cart_ChoiceConfigurationInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfigurationᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.BundleConfiguration = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_AddressFormInput(ctx context.Context, obj interface{}) (forms.AddressForm, error) {
	var it forms.AddressForm
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"vat", "firstname", "lastname", "middleName", "title", "salutation", "street", "streetNr", "addressLine1", "addressLine2", "company", "city", "postCode", "state", "regionCode", "country", "countryCode", "phoneNumber", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "vat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vat"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Vat = data
		case "firstname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Firstname = data
		case "lastname":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastname"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Lastname = data
		case "middleName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("middleName"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MiddleName = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "salutation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("salutation"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Salutation = data
		case "street":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("street"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Street = data
		case "streetNr":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("streetNr"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.StreetNr = data
		case "addressLine1":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine1"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine1 = data
		case "addressLine2":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addressLine2"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddressLine2 = data
		case "company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		case "city":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("city"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.City = data
		case "postCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postCode"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PostCode = data
		case "state":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("state"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.State = data
		case "regionCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegionCode = data
		case "country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("country"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Country = data
		case "countryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("countryCode"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CountryCode = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_ChoiceConfigurationInput(ctx context.Context, obj interface{}) (dto.ChoiceConfiguration, error) {
	var it dto.ChoiceConfiguration
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"identifier", "marketplaceCode", "variantMarketplaceCode", "qty"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Identifier = data
		case "marketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplaceCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MarketplaceCode = data
		case "variantMarketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantMarketplaceCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantMarketplaceCode = data
		case "qty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qty"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Qty = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryAdditionalDataInput(ctx context.Context, obj interface{}) (dto.DeliveryAdditionalData, error) {
	var it dto.DeliveryAdditionalData
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryCode", "additionalData"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryCode = data
		case "additionalData":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additionalData"))
			data, err := ec.unmarshalNCommerce_Cart_KeyValueInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AdditionalData = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryAddressInput(ctx context.Context, obj interface{}) (forms.DeliveryForm, error) {
	var it forms.DeliveryForm
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryCode", "deliveryAddress", "useBillingAddress", "method", "carrier", "desiredTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LocationCode = data
		case "deliveryAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryAddress"))
			data, err := ec.unmarshalOCommerce_Cart_AddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryAddress = data
		case "useBillingAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("useBillingAddress"))
			data, err := ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.UseBillingAddress = data
		case "method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShippingMethod = data
		case "carrier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrier"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ShippingCarrier = data
		case "desiredTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("desiredTime"))
			data, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.DesiredTime = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_DeliveryShippingOptionInput(ctx context.Context, obj interface{}) (dto.DeliveryShippingOption, error) {
	var it dto.DeliveryShippingOption
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deliveryCode", "method", "carrier"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deliveryCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deliveryCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DeliveryCode = data
		case "method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("method"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Method = data
		case "carrier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carrier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Carrier = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Cart_KeyValueInput(ctx context.Context, obj interface{}) (dto.KeyValue, error) {
	var it dto.KeyValue
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"key", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Key = data
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Price_ChargeQualifierInput(ctx context.Context, obj interface{}) (domain.ChargeQualifier, error) {
	var it domain.ChargeQualifier
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "reference"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Product_ChoiceConfigurationInput(ctx context.Context, obj interface{}) (graphqlproductdto.ChoiceConfiguration, error) {
	var it graphqlproductdto.ChoiceConfiguration
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"identifier", "marketplaceCode", "variantMarketplaceCode", "qty"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifier"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Identifier = data
		case "marketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketplaceCode"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MarketplaceCode = data
		case "variantMarketplaceCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("variantMarketplaceCode"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.VariantMarketplaceCode = data
		case "qty":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("qty"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Qty = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_KeyValueFilter(ctx context.Context, obj interface{}) (searchdto.CommerceSearchKeyValueFilter, error) {
	var it searchdto.CommerceSearchKeyValueFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"k", "v"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "k":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("k"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.K = data
		case "v":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("v"))
			data, err := ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.V = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_Request(ctx context.Context, obj interface{}) (searchdto.CommerceSearchRequest, error) {
	var it searchdto.CommerceSearchRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"pageSize", "page", "sortBy", "keyValueFilters", "query"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "pageSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pageSize"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.PageSize = data
		case "page":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("page"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Page = data
		case "sortBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortBy"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.SortBy = data
		case "keyValueFilters":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("keyValueFilters"))
			data, err := ec.unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilterᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.KeyValueFilters = data
		case "query":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Query = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Commerce_Cart_PaymentSelection(ctx context.Context, sel ast.SelectionSet, obj cart.PaymentSelection) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case cart.DefaultPaymentSelection:
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, &obj)
	case *cart.DefaultPaymentSelection:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Category(ctx context.Context, sel ast.SelectionSet, obj domain3.Category) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case domain3.CategoryData:
		return ec._Commerce_CategoryData(ctx, sel, &obj)
	case *domain3.CategoryData:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_CategoryData(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State(ctx context.Context, sel ast.SelectionSet, obj dto1.State) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *dto1.Wait:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Wait(ctx, sel, obj)
	case *dto1.WaitForCustomer:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_WaitForCustomer(ctx, sel, obj)
	case *dto1.Success:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Success(ctx, sel, obj)
	case *dto1.Failed:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Failed(ctx, sel, obj)
	case *dto1.ShowIframe:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe(ctx, sel, obj)
	case *dto1.ShowHTML:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML(ctx, sel, obj)
	case *dto1.Redirect:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_Redirect(ctx, sel, obj)
	case *dto1.TriggerClientSDK:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK(ctx, sel, obj)
	case *dto1.ShowWalletPayment:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment(ctx, sel, obj)
	case *dto1.PostRedirect:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason(ctx context.Context, sel ast.SelectionSet, obj process.FailedReason) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case process.ErrorOccurredReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx, sel, &obj)
	case *process.ErrorOccurredReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx, sel, obj)
	case process.PaymentErrorOccurredReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx, sel, &obj)
	case *process.PaymentErrorOccurredReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx, sel, obj)
	case process.CanceledByCustomerReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx, sel, &obj)
	case *process.CanceledByCustomerReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx, sel, obj)
	case process.PaymentCanceledByCustomerReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx, sel, &obj)
	case *process.PaymentCanceledByCustomerReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx, sel, obj)
	case process.CartValidationErrorReason:
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx, sel, &obj)
	case *process.CartValidationErrorReason:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Product(ctx context.Context, sel ast.SelectionSet, obj graphqlproductdto.Product) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case graphqlproductdto.SimpleProduct:
		return ec._Commerce_Product_SimpleProduct(ctx, sel, &obj)
	case *graphqlproductdto.SimpleProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_SimpleProduct(ctx, sel, obj)
	case graphqlproductdto.ConfigurableProduct:
		return ec._Commerce_Product_ConfigurableProduct(ctx, sel, &obj)
	case *graphqlproductdto.ConfigurableProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_ConfigurableProduct(ctx, sel, obj)
	case graphqlproductdto.ActiveVariantProduct:
		return ec._Commerce_Product_ActiveVariantProduct(ctx, sel, &obj)
	case *graphqlproductdto.ActiveVariantProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_ActiveVariantProduct(ctx, sel, obj)
	case graphqlproductdto.BundleProduct:
		return ec._Commerce_Product_BundleProduct(ctx, sel, &obj)
	case *graphqlproductdto.BundleProduct:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Product_BundleProduct(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Search_Facet(ctx context.Context, sel ast.SelectionSet, obj searchdto.CommerceSearchFacet) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *searchdto.CommerceSearchListFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_ListFacet(ctx, sel, obj)
	case *searchdto.CommerceSearchTreeFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_TreeFacet(ctx, sel, obj)
	case *searchdto.CommerceSearchRangeFacet:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_RangeFacet(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Search_FacetItem(ctx context.Context, sel ast.SelectionSet, obj searchdto.CommerceSearchFacetItem) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *searchdto.CommerceSearchListFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_ListFacetItem(ctx, sel, obj)
	case *searchdto.CommerceSearchTreeFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_TreeFacetItem(ctx, sel, obj)
	case *searchdto.CommerceSearchRangeFacetItem:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_Search_RangeFacetItem(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Tree(ctx context.Context, sel ast.SelectionSet, obj domain3.Tree) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case domain3.TreeData:
		return ec._Commerce_CategoryTree(ctx, sel, &obj)
	case *domain3.TreeData:
		if obj == nil {
			return graphql.Null
		}
		return ec._Commerce_CategoryTree(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commerce_Cart_AdditionalDataImplementors = []string{"Commerce_Cart_AdditionalData"}

func (ec *executionContext) _Commerce_Cart_AdditionalData(ctx context.Context, sel ast.SelectionSet, obj *cart.AdditionalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AdditionalDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AdditionalData")
		case "customAttributes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_AdditionalData_customAttributes(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "reservedOrderID":
			out.Values[i] = ec._Commerce_Cart_AdditionalData_reservedOrderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_AddressImplementors = []string{"Commerce_Cart_Address"}

func (ec *executionContext) _Commerce_Cart_Address(ctx context.Context, sel ast.SelectionSet, obj *cart.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Address")
		case "vat":
			out.Values[i] = ec._Commerce_Cart_Address_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_Cart_Address_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_Cart_Address_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Cart_Address_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_Address_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_Cart_Address_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Cart_Address_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_Cart_Address_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "additionalAddressLines":
			out.Values[i] = ec._Commerce_Cart_Address_additionalAddressLines(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Commerce_Cart_Address_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_Cart_Address_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Cart_Address_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Cart_Address_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Cart_Address_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_Cart_Address_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Cart_Address_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "telephone":
			out.Values[i] = ec._Commerce_Cart_Address_telephone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Cart_Address_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_AddressFormImplementors = []string{"Commerce_Cart_AddressForm"}

func (ec *executionContext) _Commerce_Cart_AddressForm(ctx context.Context, sel ast.SelectionSet, obj *forms.AddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AddressForm")
		case "vat":
			out.Values[i] = ec._Commerce_Cart_AddressForm_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_Cart_AddressForm_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_Cart_AddressForm_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Cart_AddressForm_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_AddressForm_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_Cart_AddressForm_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Cart_AddressForm_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_Cart_AddressForm_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addressLine1":
			out.Values[i] = ec._Commerce_Cart_AddressForm_addressLine1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addressLine2":
			out.Values[i] = ec._Commerce_Cart_AddressForm_addressLine2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "company":
			out.Values[i] = ec._Commerce_Cart_AddressForm_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_Cart_AddressForm_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Cart_AddressForm_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_Cart_AddressForm_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Cart_AddressForm_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._Commerce_Cart_AddressForm_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Cart_AddressForm_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_AppliedDiscountImplementors = []string{"Commerce_Cart_AppliedDiscount"}

func (ec *executionContext) _Commerce_Cart_AppliedDiscount(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedDiscount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedDiscountImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedDiscount")
		case "campaignCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_campaignCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "couponCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_couponCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isItemRelated":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_isItemRelated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sortOrder":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscount_sortOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_AppliedDiscountsImplementors = []string{"Commerce_Cart_AppliedDiscounts"}

func (ec *executionContext) _Commerce_Cart_AppliedDiscounts(ctx context.Context, sel ast.SelectionSet, obj *dto.CartAppliedDiscounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedDiscountsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedDiscounts")
		case "items":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_items(ctx, field, obj)
		case "byCampaignCode":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_byCampaignCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "byType":
			out.Values[i] = ec._Commerce_Cart_AppliedDiscounts_byType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_AppliedGiftCardImplementors = []string{"Commerce_Cart_AppliedGiftCard"}

func (ec *executionContext) _Commerce_Cart_AppliedGiftCard(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedGiftCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_AppliedGiftCardImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_AppliedGiftCard")
		case "code":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remaining":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_remaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasRemaining":
			out.Values[i] = ec._Commerce_Cart_AppliedGiftCard_hasRemaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_BillingAddressFormImplementors = []string{"Commerce_Cart_BillingAddressForm"}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm(ctx context.Context, sel ast.SelectionSet, obj *dto.BillingAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_BillingAddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_BillingAddressForm")
		case "formData":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_formData(ctx, field, obj)
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_CartImplementors = []string{"Commerce_Cart_Cart"}

func (ec *executionContext) _Commerce_Cart_Cart(ctx context.Context, sel ast.SelectionSet, obj *cart.Cart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CartImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Cart")
		case "id":
			out.Values[i] = ec._Commerce_Cart_Cart_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "entityID":
			out.Values[i] = ec._Commerce_Cart_Cart_entityID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "billingAddress":
			out.Values[i] = ec._Commerce_Cart_Cart_billingAddress(ctx, field, obj)
		case "purchaser":
			out.Values[i] = ec._Commerce_Cart_Cart_purchaser(ctx, field, obj)
		case "deliveries":
			out.Values[i] = ec._Commerce_Cart_Cart_deliveries(ctx, field, obj)
		case "additionalData":
			out.Values[i] = ec._Commerce_Cart_Cart_additionalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "paymentSelection":
			out.Values[i] = ec._Commerce_Cart_Cart_paymentSelection(ctx, field, obj)
		case "belongsToAuthenticatedUser":
			out.Values[i] = ec._Commerce_Cart_Cart_belongsToAuthenticatedUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "authenticatedUserID":
			out.Values[i] = ec._Commerce_Cart_Cart_authenticatedUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appliedCouponCodes":
			out.Values[i] = ec._Commerce_Cart_Cart_appliedCouponCodes(ctx, field, obj)
		case "defaultCurrency":
			out.Values[i] = ec._Commerce_Cart_Cart_defaultCurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalitems":
			out.Values[i] = ec._Commerce_Cart_Cart_totalitems(ctx, field, obj)
		case "itemCount":
			out.Values[i] = ec._Commerce_Cart_Cart_itemCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productCount":
			out.Values[i] = ec._Commerce_Cart_Cart_productCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isPaymentSelected":
			out.Values[i] = ec._Commerce_Cart_Cart_isPaymentSelected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "grandTotal":
			out.Values[i] = ec._Commerce_Cart_Cart_grandTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_sumTotalTaxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subTotalNet":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_appliedGiftCards(ctx, field, obj)
		case "getDeliveryByCode":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_Cart_getDeliveryByCode(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "getDeliveryCodes":
			out.Values[i] = ec._Commerce_Cart_Cart_getDeliveryCodes(ctx, field, obj)
		case "getMainShippingEMail":
			out.Values[i] = ec._Commerce_Cart_Cart_getMainShippingEMail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isEmpty":
			out.Values[i] = ec._Commerce_Cart_Cart_isEmpty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasDeliveryForCode":
			out.Values[i] = ec._Commerce_Cart_Cart_hasDeliveryForCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getDeliveryByItemID":
			out.Values[i] = ec._Commerce_Cart_Cart_getDeliveryByItemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getByItemID":
			out.Values[i] = ec._Commerce_Cart_Cart_getByItemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getTotalQty":
			out.Values[i] = ec._Commerce_Cart_Cart_getTotalQty(ctx, field, obj)
		case "getByExternalReference":
			out.Values[i] = ec._Commerce_Cart_Cart_getByExternalReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getVoucherSavings":
			out.Values[i] = ec._Commerce_Cart_Cart_getVoucherSavings(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getCartTeaser":
			out.Values[i] = ec._Commerce_Cart_Cart_getCartTeaser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shippingNet":
			out.Values[i] = ec._Commerce_Cart_Cart_shippingNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shippingNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_shippingNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shippingGross":
			out.Values[i] = ec._Commerce_Cart_Cart_shippingGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "shippingGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_shippingGrossWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasShippingCosts":
			out.Values[i] = ec._Commerce_Cart_Cart_hasShippingCosts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "allShippingTitles":
			out.Values[i] = ec._Commerce_Cart_Cart_allShippingTitles(ctx, field, obj)
		case "subTotalGross":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subTotalGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalGrossWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "subTotalNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Cart_subTotalNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_totalDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "nonItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_nonItemRelatedDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "itemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Cart_itemRelatedDiscountAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasAppliedCouponCode":
			out.Values[i] = ec._Commerce_Cart_Cart_hasAppliedCouponCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getPaymentReference":
			out.Values[i] = ec._Commerce_Cart_Cart_getPaymentReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "getTotalItemsByType":
			out.Values[i] = ec._Commerce_Cart_Cart_getTotalItemsByType(ctx, field, obj)
		case "grandTotalCharges":
			out.Values[i] = ec._Commerce_Cart_Cart_grandTotalCharges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasAppliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_hasAppliedGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "hasRemainingGiftCards":
			out.Values[i] = ec._Commerce_Cart_Cart_hasRemainingGiftCards(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_CouponCodeImplementors = []string{"Commerce_Cart_CouponCode"}

func (ec *executionContext) _Commerce_Cart_CouponCode(ctx context.Context, sel ast.SelectionSet, obj *cart.CouponCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CouponCodeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_CouponCode")
		case "code":
			out.Values[i] = ec._Commerce_Cart_CouponCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_CustomAttributesImplementors = []string{"Commerce_Cart_CustomAttributes"}

func (ec *executionContext) _Commerce_Cart_CustomAttributes(ctx context.Context, sel ast.SelectionSet, obj *dto.CustomAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_CustomAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_CustomAttributes")
		case "get":
			out.Values[i] = ec._Commerce_Cart_CustomAttributes_get(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DecoratedCartImplementors = []string{"Commerce_Cart_DecoratedCart"}

func (ec *executionContext) _Commerce_Cart_DecoratedCart(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedCart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedCartImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedCart")
		case "cart":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_cart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "decoratedDeliveries":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_decoratedDeliveries(ctx, field, obj)
		case "getDecoratedDeliveryByCode":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_getDecoratedDeliveryByCode(ctx, field, obj)
		case "getAllPaymentRequiredItems":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_getAllPaymentRequiredItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "cartSummary":
			out.Values[i] = ec._Commerce_Cart_DecoratedCart_cartSummary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DecoratedDeliveryImplementors = []string{"Commerce_Cart_DecoratedDelivery"}

func (ec *executionContext) _Commerce_Cart_DecoratedDelivery(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedDelivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedDeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedDelivery")
		case "delivery":
			out.Values[i] = ec._Commerce_Cart_DecoratedDelivery_delivery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "decoratedItems":
			out.Values[i] = ec._Commerce_Cart_DecoratedDelivery_decoratedItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DecoratedItemImplementors = []string{"Commerce_Cart_DecoratedItem"}

func (ec *executionContext) _Commerce_Cart_DecoratedItem(ctx context.Context, sel ast.SelectionSet, obj *dto.DecoratedCartItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DecoratedItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DecoratedItem")
		case "item":
			out.Values[i] = ec._Commerce_Cart_DecoratedItem_item(ctx, field, obj)
		case "product":
			out.Values[i] = ec._Commerce_Cart_DecoratedItem_product(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DefaultPaymentSelectionImplementors = []string{"Commerce_Cart_DefaultPaymentSelection", "Commerce_Cart_PaymentSelection"}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection(ctx context.Context, sel ast.SelectionSet, obj *cart.DefaultPaymentSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DefaultPaymentSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DefaultPaymentSelection")
		case "gateway":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "totalValue":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_totalValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "cartSplit":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_DefaultPaymentSelection_cartSplit(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DeliveryImplementors = []string{"Commerce_Cart_Delivery"}

func (ec *executionContext) _Commerce_Cart_Delivery(ctx context.Context, sel ast.SelectionSet, obj *cart.Delivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Delivery")
		case "deliveryInfo":
			out.Values[i] = ec._Commerce_Cart_Delivery_deliveryInfo(ctx, field, obj)
		case "cartitems":
			out.Values[i] = ec._Commerce_Cart_Delivery_cartitems(ctx, field, obj)
		case "shippingItem":
			out.Values[i] = ec._Commerce_Cart_Delivery_shippingItem(ctx, field, obj)
		case "subTotalGross":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalGross(ctx, field, obj)
		case "grandTotal":
			out.Values[i] = ec._Commerce_Cart_Delivery_grandTotal(ctx, field, obj)
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_sumTotalTaxAmount(ctx, field, obj)
		case "subTotalNet":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalNet(ctx, field, obj)
		case "totalDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_totalDiscountAmount(ctx, field, obj)
		case "nonItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_nonItemRelatedDiscountAmount(ctx, field, obj)
		case "itemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Delivery_itemRelatedDiscountAmount(ctx, field, obj)
		case "subTotalGrossWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalGrossWithDiscounts(ctx, field, obj)
		case "subTotalNetWithDiscounts":
			out.Values[i] = ec._Commerce_Cart_Delivery_subTotalNetWithDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasItems":
			out.Values[i] = ec._Commerce_Cart_Delivery_hasItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DeliveryAddressFormImplementors = []string{"Commerce_Cart_DeliveryAddressForm"}

func (ec *executionContext) _Commerce_Cart_DeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, obj *dto.DeliveryAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryAddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryAddressForm")
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "formData":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_formData(ctx, field, obj)
		case "useBillingAddress":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_useBillingAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_method(ctx, field, obj)
		case "carrier":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_carrier(ctx, field, obj)
		case "desiredTime":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_desiredTime(ctx, field, obj)
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_DeliveryAddressForm_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DeliveryInfoImplementors = []string{"Commerce_Cart_DeliveryInfo"}

func (ec *executionContext) _Commerce_Cart_DeliveryInfo(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryInfo")
		case "code":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "workflow":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_workflow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "carrier":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_carrier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "deliveryLocation":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_deliveryLocation(ctx, field, obj)
		case "desiredTime":
			out.Values[i] = ec._Commerce_Cart_DeliveryInfo_desiredTime(ctx, field, obj)
		case "additionalData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_DeliveryInfo_additionalData(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_DeliveryLocationImplementors = []string{"Commerce_Cart_DeliveryLocation"}

func (ec *executionContext) _Commerce_Cart_DeliveryLocation(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_DeliveryLocationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DeliveryLocation")
		case "type":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "address":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_address(ctx, field, obj)
		case "useBillingAddress":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_useBillingAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_Cart_DeliveryLocation_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_ExistingCustomerDataImplementors = []string{"Commerce_Cart_ExistingCustomerData"}

func (ec *executionContext) _Commerce_Cart_ExistingCustomerData(ctx context.Context, sel ast.SelectionSet, obj *cart.ExistingCustomerData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ExistingCustomerDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ExistingCustomerData")
		case "id":
			out.Values[i] = ec._Commerce_Cart_ExistingCustomerData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_Form_ErrorImplementors = []string{"Commerce_Cart_Form_Error"}

func (ec *executionContext) _Commerce_Cart_Form_Error(ctx context.Context, sel ast.SelectionSet, obj *domain4.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_ErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_Error")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_Error_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_Error_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_Form_FieldErrorImplementors = []string{"Commerce_Cart_Form_FieldError"}

func (ec *executionContext) _Commerce_Cart_Form_FieldError(ctx context.Context, sel ast.SelectionSet, obj *dto.FieldError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_FieldErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_FieldError")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "fieldName":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_fieldName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_Form_ValidationInfoImplementors = []string{"Commerce_Cart_Form_ValidationInfo"}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo(ctx context.Context, sel ast.SelectionSet, obj *dto.ValidationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_Form_ValidationInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_ValidationInfo")
		case "fieldErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field, obj)
		case "generalErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_ItemImplementors = []string{"Commerce_Cart_Item"}

func (ec *executionContext) _Commerce_Cart_Item(ctx context.Context, sel ast.SelectionSet, obj *cart.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Item")
		case "id":
			out.Values[i] = ec._Commerce_Cart_Item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "externalReference":
			out.Values[i] = ec._Commerce_Cart_Item_externalReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "marketplaceCode":
			out.Values[i] = ec._Commerce_Cart_Item_marketplaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "variantMarketPlaceCode":
			out.Values[i] = ec._Commerce_Cart_Item_variantMarketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "productName":
			out.Values[i] = ec._Commerce_Cart_Item_productName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sourceID":
			out.Values[i] = ec._Commerce_Cart_Item_sourceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "qty":
			out.Values[i] = ec._Commerce_Cart_Item_qty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "additionalDataKeys":
			out.Values[i] = ec._Commerce_Cart_Item_additionalDataKeys(ctx, field, obj)
		case "additionalDataValues":
			out.Values[i] = ec._Commerce_Cart_Item_additionalDataValues(ctx, field, obj)
		case "getAdditionalData":
			out.Values[i] = ec._Commerce_Cart_Item_getAdditionalData(ctx, field, obj)
		case "hasAdditionalDataKey":
			out.Values[i] = ec._Commerce_Cart_Item_hasAdditionalDataKey(ctx, field, obj)
		case "singlePriceGross":
			out.Values[i] = ec._Commerce_Cart_Item_singlePriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "singlePriceNet":
			out.Values[i] = ec._Commerce_Cart_Item_singlePriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rowPriceGross":
			out.Values[i] = ec._Commerce_Cart_Item_rowPriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rowPriceNet":
			out.Values[i] = ec._Commerce_Cart_Item_rowPriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appliedDiscounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_Item_appliedDiscounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_ItemValidationErrorImplementors = []string{"Commerce_Cart_ItemValidationError"}

func (ec *executionContext) _Commerce_Cart_ItemValidationError(ctx context.Context, sel ast.SelectionSet, obj *validation.ItemValidationError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ItemValidationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ItemValidationError")
		case "itemID":
			out.Values[i] = ec._Commerce_Cart_ItemValidationError_itemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "errorMessageKey":
			out.Values[i] = ec._Commerce_Cart_ItemValidationError_errorMessageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_KeyValueImplementors = []string{"Commerce_Cart_KeyValue"}

func (ec *executionContext) _Commerce_Cart_KeyValue(ctx context.Context, sel ast.SelectionSet, obj *dto.KeyValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_KeyValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_KeyValue")
		case "key":
			out.Values[i] = ec._Commerce_Cart_KeyValue_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Cart_KeyValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PaymentSelection_SplitImplementors = []string{"Commerce_Cart_PaymentSelection_Split"}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_Split(ctx context.Context, sel ast.SelectionSet, obj *dto.PaymentSelectionSplit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PaymentSelection_SplitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PaymentSelection_Split")
		case "qualifier":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_Split_qualifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "charge":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_Split_charge(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PaymentSelection_SplitQualifierImplementors = []string{"Commerce_Cart_PaymentSelection_SplitQualifier"}

func (ec *executionContext) _Commerce_Cart_PaymentSelection_SplitQualifier(ctx context.Context, sel ast.SelectionSet, obj *cart.SplitQualifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PaymentSelection_SplitQualifierImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PaymentSelection_SplitQualifier")
		case "type":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Cart_PaymentSelection_SplitQualifier_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PersonImplementors = []string{"Commerce_Cart_Person"}

func (ec *executionContext) _Commerce_Cart_Person(ctx context.Context, sel ast.SelectionSet, obj *cart.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PersonImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Person")
		case "address":
			out.Values[i] = ec._Commerce_Cart_Person_address(ctx, field, obj)
		case "personalDetails":
			out.Values[i] = ec._Commerce_Cart_Person_personalDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "existingCustomerData":
			out.Values[i] = ec._Commerce_Cart_Person_existingCustomerData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PersonalDetailsImplementors = []string{"Commerce_Cart_PersonalDetails"}

func (ec *executionContext) _Commerce_Cart_PersonalDetails(ctx context.Context, sel ast.SelectionSet, obj *cart.PersonalDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PersonalDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PersonalDetails")
		case "dateOfBirth":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_dateOfBirth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "passportCountry":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_passportCountry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "passportNumber":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_passportNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "nationality":
			out.Values[i] = ec._Commerce_Cart_PersonalDetails_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PlacedOrderInfoImplementors = []string{"Commerce_Cart_PlacedOrderInfo"}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, obj *placeorder.PlacedOrderInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PlacedOrderInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PlacedOrderInfo")
		case "orderNumber":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_orderNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PricedCartItemImplementors = []string{"Commerce_Cart_PricedCartItem"}

func (ec *executionContext) _Commerce_Cart_PricedCartItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedCartItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedCartItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedCartItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedCartItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "itemID":
			out.Values[i] = ec._Commerce_Cart_PricedCartItem_itemID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PricedItemsImplementors = []string{"Commerce_Cart_PricedItems"}

func (ec *executionContext) _Commerce_Cart_PricedItems(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedItems) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedItemsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedItems")
		case "cartItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_cartItems(ctx, field, obj)
		case "shippingItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_shippingItems(ctx, field, obj)
		case "totalItems":
			out.Values[i] = ec._Commerce_Cart_PricedItems_totalItems(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PricedShippingItemImplementors = []string{"Commerce_Cart_PricedShippingItem"}

func (ec *executionContext) _Commerce_Cart_PricedShippingItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedShippingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedShippingItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedShippingItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedShippingItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryInfoCode":
			out.Values[i] = ec._Commerce_Cart_PricedShippingItem_deliveryInfoCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_PricedTotalItemImplementors = []string{"Commerce_Cart_PricedTotalItem"}

func (ec *executionContext) _Commerce_Cart_PricedTotalItem(ctx context.Context, sel ast.SelectionSet, obj *dto.PricedTotalItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_PricedTotalItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PricedTotalItem")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_PricedTotalItem_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_Cart_PricedTotalItem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_QtyRestrictionResultImplementors = []string{"Commerce_Cart_QtyRestrictionResult"}

func (ec *executionContext) _Commerce_Cart_QtyRestrictionResult(ctx context.Context, sel ast.SelectionSet, obj *validation.RestrictionResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_QtyRestrictionResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_QtyRestrictionResult")
		case "isRestricted":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_isRestricted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxAllowed":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_maxAllowed(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "remainingDifference":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_remainingDifference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "restrictorName":
			out.Values[i] = ec._Commerce_Cart_QtyRestrictionResult_restrictorName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_SelectedPaymentResultImplementors = []string{"Commerce_Cart_SelectedPaymentResult"}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, obj *dto.SelectedPaymentResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_SelectedPaymentResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_SelectedPaymentResult")
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_ShippingItemImplementors = []string{"Commerce_Cart_ShippingItem"}

func (ec *executionContext) _Commerce_Cart_ShippingItem(ctx context.Context, sel ast.SelectionSet, obj *cart.ShippingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ShippingItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ShippingItem")
		case "title":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "priceNet":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_priceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxAmount":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_taxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "priceGross":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_priceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "appliedDiscounts":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Cart_ShippingItem_appliedDiscounts(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "totalWithDiscountInclTax":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_totalWithDiscountInclTax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tax":
			out.Values[i] = ec._Commerce_Cart_ShippingItem_tax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_SummaryImplementors = []string{"Commerce_Cart_Summary"}

func (ec *executionContext) _Commerce_Cart_Summary(ctx context.Context, sel ast.SelectionSet, obj *dto.CartSummary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_SummaryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Summary")
		case "discounts":
			out.Values[i] = ec._Commerce_Cart_Summary_discounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalDiscountAmount":
			out.Values[i] = ec._Commerce_Cart_Summary_totalDiscountAmount(ctx, field, obj)
		case "totalGiftCardAmount":
			out.Values[i] = ec._Commerce_Cart_Summary_totalGiftCardAmount(ctx, field, obj)
		case "grandTotalWithGiftCards":
			out.Values[i] = ec._Commerce_Cart_Summary_grandTotalWithGiftCards(ctx, field, obj)
		case "sumTotalDiscountWithGiftCardsAmount":
			out.Values[i] = ec._Commerce_Cart_Summary_sumTotalDiscountWithGiftCardsAmount(ctx, field, obj)
		case "hasAppliedDiscounts":
			out.Values[i] = ec._Commerce_Cart_Summary_hasAppliedDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "sumTaxes":
			out.Values[i] = ec._Commerce_Cart_Summary_sumTaxes(ctx, field, obj)
		case "sumPaymentSelectionCartSplitValueAmountByMethods":
			out.Values[i] = ec._Commerce_Cart_Summary_sumPaymentSelectionCartSplitValueAmountByMethods(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_TaxImplementors = []string{"Commerce_Cart_Tax"}

func (ec *executionContext) _Commerce_Cart_Tax(ctx context.Context, sel ast.SelectionSet, obj *cart.Tax) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TaxImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Tax")
		case "amount":
			out.Values[i] = ec._Commerce_Cart_Tax_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_Tax_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rate":
			out.Values[i] = ec._Commerce_Cart_Tax_rate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_TaxesImplementors = []string{"Commerce_Cart_Taxes"}

func (ec *executionContext) _Commerce_Cart_Taxes(ctx context.Context, sel ast.SelectionSet, obj *dto.Taxes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TaxesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Taxes")
		case "items":
			out.Values[i] = ec._Commerce_Cart_Taxes_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "getByType":
			out.Values[i] = ec._Commerce_Cart_Taxes_getByType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_TeaserImplementors = []string{"Commerce_Cart_Teaser"}

func (ec *executionContext) _Commerce_Cart_Teaser(ctx context.Context, sel ast.SelectionSet, obj *cart.Teaser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TeaserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Teaser")
		case "productCount":
			out.Values[i] = ec._Commerce_Cart_Teaser_productCount(ctx, field, obj)
		case "ItemCount":
			out.Values[i] = ec._Commerce_Cart_Teaser_ItemCount(ctx, field, obj)
		case "DeliveryCodes":
			out.Values[i] = ec._Commerce_Cart_Teaser_DeliveryCodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_TotalitemImplementors = []string{"Commerce_Cart_Totalitem"}

func (ec *executionContext) _Commerce_Cart_Totalitem(ctx context.Context, sel ast.SelectionSet, obj *cart.Totalitem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_TotalitemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Totalitem")
		case "code":
			out.Values[i] = ec._Commerce_Cart_Totalitem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_Totalitem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Cart_Totalitem_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Cart_Totalitem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_UpdateDeliveryShippingOptions_ResultImplementors = []string{"Commerce_Cart_UpdateDeliveryShippingOptions_Result"}

func (ec *executionContext) _Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx context.Context, sel ast.SelectionSet, obj *dto.UpdateShippingOptionsResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_UpdateDeliveryShippingOptions_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_UpdateDeliveryShippingOptions_Result")
		case "processed":
			out.Values[i] = ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Cart_ValidationResultImplementors = []string{"Commerce_Cart_ValidationResult"}

func (ec *executionContext) _Commerce_Cart_ValidationResult(ctx context.Context, sel ast.SelectionSet, obj *validation.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Cart_ValidationResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ValidationResult")
		case "hasCommonError":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_hasCommonError(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "commonErrorMessageKey":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "itemResults":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_itemResults(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_CategoryDataImplementors = []string{"Commerce_CategoryData", "Commerce_Category"}

func (ec *executionContext) _Commerce_CategoryData(ctx context.Context, sel ast.SelectionSet, obj *domain3.CategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_CategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryData")
		case "code":
			out.Values[i] = ec._Commerce_CategoryData_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryData_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryData_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryData_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "promoted":
			out.Values[i] = ec._Commerce_CategoryData_promoted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_CategoryData_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_CategoryTreeImplementors = []string{"Commerce_CategoryTree", "Commerce_Tree"}

func (ec *executionContext) _Commerce_CategoryTree(ctx context.Context, sel ast.SelectionSet, obj *domain3.TreeData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_CategoryTreeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryTree")
		case "code":
			out.Values[i] = ec._Commerce_CategoryTree_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryTree_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryTree_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryTree_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "subTrees":
			out.Values[i] = ec._Commerce_CategoryTree_subTrees(ctx, field, obj)
		case "hasChilds":
			out.Values[i] = ec._Commerce_CategoryTree_hasChilds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "documentCount":
			out.Values[i] = ec._Commerce_CategoryTree_documentCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Category_AttributeImplementors = []string{"Commerce_Category_Attribute"}

func (ec *executionContext) _Commerce_Category_Attribute(ctx context.Context, sel ast.SelectionSet, obj *domain3.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attribute")
		case "code":
			out.Values[i] = ec._Commerce_Category_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_Category_Attribute_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Category_AttributeValueImplementors = []string{"Commerce_Category_AttributeValue"}

func (ec *executionContext) _Commerce_Category_AttributeValue(ctx context.Context, sel ast.SelectionSet, obj *domain3.AttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_AttributeValue")
		case "value":
			out.Values[i] = ec._Commerce_Category_AttributeValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_AttributeValue_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Category_AttributesImplementors = []string{"Commerce_Category_Attributes"}

func (ec *executionContext) _Commerce_Category_Attributes(ctx context.Context, sel ast.SelectionSet, obj domain3.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attributes")
		case "get":
			out.Values[i] = ec._Commerce_Category_Attributes_get(ctx, field, obj)
		case "has":
			out.Values[i] = ec._Commerce_Category_Attributes_has(ctx, field, obj)
		case "all":
			out.Values[i] = ec._Commerce_Category_Attributes_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Category_SearchResultImplementors = []string{"Commerce_Category_SearchResult"}

func (ec *executionContext) _Commerce_Category_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *categorydto.CategorySearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Category_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_SearchResult")
		case "category":
			out.Values[i] = ec._Commerce_Category_SearchResult_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "productSearchResult":
			out.Values[i] = ec._Commerce_Category_SearchResult_productSearchResult(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderContextImplementors = []string{"Commerce_Checkout_PlaceOrderContext"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext(ctx context.Context, sel ast.SelectionSet, obj *dto1.PlaceOrderContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderContextImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderContext")
		case "cart":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_cart(ctx, field, obj)
		case "orderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "uuid":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderPaymentInfoImplementors = []string{"Commerce_Checkout_PlaceOrderPaymentInfo"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, obj *application.PlaceOrderPaymentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderPaymentInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderPaymentInfo")
		case "gateway":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentProvider":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "amount":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_Form_ParameterImplementors = []string{"Commerce_Checkout_PlaceOrderState_Form_Parameter"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_Form_Parameter(ctx context.Context, sel ast.SelectionSet, obj *dto1.FormParameter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_Form_ParameterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_Form_Parameter")
		case "key":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_Form_Parameter_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_Form_Parameter_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_PaymentRequestAPIImplementors = []string{"Commerce_Checkout_PlaceOrderState_PaymentRequestAPI"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_PaymentRequestAPI(ctx context.Context, sel ast.SelectionSet, obj *dto1.PaymentRequestAPI) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_PaymentRequestAPIImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_PaymentRequestAPI")
		case "methodData":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_methodData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "details":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_details(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "merchantValidationURL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_merchantValidationURL(ctx, field, obj)
		case "completeURL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI_completeURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Failed", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Failed(ctx context.Context, sel ast.SelectionSet, obj *dto1.Failed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Failed")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Failed_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Failed_reason(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer(ctx context.Context, sel ast.SelectionSet, obj *process.CanceledByCustomerReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CanceledByCustomer_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError(ctx context.Context, sel ast.SelectionSet, obj *process.CartValidationErrorReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_reason(ctx, field, obj)
		case "validationResult":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_CartValidationError_validationResult(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_ErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_Error", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_Error(ctx context.Context, sel ast.SelectionSet, obj *process.ErrorOccurredReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_ErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_Error")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_Error_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer(ctx context.Context, sel ast.SelectionSet, obj *process.PaymentCanceledByCustomerReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentCanceledByCustomer_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError", "Commerce_Checkout_PlaceOrderState_State_FailedReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError(ctx context.Context, sel ast.SelectionSet, obj *process.PaymentErrorOccurredReason) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentErrorImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FailedReason_PaymentError_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_PostRedirectImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_PostRedirect", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_PostRedirect(ctx context.Context, sel ast.SelectionSet, obj *dto1.PostRedirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_PostRedirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_PostRedirect")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Parameters":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_PostRedirect_Parameters(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_RedirectImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Redirect", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Redirect(ctx context.Context, sel ast.SelectionSet, obj *dto1.Redirect) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_RedirectImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Redirect")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Redirect_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Redirect_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowHTMLImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowHTML", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowHTML(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowHTML) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowHTMLImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowHTML")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "HTML":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowHTML_HTML(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowIframeImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowIframe", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowIframe(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowIframe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowIframeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowIframe")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowIframe_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_ShowWalletPaymentImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment(ctx context.Context, sel ast.SelectionSet, obj *dto1.ShowWalletPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_ShowWalletPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentMethod":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentMethod(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "paymentRequestAPI":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_ShowWalletPayment_paymentRequestAPI(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_SuccessImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Success", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success(ctx context.Context, sel ast.SelectionSet, obj *dto1.Success) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_SuccessImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Success")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Success_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_TriggerClientSDKImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK(ctx context.Context, sel ast.SelectionSet, obj *dto1.TriggerClientSDK) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_TriggerClientSDKImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "URL":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "data":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_TriggerClientSDK_data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_WaitImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Wait", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait(ctx context.Context, sel ast.SelectionSet, obj *dto1.Wait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_WaitImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Wait")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlaceOrderState_State_WaitForCustomerImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_WaitForCustomer", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_WaitForCustomer(ctx context.Context, sel ast.SelectionSet, obj *dto1.WaitForCustomer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlaceOrderState_State_WaitForCustomerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_WaitForCustomer")
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_WaitForCustomer_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_PlacedOrderInfosImplementors = []string{"Commerce_Checkout_PlacedOrderInfos"}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, obj *dto1.PlacedOrderInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_PlacedOrderInfosImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlacedOrderInfos")
		case "paymentInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx, field, obj)
		case "placedOrderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Checkout_StartPlaceOrder_ResultImplementors = []string{"Commerce_Checkout_StartPlaceOrder_Result"}

func (ec *executionContext) _Commerce_Checkout_StartPlaceOrder_Result(ctx context.Context, sel ast.SelectionSet, obj *dto1.StartPlaceOrderResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Checkout_StartPlaceOrder_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_StartPlaceOrder_Result")
		case "uuid":
			out.Values[i] = ec._Commerce_Checkout_StartPlaceOrder_Result_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Customer_AddressImplementors = []string{"Commerce_Customer_Address"}

func (ec *executionContext) _Commerce_Customer_Address(ctx context.Context, sel ast.SelectionSet, obj *domain5.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_AddressImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Address")
		case "id":
			out.Values[i] = ec._Commerce_Customer_Address_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "additionalAddressLines":
			out.Values[i] = ec._Commerce_Customer_Address_additionalAddressLines(ctx, field, obj)
		case "city":
			out.Values[i] = ec._Commerce_Customer_Address_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "company":
			out.Values[i] = ec._Commerce_Customer_Address_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Customer_Address_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultBilling":
			out.Values[i] = ec._Commerce_Customer_Address_defaultBilling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultShipping":
			out.Values[i] = ec._Commerce_Customer_Address_defaultShipping(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._Commerce_Customer_Address_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._Commerce_Customer_Address_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Customer_Address_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "prefix":
			out.Values[i] = ec._Commerce_Customer_Address_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Customer_Address_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Customer_Address_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "streetNumber":
			out.Values[i] = ec._Commerce_Customer_Address_streetNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Customer_Address_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "telephone":
			out.Values[i] = ec._Commerce_Customer_Address_telephone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Customer_Address_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Customer_PersonDataImplementors = []string{"Commerce_Customer_PersonData"}

func (ec *executionContext) _Commerce_Customer_PersonData(ctx context.Context, sel ast.SelectionSet, obj *domain5.PersonData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_PersonDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_PersonData")
		case "gender":
			out.Values[i] = ec._Commerce_Customer_PersonData_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "firstName":
			out.Values[i] = ec._Commerce_Customer_PersonData_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lastName":
			out.Values[i] = ec._Commerce_Customer_PersonData_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Customer_PersonData_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mainEmail":
			out.Values[i] = ec._Commerce_Customer_PersonData_mainEmail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "prefix":
			out.Values[i] = ec._Commerce_Customer_PersonData_prefix(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "birthday":
			out.Values[i] = ec._Commerce_Customer_PersonData_birthday(ctx, field, obj)
		case "nationality":
			out.Values[i] = ec._Commerce_Customer_PersonData_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Customer_ResultImplementors = []string{"Commerce_Customer_Result"}

func (ec *executionContext) _Commerce_Customer_Result(ctx context.Context, sel ast.SelectionSet, obj *dtocustomer.CustomerResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Result")
		case "id":
			out.Values[i] = ec._Commerce_Customer_Result_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "personalData":
			out.Values[i] = ec._Commerce_Customer_Result_personalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "getAddress":
			out.Values[i] = ec._Commerce_Customer_Result_getAddress(ctx, field, obj)
		case "addresses":
			out.Values[i] = ec._Commerce_Customer_Result_addresses(ctx, field, obj)
		case "defaultShippingAddress":
			out.Values[i] = ec._Commerce_Customer_Result_defaultShippingAddress(ctx, field, obj)
		case "defaultBillingAddress":
			out.Values[i] = ec._Commerce_Customer_Result_defaultBillingAddress(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Customer_Status_ResultImplementors = []string{"Commerce_Customer_Status_Result"}

func (ec *executionContext) _Commerce_Customer_Status_Result(ctx context.Context, sel ast.SelectionSet, obj *dtocustomer.CustomerStatusResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Customer_Status_ResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Customer_Status_Result")
		case "isLoggedIn":
			out.Values[i] = ec._Commerce_Customer_Status_Result_isLoggedIn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "userID":
			out.Values[i] = ec._Commerce_Customer_Status_Result_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_PriceImplementors = []string{"Commerce_Price"}

func (ec *executionContext) _Commerce_Price(ctx context.Context, sel ast.SelectionSet, obj *domain.Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_PriceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price")
		case "amount":
			out.Values[i] = ec._Commerce_Price_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Commerce_Price_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Price_ChargeImplementors = []string{"Commerce_Price_Charge"}

func (ec *executionContext) _Commerce_Price_Charge(ctx context.Context, sel ast.SelectionSet, obj *domain.Charge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_Charge")
		case "price":
			out.Values[i] = ec._Commerce_Price_Charge_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Price_Charge_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Price_Charge_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Price_Charge_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Price_ChargeQualifierImplementors = []string{"Commerce_Price_ChargeQualifier"}

func (ec *executionContext) _Commerce_Price_ChargeQualifier(ctx context.Context, sel ast.SelectionSet, obj *domain.ChargeQualifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargeQualifierImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_ChargeQualifier")
		case "type":
			out.Values[i] = ec._Commerce_Price_ChargeQualifier_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Price_ChargeQualifier_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Price_ChargesImplementors = []string{"Commerce_Price_Charges"}

func (ec *executionContext) _Commerce_Price_Charges(ctx context.Context, sel ast.SelectionSet, obj *domain.Charges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Price_ChargesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price_Charges")
		case "items":
			out.Values[i] = ec._Commerce_Price_Charges_items(ctx, field, obj)
		case "hasType":
			out.Values[i] = ec._Commerce_Price_Charges_hasType(ctx, field, obj)
		case "hasChargeQualifier":
			out.Values[i] = ec._Commerce_Price_Charges_hasChargeQualifier(ctx, field, obj)
		case "getByChargeQualifierForced":
			out.Values[i] = ec._Commerce_Price_Charges_getByChargeQualifierForced(ctx, field, obj)
		case "getByTypeForced":
			out.Values[i] = ec._Commerce_Price_Charges_getByTypeForced(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_ActiveVariantProductImplementors = []string{"Commerce_Product_ActiveVariantProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_ActiveVariantProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ActiveVariantProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ActiveVariantProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ActiveVariantProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variantMarketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_variantMarketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variationSelections":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_variationSelections(ctx, field, obj)
		case "activeVariationSelections":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_activeVariationSelections(ctx, field, obj)
		case "badges":
			out.Values[i] = ec._Commerce_Product_ActiveVariantProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_ActiveVariationSelectionImplementors = []string{"Commerce_Product_ActiveVariationSelection"}

func (ec *executionContext) _Commerce_Product_ActiveVariationSelection(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ActiveVariationSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ActiveVariationSelection")
		case "code":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_Product_ActiveVariationSelection_unitCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_AttributeImplementors = []string{"Commerce_Product_Attribute"}

func (ec *executionContext) _Commerce_Product_Attribute(ctx context.Context, sel ast.SelectionSet, obj *domain1.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Attribute")
		case "code":
			out.Values[i] = ec._Commerce_Product_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "codeLabel":
			out.Values[i] = ec._Commerce_Product_Attribute_codeLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Product_Attribute_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_Product_Attribute_unitCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_Product_Attribute_values(ctx, field, obj)
		case "labels":
			out.Values[i] = ec._Commerce_Product_Attribute_labels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_AttributesImplementors = []string{"Commerce_Product_Attributes"}

func (ec *executionContext) _Commerce_Product_Attributes(ctx context.Context, sel ast.SelectionSet, obj domain1.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Attributes")
		case "attributeKeys":
			out.Values[i] = ec._Commerce_Product_Attributes_attributeKeys(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._Commerce_Product_Attributes_attributes(ctx, field, obj)
		case "hasAttribute":
			out.Values[i] = ec._Commerce_Product_Attributes_hasAttribute(ctx, field, obj)
		case "getAttribute":
			out.Values[i] = ec._Commerce_Product_Attributes_getAttribute(ctx, field, obj)
		case "getAttributesByKey":
			out.Values[i] = ec._Commerce_Product_Attributes_getAttributesByKey(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_BadgeImplementors = []string{"Commerce_Product_Badge"}

func (ec *executionContext) _Commerce_Product_Badge(ctx context.Context, sel ast.SelectionSet, obj *domain1.Badge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_BadgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Badge")
		case "code":
			out.Values[i] = ec._Commerce_Product_Badge_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_Badge_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_BadgesImplementors = []string{"Commerce_Product_Badges"}

func (ec *executionContext) _Commerce_Product_Badges(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductBadges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_BadgesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Badges")
		case "all":
			out.Values[i] = ec._Commerce_Product_Badges_all(ctx, field, obj)
		case "first":
			out.Values[i] = ec._Commerce_Product_Badges_first(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_BundleProductImplementors = []string{"Commerce_Product_BundleProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_BundleProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.BundleProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_BundleProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_BundleProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_BundleProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_BundleProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_BundleProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_BundleProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_BundleProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_BundleProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_BundleProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_BundleProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_BundleProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_BundleProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_BundleProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_BundleProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_BundleProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badges":
			out.Values[i] = ec._Commerce_Product_BundleProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "choices":
			out.Values[i] = ec._Commerce_Product_BundleProduct_choices(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_CategoriesImplementors = []string{"Commerce_Product_Categories"}

func (ec *executionContext) _Commerce_Product_Categories(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductCategories) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_CategoriesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Categories")
		case "main":
			out.Values[i] = ec._Commerce_Product_Categories_main(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "all":
			out.Values[i] = ec._Commerce_Product_Categories_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_CategoryTeaserImplementors = []string{"Commerce_Product_CategoryTeaser"}

func (ec *executionContext) _Commerce_Product_CategoryTeaser(ctx context.Context, sel ast.SelectionSet, obj *domain1.CategoryTeaser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_CategoryTeaserImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_CategoryTeaser")
		case "code":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "parent":
			out.Values[i] = ec._Commerce_Product_CategoryTeaser_parent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_ChoiceImplementors = []string{"Commerce_Product_Choice"}

func (ec *executionContext) _Commerce_Product_Choice(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.Choice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ChoiceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Choice")
		case "identifier":
			out.Values[i] = ec._Commerce_Product_Choice_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "required":
			out.Values[i] = ec._Commerce_Product_Choice_required(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_Choice_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Product_Choice_options(ctx, field, obj)
		case "active":
			out.Values[i] = ec._Commerce_Product_Choice_active(ctx, field, obj)
		case "activeOption":
			out.Values[i] = ec._Commerce_Product_Choice_activeOption(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_ConfigurableProductImplementors = []string{"Commerce_Product_ConfigurableProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_ConfigurableProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ConfigurableProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_ConfigurableProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_ConfigurableProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variantSelection":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_variantSelection(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badges":
			out.Values[i] = ec._Commerce_Product_ConfigurableProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_LoyaltyImplementors = []string{"Commerce_Product_Loyalty"}

func (ec *executionContext) _Commerce_Product_Loyalty(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductLoyalty) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_LoyaltyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty")
		case "price":
			out.Values[i] = ec._Commerce_Product_Loyalty_price(ctx, field, obj)
		case "earning":
			out.Values[i] = ec._Commerce_Product_Loyalty_earning(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_Loyalty_EarningInfoImplementors = []string{"Commerce_Product_Loyalty_EarningInfo"}

func (ec *executionContext) _Commerce_Product_Loyalty_EarningInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.LoyaltyEarningInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_Loyalty_EarningInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty_EarningInfo")
		case "type":
			out.Values[i] = ec._Commerce_Product_Loyalty_EarningInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "default":
			out.Values[i] = ec._Commerce_Product_Loyalty_EarningInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_Loyalty_PriceInfoImplementors = []string{"Commerce_Product_Loyalty_PriceInfo"}

func (ec *executionContext) _Commerce_Product_Loyalty_PriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.LoyaltyPriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_Loyalty_PriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Loyalty_PriceInfo")
		case "type":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "default":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDiscounted":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_isDiscounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discounted":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_discounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "discountText":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "minPointsToSpent":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_minPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "maxPointsToSpent":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_maxPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "context":
			out.Values[i] = ec._Commerce_Product_Loyalty_PriceInfo_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_MediaImplementors = []string{"Commerce_Product_Media"}

func (ec *executionContext) _Commerce_Product_Media(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductMedia) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MediaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Media")
		case "all":
			out.Values[i] = ec._Commerce_Product_Media_all(ctx, field, obj)
		case "getMedia":
			out.Values[i] = ec._Commerce_Product_Media_getMedia(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_MediaItemImplementors = []string{"Commerce_Product_MediaItem"}

func (ec *executionContext) _Commerce_Product_MediaItem(ctx context.Context, sel ast.SelectionSet, obj *domain1.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MediaItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_MediaItem")
		case "type":
			out.Values[i] = ec._Commerce_Product_MediaItem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Commerce_Product_MediaItem_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usage":
			out.Values[i] = ec._Commerce_Product_MediaItem_usage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Product_MediaItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Product_MediaItem_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_MetaImplementors = []string{"Commerce_Product_Meta"}

func (ec *executionContext) _Commerce_Product_Meta(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.ProductMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_MetaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Meta")
		case "keywords":
			out.Values[i] = ec._Commerce_Product_Meta_keywords(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_OptionImplementors = []string{"Commerce_Product_Option"}

func (ec *executionContext) _Commerce_Product_Option(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.Option) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_OptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_Option")
		case "product":
			out.Values[i] = ec._Commerce_Product_Option_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "qty":
			out.Values[i] = ec._Commerce_Product_Option_qty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_PriceContextImplementors = []string{"Commerce_Product_PriceContext"}

func (ec *executionContext) _Commerce_Product_PriceContext(ctx context.Context, sel ast.SelectionSet, obj *domain1.PriceContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_PriceContextImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_PriceContext")
		case "customerGroup":
			out.Values[i] = ec._Commerce_Product_PriceContext_customerGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Product_PriceContext_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "channelCode":
			out.Values[i] = ec._Commerce_Product_PriceContext_channelCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locale":
			out.Values[i] = ec._Commerce_Product_PriceContext_locale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_PriceInfoImplementors = []string{"Commerce_Product_PriceInfo"}

func (ec *executionContext) _Commerce_Product_PriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain1.PriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_PriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_PriceInfo")
		case "default":
			out.Values[i] = ec._Commerce_Product_PriceInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "discounted":
			out.Values[i] = ec._Commerce_Product_PriceInfo_discounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "discountText":
			out.Values[i] = ec._Commerce_Product_PriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activeBase":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Product_PriceInfo_activeBase(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "activeBaseAmount":
			out.Values[i] = ec._Commerce_Product_PriceInfo_activeBaseAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "activeBaseUnit":
			out.Values[i] = ec._Commerce_Product_PriceInfo_activeBaseUnit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isDiscounted":
			out.Values[i] = ec._Commerce_Product_PriceInfo_isDiscounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "campaignRules":
			out.Values[i] = ec._Commerce_Product_PriceInfo_campaignRules(ctx, field, obj)
		case "denyMoreDiscounts":
			out.Values[i] = ec._Commerce_Product_PriceInfo_denyMoreDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "context":
			out.Values[i] = ec._Commerce_Product_PriceInfo_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "taxClass":
			out.Values[i] = ec._Commerce_Product_PriceInfo_taxClass(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_SearchResultImplementors = []string{"Commerce_Product_SearchResult"}

func (ec *executionContext) _Commerce_Product_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *graphql1.SearchResultDTO) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_SearchResult")
		case "products":
			out.Values[i] = ec._Commerce_Product_SearchResult_products(ctx, field, obj)
		case "facets":
			out.Values[i] = ec._Commerce_Product_SearchResult_facets(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "suggestions":
			out.Values[i] = ec._Commerce_Product_SearchResult_suggestions(ctx, field, obj)
		case "searchMeta":
			out.Values[i] = ec._Commerce_Product_SearchResult_searchMeta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasSelectedFacet":
			out.Values[i] = ec._Commerce_Product_SearchResult_hasSelectedFacet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "promotion":
			out.Values[i] = ec._Commerce_Product_SearchResult_promotion(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._Commerce_Product_SearchResult_actions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_SimpleProductImplementors = []string{"Commerce_Product_SimpleProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_Product_SimpleProduct(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.SimpleProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_SimpleProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_SimpleProduct")
		case "type":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "identifier":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_media(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availablePrices":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_availablePrices(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "categories":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_categories(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "shortDescription":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_meta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "loyalty":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_loyalty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "badges":
			out.Values[i] = ec._Commerce_Product_SimpleProduct_badges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelectionImplementors = []string{"Commerce_Product_VariantSelection"}

func (ec *executionContext) _Commerce_Product_VariantSelection(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection")
		case "variants":
			out.Values[i] = ec._Commerce_Product_VariantSelection_variants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_Product_VariantSelection_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_AttributeImplementors = []string{"Commerce_Product_VariantSelection_Attribute"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelectionAttribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Attribute")
		case "label":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_options(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_Attribute_OptionImplementors = []string{"Commerce_Product_VariantSelection_Attribute_Option"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Attribute_Option(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelectionAttributeOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_Attribute_OptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Attribute_Option")
		case "label":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_Option_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_Option_unitCode(ctx, field, obj)
		case "otherAttributesRestrictions":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Attribute_Option_otherAttributesRestrictions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_MatchImplementors = []string{"Commerce_Product_VariantSelection_Match"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelectionMatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_MatchImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Match")
		case "attributes":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Match_attributes(ctx, field, obj)
		case "variant":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Match_variant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_Match_AttributesImplementors = []string{"Commerce_Product_VariantSelection_Match_Attributes"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_Attributes(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelectionMatchAttributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_Match_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Match_Attributes")
		case "key":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Match_Attributes_key(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Match_Attributes_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_Match_VariantImplementors = []string{"Commerce_Product_VariantSelection_Match_Variant"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Match_Variant(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariantSelectionMatchVariant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_Match_VariantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Match_Variant")
		case "marketplaceCode":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Match_Variant_marketplaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariantSelection_Option_OtherAttributesRestrictionImplementors = []string{"Commerce_Product_VariantSelection_Option_OtherAttributesRestriction"}

func (ec *executionContext) _Commerce_Product_VariantSelection_Option_OtherAttributesRestriction(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.OtherAttributesRestriction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariantSelection_Option_OtherAttributesRestrictionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariantSelection_Option_OtherAttributesRestriction")
		case "code":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "availableOptions":
			out.Values[i] = ec._Commerce_Product_VariantSelection_Option_OtherAttributesRestriction_availableOptions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariationSelectionImplementors = []string{"Commerce_Product_VariationSelection"}

func (ec *executionContext) _Commerce_Product_VariationSelection(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection")
		case "code":
			out.Values[i] = ec._Commerce_Product_VariationSelection_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Product_VariationSelection_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "options":
			out.Values[i] = ec._Commerce_Product_VariationSelection_options(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariationSelection_OptionImplementors = []string{"Commerce_Product_VariationSelection_Option"}

func (ec *executionContext) _Commerce_Product_VariationSelection_Option(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelection_OptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection_Option")
		case "label":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_unitCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "variant":
			out.Values[i] = ec._Commerce_Product_VariationSelection_Option_variant(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Product_VariationSelection_OptionVariantImplementors = []string{"Commerce_Product_VariationSelection_OptionVariant"}

func (ec *executionContext) _Commerce_Product_VariationSelection_OptionVariant(ctx context.Context, sel ast.SelectionSet, obj *graphqlproductdto.VariationSelectionOptionVariant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Product_VariationSelection_OptionVariantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_VariationSelection_OptionVariant")
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_Product_VariationSelection_OptionVariant_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_ActionImplementors = []string{"Commerce_Search_Action"}

func (ec *executionContext) _Commerce_Search_Action(ctx context.Context, sel ast.SelectionSet, obj *domain2.Action) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_ActionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Action")
		case "type":
			out.Values[i] = ec._Commerce_Search_Action_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Commerce_Search_Action_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_ListFacetImplementors = []string{"Commerce_Search_ListFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_ListFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchListFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_ListFacetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_ListFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_ListFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_ListFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_ListFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_ListFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_ListFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_ListFacetItemImplementors = []string{"Commerce_Search_ListFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_ListFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_ListFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_ListFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_ListFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_MetaImplementors = []string{"Commerce_Search_Meta"}

func (ec *executionContext) _Commerce_Search_Meta(ctx context.Context, sel ast.SelectionSet, obj *domain2.SearchMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_MetaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Meta")
		case "query":
			out.Values[i] = ec._Commerce_Search_Meta_query(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "originalQuery":
			out.Values[i] = ec._Commerce_Search_Meta_originalQuery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "page":
			out.Values[i] = ec._Commerce_Search_Meta_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "numPages":
			out.Values[i] = ec._Commerce_Search_Meta_numPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "numResults":
			out.Values[i] = ec._Commerce_Search_Meta_numResults(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "sortOptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Commerce_Search_Meta_sortOptions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_PromotionImplementors = []string{"Commerce_Search_Promotion"}

func (ec *executionContext) _Commerce_Search_Promotion(ctx context.Context, sel ast.SelectionSet, obj *searchdto.PromotionDTO) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_PromotionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Promotion")
		case "title":
			out.Values[i] = ec._Commerce_Search_Promotion_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "content":
			out.Values[i] = ec._Commerce_Search_Promotion_content(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Commerce_Search_Promotion_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_Search_Promotion_media(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_PromotionMediaImplementors = []string{"Commerce_Search_PromotionMedia"}

func (ec *executionContext) _Commerce_Search_PromotionMedia(ctx context.Context, sel ast.SelectionSet, obj *domain2.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_PromotionMediaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_PromotionMedia")
		case "type":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "usage":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_usage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Search_PromotionMedia_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_RangeFacetImplementors = []string{"Commerce_Search_RangeFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_RangeFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchRangeFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_RangeFacetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_RangeFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_RangeFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_RangeFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_RangeFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_RangeFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_RangeFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_RangeFacetItemImplementors = []string{"Commerce_Search_RangeFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_RangeFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_RangeFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_RangeFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "min":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_min(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "max":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_max(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedMin":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selectedMin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selectedMax":
			out.Values[i] = ec._Commerce_Search_RangeFacetItem_selectedMax(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_SortOptionImplementors = []string{"Commerce_Search_SortOption"}

func (ec *executionContext) _Commerce_Search_SortOption(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchSortOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_SortOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_SortOption")
		case "label":
			out.Values[i] = ec._Commerce_Search_SortOption_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "field":
			out.Values[i] = ec._Commerce_Search_SortOption_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_SortOption_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_SuggestionImplementors = []string{"Commerce_Search_Suggestion"}

func (ec *executionContext) _Commerce_Search_Suggestion(ctx context.Context, sel ast.SelectionSet, obj *domain2.Suggestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_SuggestionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Suggestion")
		case "text":
			out.Values[i] = ec._Commerce_Search_Suggestion_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "highlight":
			out.Values[i] = ec._Commerce_Search_Suggestion_highlight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_TreeFacetImplementors = []string{"Commerce_Search_TreeFacet", "Commerce_Search_Facet"}

func (ec *executionContext) _Commerce_Search_TreeFacet(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchTreeFacet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_TreeFacetImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_TreeFacet")
		case "name":
			out.Values[i] = ec._Commerce_Search_TreeFacet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Search_TreeFacet_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "position":
			out.Values[i] = ec._Commerce_Search_TreeFacet_position(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_TreeFacet_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasSelectedItem":
			out.Values[i] = ec._Commerce_Search_TreeFacet_hasSelectedItem(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var commerce_Search_TreeFacetItemImplementors = []string{"Commerce_Search_TreeFacetItem", "Commerce_Search_FacetItem"}

func (ec *executionContext) _Commerce_Search_TreeFacetItem(ctx context.Context, sel ast.SelectionSet, obj *searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commerce_Search_TreeFacetItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_TreeFacetItem")
		case "label":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "selected":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_selected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "count":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "items":
			out.Values[i] = ec._Commerce_Search_TreeFacetItem_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "flamingo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_flamingo(ctx, field)
			})
		case "Commerce_Cart_AddToCart":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_AddToCart(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_DeleteCartDelivery":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_DeleteCartDelivery(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_DeleteItem":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_DeleteItem(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateItemQty":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateItemQty(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateItemBundleConfig":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateItemBundleConfig(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateBillingAddress":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateBillingAddress(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateSelectedPayment":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateSelectedPayment(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_ApplyCouponCodeOrGiftCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_ApplyCouponCodeOrGiftCard(ctx, field)
			})
		case "Commerce_Cart_RemoveGiftCard":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_RemoveGiftCard(ctx, field)
			})
		case "Commerce_Cart_RemoveCouponCode":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_RemoveCouponCode(ctx, field)
			})
		case "Commerce_Cart_UpdateDeliveryAddresses":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateDeliveryAddresses(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateDeliveryShippingOptions":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateDeliveryShippingOptions(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_Clean":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_Clean(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateAdditionalData":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateAdditionalData(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Cart_UpdateDeliveriesAdditionalData":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Cart_UpdateDeliveriesAdditionalData(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Checkout_StartPlaceOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Checkout_StartPlaceOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Checkout_CancelPlaceOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Checkout_CancelPlaceOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Checkout_ClearPlaceOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Checkout_ClearPlaceOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Checkout_RefreshPlaceOrder":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Checkout_RefreshPlaceOrder(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "Commerce_Checkout_RefreshPlaceOrderBlocking":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_Commerce_Checkout_RefreshPlaceOrderBlocking(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "flamingo":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flamingo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Product":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Product_Search":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product_Search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Customer_Status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Customer_Status(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Customer":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Customer(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Cart_DecoratedCart":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_DecoratedCart(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Cart_Validator":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_Validator(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Cart_QtyRestriction":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart_QtyRestriction(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Checkout_ActivePlaceOrder":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Checkout_ActivePlaceOrder(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Checkout_CurrentContext":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Checkout_CurrentContext(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_CategoryTree":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_CategoryTree(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Commerce_Category":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Category(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCommerce_Cart_AddToCartInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐAddToCart(ctx context.Context, v interface{}) (dto.AddToCart, error) {
	res, err := ec.unmarshalInputCommerce_Cart_AddToCartInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_AdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx context.Context, sel ast.SelectionSet, v cart.AdditionalData) graphql.Marshaler {
	return ec._Commerce_Cart_AdditionalData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx context.Context, sel ast.SelectionSet, v cart.AppliedDiscount) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedDiscount(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscounts2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, v dto.CartAppliedDiscounts) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedDiscounts(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedDiscounts2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, v *dto.CartAppliedDiscounts) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_AppliedDiscounts(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_AppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, v cart.AppliedGiftCard) graphql.Marshaler {
	return ec._Commerce_Cart_AppliedGiftCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v dto.BillingAddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v *dto.BillingAddressForm) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx context.Context, sel ast.SelectionSet, v cart.Cart) graphql.Marshaler {
	return ec._Commerce_Cart_Cart(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Cart_ChoiceConfigurationInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfiguration(ctx context.Context, v interface{}) (dto.ChoiceConfiguration, error) {
	res, err := ec.unmarshalInputCommerce_Cart_ChoiceConfigurationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_ChoiceConfigurationInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfigurationᚄ(ctx context.Context, v interface{}) ([]*dto.ChoiceConfiguration, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.ChoiceConfiguration, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_ChoiceConfigurationInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfiguration(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_ChoiceConfigurationInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfiguration(ctx context.Context, v interface{}) (*dto.ChoiceConfiguration, error) {
	res, err := ec.unmarshalInputCommerce_Cart_ChoiceConfigurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_CouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx context.Context, sel ast.SelectionSet, v cart.CouponCode) graphql.Marshaler {
	return ec._Commerce_Cart_CouponCode(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_CustomAttributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx context.Context, sel ast.SelectionSet, v dto.CustomAttributes) graphql.Marshaler {
	return ec._Commerce_Cart_CustomAttributes(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_CustomAttributes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCustomAttributes(ctx context.Context, sel ast.SelectionSet, v *dto.CustomAttributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_CustomAttributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedCart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedCart) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedCart) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedDelivery) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_DecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v dto.DecoratedCartItem) graphql.Marshaler {
	return ec._Commerce_Cart_DecoratedItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v cart.Delivery) graphql.Marshaler {
	return ec._Commerce_Cart_Delivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *cart.Delivery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Delivery(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalDataᚄ(ctx context.Context, v interface{}) ([]*dto.DeliveryAdditionalData, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.DeliveryAdditionalData, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAdditionalDataInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAdditionalData(ctx context.Context, v interface{}) (*dto.DeliveryAdditionalData, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryAdditionalDataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_DeliveryAddressForm2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, v []*dto.DeliveryAddressForm) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Cart_DeliveryAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryAddressInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx context.Context, v interface{}) (*forms.DeliveryForm, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_DeliveryShippingOptionInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx context.Context, v interface{}) (*dto.DeliveryShippingOption, error) {
	res, err := ec.unmarshalInputCommerce_Cart_DeliveryShippingOptionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx context.Context, sel ast.SelectionSet, v domain4.Error) graphql.Marshaler {
	return ec._Commerce_Cart_Form_Error(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx context.Context, sel ast.SelectionSet, v dto.FieldError) graphql.Marshaler {
	return ec._Commerce_Cart_Form_FieldError(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_Cart_Item(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Item2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v *cart.Item) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Item(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_ItemValidationError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationError(ctx context.Context, sel ast.SelectionSet, v validation.ItemValidationError) graphql.Marshaler {
	return ec._Commerce_Cart_ItemValidationError(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, v interface{}) (dto.KeyValue, error) {
	res, err := ec.unmarshalInputCommerce_Cart_KeyValueInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx context.Context, v interface{}) ([]dto.KeyValue, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.KeyValue, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_KeyValueInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValueᚄ(ctx context.Context, v interface{}) ([]*dto.KeyValue, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.KeyValue, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_KeyValueInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCommerce_Cart_KeyValueInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, v interface{}) (*dto.KeyValue, error) {
	res, err := ec.unmarshalInputCommerce_Cart_KeyValueInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Cart_PaymentSelection_Split2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplit(ctx context.Context, sel ast.SelectionSet, v *dto.PaymentSelectionSplit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_PaymentSelection_Split(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_PaymentSelection_SplitQualifier2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐSplitQualifier(ctx context.Context, sel ast.SelectionSet, v cart.SplitQualifier) graphql.Marshaler {
	return ec._Commerce_Cart_PaymentSelection_SplitQualifier(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx context.Context, sel ast.SelectionSet, v cart.PersonalDetails) graphql.Marshaler {
	return ec._Commerce_Cart_PersonalDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, v placeorder.PlacedOrderInfo) graphql.Marshaler {
	return ec._Commerce_Cart_PlacedOrderInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedCartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedCartItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedCartItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedItems2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedItems(ctx context.Context, sel ast.SelectionSet, v dto.PricedItems) graphql.Marshaler {
	return ec._Commerce_Cart_PricedItems(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedShippingItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedShippingItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PricedTotalItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItem(ctx context.Context, sel ast.SelectionSet, v dto.PricedTotalItem) graphql.Marshaler {
	return ec._Commerce_Cart_PricedTotalItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_QtyRestrictionResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx context.Context, sel ast.SelectionSet, v validation.RestrictionResult) graphql.Marshaler {
	return ec._Commerce_Cart_QtyRestrictionResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_QtyRestrictionResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐRestrictionResult(ctx context.Context, sel ast.SelectionSet, v *validation.RestrictionResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_QtyRestrictionResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v dto.SelectedPaymentResult) graphql.Marshaler {
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v *dto.SelectedPaymentResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Summary2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐCartSummary(ctx context.Context, sel ast.SelectionSet, v dto.CartSummary) graphql.Marshaler {
	return ec._Commerce_Cart_Summary(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v cart.Tax) graphql.Marshaler {
	return ec._Commerce_Cart_Tax(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Tax2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v []cart.Tax) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNCommerce_Cart_Teaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTeaser(ctx context.Context, sel ast.SelectionSet, v *cart.Teaser) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_Teaser(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Totalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx context.Context, sel ast.SelectionSet, v cart.Totalitem) graphql.Marshaler {
	return ec._Commerce_Cart_Totalitem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx context.Context, sel ast.SelectionSet, v dto.UpdateShippingOptionsResult) graphql.Marshaler {
	return ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_UpdateDeliveryShippingOptions_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐUpdateShippingOptionsResult(ctx context.Context, sel ast.SelectionSet, v *dto.UpdateShippingOptionsResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_UpdateDeliveryShippingOptions_Result(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx context.Context, sel ast.SelectionSet, v validation.Result) graphql.Marshaler {
	return ec._Commerce_Cart_ValidationResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_ValidationResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx context.Context, sel ast.SelectionSet, v *validation.Result) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_ValidationResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx context.Context, sel ast.SelectionSet, v domain3.Category) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Category(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain3.Attribute) graphql.Marshaler {
	return ec._Commerce_Category_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v domain3.AttributeValue) graphql.Marshaler {
	return ec._Commerce_Category_AttributeValue(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain3.Attributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Category_Attributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v dto1.PlaceOrderContext) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v *dto1.PlaceOrderContext) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, v application.PlaceOrderPaymentInfo) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderPaymentInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_Form_Parameter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameter(ctx context.Context, sel ast.SelectionSet, v dto1.FormParameter) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderState_Form_Parameter(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_PaymentRequestAPI2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPaymentRequestAPI(ctx context.Context, sel ast.SelectionSet, v dto1.PaymentRequestAPI) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderState_PaymentRequestAPI(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐState(ctx context.Context, sel ast.SelectionSet, v dto1.State) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderState_State(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderState_State_FailedReason2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐFailedReason(ctx context.Context, sel ast.SelectionSet, v process.FailedReason) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderState_State_FailedReason(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_StartPlaceOrder_Result2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx context.Context, sel ast.SelectionSet, v dto1.StartPlaceOrderResult) graphql.Marshaler {
	return ec._Commerce_Checkout_StartPlaceOrder_Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_StartPlaceOrder_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐStartPlaceOrderResult(ctx context.Context, sel ast.SelectionSet, v *dto1.StartPlaceOrderResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_StartPlaceOrder_Result(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v domain5.Address) graphql.Marshaler {
	return ec._Commerce_Customer_Address(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Customer_PersonData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐPersonData(ctx context.Context, sel ast.SelectionSet, v domain5.PersonData) graphql.Marshaler {
	return ec._Commerce_Customer_PersonData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v *domain.Price) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Price(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx context.Context, sel ast.SelectionSet, v domain.Charge) graphql.Marshaler {
	return ec._Commerce_Price_Charge(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Price_ChargeQualifierInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeQualifier(ctx context.Context, v interface{}) (domain.ChargeQualifier, error) {
	res, err := ec.unmarshalInputCommerce_Price_ChargeQualifierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Price_Charges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharges(ctx context.Context, sel ast.SelectionSet, v domain.Charges) graphql.Marshaler {
	return ec._Commerce_Price_Charges(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Product(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_ActiveVariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelection(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	return ec._Commerce_Product_ActiveVariationSelection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Product_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain1.Attributes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_Attributes(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_Badge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx context.Context, sel ast.SelectionSet, v domain1.Badge) graphql.Marshaler {
	return ec._Commerce_Product_Badge(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Badges2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductBadges(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductBadges) graphql.Marshaler {
	return ec._Commerce_Product_Badges(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Categories2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductCategories(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductCategories) graphql.Marshaler {
	return ec._Commerce_Product_Categories(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v domain1.CategoryTeaser) graphql.Marshaler {
	return ec._Commerce_Product_CategoryTeaser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Choice2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoice(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Choice) graphql.Marshaler {
	return ec._Commerce_Product_Choice(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Product_ChoiceConfigurationInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceConfiguration(ctx context.Context, v interface{}) (*graphqlproductdto.ChoiceConfiguration, error) {
	res, err := ec.unmarshalInputCommerce_Product_ChoiceConfigurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Product_Loyalty2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductLoyalty(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductLoyalty) graphql.Marshaler {
	return ec._Commerce_Product_Loyalty(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Media2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMedia(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductMedia) graphql.Marshaler {
	return ec._Commerce_Product_Media(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_MediaItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v domain1.Media) graphql.Marshaler {
	return ec._Commerce_Product_MediaItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_MediaItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v *domain1.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_MediaItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductMeta(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.ProductMeta) graphql.Marshaler {
	return ec._Commerce_Product_Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOption(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Option) graphql.Marshaler {
	return ec._Commerce_Product_Option(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx context.Context, sel ast.SelectionSet, v domain1.PriceContext) graphql.Marshaler {
	return ec._Commerce_Product_PriceContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain1.PriceInfo) graphql.Marshaler {
	return ec._Commerce_Product_PriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx context.Context, sel ast.SelectionSet, v graphql1.SearchResultDTO) graphql.Marshaler {
	return ec._Commerce_Product_SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚐSearchResultDTO(ctx context.Context, sel ast.SelectionSet, v *graphql1.SearchResultDTO) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelection(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelection) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttribute(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelectionAttribute) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariantSelectionAttribute) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariantSelection_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Attribute_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeOption(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelectionAttributeOption) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Attribute_Option(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Attribute_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariantSelectionAttributeOption) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariantSelection_Attribute_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionAttributeOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Match2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatch(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelectionMatch) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Match(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Match2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariantSelectionMatch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariantSelection_Match2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Match_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchAttributes(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelectionMatchAttributes) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Match_Attributes(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Match_Variant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchVariant(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariantSelectionMatchVariant) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Match_Variant(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Option_OtherAttributesRestriction2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOtherAttributesRestriction(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.OtherAttributesRestriction) graphql.Marshaler {
	return ec._Commerce_Product_VariantSelection_Option_OtherAttributesRestriction(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_VariantSelection_Option_OtherAttributesRestriction2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOtherAttributesRestrictionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.OtherAttributesRestriction) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariantSelection_Option_OtherAttributesRestriction2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOtherAttributesRestriction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelection(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelection) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx context.Context, v interface{}) (graphqlproductdto.VariationSelectionOptionState, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := graphqlproductdto.VariationSelectionOptionState(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection_OptionState2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionState(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOptionState) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCommerce_Product_VariationSelection_OptionVariant2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOptionVariant(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOptionVariant) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection_OptionVariant(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_Action2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐAction(ctx context.Context, sel ast.SelectionSet, v domain2.Action) graphql.Marshaler {
	return ec._Commerce_Search_Action(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_Facet2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacet(ctx context.Context, sel ast.SelectionSet, v searchdto.CommerceSearchFacet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_Facet(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Facet2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacetᚄ(ctx context.Context, sel ast.SelectionSet, v []searchdto.CommerceSearchFacet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Facet2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchFacet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilter(ctx context.Context, v interface{}) (searchdto.CommerceSearchKeyValueFilter, error) {
	res, err := ec.unmarshalInputCommerce_Search_KeyValueFilter(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Search_ListFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_ListFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Search_ListFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchListFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchListFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_ListFacetItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx context.Context, sel ast.SelectionSet, v domain2.SearchMeta) graphql.Marshaler {
	return ec._Commerce_Search_Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_RangeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_RangeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Search_RangeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRangeFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchRangeFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_RangeFacetItem(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (searchdto.CommerceSearchRequest, error) {
	res, err := ec.unmarshalInputCommerce_Search_Request(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCommerce_Search_SortOption2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOption(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchSortOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_SortOption(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx context.Context, sel ast.SelectionSet, v domain2.Suggestion) graphql.Marshaler {
	return ec._Commerce_Search_Suggestion(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx context.Context, sel ast.SelectionSet, v *searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Search_TreeFacetItem(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain3.Tree) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Commerce_Tree(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2mathᚋbigᚐFloat(ctx context.Context, v interface{}) (big.Float, error) {
	res, err := graphql2.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2mathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v big.Float) graphql.Marshaler {
	res := graphql2.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, v interface{}) (*big.Float, error) {
	res, err := graphql2.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v *big.Float) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql2.MarshalFloat(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCommerce_Cart_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx context.Context, sel ast.SelectionSet, v *cart.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Address(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_AddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, sel ast.SelectionSet, v forms.AddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_AddressForm(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_AddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, v interface{}) (forms.AddressForm, error) {
	res, err := ec.unmarshalInputCommerce_Cart_AddressFormInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCommerce_Cart_AddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐAddressForm(ctx context.Context, v interface{}) (*forms.AddressForm, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommerce_Cart_AddressFormInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommerce_Cart_AppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscountᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedDiscount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_AppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_AppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCardᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedGiftCard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_AppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCommerce_Cart_ChoiceConfigurationInput2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfigurationᚄ(ctx context.Context, v interface{}) ([]dto.ChoiceConfiguration, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.ChoiceConfiguration, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_ChoiceConfigurationInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐChoiceConfiguration(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Cart_CouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCodeᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.CouponCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_CouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedCart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDeliveryᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_DecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v *dto.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DecoratedDelivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.DecoratedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_DecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDecoratedCartItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Delivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Delivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Delivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Delivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryAddressForm(ctx context.Context, sel ast.SelectionSet, v *dto.DeliveryAddressForm) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_DeliveryAddressForm(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_DeliveryAddressInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryFormᚄ(ctx context.Context, v interface{}) ([]*forms.DeliveryForm, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*forms.DeliveryForm, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryAddressInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐDeliveryForm(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryInfo) graphql.Marshaler {
	return ec._Commerce_Cart_DeliveryInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_DeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryLocation) graphql.Marshaler {
	return ec._Commerce_Cart_DeliveryLocation(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOCommerce_Cart_DeliveryShippingOptionInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOptionᚄ(ctx context.Context, v interface{}) ([]*dto.DeliveryShippingOption, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.DeliveryShippingOption, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Cart_DeliveryShippingOptionInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐDeliveryShippingOption(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Cart_ExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx context.Context, sel ast.SelectionSet, v *cart.ExistingCustomerData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_ExistingCustomerData(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []domain4.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.FieldError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx context.Context, sel ast.SelectionSet, v dto.ValidationInfo) graphql.Marshaler {
	return ec._Commerce_Cart_Form_ValidationInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_Cart_Item(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Item2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItemᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Item2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_ItemValidationError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationErrorᚄ(ctx context.Context, sel ast.SelectionSet, v []validation.ItemValidationError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_ItemValidationError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐItemValidationError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_KeyValue2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐKeyValue(ctx context.Context, sel ast.SelectionSet, v *dto.KeyValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_KeyValue(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx context.Context, sel ast.SelectionSet, v cart.PaymentSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_PaymentSelection(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PaymentSelection_Split2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplitᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.PaymentSelectionSplit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PaymentSelection_Split2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPaymentSelectionSplit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Person2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx context.Context, sel ast.SelectionSet, v *cart.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Person(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []placeorder.PlacedOrderInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedCartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedCartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedCartItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedShippingItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedShippingItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedShippingItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_PricedTotalItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItemᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.PricedTotalItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PricedTotalItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐPricedTotalItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_ShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx context.Context, sel ast.SelectionSet, v cart.ShippingItem) graphql.Marshaler {
	return ec._Commerce_Cart_ShippingItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Tax2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTax(ctx context.Context, sel ast.SelectionSet, v cart.Tax) graphql.Marshaler {
	return ec._Commerce_Cart_Tax(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Taxes2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐTaxes(ctx context.Context, sel ast.SelectionSet, v *dto.Taxes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Cart_Taxes(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Cart_Totalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitemᚄ(ctx context.Context, sel ast.SelectionSet, v []cart.Totalitem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Totalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain3.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v *domain3.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_Attribute(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValueᚄ(ctx context.Context, sel ast.SelectionSet, v []domain3.AttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋcategorydtoᚐCategorySearchResult(ctx context.Context, sel ast.SelectionSet, v *categorydto.CategorySearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []application.PlaceOrderPaymentInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderState_Form_Parameter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameterᚄ(ctx context.Context, sel ast.SelectionSet, v []dto1.FormParameter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Checkout_PlaceOrderState_Form_Parameter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐFormParameter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, v *dto1.PlacedOrderInfos) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlacedOrderInfos(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v domain5.Address) graphql.Marshaler {
	return ec._Commerce_Customer_Address(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Customer_Address2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []domain5.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Customer_Address2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Customer_Address2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋdomainᚐAddress(ctx context.Context, sel ast.SelectionSet, v *domain5.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Address(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerResult(ctx context.Context, sel ast.SelectionSet, v *dtocustomer.CustomerResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Result(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Customer_Status_Result2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcustomerᚋinterfacesᚋgraphqlᚋdtocustomerᚐCustomerStatusResult(ctx context.Context, sel ast.SelectionSet, v *dtocustomer.CustomerStatusResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Customer_Status_Result(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Price2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v *domain.Price) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Price(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx context.Context, sel ast.SelectionSet, v domain.Charge) graphql.Marshaler {
	return ec._Commerce_Price_Charge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Price_Charge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐChargeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.Charge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Price_Charge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐCharge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProductᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.Product) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_ActiveVariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelectionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.ActiveVariationSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_ActiveVariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐActiveVariationSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Product_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Badge2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadgeᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Badge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Badge2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Badge2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBadge(ctx context.Context, sel ast.SelectionSet, v *domain1.Badge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Badge(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaserᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v *domain1.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_CategoryTeaser(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_Choice2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.Choice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Choice2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCommerce_Product_ChoiceConfigurationInput2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceConfigurationᚄ(ctx context.Context, v interface{}) ([]*graphqlproductdto.ChoiceConfiguration, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*graphqlproductdto.ChoiceConfiguration, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Product_ChoiceConfigurationInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐChoiceConfiguration(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_EarningInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyEarningInfo(ctx context.Context, sel ast.SelectionSet, v *domain1.LoyaltyEarningInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Loyalty_EarningInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_Loyalty_PriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v *domain1.LoyaltyPriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Loyalty_PriceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_MediaItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_MediaItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.Option) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_Option2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐOption(ctx context.Context, sel ast.SelectionSet, v *graphqlproductdto.Option) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Product_Option(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Product_PriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []domain1.PriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_PriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_VariantSelection_Match_Attributes2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchAttributesᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariantSelectionMatchAttributes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariantSelection_Match_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariantSelectionMatchAttributes(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionᚄ(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariationSelection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product_VariationSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx context.Context, sel ast.SelectionSet, v graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	return ec._Commerce_Product_VariationSelection_Option(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product_VariationSelection_Option2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx context.Context, sel ast.SelectionSet, v []graphqlproductdto.VariationSelectionOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Product_VariationSelection_Option2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋinterfacesᚋgraphqlᚋproductᚋdtoᚐVariationSelectionOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommerce_Search_Action2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐActionᚄ(ctx context.Context, sel ast.SelectionSet, v []domain2.Action) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Action2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilterᚄ(ctx context.Context, v interface{}) ([]searchdto.CommerceSearchKeyValueFilter, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]searchdto.CommerceSearchKeyValueFilter, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchKeyValueFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCommerce_Search_Promotion2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐPromotionDTO(ctx context.Context, sel ast.SelectionSet, v *searchdto.PromotionDTO) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Search_Promotion(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Search_PromotionMedia2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v *domain2.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Search_PromotionMedia(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (*searchdto.CommerceSearchRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCommerce_Search_Request(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCommerce_Search_SortOption2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchSortOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_SortOption2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchSortOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestionᚄ(ctx context.Context, sel ast.SelectionSet, v []domain2.Suggestion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Search_TreeFacetItem2ᚕᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*searchdto.CommerceSearchTreeFacetItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_TreeFacetItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋsearchdtoᚐCommerceSearchTreeFacetItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain3.Tree) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Tree(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v []domain3.Tree) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalODate2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql2.UnmarshalDate(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql2.MarshalDate(v)
	return res
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	return res
}

func (ec *executionContext) unmarshalOFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, v interface{}) (*big.Float, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql2.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v *big.Float) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql2.MarshalFloat(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
