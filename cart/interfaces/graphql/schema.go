// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\xa0\xb7\x2f\x7b\x41\xda\x43\xfb\xe8\xb7\xcd\x6e\x12\x2c\xee\xe2\x24\xb6\xef\xfa\x10\x18\x06\x2d\xcd\xee\x12\xa1\x44\x99\xa4\x6c\x0b\x45\xbe\x7b\xc1\x7f\x12\x49\x91\x92\x9c\xa0\x07\x5c\xdb\x3c\xc4\x96\x38\x1c\x0e\x39\x3f\x0e\x7f\x33\x94\x65\xd7\x00\xda\xb2\xaa\x02\x5e\xc0\xdd\x0e\x0a\xc6\xb1\x84\x72\x8b\xb9\x44\xff\x3a\x43\x08\xa1\x02\x73\x79\x31\x88\xa8\x96\x73\xdd\x50\x3a\xe1\x1d\x50\xf2\x08\x9c\x80\xb8\x40\x5f\x02\xc1\x5d\x24\xd2\x9d\xdf\xea\xae\x47\x18\x37\xbd\xe9\xb6\xac\x84\x75\x69\x1f\xd5\xc3\x05\xba\x96\x9c\xd4\xc7\xf3\x9f\x22\x03\x46\x9d\x9d\xd6\x0d\xa5\x9f\x70\x57\x41\x2d\xaf\xe0\xa1\x25\x1c\xca\xbd\x84\x4a\x44\xdd\xef\x3e\x71\x52\xd8\xa6\xf3\x7e\x92\xd7\x6d\x55\x61\xde\xc5\xb2\xf6\xf5\xf9\xd9\xb7\xb3\xb3\x70\xb5\xfc\x66\xbb\x58\x25\x11\x05\x6b\x6b\x19\x8f\xb8\x69\x1a\x4a\xa0\xdc\xb9\x66\x33\xaa\x68\xab\xb8\xc1\xeb\xa7\x8d\x8c\xe4\xde\x93\x83\xdc\x62\x5e\x66\xe5\xde\x73\x5c\x97\x37\x4c\x62\xfa\x4f\x22\x4f\xb3\xe2\x5a\xd2\x0d\x1e\xf4\xd8\x54\xea\x55\xb2\xdf\x09\x8b\xb1\xd9\x6f\x18\xa3\x80\xeb\x7e\x62\x37\xf8\x19\x46\xeb\xae\x5f\x3a\x09\xeb\xa8\x6b\xa0\x50\x48\xc2\x6a\x25\x71\xdd\x50\x22\x7f\xc7\xb4\x05\x33\xfe\x9b\xee\x03\xc8\x13\x2b\xc5\xba\x32\x3f\x2f\xd0\x17\x8b\x89\xdb\x9f\x46\xc6\x25\x3d\x64\x3d\x43\xca\x0b\xb4\xdf\x19\xf3\xa0\x96\x44\x76\xfb\x5d\x8f\x2f\xfd\xf6\x9e\x50\x4a\xea\xe3\xa6\x2c\x39\x88\x91\x03\xcd\x5b\x2d\xd8\xb4\xbc\x38\x61\x01\x3c\x92\xf9\x04\x5c\xb0\xda\xee\x8d\xfc\x96\x08\x76\x02\x2e\x4b\xa2\x26\x8f\xe9\x0e\x4b\x3c\x1e\xd4\x6b\x34\x56\x36\xd1\xaa\x8d\xa0\x1d\xb5\x9b\xa9\x01\x65\xf5\x51\xdc\xb0\x4d\x2b\x4f\x6a\xf6\x85\xda\x3c\xbf\xe9\x29\x04\x8e\xc3\x71\x7b\xbc\x48\xd8\x38\x7e\xcb\xda\x86\xd5\x6a\x8f\x8e\x26\x38\x34\xd9\x29\x96\x70\xc0\x2d\x95\xdb\x96\x73\xa8\x8b\x2e\xd4\x27\x15\x00\x89\xd9\xa3\xa1\x9e\x1b\xd7\x62\xd5\xa8\x5f\xb7\x06\x93\xfb\xda\x86\xa0\x86\xb3\xb2\x2d\x64\xfc\x9a\x88\x60\x15\xa0\x8c\x66\x79\xec\x37\x49\x0c\xa1\xf3\x60\x63\xdc\xe0\xe7\xf4\x36\x70\x62\xf7\x5a\xec\x12\x32\x02\x78\xb4\x69\xbf\xa4\xa2\x82\x6b\xf7\x83\xe3\xf7\xc4\xc4\x30\x14\xee\xbc\x4e\xfe\xb6\x39\x73\x02\x1f\x30\xa9\xaf\x4f\xa4\x69\x48\x7d\x7c\xfb\x01\x13\x1a\x7a\x86\x88\xb7\x55\x23\xbb\x68\xe9\x4e\x58\x38\xc5\xef\x18\x9f\xb4\xae\xef\x37\x9e\x95\x8a\xbc\xfb\xdd\x9a\xe8\x1f\xb3\x33\x3a\x77\x0a\x96\x76\x54\x52\x7d\x27\xed\xa2\xcf\xb2\x5b\x57\x98\x7f\x05\xf9\x89\xe2\x02\x02\x53\x5f\xa3\x47\xcc\x09\xae\x65\x3c\x81\x7d\x2d\x87\x91\xdf\x3e\x4b\xe0\x35\xa6\x57\x70\x00\x85\x63\x58\x73\x38\xcc\x58\xe0\x7a\xff\xce\xda\xe2\x04\xfc\x1a\x3f\x92\xfa\x38\x8a\xc5\xbd\xa5\x1a\xf5\x90\x08\x2c\x77\xe6\xad\x55\x28\xda\xca\xb9\x2d\x8b\xbc\x50\x46\x05\xf6\xec\x09\x33\xea\xf0\x9e\x33\x21\x66\xba\x38\x2c\xb8\x3e\x5b\x26\x46\x87\x00\xa6\xd4\x35\xdf\x10\x49\x13\x20\x74\x1b\x48\x8f\x38\xbd\xc7\x96\x18\x15\xed\xc9\x65\xb3\x0e\x4e\xc0\xe9\xdd\x5e\x5d\xb2\x5a\x39\xf6\x0a\xa8\xe6\x1e\xcb\x3a\xbd\xb0\xc7\x70\xb8\x0e\x81\x34\xb1\x97\x7a\x96\x63\xd1\x18\xee\x5d\x07\x7b\xcd\x70\xde\x74\x37\x5d\x03\x6b\x75\x32\xc6\x08\x9f\x8e\xb8\x43\x98\xdc\x9e\x30\x3f\xc2\x68\x11\xef\xec\xfb\x01\x0f\x63\x9a\x12\x47\x8f\x2b\xa8\x30\xa9\x15\xcc\x12\x32\x69\x8a\xe5\xb1\x35\x8f\x93\x5a\x62\x17\xcd\xc1\x0a\xf7\x7b\xd0\xcc\x44\x58\x1c\x4e\xf6\xb9\xf6\x84\x6c\x3f\xd9\x2f\x62\xbc\x56\xb6\x4f\xbf\xca\xe7\xb7\x93\xc6\x3b\x7b\xac\xfd\x78\x02\x00\x51\x6c\x9b\x54\xeb\x9b\xbc\x40\xb5\x8b\xd4\xfb\xfa\xc0\x02\x28\x4c\x0e\xd2\xcf\x71\xc1\x08\xc5\x02\xad\x37\xf8\x79\x81\x26\xd5\x31\x04\xb5\x22\xfc\x17\xe8\x1d\x65\x58\xe6\x35\x83\x83\x48\x92\x53\x28\x89\x5b\xef\x38\x31\x1b\x03\x3f\xdf\x78\x83\xc5\xa1\x5c\xf5\xc9\x4e\x45\xc7\x65\x3b\x62\x48\x46\xfa\xd3\x63\x3f\xf0\x16\xfd\x68\x5f\xa7\x8f\x67\x8d\x22\x52\x4b\xe0\x07\x5c\x8c\xdc\x11\x51\x3b\x3b\xee\x11\x4b\x78\xc2\x29\x5e\xa5\x89\x74\xc6\x51\x8e\x6c\x8f\x81\x1d\x8d\x72\xa7\xc5\xf2\xf8\x4e\x8a\x5b\xd3\x1e\x5a\x4c\xc9\x81\x8c\x0f\xb4\x74\xaf\xcf\x4e\xdc\xda\xa8\xa3\x4b\x26\xe8\x64\x31\x3b\xad\xd9\x1a\x36\x46\x97\xc9\x2f\x22\xc4\x8d\xa3\x6b\x7a\xd0\x9d\xa1\xb8\x23\x07\x91\xaa\xa1\xa0\x5e\x89\x3f\x81\x2b\x47\x49\xb5\xcb\x69\xed\xe3\x24\x3b\xeb\x8b\x01\xc9\x68\xb9\xf3\x5b\xf3\xe3\x27\x87\x55\xc1\x2a\x33\xb4\x6a\xea\x97\x20\xb9\xe1\x33\x67\x40\xa4\xcf\x0f\xa3\xf3\xc4\x64\x26\x85\x58\x96\x41\xcc\x25\x10\x2f\xa0\x27\xdf\xc3\x4e\x5e\x4c\x4e\x5e\x48\xc6\xbe\x83\x8b\x9d\xb0\xb0\xd8\x99\xa6\x03\xbe\xf3\x1d\x1d\x08\x4e\x1d\xf5\xe6\x89\xf1\xaf\x07\xca\x9e\xe6\xf7\x78\x81\x39\xd7\x01\xca\x7f\xe9\xb0\xf7\x2b\x2b\x70\x22\xc9\xde\x45\xcd\xb6\x8f\x20\x1c\xca\x1b\x52\xc1\x05\x52\xff\xcf\xe7\xf7\x77\xdb\x56\x48\x56\x6d\xa4\xe4\xe4\xbe\x95\x8a\x48\x4d\x4e\xd9\x8d\x87\xb2\x51\x0c\xcf\x16\x2f\x5a\x01\x6f\xa2\x42\x47\x40\xd1\x16\x9c\xe0\x09\xd6\x21\x15\xc1\x0f\x4d\x69\x94\x6b\x73\xc8\x96\x93\xfb\x02\xe7\x8b\x62\xf9\x62\x9a\x74\x45\x2f\xf7\x7e\x5f\x17\x6a\xff\x65\xe8\x45\xd0\x30\x73\xce\xc7\x03\x4e\x51\x8c\x48\xd6\x06\x9f\xfb\x6e\x8b\xab\x06\x93\xa3\xe6\xf3\xeb\xc2\x7b\xf0\x78\xc7\x92\x69\xde\x1b\xd2\x72\x20\x54\x02\x9f\xe2\x2d\xe3\xee\x4b\xe6\xd6\x13\x6c\xdf\xc0\x70\xc3\x78\x69\x09\x0a\x9b\x28\xbe\x07\x6a\x68\x4e\xdc\x64\x5d\xea\x1a\xf3\x8c\x2f\xd9\x9b\x08\x2f\x50\xc5\xb5\x46\xc6\xe5\x47\x5e\xaa\x2d\x6c\xf9\x55\x76\x17\x79\x87\x90\xe7\xc2\x44\xea\xee\xf3\xb9\x00\x3f\xfa\x4d\x5a\xbd\xaf\xd5\xaf\x35\xc6\x75\x83\x28\x24\xe9\xa2\x44\x33\x2a\x4a\xe8\x46\x5b\x97\xf8\x90\x29\x5c\xf8\x56\x5e\xe2\x2a\x6a\x10\xac\xe5\x05\xc4\xf5\xbb\x07\xd9\x79\x85\xb2\x30\x3a\xfd\x02\x5d\x90\xa3\x8f\x25\x34\x0b\x19\xc9\x1c\x21\xaa\x54\xae\xbf\x42\xe7\xa7\x99\xe6\xb7\x3e\x47\x8c\x07\x8d\xc5\xad\x7b\xcd\x2c\x48\x7d\xa4\xa0\x51\x32\x55\x25\x18\xa4\xb2\x25\x11\xce\x9e\xe6\xd4\x38\x91\xb9\x82\xde\xcb\x02\xd3\x5f\xac\xea\xb8\x22\xae\x9f\x73\xbb\xd2\xc4\x66\x8b\xa7\x47\x2c\xbd\x8d\x91\xde\x22\x07\xc2\x85\xac\x35\x0a\xb2\x32\x14\x27\x45\x42\x40\x92\xb2\xa4\x70\x39\x92\x0a\x18\xa9\x89\xf6\x93\xf6\x08\x4c\x5b\x69\x0f\xcf\xac\x8c\xe4\x00\x89\xa9\x8d\x65\x2e\xf9\x94\xcd\x03\x48\xed\xba\xfd\x4a\xea\x31\x4c\x0b\x56\x35\xb8\xee\x46\xc3\x05\xc1\x8d\xc8\xb1\x40\x24\xd3\x30\x21\xfb\xf0\x97\xb5\x5a\x27\xab\x93\x7a\x38\x1c\x89\x17\x48\xd3\xf6\x28\x1c\xf1\x19\x9b\x8d\xcc\x48\x51\xe0\x31\xa0\xd0\x9c\x58\x3d\x85\x0e\xa8\x74\x0d\x38\x6b\x73\x12\xa8\xe6\xce\xc3\xe5\xf3\xf3\x57\x27\x5a\x1c\xd3\x1d\x48\x4c\x68\x2c\xf9\x29\x6c\x75\x01\x94\x08\x49\xea\xa3\xe1\x4a\xc0\x13\x3c\xea\x6d\x42\x24\x6d\x6e\x4a\x32\x0a\xda\x13\xd3\xec\x2d\x73\x29\x0a\x96\xf0\xf1\xf0\x86\x70\x79\x8a\x82\x32\x16\xa2\x61\xdc\xd4\x02\x78\x97\x6e\xbc\x6c\xab\xfb\x98\x78\xd6\xd8\xe0\x58\xc3\x70\x72\xe1\xc3\x28\xea\x8e\xed\x88\x4f\xce\xf3\x4d\x03\x44\x01\xfc\x11\x4a\x7d\x8a\xce\x97\x9e\x62\x25\x76\xec\xd5\x7b\x90\x48\x34\x50\x90\x03\x29\x10\x76\xcd\xe8\xbe\x43\x5f\xa1\x5b\xb9\x93\x22\x0e\xf6\xa1\xee\x5f\xa0\xd3\x67\x4c\x66\x68\xd7\x6c\x87\xf4\x55\xd9\x40\xa9\xb3\xe4\x49\xfb\xfb\x2a\x67\x36\x79\xc8\x91\xd9\x25\x85\xaa\xe4\x90\x43\x25\x37\x39\xe6\x14\x2f\x73\x55\xd2\xac\xb1\x3d\xb1\x4a\x1e\x68\xae\xd8\x9a\x4d\xb9\xae\x06\x89\x99\x2a\xec\xef\x98\x92\x52\xc3\xf3\x0a\x44\x4b\x1d\x53\x3c\x61\xa1\xe4\x58\xfd\x96\x73\x36\x44\xe9\x28\xa7\xe8\x05\x3e\x80\x10\xf8\x08\xbf\xc4\x9e\x23\x9a\xdf\x29\xbd\xc2\x0f\x41\x51\x41\x43\x71\xac\xc1\x0e\xad\x30\x5b\x98\x4a\xc8\x7a\xa4\x4f\xc1\x3c\x1d\x05\x73\x56\x7e\x3b\x4b\x0e\xf3\x59\x76\x57\x20\x24\x27\xc5\x68\x69\x88\x70\x2d\x03\xf1\x0d\x17\xa6\xc2\xcf\x1b\x4a\xd9\x93\xd7\x8e\x06\x76\xd6\x7b\x6f\x47\x0e\x3d\x79\xf4\x5a\x8d\x6e\xc6\xbd\xc3\x7a\xa6\x9e\xab\x28\xa4\xdd\xe6\x43\xf6\xcc\xd4\xb3\x0b\x46\xd1\x6a\x84\x77\x7b\x73\xfa\xc3\xc4\xf2\x1d\xe3\x6e\x8f\xad\x6c\x8b\x3b\x21\xd0\x41\xb5\x95\x58\x62\x13\x17\xd4\xa3\x89\xeb\xe6\x5f\xa8\xd6\xd3\x67\xb4\x0d\x6e\x45\xec\x80\x44\x6b\xb6\x80\xbb\xc0\x77\x83\xbc\x46\x50\x35\xb2\x43\xe4\xd0\x0f\x4b\x84\x0a\x11\xa4\x5c\xb9\x68\x61\xd5\x24\x6a\x4c\x77\x6a\x38\x0f\xf4\x7d\xad\x69\x75\x7d\x62\x4f\x42\x69\x95\x27\x40\x1c\x1e\x5a\x10\x12\x3d\x61\x81\x44\x5b\x14\x20\xc4\xa1\xa5\xb4\x53\xbc\x5c\x3d\x80\x1d\xab\x7f\x1c\xe8\x6d\xe6\x7b\x12\x7b\x65\xdd\x5f\xf0\x78\x80\xfa\x3e\x83\x17\x0f\x9d\x50\xe0\xfc\xf7\x8e\x00\x2d\x87\xe8\x3e\x18\x62\xf6\x8b\xb0\x6e\x54\x52\x7a\xa7\x8d\x2b\xef\x5a\xf9\xbb\x5e\xc0\x72\xb2\xd5\x7b\xa8\x81\x63\x9a\xd3\x78\x34\xcd\x53\x3a\xa7\xa3\xc0\x20\xe2\xa6\xb2\x51\xc7\x86\xc2\x8d\x72\x9f\x1e\x0b\x55\x66\xbb\xff\x0d\x7d\x3c\x48\xa8\x51\x2b\xa0\x54\x90\x44\x92\xe3\x5a\x50\x6d\xd5\xca\x16\x90\xd2\xd1\x6b\xb5\x51\x6b\x83\xbf\x2a\xf4\x19\x95\x3a\x15\x0e\x14\x4a\x86\xc4\x89\x3d\xa9\x9f\x50\x97\xea\x1d\x47\x7f\x45\xa4\x46\x05\x16\x80\x6a\xe6\x8f\x66\x48\x8f\x5d\x03\xfb\xfd\xc4\xaf\x26\xb9\x9e\xde\x81\xd1\x2a\xff\x97\xcd\x59\x0f\xbb\x2f\xa1\x96\xa6\x96\xaf\xec\xc5\x26\x96\x68\xe8\x79\x28\x0c\xf3\xe1\xf4\x62\x8d\xe3\xd4\xff\x13\xad\xd9\x44\xcb\xa5\x57\x7f\xbf\x98\x97\xf9\x47\x4e\xe6\x7f\x39\x15\xd3\x69\x98\x77\xdc\xa6\x64\x16\xa4\x62\xa4\x6e\x5a\x99\x07\xf4\x5e\x37\x2f\x41\xf5\x1f\x08\xea\x05\x98\x5e\x00\xe9\x05\x88\x5e\x00\xe8\x05\x78\x5e\x00\xe7\x05\x68\x5e\x00\xe6\x05\x58\x5e\x00\xe5\x05\x48\x5e\x00\xe4\x05\x38\x5e\x00\xe3\x1f\x41\xb1\xbb\xed\xb0\x68\xf6\x91\xbc\xfa\xad\x26\x0f\x2d\xf4\xb4\x54\xe7\x43\xea\x74\x21\xe6\x50\xe8\xf4\x01\xe7\x5a\x57\x09\x0a\x1b\x1c\x25\xfd\x8d\x63\x86\x96\x96\xa1\x25\x31\xe1\x8a\xb7\x5b\x4f\x0f\x5b\x5a\x1a\x43\x54\x66\x6e\x4f\xdd\x88\x9c\xa2\x7b\xf0\xce\xdc\x13\x11\x91\xd5\x73\xd7\x34\xab\x8f\x8d\xc9\xfe\x91\xbb\x8d\x41\xe6\x4b\x59\x77\x68\xfb\x37\x5d\x4b\x7a\x44\xf7\x60\x51\x17\x7b\xb9\x35\x2c\x7c\x89\x25\xa0\x9f\x91\x24\x15\xb8\xb5\x8a\xaf\xbf\x72\x57\xe5\xc1\x9a\xfa\x49\xc2\x1f\xeb\xdc\x17\xe6\x1c\x01\xeb\x9f\x72\xac\x30\xfe\xff\x51\xff\x2e\x76\x6b\x2f\xb8\x35\x1e\xfc\x4f\xb9\x73\x32\xf5\x2a\xa3\xc5\xfe\x13\xe4\x5e\x53\xa1\xc7\xad\xa9\x59\xb0\xc5\xf8\xc4\x35\x7a\xf5\xca\xd5\x2b\x5f\xbd\x5a\x8e\xd5\x05\xce\x8e\x25\xa7\xbc\x9d\x0d\xad\xae\x7e\xe6\xc7\xd4\x05\x45\xb4\x99\x28\xed\xd5\x21\x7d\xc5\xf9\xf9\xc6\x97\xe2\x5f\x26\xac\x3c\xbf\xd5\x26\xc0\xb3\x54\x19\x84\x0e\x28\x9f\xdb\xe1\x2b\x91\xa0\xa7\x07\xa3\xe0\x2f\x59\xce\xc7\xa2\x0e\x5d\x6c\xf4\x69\x52\x5c\xe7\xb2\x0b\x3f\x55\xf5\x41\x1c\x64\xcb\xeb\x1e\x98\xf6\x4e\x4e\x41\x9e\xf7\x15\x20\x95\xf6\x48\xe0\x95\x70\x81\x03\x9b\xca\x0f\x7a\x68\xb1\xfe\x7b\x04\x1b\x2a\x00\x15\xfa\x4b\x79\xa9\xbf\x6a\x41\xb8\x36\x67\xc9\x91\x3c\x42\x1d\x21\x6a\xca\xa6\x75\xee\x66\x31\xf9\xb9\xf3\xeb\xb4\xb7\x46\xf5\xd9\x54\xb5\x6b\xe4\x9f\x0f\x96\xbc\xc5\x2e\xda\x94\xe5\x0d\x53\x6a\xc6\xb6\xed\x77\xe7\xaf\x87\xbb\xc9\x05\xd6\x4c\xf9\x77\x07\x14\x24\xf8\x1f\x4e\xcc\x7f\x41\x3f\xaf\x6f\x2f\xa1\xea\x3f\x3c\xd7\xf6\xfe\x90\xd2\xdf\x1a\x15\x73\x95\xd2\xcf\xb2\x5b\xa0\xd7\x5b\x9e\x99\x21\x56\x9b\xb2\x14\x3f\x1b\xfd\x42\x63\xc7\x55\xdf\xdc\xad\xa2\x05\xa0\x8f\xb3\x14\xa0\x8c\x8a\xf0\x98\x5a\xe3\xe1\x60\x9c\xe3\x43\x23\xf4\x8c\xeb\x83\xa9\x9d\x69\x86\x8d\xea\x60\xeb\xf8\xd3\xb8\xd7\x71\x7c\x1c\x8d\x96\xac\xa4\xa5\x06\xdc\x34\x0d\xed\x86\x1a\xfd\x47\xee\x8a\xee\xeb\x62\x91\x67\x13\x2a\xaf\xa0\x62\x8f\xd0\xeb\x39\xda\x5f\x96\x21\x25\xab\x6f\xb0\x71\xed\x7f\x85\xb1\x48\x5f\x88\x0a\x56\xc3\xcf\x55\x4b\x25\x69\x28\xf4\x9f\xa2\x3a\x7c\x80\xc8\xa3\x21\xa2\x6f\x20\xd6\x03\x49\x36\x2f\x46\xe1\x3c\xc5\xe7\xf5\x5f\x6f\x4d\xcb\x29\x78\xdc\xa6\x10\xfd\xc3\xb6\x87\xa7\xbb\x58\x8b\xf0\x39\x6b\x58\xd8\xef\x85\x53\xd8\x2a\xde\x21\x66\xf7\x9c\x16\x8b\xb9\x60\x30\xfd\xe1\xf0\x34\x34\xb4\x3f\x35\x26\x77\x71\xf4\x81\xc6\x0b\x4f\xe0\x17\x45\x9c\x9c\x81\xc1\x09\x46\x16\x38\x8a\x40\xf4\xad\xc8\xba\x4c\x19\x3b\xc1\x44\xa6\x4d\xff\x76\xf6\xef\x00\x00\x00\xff\xff\x41\x6f\xed\xb4\xfe\x3a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
