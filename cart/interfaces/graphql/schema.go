// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\x1c\x2b\xd2\xbe\xf7\xaf\x60\xfc\xde\xcc\x1b\x65\xcf\xd1\xee\xa5\xef\xc6\x33\x49\x34\x3a\xc7\x4e\x62\x3b\xd9\x8b\xc8\x8a\x70\x77\xcd\x0c\x1b\x1a\x3a\x40\xdb\x6e\xad\xf2\xdf\x57\x7c\x75\x03\x4d\x7f\x24\x91\x22\xed\xc7\xb9\x38\xf1\x40\x51\x14\xf0\x50\xf5\x54\xd1\xaa\xad\x01\x6d\x79\x55\x81\x28\xe0\xf3\x0e\x0a\x2e\xb0\x82\x72\x8b\x85\x42\xff\x3c\x43\x08\xa1\x02\x0b\x75\xd1\x8b\xe8\x9e\x95\xe9\x28\xbd\xf0\x0e\x28\x79\x04\x41\x40\x5e\xa0\x4f\x91\xe0\x2e\x11\x69\x57\xf7\x66\xe8\x11\x86\x5d\x97\xed\x96\x97\xb0\x2e\xdd\x4f\xfd\xe3\x02\xdd\x2a\x41\xd8\x71\xf5\xff\x89\x01\x83\xc1\x5e\xeb\x86\xd2\x77\xb8\xad\x80\xa9\x1b\xf8\xda\x10\x01\xe5\x5e\x41\x25\x93\xe1\x9f\xdf\x09\x52\xb8\xae\x55\xb7\xc8\xdb\xa6\xaa\xb0\x68\x53\x59\xd7\xbc\x3a\xfb\x76\x76\x16\xef\x56\xd8\xed\x36\xab\x24\xb2\xe0\x0d\x53\xe9\x8c\x9b\xba\xa6\x04\xca\x9d\xef\x36\xc2\xb2\xa9\xd2\xf6\x60\x98\xb1\x31\x91\x7b\x43\x0e\x6a\x8b\x45\x39\x2a\xf7\x46\x60\x56\xde\x71\x85\xe9\xdf\x89\x3a\xcd\x8a\x1b\x49\x3f\x79\x34\x62\x53\xe9\xa6\xec\xb8\x13\x96\x43\xb3\x2f\x39\xa7\x80\xd9\xaa\xd3\x8c\x9f\x61\xb0\xed\xa6\x31\xbf\x8f\x6e\xff\x48\x79\x81\xf6\x3b\xab\x05\x98\x22\xaa\xdd\xef\x3a\x14\x98\xd6\x07\x42\x29\x61\xc7\x4d\x59\x0a\x90\x83\x6d\xb6\xad\x46\xb0\x6e\x44\x71\xc2\x12\x44\x22\xf3\x0e\x84\xe4\xcc\x21\x78\x1c\xb8\x11\x5e\x71\x59\x12\x45\x38\xc3\x74\x87\x15\x1e\x4e\x1a\x74\x5a\x2b\x6b\x0b\xc2\x5b\xa0\x50\xe8\xbe\x01\x00\x93\x7e\xbb\x34\xa0\x9c\x1d\xe5\x1d\xdf\x34\xea\xa4\x57\x5f\x68\x88\x7f\x30\x4b\x88\xf6\x17\xa7\xfd\xe9\x26\x61\x7b\x3e\x5b\xde\xd4\x9c\xe9\x9b\x34\x58\x60\xdf\xe5\x96\x58\xc2\x01\x37\x54\x6d\x1b\x21\x80\x15\x6d\xac\x4f\x69\x9c\x10\x7b\x93\x62\x3d\x77\xbe\xc7\xa9\xd1\x7f\x6e\x2d\x74\xf6\xcc\x39\x8a\x5a\xf0\xb2\x29\x54\xda\x4c\x64\xb4\x0b\x50\x26\xab\x3c\x76\x58\x4e\x61\xb8\x8a\xf0\x7b\x87\x9f\xf3\x68\xf5\x62\x0f\x46\xec\x1a\x46\x04\xf0\xe0\x6e\x7d\xca\xdd\x5d\xdf\x1f\xba\xb0\x1f\xf1\x5c\xb1\xc3\xda\x05\x83\xf4\xcc\x6e\xd8\xfd\x99\x17\xb8\xc2\x84\xdd\x9e\x48\x5d\x13\x76\x7c\x75\x85\x09\x8d\x4f\x86\xc8\x57\x55\xad\xda\x64\xeb\x4e\x58\x7a\xc5\xaf\xb9\x98\xb4\xae\x1b\x37\x5c\x95\xf6\x8f\xfb\xdd\x9a\x98\x7f\x66\x57\xb4\xf2\x0a\x96\x0e\xd4\x52\xdd\x20\x73\x44\xef\x55\xbb\xae\xb0\xf8\x02\xea\x1d\xc5\x05\x44\xa6\xbe\x44\x8f\x58\x10\xcc\x54\xba\x80\x3d\x53\xfd\xcc\xaf\x9e\x15\x08\x86\xe9\x0d\x1c\x40\xe3\x18\xd6\x02\x0e\x33\x16\xf8\xd1\x1f\x79\x53\x9c\x40\xdc\xe2\x47\xc2\x8e\x03\x97\xd9\x59\x6a\x50\x0f\x19\xc7\xf2\xd9\xb6\x3a\x85\xb2\xa9\xfc\xb1\x8d\x22\x2f\x96\xd1\xfe\x77\x34\x10\x74\xe7\xea\x07\x6c\xb9\x1c\xf8\x5d\x4c\xa9\xef\xbe\x23\x8a\x66\x00\xe5\x2f\xc3\x1b\xc1\xe5\xc8\x1c\x91\xc8\x02\x9b\x82\xfb\xb5\x48\x3a\x0e\x3a\xd3\x37\xb7\xba\xe6\x4c\x1f\xd2\x0d\x50\x13\xed\x97\x0d\xfa\xce\x11\x7d\x3c\xeb\x9d\x62\xe6\x5e\x74\xbc\xc2\x21\x2b\xbe\x87\x1e\xc2\x86\x53\x5c\xb6\x77\x6d\x0d\x6b\x1d\xe5\x52\xb4\x4e\x7b\xcf\xde\xe5\x6d\x4f\x58\x1c\x61\xb0\x89\x9f\x5d\xbb\x33\xab\x37\x3d\xf0\x5e\xa9\x27\xb8\x81\x0a\x13\x46\xd8\x31\x27\x93\x27\x35\x01\x3f\x0a\x58\xa0\xa3\x52\xc9\x1a\x9c\x70\x77\x9f\xec\x4a\xa4\xc3\xe1\xe4\x98\xdb\x40\xc8\x8d\x53\xdd\x26\xa6\x7b\xe5\xc6\x74\xbb\xbc\xba\x9f\x34\xde\xdb\xe3\xec\xc7\x13\x00\x48\xfc\xd4\xa4\xda\xd0\xe4\x05\xaa\xbd\xd7\xdd\xb3\x03\x8f\xa0\x30\x39\x49\xb7\xc6\x05\x33\x14\x0b\xb4\xde\xe1\xe7\x05\x9a\xf4\xc0\x18\xd4\x9a\x62\x5f\xa0\xd7\x94\x63\x35\xae\x19\x3c\x44\xb2\xfc\x40\x4b\xdc\x07\xa1\xc1\x5e\x0c\xfc\x7c\x17\x4c\x96\xba\x65\x3d\x66\x74\x29\xc6\xc7\xba\x19\x63\x62\xd1\x45\x82\x7d\xcf\x41\xcc\x4f\xd7\x9c\x0f\xb5\x06\x45\x84\x29\x10\x07\x5c\x0c\x8e\x23\xa1\x69\x6e\xde\x23\x56\xf0\x84\x73\x1c\xe9\x23\xa6\x0d\x0c\xb7\x37\xbf\x96\x9d\xa5\x5c\x83\x49\x48\x55\x53\xd0\x4d\xf2\x57\x9a\x33\xc8\xa9\x7c\x4a\xe3\x7e\x4e\x86\xfd\x2e\x17\xcc\x5e\xdd\x5d\xd8\x9b\x49\x01\xfd\x5d\xbd\x6c\xf7\xe5\xda\xa5\x00\xa3\x29\x9f\x16\x1c\x5b\x41\xd6\x70\x7d\xf7\x46\x8c\xd7\x5d\x9d\x7b\xcb\xe2\x77\xc4\xa5\x25\xfa\x42\xaf\x30\x1f\x67\x67\xd8\xed\x32\x72\x3b\xc7\x6d\xbf\x23\xda\xfe\x48\xb0\xfd\xee\x58\xfb\x9d\xdc\xe2\x07\xa8\xc5\x09\x4b\x87\xbe\xe9\xe8\x16\x1e\xbe\x8f\x6e\x91\x13\xd5\x2d\x4f\x5c\x7c\x39\x50\xfe\x14\xb7\x56\xa0\x4e\xbc\x8c\xdb\x0a\x2c\x04\xd1\x64\x30\x6c\xf4\xd8\xfb\x93\x17\x38\x93\xff\xed\x92\x6e\x37\x46\x12\x01\xe5\x1d\xa9\xe0\x02\xe9\xff\x77\x45\x8d\x28\xc1\x5c\x7f\x81\x36\x64\x14\x51\xde\x17\x49\xfe\x01\x6d\xc4\x00\xb5\xc4\xff\x25\x62\xc1\x5e\xc8\x0b\x54\xe1\xfa\x93\xb4\x6e\xf1\x1f\x92\xb3\xdf\x6e\xf0\xd3\x15\x48\x89\x8f\xb0\x60\xf0\x15\xae\x7b\xa9\xd8\xec\x40\x30\x35\xff\x0a\xd7\x03\xdb\x03\xf1\x74\x0d\x93\x27\xea\xb7\x13\xb9\x63\x1d\x46\x34\x3c\x5b\x36\x68\x24\x5c\x26\x25\x86\x88\x50\x2d\x88\xb7\x19\x8e\xa0\x34\x1d\x8f\x4d\xa9\x35\x72\xc7\x2e\xae\x9a\xbc\xf6\x78\xbc\x6a\x94\x2b\x36\x05\x01\x21\xbc\x46\x7b\x56\x68\xf7\x32\x42\x06\xa2\x8e\x99\xa8\x9c\x4e\x38\x45\x08\x12\x59\x07\xcb\x87\x76\x8b\xab\x1a\x93\xa3\x61\xdf\xeb\x22\xf8\x11\xb0\x84\x25\xcb\x7c\xb0\x14\xe3\x40\xa8\x02\x31\xc5\x32\x86\xc3\x97\xac\xad\xa3\xc3\xa1\x81\xb1\x3f\x08\x92\x08\x14\x77\x51\xfc\x00\xd4\x92\x92\xb4\xcb\x1d\xa9\xef\x1c\xe7\x67\xd9\xd1\x44\x06\x7e\x38\x2d\xc6\x71\xa1\xde\x8a\x52\x7b\x28\xc7\x86\xe6\x08\x40\x80\x5b\x32\x8c\x75\x5d\x8c\x73\xec\x2b\xc2\x8f\x69\xc9\xab\x0f\xb5\x86\x55\xbe\x34\x63\x4f\x3c\xae\x29\x07\xd4\x83\x72\x80\xe9\x74\x15\x81\xab\x91\x92\x41\x68\xe5\x35\xae\x92\x0e\xc9\x1b\x51\x40\x5a\x39\xfb\xaa\xda\xa0\x44\x35\xef\x4f\x63\x09\xc3\xb7\x06\x32\x0b\x5d\x78\x97\xd1\xa5\x93\xa6\xe2\xee\x78\xed\x2a\x08\x3b\x52\x30\x28\x99\xca\xe9\x7b\xa9\xd1\x62\x84\xe0\x4f\x73\x6a\xbc\xc8\x5c\x29\x6d\xa9\x63\xea\xc3\x85\xe0\x4f\x69\xc5\xd8\xfc\x1e\xbb\x94\xd6\x35\x3b\x38\x3d\x62\x15\xdc\x8b\xfc\x0d\x39\x10\x21\x15\x33\x20\x18\x95\xa1\x38\x2b\x12\xe3\x91\x94\x25\x85\xeb\x81\x54\x44\xbd\xad\xb3\x9f\xb4\x47\x62\xda\x28\x47\x0d\x46\x65\x94\x00\xc8\x2c\x6d\x28\x73\x2d\xa6\x6c\xee\x31\xea\xf6\xed\x4f\xc2\x86\x28\x2d\x78\x55\x63\xd6\x0e\xa6\x8b\x7c\x1b\x51\x43\x81\x44\xa6\xe6\x52\x75\xde\x6f\xd4\x6a\x93\x59\x4e\xea\x11\x70\x24\x81\x1f\xcd\xdb\xa3\x61\x24\x66\x6c\xb6\x32\x03\x45\xd1\x89\x01\x85\xfa\xc4\xd9\x14\x3a\xa0\x32\xc5\xd7\x51\x9b\xb3\x40\xb5\x8f\x0d\x3e\xf9\x9e\x7f\xb3\x30\xe2\x9a\x01\x29\x4c\x68\x2a\xf9\x2e\xee\xf5\xfe\x93\x48\x45\xd8\x71\xdb\x48\xc5\x2b\x10\x99\x07\x8a\x57\x19\x91\xbc\xb9\x39\xc9\xc4\x67\x4f\x2c\xb3\xb3\xcc\x27\x60\x58\xc1\xdb\xc3\x25\x11\xea\x94\xf8\x64\x2c\x65\xcd\x85\x4d\xdc\x45\x9b\xef\xbc\x6e\xaa\x87\x94\x56\x33\x6c\x71\x6c\x60\x38\xb9\xf1\xb1\x13\x75\x06\x19\x57\x53\x98\xb5\x6d\x94\x12\xe4\xa1\x51\x10\x10\x57\x01\x12\xc4\x23\x94\x26\x5a\xce\x16\x84\xba\xda\xdd\x68\x0e\x31\x46\xfa\x96\x94\x5f\xb2\x53\xf6\xf5\xc9\xec\x9c\x53\xfc\xc5\xd7\xfe\x46\x8d\xed\x08\x48\xd6\xf1\xfb\x12\xe2\x68\xe6\x75\xd3\x4b\xcc\xd4\x16\x3f\x62\x4a\x4a\x73\x8e\x37\x20\x1b\xea\x19\xd5\x09\x4b\x2d\xc7\xd9\x2b\x21\x78\xef\xce\x12\xee\xdd\x09\xb8\xb4\xe4\x0f\x48\xd0\x43\x0c\x0f\xd2\x7a\x65\x78\x57\x93\xa2\x94\xe6\x22\xbd\x1d\x46\xe1\x68\x39\x31\x23\x1b\x90\x23\x0d\x93\xbc\xbb\x18\xb3\xf2\xdb\x59\x76\x9a\xf7\xaa\xbd\x01\x9d\x7b\x15\x83\xad\x21\xd2\xf7\xf4\x04\x31\xde\x98\x0a\x3f\x6f\x28\xe5\x4f\x41\x3f\xea\x59\x4c\x77\x7a\x3b\x72\xe8\x48\x56\xd0\x6b\x75\x73\x11\x44\xb5\x99\x2a\xa5\xa6\x5a\xee\x9a\xf4\x49\x34\xd7\xbf\xfd\xad\x4d\x76\x23\x7e\x7d\x9a\xd3\x1f\x27\x60\xaf\xb9\xf0\x77\xec\xdc\xf5\x78\x57\x8a\x0e\xba\xaf\xc4\x0a\x9f\xdb\x28\xcf\x45\x65\x1d\xa0\xfd\x2f\x56\x1b\xe8\xb3\xda\xfa\x63\x45\xfc\x80\x64\x63\xaf\x80\x7f\x62\xf6\x93\xbc\x44\x50\xd5\xaa\x45\xe4\xd0\x4d\x4b\x24\x7a\xd4\x63\xcf\x1d\xff\xf0\x6a\x32\xa5\xa6\xcf\x7a\xba\x00\xf4\x5d\xc9\xe9\xfc\xf6\xc4\x9f\xa4\xd6\xaa\x4e\x80\x04\x7c\x6d\x40\x2a\xf4\x84\x25\x92\x4d\x51\x80\x94\x87\x86\xd2\x56\xf3\x57\xfd\x03\xdc\x5c\xdd\xcf\x9e\x06\x8e\x7c\x97\xe0\x1e\x55\xbb\x67\x8b\x00\x50\x3f\x66\xf0\xe2\xa9\x33\x0a\xfc\xf9\xbd\x26\x40\x4b\x24\x6b\x28\xc8\x81\x14\x81\x21\xf6\xbe\x48\x77\x8c\x5a\xca\xdc\xb4\x61\x3d\xd9\x28\x7f\xdd\x09\x38\xf2\x72\xfe\x06\x18\x08\x4c\xc7\x34\x1e\x6d\xf7\x94\xce\x69\x2f\xd0\x8b\xf8\xa5\x6c\xd0\x17\x68\x35\x6e\xf4\xf1\x99\xb9\x50\x65\xaf\xfb\x6f\xe8\xed\x41\x01\x43\x8d\x84\x52\x43\x12\x29\x81\x99\xa4\xc6\xaa\x73\x57\x47\xca\x7b\xaf\xf3\x8d\xde\x1b\xfc\x45\xa3\xcf\xaa\x34\x29\x63\xa4\x50\x71\x24\x4f\xfc\x49\xff\x0b\xac\xd4\x6d\x02\xfd\x05\x11\x86\x0a\x2c\x01\x31\x1e\xce\x66\xd9\x81\xdb\x03\xf7\xc2\xff\xa7\x4d\x42\xa7\x6f\x60\xb2\xcb\xff\x61\x6b\x36\xd3\xee\x4b\x60\x8a\x1c\x08\x08\x63\x2f\xb6\xbe\xc4\x40\x2f\x40\x61\x9c\x37\xe6\x37\x6b\xe8\xa7\xfe\x97\x91\xcc\x66\x24\x3e\x0f\xf9\xeb\xc5\xbc\xcc\xdf\xc6\x64\xfe\x9b\x73\x16\x93\xaf\x04\xe1\x36\x27\xb3\x20\x67\x21\xac\x6e\xd4\x38\xa0\xf7\xa6\x7b\x09\xaa\x7f\x21\xa8\x17\x60\x7a\x01\xa4\x17\x20\x7a\x01\xa0\x17\xe0\x79\x01\x9c\x17\xa0\x79\x01\x98\x17\x60\x79\x01\x94\x17\x20\x79\x01\x90\x17\xe0\x78\x01\x8c\x7f\x06\xc5\xfe\x55\xc0\xa1\x39\x44\xf2\xf9\x07\x46\xbe\x36\xd0\xd1\x52\x93\x0f\xe9\xe8\x42\x6c\x50\x68\x4d\x80\xf3\xbd\xe7\x19\x0a\x1b\x85\x92\xee\xe1\x71\x84\x96\x96\xb1\x25\x29\xe1\x4a\xaf\x5b\x47\x0f\x1b\x5a\x5a\x43\x74\x0a\xeb\xa2\x6e\x42\x4e\xd1\x03\x04\x31\xf7\x44\x64\x62\xf5\xdc\x73\xc6\xf9\xdb\xda\xa6\xc9\xc8\xbf\x5a\xa0\x2b\xf3\xc8\xe5\x83\x76\xf8\xe0\xb5\x64\x44\xf2\x1c\x36\xfa\xf4\x1d\xed\x48\x48\xf1\x7f\xed\xd1\x7c\x67\xc6\x10\x71\xf6\xa9\x63\x91\xf6\xf4\x7e\xf6\x74\x16\x1f\x4a\x27\xb8\xb5\xfb\x9f\x3f\x0c\x34\x91\xf5\x94\xc9\x4e\xfd\x1b\xa4\x3d\x53\xb7\xde\x6f\x88\x45\xeb\x62\x70\x61\x86\x5e\xbc\xf0\x35\xb5\x17\x2f\x96\x03\x6d\xc1\x49\xa5\x92\x53\x47\x65\xbc\x1a\x3c\x2b\x4d\x77\xcd\xfd\x79\xdf\xf4\x5f\x36\x44\x2b\xbe\x18\xf9\x7c\x7f\x35\x14\xf5\xe7\xc1\x07\x9f\x2e\xa6\x45\x19\x67\xea\x54\x89\x02\x09\x50\x8d\x60\xdd\x51\xba\x87\x16\x0d\x12\xd1\x95\x2b\x34\x47\x57\x20\x2a\xe9\xef\x09\xb6\x65\x0a\xf4\xb5\xc1\xe6\xf3\x6e\x77\x33\x00\x15\xe6\xc3\x63\x65\xbe\xc4\x40\x98\x59\xc7\x77\x24\x8f\xc0\x92\x33\x98\xb2\x69\x3d\xf6\x5c\x94\xfd\x7a\xf4\x65\xfe\x3c\x07\x9f\x23\xe5\x4a\x33\x83\xf3\xb9\x72\x4c\x23\x3d\xa2\x4d\x59\xde\x71\xad\x66\x68\xdb\x7e\xb7\x7a\xd9\x3f\x38\x2d\xb0\x66\xea\x7c\x77\x40\x41\x41\xf8\x1a\x3e\xff\x41\xf2\xbc\xbe\xbd\x82\xaa\xfb\x8e\xd7\xd8\xfb\x53\x4a\x3f\xd4\x25\xb6\x4a\xdf\xab\x76\x81\xde\x60\x7b\x66\xa6\x38\xdf\x94\xa5\xfc\xdd\xea\x97\x06\x3b\xbe\x54\xe4\xdf\x8a\x1c\x00\x43\x9c\xe5\x00\x65\x55\xc4\x5e\x79\x8d\xfb\x38\x30\x17\xbc\x07\xe8\x19\x16\xb3\x72\x37\xd3\x4e\x9b\x14\x6d\xd6\xe9\x97\x5d\x2f\x53\x8f\x32\x98\x2d\x5b\xf6\xc9\x4d\xb8\xa9\x6b\xda\xf6\x05\xe5\xb7\xc2\x57\x88\xd7\xc5\xa2\x93\xcd\xa8\xbc\x81\x8a\x3f\x42\xa7\xe7\xe8\xfe\x58\x86\x94\x51\x7d\xbd\x8d\xeb\xf0\x69\x7d\x91\xbe\x18\x15\x9c\xc1\xef\x55\x43\x15\xa9\x29\x74\x5f\x03\x7a\x7c\x80\x1c\x47\x43\xc2\x56\x40\xae\x7b\x46\x67\x1b\x06\x25\xa5\x1c\xf9\x5c\xdd\x0f\x3e\x00\xce\x11\xa1\xfb\x1c\xa2\x7f\xda\xf6\x38\x1e\xca\xb5\x8c\x7f\x8f\x1a\x16\x8f\x5b\xbe\x84\x6f\x67\xff\x0a\x00\x00\xff\xff\x33\x0f\x4d\xd0\x5b\x36\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
