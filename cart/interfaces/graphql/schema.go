// Code generated for package graphql by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xcd\x6e\xe3\x36\x10\x3e\xaf\x9f\x42\x46\x2e\xbb\xc0\xa2\x0f\xa0\x9b\x63\x17\x0b\xa3\x1b\x37\x4d\xdc\xf6\xb0\x08\x16\x13\x71\x6c\xb3\xa1\x48\x95\x1c\x25\x11\x8a\xbe\x7b\x41\x89\xb2\xf9\x27\x79\x9b\x43\x90\xf0\xfb\x38\x9c\x19\x7e\x33\x43\x51\xd7\x60\xb1\x56\x75\x8d\xba\xc2\xef\x1b\xac\x94\x06\x42\xb6\x06\x4d\xc5\x3f\x8b\xa2\x28\x8a\x0a\x34\x95\x17\x8a\x45\x96\x3d\xc0\x46\xf2\x77\x86\x82\xbf\xa2\xe6\x68\xca\xe2\x5b\xc0\x3c\x1b\xdc\x0c\x94\x6e\xf9\xb4\xf8\x77\xb1\x08\x4f\xf5\x0e\xe3\xac\x2c\xb6\x9b\xc1\x3e\x4a\xe2\xd4\x6d\x37\x65\xf1\x48\x9a\xcb\xe3\xb0\xfa\xcc\x85\xe0\xf2\xb8\x62\x4c\xa3\x31\x91\x63\x6e\xb5\x27\x36\xad\xae\x4e\x60\x50\x47\x9c\x7b\xd4\x46\x49\x17\xc1\xb4\xdf\x67\x77\x2d\xf1\xe6\x03\x30\xc6\x89\x2b\x09\x62\x03\x04\xe9\xb1\x1e\xb8\x74\x5b\x1a\xe8\x6a\x94\xf4\x88\x02\x2b\x8b\xc6\x7e\x44\xb0\x0b\x0f\x85\x92\x47\xb3\x57\xab\x96\x4e\x36\x03\x95\xcd\xde\xef\x7d\x18\xb7\x4a\x09\x04\x47\x84\x18\x8f\x13\x75\xf3\x01\x9a\x46\x70\x64\x6b\xd5\x36\x4a\xae\x15\x4b\xc3\xbc\x40\x2e\x50\x86\x07\x68\x05\xad\x5b\xad\x51\x56\xdd\xc5\xe2\x8d\x45\x49\x11\x08\x4e\x58\x27\x86\xf6\x23\xe2\xec\xd8\x3f\xd7\xaa\x95\x54\x16\x5b\xe9\xf4\xd2\x68\xc5\xda\x8a\xe2\x65\x6e\x82\x4c\x20\x8b\x02\x3d\xc7\xf1\x85\x1f\x68\x0d\x9a\x25\x87\xaf\x42\x7c\x4a\x62\x89\x16\x9d\xe6\x9c\x0a\xba\x32\xa6\x3b\x09\x84\x62\xdf\xe6\xc2\xdf\xf8\xe8\xf4\xf9\xd9\x63\xb7\xf2\xa0\x26\x8e\xb6\xd0\xb9\x06\xb3\x79\xdf\x5e\x52\x6e\x4e\xbc\x69\xb8\x3c\xda\xa5\xc8\xde\xa3\x07\x0d\xdc\xf6\xb9\xbf\xb1\x2f\x5a\x05\x35\x74\xaf\x79\x85\x3d\xe3\xa8\x41\xb2\x9e\x93\x85\x4d\x5b\xf7\xe0\x1e\xde\x57\xf5\x70\xa1\x59\xd6\x70\xcc\x0e\xa7\xf0\xc1\xca\x86\x9b\xca\x1a\x99\x35\x55\xef\x94\xb4\x01\x3c\xa0\xe8\x2f\xf1\x87\xf6\xfc\xdf\x0d\x5e\x5a\xfe\xe4\x74\x1a\xf7\xe4\x73\xe4\x85\x77\x9d\x7c\x02\xe3\xa4\x73\x56\xf7\xac\x4a\xec\xdd\x8f\x1d\x58\x31\x0c\x6b\xfb\x4d\xe9\x97\x83\x50\x6f\xe1\x6a\x8d\x74\x52\x2c\x5c\xab\x40\x6b\x6e\x9b\x87\xbf\x38\x4a\xef\xab\xaa\x20\xd3\x99\x36\x11\xec\xf6\x18\xae\x91\xed\x79\x8d\x65\x61\x7f\x0f\x32\xc1\xa8\xf9\x7d\x7c\xc1\x4b\xd7\xf8\x14\x1e\x1b\xf6\xd0\x5f\xb0\xb3\x72\x76\x84\xa7\xa1\xc3\x78\x14\x2f\x0f\xa6\x2c\x6a\x68\xbe\x99\x9e\xfa\xf4\x97\x51\xf2\xa7\x07\x78\xbb\x43\x63\xe0\x88\xf3\x69\x1c\x63\x28\x5c\x2e\x2d\x33\xf1\xea\xca\x24\x69\x0d\xde\x46\x53\x27\xe8\x50\xe1\xfd\x64\xdd\xf1\x2b\x70\xf4\x84\x93\x88\x5c\x69\xac\x5a\xa6\x8a\x85\x66\x4b\x8d\xcd\xab\x7b\xbe\x21\x7a\x5e\xf1\xb4\x7b\x9c\xbb\x86\x6b\xe0\x81\xf1\x7e\x25\x6f\xde\xb7\xea\x8f\xf5\x77\x42\x2d\x41\x3c\xe0\x01\xed\x90\x89\x72\x50\x83\x7e\x41\x6a\x04\x54\xb8\x4e\x74\xff\x0a\x9a\x83\xa4\xbb\x9e\x73\x9f\xe7\x38\x2f\x77\x50\x47\x80\x51\xad\xae\x30\x1e\x93\x7f\x53\xe7\x0d\xa3\x79\x89\xa6\x8c\x3f\x40\xb4\x98\x70\x7e\xb0\x2a\xc6\xbe\xb0\x8a\x0f\x8d\xe9\x4e\x6d\x43\x14\x5c\x1e\x05\xf6\xb7\x9a\xed\xde\xcb\x98\x95\xd1\xd3\xc0\xd1\xea\xed\x9a\x99\x91\x92\xb5\x71\xe3\x18\x7b\x78\x47\x7f\x7f\xff\xff\x72\x5e\x31\xcb\x45\x5e\x33\xae\xc0\x9c\x6c\x5e\x81\xca\x22\xf3\xe3\xdf\xdf\x81\x6b\x43\xb2\xbf\xec\x49\x8e\x80\x2c\x25\xd4\x1d\x67\x4c\xe0\x2e\x61\xf9\x1c\x57\xb2\xb3\xfe\x18\x10\x2d\xb9\xae\x3a\xc9\x21\x8d\x98\x09\x2d\xe5\xec\xf4\x9c\xcf\x17\x2d\xba\xbc\x7d\xe5\x32\x55\x63\xa5\xea\x06\x64\x97\x1c\x17\x8c\x09\x4e\x29\x21\xe2\x34\xca\xd0\x50\x6e\x73\x5e\x03\x5d\xcb\x90\xc6\x23\x1f\x1e\x9d\xd3\x19\xea\x7b\x99\xbe\xe2\xf3\xc0\x49\x0c\x05\x37\x86\x02\x9b\x93\x92\x73\xea\xc0\x1a\xb8\x98\xf1\x39\x2b\xd4\xe1\x2b\xc2\xe9\xf4\xfa\x08\x69\x7a\xba\x9d\x6a\x04\x5c\xc4\xcc\xfb\x10\x1d\xfb\x24\x37\xc4\xe5\x71\xdd\x1a\x52\x35\xea\xcc\x77\xc7\xcf\x19\x4a\xde\xdd\x1c\x33\xea\xcd\x33\x61\x9e\x3d\x1b\x9f\xae\x40\xf8\xeb\xe1\x96\x6b\x3a\x45\xbd\x17\x8c\x69\x94\x1e\xde\xf8\xba\xcb\x83\xbb\xb6\x7e\x8e\x5f\x24\x12\x06\x1d\xf7\x32\xf4\x12\x6f\x87\x85\x64\xfd\xd4\x2e\x7e\x6b\x2f\x8f\xe7\xca\x77\xb2\x9c\xf8\x80\x4d\x2c\xdc\xb9\xca\x8c\x8d\xac\x18\xdb\x2b\xbb\xe3\x63\x32\x7d\xb6\x9b\xe5\xe7\xf3\x8c\xf8\x7c\x7e\x39\x05\x63\xe7\xd3\x9c\x03\xff\x05\x00\x00\xff\xff\x00\xfb\x65\x17\x61\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3937, mode: os.FileMode(420), modTime: time.Unix(1567424663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
