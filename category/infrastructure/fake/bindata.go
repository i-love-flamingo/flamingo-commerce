// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package fake generated by go-bindata.// sources:
// mock/categoryTree.json
// mock/electronics.json
package fake

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _categorytreeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x3f\x6b\xf3\x30\x10\x87\x77\x7d\x8a\x43\xc3\x3b\xe5\xc5\x7b\xb6\xe2\x36\x94\x0e\xa5\x10\xd3\x25\x84\x70\x51\xae\x91\x8a\x22\x05\xe9\x5c\x28\x21\xdf\xbd\x38\x7f\x5a\x9b\x44\x8a\x5a\x2f\xf6\xf0\xfc\xce\x8f\xee\x74\x33\x01\xb0\x13\x00\x00\xb2\x46\xa6\xb5\x0f\x9f\xb5\x5f\x91\x1c\xc3\xf1\x91\x64\x49\x71\xf0\xce\xa8\x28\x47\x43\xf0\x19\x37\x3d\xf0\x21\x0d\xbe\x20\xeb\x2c\x38\x6d\x97\x4d\x20\x8a\xf7\xc8\x28\xc7\x30\x13\x47\x74\x77\x7a\x27\xe5\xde\x2c\xf2\xff\xa8\x02\x91\x5b\xf0\xc7\xb9\x5c\x46\x72\x62\x91\x61\x7a\x08\x44\xf8\x07\xcd\xeb\xb5\x48\x52\xb7\xba\x8c\x9f\xd2\xfb\x51\xa9\xb2\x26\x5c\x6d\xb5\x77\x54\x60\xfb\x98\x65\xd3\x9a\xd7\x73\x89\x26\x0f\xad\x4b\xcc\x17\xa8\x14\xc5\xe8\x83\x19\xfc\x20\x73\x90\xbb\xdb\x81\x92\xd3\x54\xfd\x3a\xbd\x32\xfb\xef\xef\xf9\xaf\xe7\xc1\xb8\xb4\xc4\x05\xc3\x68\xd2\x60\xda\xfd\x1c\x12\x7d\xd1\x4e\xf2\x20\x98\x5d\x3c\x65\x3d\x6b\xe3\xd6\xf9\xad\xab\x3b\x8a\xba\xcb\x38\xc1\xa8\x8d\x77\xf9\xdd\x4b\xe2\x7f\xdd\xc0\xf7\x76\xb3\x8d\xad\x29\x69\xe0\x53\x0e\xbd\xa1\x59\xfd\x84\x2f\x5b\x29\xe6\x5f\x01\x00\x00\xff\xff\xbb\xff\x03\x12\xc6\x04\x00\x00")

func categorytreeJsonBytes() ([]byte, error) {
	return bindataRead(
		_categorytreeJson,
		"categoryTree.json",
	)
}

func categorytreeJson() (*asset, error) {
	bytes, err := categorytreeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categoryTree.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _electronicsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x6f\x83\x30\x10\x85\x77\x7e\xc5\xe9\xe6\xaa\xd9\xd9\xaa\xa8\x43\xa5\xa4\x8a\xaa\x76\xaa\x32\x1c\x70\x50\x2b\x60\x5b\xe6\x32\x44\x11\xff\xbd\xb2\x01\x13\x28\x6d\xb3\x24\xc2\xef\xf3\x7b\xbe\x7b\xd7\x04\x00\xb7\x24\x5c\x19\x77\xd9\x9a\x82\x31\x05\xe4\x9a\x73\x71\x46\xab\xbc\xc5\x87\x5b\xe0\x95\x9a\x00\x3c\xff\x06\x1c\x48\xbe\xfe\x04\xde\x2f\x96\xc7\x18\xeb\x4c\x63\x44\x19\xdd\x23\x2f\xed\x21\x1c\x70\x81\x29\x00\x88\x3b\xf3\xec\xea\x9e\x0b\x45\x98\xc2\x67\x02\x00\x70\x0d\xbf\x00\x18\x8e\xbd\xad\xb7\x54\x0d\x55\x1c\xec\x26\x6d\xaf\x1a\x9e\xe9\x1b\xab\xab\x05\xf3\xd1\xfa\x7b\x3f\xde\x74\x13\xa0\xa4\x5e\x1d\x7d\x42\xde\xb8\x64\xc7\x3a\x5f\xae\xf0\xd1\xc7\x05\xb2\x4b\x00\x8e\xb3\x99\x9e\x44\x9c\xca\xce\xc2\x2d\xa6\xc3\x48\xfd\x13\xe2\xa7\x87\xfb\x7d\x45\x29\xc6\xee\x28\xe3\xda\x2b\x78\x88\xcf\x8e\x41\x5d\x08\x9a\x84\xe8\xbf\x53\xfa\x34\xee\x83\xac\xad\x55\x4e\x1e\xd8\xd8\xa2\x1c\xac\x7b\x84\x5c\xc5\xe2\xa1\xac\x26\x7d\x1a\xa5\x79\x0b\x53\x0f\xcb\x26\x26\xb7\xf5\x26\xd6\x93\xef\x6a\xe4\xae\x4e\xfe\x6f\xa5\x28\x71\x60\xbb\xf0\x7f\xf4\x4b\x4b\xba\xef\x00\x00\x00\xff\xff\xbe\xfe\x8a\xe1\x12\x03\x00\x00")

func electronicsJsonBytes() ([]byte, error) {
	return bindataRead(
		_electronicsJson,
		"electronics.json",
	)
}

func electronicsJson() (*asset, error) {
	bytes, err := electronicsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "electronics.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"categoryTree.json": categorytreeJson,
	"electronics.json":  electronicsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"categoryTree.json": &bintree{categorytreeJson, map[string]*bintree{}},
	"electronics.json":  &bintree{electronicsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
