// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x5f\x6f\xdb\x36\x10\x7f\x9e\x3f\x85\x82\xbe\x64\x40\xb1\x0f\xe0\x37\xc7\x1e\x0a\x63\x8d\x9b\xb6\xee\xf6\x50\x04\xc3\x45\x3c\xcb\x5c\x28\x52\x23\xa9\x24\x42\x91\xef\x3e\x90\xa2\x64\xfe\x93\x94\x6d\x7d\x28\x62\xde\x8f\xc7\xbb\xe3\xef\xfe\x50\xba\x6b\xb0\xd8\x8a\xba\x46\x59\xe2\x9f\x3b\x2c\x85\x04\x8d\x64\x0b\x52\x17\x3f\x56\x45\x51\x14\x25\x48\xbd\xbe\x40\x8c\xe4\xca\x0a\xc8\x00\xde\x21\xa3\x4f\x28\x29\xaa\x75\xf1\x3d\x00\xee\x22\x48\x77\x75\x6f\xb7\x56\x98\x8a\x6e\xba\xad\x20\x78\x4d\xdc\x4f\xf3\x63\x5d\x7c\xd5\x92\xf2\xea\xea\xe7\xc8\x80\x64\xf3\xea\x75\xb5\x0a\x5d\xf1\x3c\xa0\x64\x5d\xec\x77\xbd\xd1\xc8\x35\xd5\xdd\x7e\x37\xaa\xb6\xab\x0f\x94\x31\xca\xab\x0d\x21\x12\x95\x8a\x0e\x73\xab\x16\xd8\xb4\xb2\x3c\x83\x42\x19\x61\xee\x50\x2a\xc1\x5d\x58\xa6\xa3\x11\x04\x01\x08\xa1\x9a\x0a\x0e\x6c\x07\x1a\xd2\x43\x3d\x61\x6f\xe5\xbb\x9f\x1a\xe8\x6a\xe4\xfa\x2b\x32\x2c\x8d\x34\xb6\x22\x12\x3b\xe7\x90\x09\x5e\xa9\xa3\xd8\xb4\xfa\x6c\xfc\x2f\x4d\xe4\xbe\x59\x27\x6e\x84\x60\x08\x0e\x08\xb1\x3c\x0e\x13\x34\x0d\xa3\x48\xb6\xa2\x6d\x04\x37\x17\x94\xb8\x78\x11\x39\x27\x09\x9e\xa0\x65\x7a\xdb\x4a\x89\xbc\xec\x42\x7d\x5a\x68\x60\x54\x63\x9d\xe8\x39\x0e\x12\xa7\xc6\xfc\xb9\x15\x2d\xd7\xeb\x62\xcf\x1d\xff\x1a\x29\x48\x5b\xea\x78\x99\xaa\x20\x0c\x48\x22\x2f\x2b\x09\x9c\x58\xfd\x5e\xf4\xee\x24\x2d\xb1\x97\xab\xb6\xb6\xd2\x23\xbc\x6c\xea\x5e\x77\x1e\xf6\x60\x61\x07\x9c\x00\xb8\x60\x7d\xa0\x27\xbd\x05\x49\x12\x17\x37\xa1\xdc\xcf\x8c\xff\x92\x10\x2e\x0f\x22\x1d\xc3\x25\xb9\x6d\xf7\xf9\x3c\x49\xd2\xc9\x25\xce\x70\xf4\xc4\x61\x51\x19\xd8\xe7\x2e\x72\xe7\x4b\x33\xd9\x6f\x30\x46\x74\xd3\xed\xc9\xb5\x4b\xd4\xc9\x6c\x37\xc0\x29\x0f\xb2\x86\xef\xf9\x49\x4c\x18\x6f\x44\x63\x7d\xcb\x72\xd0\xb3\x58\x9d\x69\xd3\x50\x5e\x99\xa5\x48\xdf\x57\x4f\x14\x10\xe3\x83\x14\x41\x29\xb1\xd4\x58\x60\xe0\xdb\x08\xb8\xc4\xbf\x40\xcb\x8e\xaa\xd2\x28\x99\x55\x55\x1f\x04\x37\x0e\x7c\x41\x66\x69\xf0\xa6\x3d\xff\x76\x83\x17\x96\x3f\xa8\x3e\x0f\x7b\xf2\x31\xf2\xdc\x5b\x06\x9f\x41\x39\xf2\x8d\x99\x3e\xcb\x12\x73\xf7\x43\x77\xf3\xb3\xca\xae\x3c\x0b\xf9\x78\x62\xe2\x39\x5c\xad\x51\x9f\x05\x09\xd7\x4a\x90\x92\x9a\x2a\xea\x2f\x0e\xd4\xfb\x28\x4a\xc8\x94\xe8\x5d\x24\x76\x7b\x14\x95\x48\x8e\xb4\xc6\x75\x61\xfe\x1f\xd2\x24\xec\x02\xd7\x8f\xd8\xf9\x15\x20\x28\xcd\x01\xf2\x37\xec\x82\xac\x7f\x17\x41\xbc\x38\xa8\x75\x51\x43\xf3\x5d\x59\xe8\xfd\x5f\x4a\xf0\x5f\xbe\xc0\xf3\x2d\x2a\x05\x15\x2e\x6c\xbc\x85\xa6\x47\x84\xa6\x7a\xa0\xd8\xe4\x5b\x68\x12\x7b\x3d\x78\x6c\xf7\xec\x2d\x0e\x21\x2c\xdc\x55\x1a\x64\x12\x94\x85\x7e\xde\x2a\xbc\x89\x7a\x7f\xd0\x2c\x42\x7a\x64\xcd\xf1\x0b\xc0\x60\x09\xd5\x2c\x32\xa5\x31\x64\x9d\xca\x55\x3d\x9b\xe9\xae\x91\xe4\x52\xc0\xeb\x23\xa3\x78\xc2\xcc\x18\x36\xcc\x46\xb9\xca\x17\x61\xa7\x2e\x22\x82\x8d\xf3\x62\xdd\x00\xad\x78\xdf\xaf\xc2\x84\x19\xa7\x83\xb5\xf9\xe9\x8b\x18\x3c\x20\xb3\xab\x45\x2c\x72\xfe\x0f\xc2\x5c\xaf\xed\xaf\x3e\xbb\x9b\x2a\xaf\x4e\x45\xb7\xab\x84\xd4\x9f\x24\x31\x29\x6c\xfe\xd9\x11\x62\xbe\x41\x7a\x97\x4c\xd3\x5e\x30\xf6\x00\x37\x9a\x04\xd7\x69\x57\xf2\xea\x7d\xad\xfe\xac\xfa\xa2\x51\x72\x60\x5f\xf0\x84\x66\x7a\x8a\x28\x55\x83\x7c\x44\xdd\x30\x28\x71\x9b\x54\xb1\x27\x90\x14\xb8\xbe\xb5\x98\xbb\x3c\xc6\x59\x79\x80\x3a\x12\x28\xd1\xca\x12\xe3\xe9\xef\x6f\xdd\x79\x63\xd6\x7c\xc1\x49\x11\xbf\x03\x6b\x31\xc1\xbc\xb1\xc6\x0d\x55\x7e\x13\x1f\x1a\xc3\xdd\xf5\xf6\x5e\x50\x5e\x31\xb4\x2c\xc9\xf6\xe2\xab\x18\x35\x39\xca\x49\xf1\xbc\xa4\x66\x80\x64\x75\xbc\x73\x88\x23\xbc\xa0\xbf\xdf\xfe\x9e\xca\xd7\xbe\x1e\x39\x5a\x3c\x81\xf6\xf8\x9d\x67\xfa\x89\x4a\xa5\xb9\xbd\xcc\x49\x0c\x83\x2c\x24\xe4\x15\x25\x84\xe1\x21\x41\x05\x93\x7b\x5f\xe1\x66\xed\x51\xc0\x5a\xed\x7a\xe0\x24\x46\x4b\xc4\x8c\x6b\x29\xe6\x20\xe7\x6c\xbe\x70\xcd\xc5\xed\x23\xe5\x29\xdb\x4a\x51\x37\xc0\xbb\xe4\xb8\xa0\x46\x51\x9d\x02\x22\x4c\x23\x94\x1e\xab\xd8\xa4\xd5\xa0\x97\x22\x24\xb1\xa2\x5e\x3d\xcc\xdb\x63\x4a\xab\x5c\xb0\xb9\xc7\x24\x8a\x82\x1b\x43\x86\xcd\x59\xf0\x39\x76\x60\x0d\x94\xcd\xd8\x9c\x25\x6a\xff\xf4\x75\x3c\x5d\xee\xb8\x8d\x85\x9b\xb6\xaf\x81\xb2\x18\x79\x17\x4a\x87\x3a\x48\x95\xa6\xbc\xda\xb6\x4a\x8b\x1a\x65\xe6\xb9\xfc\x6b\x06\x92\x37\x37\x87\x8c\x6a\xef\x8c\x9b\xa3\x65\xc3\x43\x03\x34\x7e\x3a\xdd\x50\xa9\xcf\x51\x6d\x05\xa5\x1a\x21\xfb\xd7\xa9\xec\xf2\xc2\x43\x5b\x3f\xc4\xf3\x23\x87\x9e\xc7\x96\x86\xb3\x81\x0f\x8b\x61\xf1\xa3\x2f\x33\xa5\xf5\x6b\xa3\xb5\xa4\x0f\xad\x46\x37\xa5\xf5\x6c\x53\x28\x9f\x90\xd8\x8e\xe7\x17\xf7\xac\xf6\xf1\x05\x3e\x39\x28\x4f\x4d\x39\xf9\x02\x19\x4e\x67\xd9\x23\x2f\x1f\x0f\xb2\x67\xce\xcd\x20\xc3\x2b\x7a\xd2\xd8\x71\x88\xc8\x16\x6f\x43\x7c\x4e\x79\x95\x8a\x5f\x57\x2b\xd3\x86\x39\xb1\x0e\x14\x9f\xdb\xcb\x23\x33\xb0\x63\x3d\xf1\x11\x2d\xd1\x70\xeb\x6a\x62\xac\x64\x43\xc8\x51\x98\x1d\xd7\x49\x5f\xdf\xef\xae\xde\x5f\xba\xef\xfb\x62\xf1\x8b\x40\x64\x41\x70\xce\x0e\x19\x6a\xf4\xe7\xe8\xe5\x2f\x0c\xcb\xfa\xcc\x04\x73\x6d\xd8\x62\x78\x65\xed\xfd\x5f\x4a\xbf\x35\x26\xb1\x8c\xd2\xcf\xba\x7b\x83\x5e\x2f\x3c\x33\x47\xbc\xae\xfe\x09\x00\x00\xff\xff\xc7\x84\xf1\x77\xee\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
