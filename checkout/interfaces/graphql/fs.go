// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdb\x72\x13\x39\x13\xbe\xcf\x53\x74\xe0\xe2\x87\x2a\x78\x81\xb9\x0b\x06\xfe\xcd\x16\x6c\xbc\x09\x87\x0b\x8a\x72\xb5\x47\x6d\x8f\x0a\x8d\x7a\x90\x7a\x62\xa6\xb6\xf6\xdd\xb7\x74\xf0\x78\x7c\xc4\x49\x0c\xec\xe6\x82\xc2\x3a\x7c\xfd\x75\x4b\xdd\xfa\xa6\xa5\x6b\x08\x46\x5c\xd7\xe4\x4a\x9a\x8c\x2a\x2a\xbf\x70\x2b\x93\x1b\x41\x27\x63\x83\x25\x5d\x39\x45\x6e\x72\x4d\xbe\x35\x02\x7f\x9d\x01\x00\xb4\xad\x56\x05\xdc\x88\xd3\x76\x7e\x7e\xf6\xf7\xd9\xe3\x1d\x00\xab\xbd\x23\xb6\x42\xdf\x04\x1c\x35\x8e\x3c\x59\xf1\x20\x15\x81\x4b\x88\x3c\x8b\xbf\xca\xd6\x39\xb2\x02\x4f\x5c\x6b\xad\xb6\xf3\xa7\xd0\x04\x00\xe0\x80\x00\x75\x2b\x28\x9a\xed\xd9\x1e\xb6\xdb\xc6\x12\xd1\xc7\xf0\xae\x22\x18\xa1\x13\x90\x0a\x05\xb4\x87\x39\x6b\x3b\x07\x61\x98\x52\x32\xa1\xe2\xca\x12\x9d\x14\x03\x64\x74\x32\x79\x49\x25\x3b\x14\x52\xe1\xd7\x00\x2f\x6d\xcb\xd4\xb4\x85\x12\xfd\x92\xa8\xf6\x80\xc6\x11\xaa\x6e\x08\x1e\xe7\x2e\xed\x8c\x7d\xb1\x8f\xbc\xba\xea\xd7\x64\x4b\x37\x82\x42\xa0\xa8\x21\xab\x02\x65\xb6\x31\x50\x3e\x0e\xf3\x0c\x1a\xec\xea\x10\x31\xb4\x6a\x2d\x56\xcf\xf3\x92\x1a\x3b\x28\xd9\x0a\x6a\x0b\xa8\x94\x0e\xf1\x43\x03\xba\x37\x11\x97\xed\x25\x14\xf9\x44\x0e\x93\xf8\xef\x79\xa6\x75\x01\xad\xd5\x5f\x5b\x02\xad\x60\xc6\x2e\x72\x6a\x1c\x97\xe4\xfd\xce\xbb\x71\xb6\xff\x76\x0c\x7c\x86\xe7\x89\x18\xe0\x94\x5b\x49\xa0\x83\x28\x87\x79\xe9\x1a\x5d\xa2\x31\x1d\xf8\x8a\x17\x36\xc4\x03\xc1\xb7\x25\x91\xf7\xd0\xe0\x9c\x0e\x5e\x8e\xa1\xad\x74\x37\x72\xfc\xf2\xb1\xe4\xbf\x4f\x87\xa2\x31\x5e\xed\x38\xff\x9c\x30\x36\xa0\x8b\x0d\x8c\x70\x8b\x36\xcc\xe7\x9d\x54\xa3\x36\xbd\xd9\xfc\x37\x88\x5a\xf4\xe5\xe0\xd9\x0c\xd8\x64\x8f\xe6\x28\xb4\xc0\xae\xd8\xc2\x1b\xb8\x3b\x76\x7c\xab\x15\xb9\x62\x6d\xb2\x26\xa9\x58\x15\xdb\x4c\xc2\xff\xb1\xe6\xd6\xca\x60\xb2\x67\x35\x76\xba\xcc\x17\x43\xb4\x18\x2a\x76\xfb\x72\xa6\xad\x90\x9b\x85\x2b\x7a\xe4\x65\xcb\x0e\x59\xac\xa9\xd8\x8a\xca\x91\x18\x93\x8f\xa8\x05\x74\xdd\x18\xaa\x63\xd1\xf9\xd9\xb6\x5f\xb3\x1b\xb5\x5e\xb8\x0e\x75\xe1\xd7\xd0\xb8\x69\xcb\x90\x98\xbf\xca\xfc\x6b\xd4\x86\xd4\xa9\xac\x87\x11\x47\xe8\xd9\x1e\x5d\xb4\x32\x83\xeb\xb8\xeb\x1e\xe1\xab\x78\x71\x39\x73\x58\xd3\x29\x7d\x78\x7f\xfd\xe6\x01\x27\x5a\xf1\xe2\xb7\x77\x6f\xdf\x9c\x92\x50\xc0\xbb\x3f\xa3\x6b\x52\xda\x51\x79\xb2\x54\x3b\x49\x88\x3e\xa2\x31\x24\xb9\x44\x9e\x92\xd9\xa3\x84\xdc\xbf\xbe\xa9\x72\x26\x75\xb1\x40\x0f\x65\xc5\x9e\x2c\x34\x8e\x6e\x35\xb7\xde\x74\x8f\x86\xd5\xf7\x6d\xae\xb3\x6b\x88\xa1\x82\xbb\x3a\xea\x1b\xb0\x44\x8a\x54\x90\x27\xa5\xa3\xc0\x03\x7b\x4b\xad\x8f\xc2\xa5\x22\xc8\x6e\x5d\xd3\xd7\x96\xbc\xc0\xc5\xf8\x72\xcd\x48\x1e\xbf\x18\x5f\x1e\x93\x27\xe3\xcd\x4d\x77\x09\xf8\xd6\xe6\x1c\xb7\x47\xa3\x24\x3c\x92\xd2\xfb\xfd\xe6\xea\x0f\x20\x5b\x72\x70\x2d\x07\x4c\xa1\x60\xaf\x1f\xf6\x39\x94\xd6\xbe\x44\xc1\x8d\x90\xed\x87\x57\x24\xa8\x8d\xff\x2e\x74\x5e\x77\x34\x2e\x37\xe1\x7c\xbe\x8f\x9b\xd7\x6d\xe0\x5e\x35\x59\x7d\x91\x55\x0d\xeb\x78\x9a\x94\xf4\x13\x4f\x83\xc5\x70\xb4\x08\x21\xda\x15\x5a\x01\x4f\xde\x6b\xb6\xcf\xc0\x72\xf8\x21\xa0\x93\x4a\x5e\xac\x5f\x3e\xc5\xe4\xed\xff\x82\xb2\xfe\xda\x6a\x47\x43\x84\x5b\x34\x5a\xc5\x3b\xb5\x0c\x65\x9a\xf8\xd0\x8f\x0f\x72\x2c\x91\x7c\xb5\xe4\x26\x0c\x41\xa6\x43\xc9\x21\x6f\x84\x54\x6f\x50\x38\xa1\x2d\x67\x1e\x94\xa7\x63\xf6\xf2\xc3\x8b\x47\x18\x18\x63\x28\xe1\x42\xce\x17\x87\x05\x5e\x7e\x33\xd8\xd5\x93\x7e\xcf\xf9\xe7\xe0\xd8\x9d\x15\xcc\xda\xcb\x93\xa9\x2e\x1f\xaf\x1c\xf4\xa0\x8c\xee\xf1\x9c\x26\xc8\xc9\x2b\xe7\xf8\x3e\xba\xe2\x38\x62\xf7\xe7\x95\x13\xe3\xdf\x4a\x6f\x84\xb6\x24\x43\xea\x45\xf7\x00\x6d\xf6\x93\x62\xf8\x9f\xe0\x1a\xbe\x71\x56\x45\xe5\x07\x1e\x7b\x18\x5a\x55\xb5\xd4\x8f\xd8\xfc\x62\xff\xb0\x31\x7f\x97\xa2\xb4\x9e\xf6\x99\xc3\x17\xea\xd6\x6b\xc9\x2d\x9a\x96\x0a\xf8\x94\xc7\x62\x71\xa0\x6f\x42\x56\x41\xb4\xf3\x67\x4b\xae\xeb\xbb\x0f\x97\xf1\x25\x89\x95\x19\x4b\xd1\xb7\xb4\xf6\xa5\x3e\xfc\x6c\xde\xe6\x77\x11\x37\xac\x58\x16\xf0\x82\xd9\x10\xda\xf3\x3d\x1b\x46\xa9\x85\x92\x3b\x20\x87\xdf\xfe\xbc\xe8\x7c\x93\xfe\xdb\xdc\x68\xe9\x3d\x88\x7d\x20\x0f\x08\x96\x16\x4b\xc2\xb1\xe5\xb0\xd0\xc6\x80\xa3\xe4\x0f\x7d\xd3\x5e\x52\x93\x82\xf6\xf9\xb3\xd1\x51\x7a\xe2\x48\x5a\x67\xdf\x3b\xd3\x07\xf8\xe9\x2e\xce\xbb\x1b\x51\xcb\x6e\x44\x4a\x11\x1f\x05\x53\xee\x20\xe5\x06\xd2\xae\x48\x3f\x83\x86\xbd\xd7\x53\x43\xe1\x41\x4d\x6d\x12\xed\xe3\x23\x3b\xd3\x16\xcd\xbe\xc0\x46\x23\x7b\x4f\xe2\x31\x8c\x0c\xa1\x4b\xa2\xc1\xa0\x17\xf0\xc2\x8e\xd4\x1d\xce\x3a\x02\x1c\x30\xf0\x7f\x92\xc3\xf0\xc9\x97\x70\x2e\x64\x7d\xeb\xc8\x27\x45\xba\x6a\x18\xd5\x58\x56\xda\xe6\x56\x0d\x29\x1f\xa4\x85\x85\xa9\xe1\xf2\xcb\x32\xb9\xb6\x69\x5d\xd3\xcc\x91\xaf\x86\xc4\x8e\xba\x54\x1b\xa4\x6b\xf6\x41\xa3\x94\xe1\x74\xb6\x49\x4f\x3b\x58\xa0\x8e\xb7\x67\x29\xae\xd6\x29\x0b\x2f\x59\x3f\x4b\xd9\x34\x63\x47\x77\xa6\xfe\x22\xaf\x3f\x3a\x2f\xfe\x09\x00\x00\xff\xff\x6f\x43\x5f\xfb\x19\x15\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
