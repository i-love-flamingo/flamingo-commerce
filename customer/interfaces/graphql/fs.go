// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x30\xb9\x7c\x97\xa2\xdf\xdd\xb7\xb5\xdd\x80\x00\x45\xb1\xb5\xbd\x0d\x43\xa1\x58\xb4\x4d\x4c\xa6\x0c\x89\x5e\x6b\x0c\xfd\xef\x83\x25\x39\xb1\x6b\xbb\x28\xb6\x9c\x12\xf2\xe5\x3d\x51\x7c\xa4\xa4\x6f\x11\xae\x6d\xd3\xa0\x2b\xf0\xe9\xba\xf3\x62\x1b\x74\x4f\x0f\xa2\xa4\xf3\x4f\xf7\xe8\x3b\x23\xf0\x3b\x03\x00\x20\x7f\x6b\xab\x0a\xf5\x81\x73\xb8\xb2\xd6\xa0\xe2\x5d\x48\x74\x1e\xdd\xe1\x26\x87\x07\x71\xc4\xd5\x2e\x7b\xcd\xb2\x0d\xda\x39\x9f\x3e\xff\x65\xf8\xbd\x1f\x61\x1e\x5a\x74\xde\xb2\x32\xa0\x95\xa8\x7d\xc8\x8e\xa1\x1b\x25\x2a\x5f\xa1\xfe\x1a\xf2\x43\x36\xb1\x7d\xd2\xda\xa1\xf7\xe8\x41\x6a\x25\x20\x35\x42\x91\xc0\xd0\x3a\xfb\x8b\x34\xea\x0b\x28\x14\xc3\x11\x87\x12\x34\x94\xd6\xc1\x91\x8c\x21\xae\xe0\x7f\xf0\x35\xb5\x2d\x71\x15\xe5\xd5\xc8\x96\xc3\xf7\xa5\x78\xd2\xda\xfd\x88\xd2\x8f\x35\x82\xc6\x52\x0d\xb5\x8e\x34\x23\x03\xd8\x72\x76\x96\x0b\xe0\xce\x18\xa0\x10\x75\x08\xe4\x81\x2d\x63\x54\x4d\x24\x0f\x89\x23\xc9\xac\x95\x9f\x52\x4b\xfd\xb1\xa0\x7f\x90\xbf\x8a\x14\x1f\x50\xdf\xee\xfc\xb9\x3d\xa9\xfb\x15\xb2\x46\x97\x0f\x5f\x67\x2e\x28\xc9\x79\xb9\x53\x0d\xe6\xf3\xb8\x51\xa7\xf0\x2c\xde\x90\xd6\x06\x63\x66\x16\x57\xc4\x9f\x1b\x45\xe6\x0d\x4f\xeb\xb0\xa4\x97\xa8\x3b\x4b\x1c\xc9\x49\xad\x55\x1f\x52\x8f\xd4\x60\x0c\xb3\x12\x1a\x7c\x47\xd2\x7f\xc4\xe1\xe9\x26\x26\x16\x3f\xdc\xec\x46\x07\x51\xa4\x4a\x98\x5b\xe2\x60\xa7\x44\x1a\xbd\x53\x04\x9d\xe5\x67\x7a\xd2\xc2\x36\xad\xe2\x25\x6c\x8e\xe9\x58\x5c\x7f\x6d\x35\xe6\x5b\x98\xfd\x17\xa3\xaa\xd8\x7a\xf2\x27\x83\xf8\xda\x76\x46\x9f\x86\x42\xf9\xe0\x97\x0d\x3b\xad\xf9\xe4\xac\x37\xdb\x12\x7f\xa3\xf6\x76\x78\x56\xa7\x22\x5f\x95\x9b\xfa\x68\xeb\x02\xa6\x9e\xda\xc2\xb4\xd6\xcb\xe2\x16\xdf\x62\xa6\x9e\xda\xc0\x38\xac\xc8\xf2\x92\x69\x8a\xf1\xe2\x10\xe5\x7d\x9e\x88\xb9\xeb\x9a\xe3\x38\x3d\x4b\x8c\xa0\xc1\xb6\xb6\xfc\x5e\xed\x98\x66\x63\x4b\xeb\x35\xcb\xf0\x45\x90\x35\x04\xa7\x7f\xeb\xd0\xf5\xc9\xd5\xfb\x7d\xec\xc3\x3d\x4a\xe7\x38\x76\xcc\x84\xa7\x01\x88\xc1\x87\xa7\x23\x2c\xd3\xb8\x68\x9c\x43\x16\xf0\xe8\x3d\x59\x9e\x11\x6c\xbd\x3b\x6b\x2b\x66\xf6\x22\x7d\xe0\x18\xa7\x5d\xbf\x71\x10\xb0\x0e\x14\x03\x3a\x67\xdd\xe0\x4a\x92\xb8\xfb\xe4\xcc\x71\x19\xe8\x0f\x25\xf4\xb6\x03\x6d\xf9\x3f\x81\x67\xc5\x02\x62\xa1\x56\xac\x0d\x06\xde\xc0\x70\x01\x45\x8d\xc5\x4f\x78\x26\xa9\x37\x0f\x1f\x3d\x79\xf9\xfe\x15\xac\xd5\x9e\x8a\x7e\xcd\xfe\x04\x00\x00\xff\xff\x43\xfb\x31\x25\xae\x07\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
