// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	application "flamingo.me/flamingo-commerce/v3/cart/application"
	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	context "context"

	mock "github.com/stretchr/testify/mock"

	web "flamingo.me/flamingo/v3/framework/web"
)

// CartCache is an autogenerated mock type for the CartCache type
type CartCache struct {
	mock.Mock
}

type CartCache_Expecter struct {
	mock *mock.Mock
}

func (_m *CartCache) EXPECT() *CartCache_Expecter {
	return &CartCache_Expecter{mock: &_m.Mock}
}

// BuildIdentifier provides a mock function with given fields: _a0, _a1
func (_m *CartCache) BuildIdentifier(_a0 context.Context, _a1 *web.Session) (application.CartCacheIdentifier, error) {
	ret := _m.Called(_a0, _a1)

	var r0 application.CartCacheIdentifier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) (application.CartCacheIdentifier, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) application.CartCacheIdentifier); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(application.CartCacheIdentifier)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartCache_BuildIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildIdentifier'
type CartCache_BuildIdentifier_Call struct {
	*mock.Call
}

// BuildIdentifier is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
func (_e *CartCache_Expecter) BuildIdentifier(_a0 interface{}, _a1 interface{}) *CartCache_BuildIdentifier_Call {
	return &CartCache_BuildIdentifier_Call{Call: _e.mock.On("BuildIdentifier", _a0, _a1)}
}

func (_c *CartCache_BuildIdentifier_Call) Run(run func(_a0 context.Context, _a1 *web.Session)) *CartCache_BuildIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session))
	})
	return _c
}

func (_c *CartCache_BuildIdentifier_Call) Return(_a0 application.CartCacheIdentifier, _a1 error) *CartCache_BuildIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartCache_BuildIdentifier_Call) RunAndReturn(run func(context.Context, *web.Session) (application.CartCacheIdentifier, error)) *CartCache_BuildIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// CacheCart provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *CartCache) CacheCart(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier, _a3 *cart.Cart) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, application.CartCacheIdentifier, *cart.Cart) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartCache_CacheCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheCart'
type CartCache_CacheCart_Call struct {
	*mock.Call
}

// CacheCart is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
//   - _a2 application.CartCacheIdentifier
//   - _a3 *cart.Cart
func (_e *CartCache_Expecter) CacheCart(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *CartCache_CacheCart_Call {
	return &CartCache_CacheCart_Call{Call: _e.mock.On("CacheCart", _a0, _a1, _a2, _a3)}
}

func (_c *CartCache_CacheCart_Call) Run(run func(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier, _a3 *cart.Cart)) *CartCache_CacheCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(application.CartCacheIdentifier), args[3].(*cart.Cart))
	})
	return _c
}

func (_c *CartCache_CacheCart_Call) Return(_a0 error) *CartCache_CacheCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CartCache_CacheCart_Call) RunAndReturn(run func(context.Context, *web.Session, application.CartCacheIdentifier, *cart.Cart) error) *CartCache_CacheCart_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1, _a2
func (_m *CartCache) Delete(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, application.CartCacheIdentifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CartCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
//   - _a2 application.CartCacheIdentifier
func (_e *CartCache_Expecter) Delete(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CartCache_Delete_Call {
	return &CartCache_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1, _a2)}
}

func (_c *CartCache_Delete_Call) Run(run func(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier)) *CartCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(application.CartCacheIdentifier))
	})
	return _c
}

func (_c *CartCache_Delete_Call) Return(_a0 error) *CartCache_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CartCache_Delete_Call) RunAndReturn(run func(context.Context, *web.Session, application.CartCacheIdentifier) error) *CartCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields: _a0, _a1
func (_m *CartCache) DeleteAll(_a0 context.Context, _a1 *web.Session) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartCache_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type CartCache_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
func (_e *CartCache_Expecter) DeleteAll(_a0 interface{}, _a1 interface{}) *CartCache_DeleteAll_Call {
	return &CartCache_DeleteAll_Call{Call: _e.mock.On("DeleteAll", _a0, _a1)}
}

func (_c *CartCache_DeleteAll_Call) Run(run func(_a0 context.Context, _a1 *web.Session)) *CartCache_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session))
	})
	return _c
}

func (_c *CartCache_DeleteAll_Call) Return(_a0 error) *CartCache_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CartCache_DeleteAll_Call) RunAndReturn(run func(context.Context, *web.Session) error) *CartCache_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetCart provides a mock function with given fields: _a0, _a1, _a2
func (_m *CartCache) GetCart(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier) (*cart.Cart, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, application.CartCacheIdentifier) (*cart.Cart, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, application.CartCacheIdentifier) *cart.Cart); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, application.CartCacheIdentifier) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartCache_GetCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCart'
type CartCache_GetCart_Call struct {
	*mock.Call
}

// GetCart is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
//   - _a2 application.CartCacheIdentifier
func (_e *CartCache_Expecter) GetCart(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CartCache_GetCart_Call {
	return &CartCache_GetCart_Call{Call: _e.mock.On("GetCart", _a0, _a1, _a2)}
}

func (_c *CartCache_GetCart_Call) Run(run func(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier)) *CartCache_GetCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(application.CartCacheIdentifier))
	})
	return _c
}

func (_c *CartCache_GetCart_Call) Return(_a0 *cart.Cart, _a1 error) *CartCache_GetCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartCache_GetCart_Call) RunAndReturn(run func(context.Context, *web.Session, application.CartCacheIdentifier) (*cart.Cart, error)) *CartCache_GetCart_Call {
	_c.Call.Return(run)
	return _c
}

// Invalidate provides a mock function with given fields: _a0, _a1, _a2
func (_m *CartCache) Invalidate(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, application.CartCacheIdentifier) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartCache_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type CartCache_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *web.Session
//   - _a2 application.CartCacheIdentifier
func (_e *CartCache_Expecter) Invalidate(_a0 interface{}, _a1 interface{}, _a2 interface{}) *CartCache_Invalidate_Call {
	return &CartCache_Invalidate_Call{Call: _e.mock.On("Invalidate", _a0, _a1, _a2)}
}

func (_c *CartCache_Invalidate_Call) Run(run func(_a0 context.Context, _a1 *web.Session, _a2 application.CartCacheIdentifier)) *CartCache_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*web.Session), args[2].(application.CartCacheIdentifier))
	})
	return _c
}

func (_c *CartCache_Invalidate_Call) Return(_a0 error) *CartCache_Invalidate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CartCache_Invalidate_Call) RunAndReturn(run func(context.Context, *web.Session, application.CartCacheIdentifier) error) *CartCache_Invalidate_Call {
	_c.Call.Return(run)
	return _c
}

// NewCartCache creates a new instance of CartCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCartCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *CartCache {
	mock := &CartCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
