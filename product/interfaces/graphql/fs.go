// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x30\x3e\x17\x4e\x70\x5c\x3f\x40\xee\x1c\x37\x3d\x27\x68\xd2\xe6\xd4\x39\xdd\x05\x8a\x22\x18\x4b\x23\x89\x28\x45\x6a\x49\x2a\x8d\xb6\xe8\x5b\xed\x13\xec\x93\x2d\x86\xa4\x64\xfd\xda\xc9\xb6\x58\xa0\x40\x0d\xb4\x40\x39\xbf\x9c\xf9\xe6\x87\x2a\x97\x16\x75\x02\x11\xb2\x8d\xca\x73\xd4\x11\xde\xdf\x6a\x15\x97\x91\x65\x5f\x66\x8c\x31\x66\xab\x02\xcf\xd9\xd6\x6a\x2e\xd3\x13\x77\x92\x83\xfe\x84\xf6\x56\x40\x84\x1b\x15\xf7\x88\x3c\x46\x69\x79\xc2\x51\xf7\x84\x30\xe6\x70\x3e\x30\x72\x7f\x43\xe7\x27\x4b\xc7\x53\x68\x1e\xe1\x08\xcf\x2d\x9d\x5f\xc9\x44\x05\x3e\xcb\xad\xe8\x99\x8d\xc0\x62\xaa\x34\x47\x33\x22\xbf\x69\x88\x9e\x39\x46\x13\x69\x5e\x58\xae\x64\x57\x8b\xc9\x94\xb6\x2f\xa7\xa8\x39\xda\xf1\x1b\x58\xf0\x0c\x42\x55\x20\x6c\x35\xc2\x73\xed\x29\x9e\x0d\xac\xd5\x7c\x57\xda\x51\x5f\xd7\x0d\xd1\x33\xef\x20\x4e\x47\x19\x2f\x1c\xe1\x64\xf6\x75\x36\x9b\xcf\xe7\xb3\x35\x33\x3c\x2f\x04\xb2\xc2\xd3\x97\xcc\x66\x60\x59\x06\x86\x49\xc5\x1e\x40\x73\xd8\x09\x6c\xd9\x66\x20\x63\x66\x33\xd4\x98\x28\x8d\xc4\xa4\x51\x00\xdd\x9a\x59\xc5\x14\x51\x6a\x5d\xc6\x59\x20\x20\x0c\xdd\xd8\x3a\xab\x35\x64\xdc\x3f\x72\x94\xd6\xfc\x84\xd3\x0f\x0e\xa7\x48\xc9\x84\xa7\xa5\x76\xb0\x09\x40\x60\x31\x26\x5c\xa2\x21\xdc\xb0\x42\x19\xc3\x89\xe8\xc0\x45\xf7\x33\x4c\x25\x0c\x6a\xe6\x15\xbb\xb2\x4c\x49\x51\x91\x2a\x0b\x5c\x9a\x19\x97\x89\xd2\xb9\x07\x19\xec\x54\x69\x1b\xc5\x4e\x07\xc1\x66\x57\x36\xa0\x85\xc8\xf2\x07\xac\x49\x8c\x5b\x83\x22\x59\x1d\xc0\xe2\xa6\xe5\xf2\x4f\x44\xfe\x20\x88\x6c\xd0\xb3\x45\x81\x91\x83\xd1\x39\xfb\x30\x10\x7b\x3f\x60\x3b\xf9\xf8\x3c\x44\xcb\x01\xa0\x0c\x53\x12\x09\xb3\x39\x48\x87\xd2\x48\xa3\xc5\x3d\x16\x5d\x07\x85\x41\x25\x3c\xf0\x18\xcd\x8a\xad\x85\x60\x31\x58\xf0\x7d\x93\x8a\x42\x39\x7d\x5d\x2b\x33\x6a\xb3\x52\x59\x57\x32\xf4\xa7\xad\xcd\x95\x08\x08\xa3\x9a\x12\x61\xc3\x12\xe1\xf6\xcf\x3f\x0c\xa3\x52\xe3\x32\x35\xec\xd4\xb7\xe6\xc6\x49\xea\xd7\x19\x32\x03\x79\x57\xf7\xd9\x81\x42\x59\x3b\x17\xdf\x7b\x15\xdf\x52\x29\xf3\xbb\x0c\xfb\xe5\x42\x01\x25\x8f\x16\x6d\x6f\x16\xfb\xae\xb0\x45\xf4\x77\x5e\x84\x3b\xdc\x74\xe5\x17\x2c\x51\xda\x69\xa8\x13\xd5\x33\x30\xff\x59\xa4\xff\x74\x91\x1e\xca\x33\x44\xb6\x04\x51\x27\x6b\xbe\x2f\xea\x41\x66\x7b\xd8\xd9\x4c\x63\xde\x63\x1c\x1e\x80\x8b\xce\xfc\xd9\x8f\x9a\xf9\x77\x69\x1e\xe4\xc3\x03\x4a\x8e\x32\x72\x46\x0a\xd4\xb6\xa2\x42\x86\x28\x42\x63\xea\xfb\xb5\xbb\x86\x80\x1d\x0a\xc3\x10\x0c\x17\x95\xf7\x02\xf6\xe5\x74\xdc\x97\xf5\x04\xf3\x73\xda\xd9\x9a\xa5\x5a\x95\x85\x1b\xb7\x4d\xa6\x56\xec\x72\x95\xae\xd8\xc2\xf0\xdf\x71\x31\x55\xf9\x43\xbb\xa1\xb6\xa3\x41\x7e\xdc\x45\x7b\x29\xa3\x9e\x17\xe6\x3e\xef\x0c\x7e\x5f\xb2\xd4\x2e\x6b\x7f\x6a\x77\x6e\x16\x4b\xb6\xb8\xa6\xbf\x7e\xbd\x5e\xf8\x78\xa9\xe2\x19\x99\xba\x7f\xeb\xb8\x3f\xba\x8b\x5f\x82\xa9\x5e\x58\xf5\x22\xa4\xa7\x9d\xb1\x98\x9b\x42\x40\xb5\x77\x60\x04\x56\xd0\x9f\x01\x4f\x68\x90\x7f\x3b\x58\x0f\x20\xca\x16\x97\xcb\x9b\x0c\x77\x77\xf1\x82\xb1\x2c\x3e\x3d\x71\x21\x30\xc1\xa5\x11\x07\x8c\x05\x3b\xd6\xc8\x26\x55\x6d\x49\x20\x64\x7a\xee\x53\x75\xa0\x46\x9b\x45\xcf\x27\x3e\x07\x1b\x65\x6e\x35\xa4\xb9\xea\xf4\xad\x9c\x8a\x97\x58\xa0\x8c\xb9\x4c\x69\x54\xf1\xc4\xbf\x39\x68\xf8\x0e\xb2\xc1\x94\xa6\x51\xb9\x64\xdc\x32\x4b\x8d\x92\xf2\xca\x65\x24\xca\x18\xdb\x03\x21\xf4\x5f\xb2\xba\x43\xd3\x36\x8d\x2c\x2a\xb5\x46\x52\xd5\xf2\xa0\xbe\x4c\x10\x7f\x4e\x48\xc2\x8c\x3c\x59\xba\xfc\x5d\x0d\x82\x40\x26\x4b\x19\xa3\x16\x15\xdd\xf0\x08\xac\x8e\x99\x09\xb9\x9c\x1c\x6d\xe4\x03\x75\x62\x97\x59\x87\x9b\x06\x50\x7e\x09\x89\x29\x62\xad\x30\x88\x6a\x00\x78\x94\x65\xfe\x5c\x4c\x04\xbf\x9c\xed\x29\xcd\x6e\x6b\x77\xc9\xc7\x47\x88\x5a\x8d\x80\xfd\x9b\x81\x10\x75\x4b\xef\xca\xb4\x71\x4f\x16\xd6\x9b\xbb\xab\xf7\x97\xa1\xd7\x34\x5c\x61\xe5\xb1\x19\xc8\x91\x8e\x7c\xc6\xf0\x91\x1b\x6b\x96\x23\x38\xfc\x06\x57\x6e\xd6\x77\x9b\xff\x7a\x4f\xde\xa8\x86\xeb\x3b\x9b\x5a\x79\x5b\x6f\xde\xde\x7b\x73\x94\xe0\x5f\x34\x14\x05\x86\x76\x1a\xd0\x6f\x58\x0e\x5c\xd6\xfb\x45\xe5\xde\xee\xa4\x7e\xbf\x70\x4c\xbe\x89\x1a\x8e\x06\x5c\x5c\x4e\x6f\x27\xd5\x1d\x82\x41\x1d\x56\x04\x21\xce\x19\x1b\xe9\xd2\x3d\x66\xdf\x9b\x69\x03\x19\x69\x13\xee\xa9\xe8\xe5\xa6\x7c\x74\x92\xde\xbb\x4f\x58\x7d\x56\x3a\x36\x64\xd7\xfd\x3e\x04\xec\x7b\x1b\x61\x83\x19\x35\xc3\xcd\x31\x3b\xb5\xf4\x97\xf6\x9e\xc7\x7c\x9b\x1b\x67\xdd\x2f\x7d\x4e\x04\x41\x4b\x2e\xd3\xf3\x83\x22\x97\x9e\xc9\x09\x7d\x9d\x1d\x76\x65\xaf\x7f\x72\xc5\x8e\x31\x81\x52\x74\x9b\x16\x8f\x42\x9b\xe6\xe6\x25\x37\x91\x2a\xa5\xc5\xf8\x9c\x5d\x28\x25\x10\x64\x90\x6b\x11\xc6\x44\x6b\xfa\x1d\x3e\xda\xde\x86\xc9\xe5\xad\xe2\xd2\x9a\x3b\xb5\x2d\x90\xfa\xe5\x2b\xa1\xc0\xd6\x6f\xe3\xc7\x69\x22\xbd\x62\x9c\xba\xf1\xe5\x79\xe3\xc9\xbe\x8f\x6d\x33\xf5\xd9\xb7\x6c\x17\xa1\xf0\x35\x8a\x15\x4e\xb9\x8b\x34\xc6\x47\x12\xd9\x0e\x75\xbb\x45\x39\xa1\xb0\x9d\x06\xd6\x16\xe7\x92\x21\x2d\x26\x37\x5c\xa0\x59\xcb\xf8\x46\xe9\xf0\xa2\x98\x78\xde\xb8\x39\x7e\x48\x9d\xef\x88\x51\xc5\x22\x90\x6c\x87\x5e\x7d\xb8\x87\xd2\x2c\x27\x43\xf3\xc3\xb9\x9c\xc4\x49\x3b\x6e\xf5\xf2\x51\x1a\xab\x72\xd4\xff\xa1\xe5\xa1\xf7\xfe\xc8\x40\x4a\x14\xc3\x5d\x5b\xa8\x08\x44\x77\x90\x4c\x95\x62\xcc\xeb\x5a\x74\xe5\x3f\x2c\x7e\xc7\x72\x65\x31\x0f\x1b\x6b\x8a\xd6\x1d\x9d\x96\x06\xd2\xbd\x8d\xb3\xa9\x67\x96\x13\x3d\xe2\x01\xf1\x74\x2a\xc2\xfd\xba\x20\xcd\xf1\xce\x93\xda\xc7\xc1\x87\x3e\x77\x78\xab\xf5\x8f\x35\x26\x48\xa9\x7b\x4a\x64\xf6\x4f\xa2\x3a\x3c\xf5\xc1\x6b\xac\x68\x97\x6d\x1a\x55\xff\x75\x35\xf2\x06\xa8\xa9\x81\x3b\x03\xd3\x1c\x9d\x7e\xc2\xaa\x1d\xc4\x50\xd4\x75\xa8\x27\xf9\xa6\x8d\x0c\x44\xcd\x45\xf5\x1a\x2b\x52\xd0\xf6\xfb\xec\x98\xa7\xc7\x43\x33\xb9\x1e\xd3\xc9\xf5\x70\x43\x1d\x59\x5a\x4b\xc9\xed\x10\xbf\xae\x06\x3b\x41\x9e\x74\xa6\x3b\x9b\x26\x3d\x2a\xc0\x66\xdd\x13\x09\xf9\x80\x47\xe3\xe8\xba\xd8\xb5\x71\xa4\x7a\x5b\xdd\x69\xa2\xfe\x8f\xf4\xeb\x23\xed\xda\x2f\x17\x17\x60\xb0\xd3\x8b\xf7\xc7\xeb\x9c\x04\x27\x88\xff\x97\xbc\xd1\x37\x3d\x52\xc2\xd7\x8d\xbc\x00\x9e\xca\x77\xa5\xc0\x01\xe0\x63\x94\x15\xb5\xd2\x5a\xd8\x74\x65\xff\xf5\xf4\xf1\xe0\x0b\x16\x1e\x37\x02\x8c\x79\x42\x61\x6e\x11\x74\x94\xbd\x43\x53\x0a\xdb\x8c\x76\xff\xff\x16\x23\x88\x0e\xee\x26\x10\x61\x97\xee\xd5\xdc\xbf\x22\xc2\xc9\xc7\xf0\x82\x2a\xd3\x14\xcd\xe0\xb1\x1a\x58\xb7\x0d\x35\x28\x35\xee\xfc\xa6\xfb\x81\x26\x30\xef\xbf\xcf\x64\x60\xfc\x92\x8d\xb1\x33\xd6\x9a\xdb\x93\x77\xf4\x8f\xff\xc3\x7d\xd9\xf1\xd4\xd7\xe3\xda\x8c\xc5\xd9\xf1\x1c\x31\xd3\x29\x99\x43\xe5\xfa\x75\x36\xc3\x47\x8b\x34\xb8\x49\xdb\xff\x4a\xd4\xf5\x6e\xd5\xd7\x7c\x3a\xf5\xa4\x59\x1e\xf9\x54\x34\xd2\xd8\x46\x0d\x84\x30\x9f\x9a\x00\x86\xdf\x4a\xec\x04\x20\x64\x21\x10\xc6\xda\x65\x1b\x46\x74\xb7\xbf\x02\x00\x00\xff\xff\x1d\x3b\x8a\x1a\x19\x1d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
