// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcd\x6e\xdc\x38\x0c\xc7\xef\xf3\x14\x1c\xf4\xd2\x1e\xfa\x02\xbe\xb5\xb3\x5b\x6c\x81\x16\x99\x9d\xb4\xdd\x43\x51\x0c\x18\x89\x1e\x0b\x91\x45\x2f\x45\x27\x35\x16\x7d\xf7\x85\x64\x75\xe2\xf9\x0a\xa6\x49\xba\x5d\x1f\x82\x8c\x24\xfe\xf9\x23\x4d\xc9\x94\x0e\x1d\xc1\x82\xdb\x96\xc4\xd0\x7a\xd1\x90\xb9\xe6\x5e\xd7\x97\x8a\xa2\x4b\x8f\x86\x2e\xc4\x92\xac\x57\x14\x7b\xaf\xf0\xcf\x0c\x00\xa0\xef\x9d\xad\xe0\x52\xc5\x85\xcd\x7c\xf6\x6d\xf6\xec\x88\xc0\x9d\xed\x82\x83\xd2\x57\x05\xa1\x4e\x28\x52\xd0\x08\xda\x10\xc8\xa8\xc8\x75\xfe\x65\x7a\x11\x0a\x0a\xcf\xa5\x0f\xc1\x85\xcd\x0b\xe8\x92\x00\x70\x52\x80\xb6\x57\x54\xc7\x61\x76\x82\xf6\xd0\xd9\x08\xfa\x0c\x3e\x34\x04\x0b\x14\x05\x6d\x50\xc1\x45\xd8\xb0\x0b\x1b\x50\x86\x2b\x1a\x5d\xd8\xbc\xd2\xa0\x68\x75\xa7\xfc\x1b\x19\x16\x54\xb2\xc9\x76\x22\x35\x5a\x14\x2a\x17\xc0\x60\xfc\xce\xe8\x22\xa0\x17\x42\x3b\x4c\x75\xf3\xdc\xdb\x50\x73\xac\x4e\x71\xdb\x8b\xed\x9a\xe2\xe9\x52\x51\x09\x2c\x75\x14\x6c\xa2\xe5\x90\x73\x14\xf3\x30\xd7\xd0\xe1\xd0\xa6\x64\x61\xb0\x3b\x69\x7a\x59\x96\xb4\x38\x80\xe1\xa0\xe8\x02\xa0\xb5\x2e\xa5\x0e\x3d\xb8\xad\x8b\xbc\xec\x24\x50\xe6\xc9\x0c\xeb\xfc\x77\x5e\xb0\x5e\x41\x1f\xdc\xdf\x3d\x81\xb3\x50\xb3\x64\xa6\x4e\xd8\x50\x8c\x47\xcb\x62\x76\xba\x30\x26\x31\xc3\xcb\x11\x0c\xf0\x8a\x7b\x1d\x45\x27\x59\x4e\xf3\x3a\x74\xce\xa0\xf7\x03\xc4\x86\x6f\x43\xca\x07\x42\xec\x0d\x51\x8c\xd0\xe1\x86\xee\xad\x8b\xa9\xaf\xb1\x2c\x4a\xfe\xca\x6b\x29\xcf\xe7\xfb\xb2\xb1\xbc\xb3\x98\x7f\x19\x35\xf6\xa4\xab\x3d\x0d\x94\x03\xf7\xc5\x92\x5a\x74\x7e\xeb\xb6\x3c\x93\xac\xe5\x58\xee\x7d\x37\x13\x9a\x12\xd1\x06\x95\x6e\x71\xa8\x0e\xf4\x26\xe1\x2e\x85\x6f\x9c\x25\xa9\x76\x26\x5b\xd2\x86\x6d\x75\x48\x92\xfe\xc7\x96\xfb\xa0\x93\xc9\x2d\xd5\x52\x9c\x29\x85\xa1\x4e\x3d\x55\xc7\x63\x99\xb9\xa0\x24\x75\x2a\xd1\x33\x8b\xad\x04\x14\xb0\xa5\xea\x20\x2b\x67\x6a\xac\xff\x42\xa7\xe0\xda\xce\x53\x9b\xcf\x9b\xff\xda\xf7\x1b\x96\x45\x1f\x95\xdb\x74\x2e\xfc\x1a\x8c\xcb\xde\xa4\x8d\xf9\xab\xdc\xbf\x41\xe7\xc9\x3e\x95\xf7\x34\x22\x84\x91\xc3\x23\x12\xd2\xf0\xed\xdb\x5a\xb0\xa5\xa7\xa4\xfa\xb8\x7a\xf7\x38\xa4\x3f\x3e\xbc\x7f\xf7\x94\x40\x49\xef\xe1\x44\x2b\xb2\x4e\xc8\x3c\xd9\xe6\x79\x74\x8a\x96\x1c\xf5\xa7\x43\xa5\x81\x25\xa6\xd2\x50\x92\x58\xdd\xff\x29\x28\xf5\xcd\xd2\xae\xb7\x36\xf3\x2f\x29\xb0\x1f\x3e\xeb\xca\x2e\x59\xe5\xca\x2e\xa8\xbb\x65\x9e\xcf\xd0\x07\x6c\xbc\x51\x72\xfd\xbb\x08\x3f\xe4\x04\x3a\x0f\xec\xe1\x5c\xe5\x03\xf6\x7f\xc5\x4b\x1f\xef\x4f\xe8\x9d\xcd\x4d\xe7\x4f\xa4\x4c\x43\x37\x5b\x47\x63\x8f\x3d\x6d\xcb\x52\x13\xf1\x69\x6f\xfe\x47\xf6\xd0\x6e\x95\x16\x86\x6b\x1a\x76\x4b\xff\x06\x7d\x4f\x15\x7c\x2e\x63\xb9\x96\xe9\xab\x52\xb0\x90\xfd\xfc\xd9\x93\x0c\xc5\xf8\xd0\xe7\x2b\xa3\xee\x86\xee\x3c\x57\xf0\x9a\xd9\x13\x86\xf9\xbe\xce\xfb\xd2\xc5\x6f\x9b\xf3\x8b\xe0\x07\xe8\x38\x46\x77\xe5\x09\x5c\x3d\x36\xbe\x2d\x46\xd3\xb8\x40\x10\x58\x01\xb3\x3a\x70\xee\xb6\x11\x6a\x97\x1a\xd9\xdc\xbe\x9e\xc0\xd9\xbb\xb8\x3c\x17\xd2\x5e\xc2\x47\xf1\xdb\x98\x5f\x1c\x6b\x7c\x8f\xdf\x77\xbe\x77\xbe\xcb\x09\xe3\xd8\x62\xbb\x98\xf1\x32\xcf\x09\x92\x05\x06\x43\xfe\x68\x62\x8e\x1b\xac\xa8\x16\x8a\xcd\xd4\xe2\x8c\xab\xce\xd9\x6a\xaf\x3d\x9b\x6b\x17\x36\x67\xaa\x7e\x9b\xfd\x1b\x00\x00\xff\xff\xa1\xee\x30\xfb\x1b\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
