// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\xb0\xb9\xec\x32\xf4\x07\xf8\xb6\xa6\x3b\x04\x28\x8a\xad\xd9\x6d\x18\x02\xcd\xa2\x6d\x62\x32\x65\x50\x34\x5a\x63\xc8\x7f\x1f\x22\x6b\x4b\xe5\x8f\x21\xb9\xc4\xe6\x7b\x7c\xd4\x23\x69\xe9\xd8\x23\xec\x7d\xd7\xa1\x54\x78\xda\x0f\x41\x7d\x87\x72\x3a\xaa\xd1\x21\x9c\x5e\x30\x0c\x4e\xe1\x77\x01\x00\x40\xe1\xc9\x37\x0d\xda\x03\x97\xf0\xe0\xbd\x43\xc3\x77\x11\x18\x02\xca\xe1\xb1\x84\xa3\x0a\x71\x73\x57\x9c\x8b\x62\x43\x36\xd7\xb3\xd7\x94\xcb\x7b\x8f\x12\x3c\x1b\xf7\x68\xd4\x94\x2b\xc9\x5f\x22\x7e\x41\x27\xbe\xb1\x56\x30\x04\x0c\x25\x7c\x5f\xb2\x3f\x4d\xe8\xdd\x8f\xc8\xb5\x58\x9b\xc1\xe9\xb1\xa5\xbe\x27\x6e\x12\xb8\x56\xe5\x6f\xde\xfb\xb4\x07\x72\xee\xc6\xac\x6d\xef\xd7\xe3\x27\xff\x0d\xb2\x45\x29\x2f\x8f\x59\x1f\x6a\x92\xa0\xcf\xa6\xc3\x32\x8f\x3b\xf3\x2f\x9c\xc5\x3b\xb2\xd6\xe1\x84\x64\x71\x43\xfc\xb9\x33\xe4\x66\x3a\xbd\x60\x4d\x6f\x53\xdd\x0c\xf8\x49\xa2\xad\x35\x63\x84\xbe\x51\x87\x53\x98\x8d\xd2\x65\x2e\xa4\xe3\x2d\x33\x4e\xad\x48\x26\x05\x1b\xf2\xbc\xf7\x16\x53\x41\x58\xd6\xad\xfc\xc0\x2a\xe3\x82\x94\x73\xba\xde\xf0\x98\x8b\xcc\x38\x41\x05\x51\x17\x94\x15\xce\xb3\xcc\x59\xef\x39\xc6\x5a\x9a\x2c\x27\x2f\x4f\xc4\x71\xcb\x12\x69\x5a\x29\x45\x87\x7d\xeb\x79\x66\x2c\x6f\xb5\x0f\xba\xf4\x3e\x73\x16\xfb\xba\xfc\x2d\x56\x82\xd3\xec\x37\x38\x97\xf5\x58\xa1\x64\x1c\x4c\xeb\xb0\x55\xeb\x5c\x14\xf8\xa6\xc8\x16\xe2\x70\xbf\x0e\x28\x63\x1a\xe4\x6e\xb7\x8b\xff\x2f\xa8\x83\x70\x00\x6d\x11\x5c\xbc\x0f\x80\x18\x42\xbc\x2f\xa0\xf6\x12\x81\x6a\x10\x41\x56\x08\x18\x02\x79\xce\x04\xb6\x2e\x9b\xb5\xcf\x2a\xbb\x86\x6e\x38\x46\x95\x12\xb7\x0e\x02\x5e\xc0\x30\xa0\x88\x17\xa0\x1a\x48\x81\x02\xb0\xd7\xab\xc6\x7d\x94\x3f\xd4\x30\xfa\x01\xac\xe7\x0f\x0a\xaf\x86\x15\xd4\x43\x6b\xd8\x3a\x8c\xba\x51\xe1\x23\x54\x2d\x56\xbf\xe0\x95\xb4\xdd\x3c\xfc\x34\xbb\xfb\xff\xb7\x60\xcd\x7b\x32\x7d\x2e\xfe\x04\x00\x00\xff\xff\x19\xb5\x6f\x30\xa3\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
