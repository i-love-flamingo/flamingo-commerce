// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x14\xf4\x92\x02\x7d\x02\xdd\x12\xa7\x5b\x04\xdd\x2c\xd2\xda\xed\x65\x11\x14\x63\x6a\x6c\x0f\x4c\x91\x02\x39\xca\x46\x28\xf6\xdd\x0b\x91\x94\x2c\x92\x92\xed\x63\x0f\x9b\x53\x3c\xf3\xcd\x0f\x47\x33\xdf\x0c\x29\x46\xb3\x07\x81\xc5\x5a\xd7\x35\x1a\x81\xff\xbc\x1a\x5d\xb5\x82\x8b\x7f\x57\x45\x51\x14\x3b\xb0\xf8\x04\x0c\xe5\x19\xf0\x08\x96\x44\x40\xf5\xaa\x3b\x07\x64\x04\x8b\x26\x81\x06\xd4\x76\xd4\x79\xac\x6d\x50\xd0\x9e\x04\x30\x69\x65\x73\xfc\x26\xd2\x7b\x1b\xb2\x1b\x90\x08\x3b\x89\x65\xf1\xa8\xb5\x44\x50\xc1\x59\x10\xcf\x87\x1e\x8c\x42\x92\x5d\x83\x65\xb1\x61\x43\xea\xe0\x25\x07\xe4\xe7\x0a\x15\xd3\x9e\xd0\xc4\xaa\x23\xd8\x17\xac\x08\xee\x0f\x46\xb7\xcd\xa8\xfb\xa5\x68\x2d\x1c\xce\x6e\x7e\x4e\xf2\x39\x20\xdf\x68\x96\xe6\xea\xcc\xee\x56\xdf\x57\xab\x3e\xcf\xb3\x7a\x43\x75\x23\x71\xf8\x2e\xee\x47\x8d\x8a\xed\x8f\x6f\xf6\xff\xfd\x66\x69\xc1\xc3\xa7\x61\xe2\xbe\x18\x93\xbf\x69\xf6\xc0\x6c\x68\xd7\x32\xda\x01\x92\x86\x7b\x18\x11\xbe\x8e\x47\x6d\xf8\x09\xad\x30\xd4\xf4\x75\x8f\x8b\x51\x4d\x15\x59\xb0\xba\xcf\x3c\x4a\xe5\xeb\xfc\xe3\xde\x56\x1e\x0f\xe6\x84\xfc\x2a\x41\xe0\x5a\x57\xc9\x27\x31\xc8\x40\x12\x8d\xd7\x24\x91\x06\xe5\xe6\xd4\x96\x59\x1a\x83\xf2\x0b\xd4\xb1\xa5\xd3\x0a\x83\xc0\x58\x3d\x70\xaf\xda\x52\x8d\x4e\xda\x36\xd5\x8c\xf4\x9d\x2c\xed\x24\x7e\x32\xba\x2e\x33\xe9\x56\x8f\x58\x27\x5e\x03\xe3\x41\x1b\xf2\xa5\x3e\xbf\x3c\xc8\x3b\xdf\xfe\x77\x6f\x0e\xfc\x02\xa4\x06\xc5\xa4\x05\x12\x6c\xc8\x78\x10\xea\xbe\x16\x2f\xd0\x34\xa4\x0e\x65\xf1\x35\x3c\x2b\x14\xd3\xb2\x16\xa7\xcf\xf8\x8e\xb2\x8c\x1f\x7c\xc2\xee\x9b\x36\x95\x9d\x5a\xf8\x51\xfa\x82\xdf\x5c\x7d\xc6\xc6\xcd\x7a\x2e\x9b\xdc\xd0\x74\xae\x4b\xb6\xbe\xf3\xbc\xd3\x8b\xcd\x33\xa1\x86\x57\x43\x02\x8b\xbc\xeb\x9d\xfc\x59\xed\x75\x8a\x7d\xb6\x7d\xf9\xdd\xbf\xe3\x88\x39\x4c\x63\x70\x83\x12\x05\x63\xf5\x37\x18\x02\xc5\xae\x1b\x26\x11\x5d\x3f\x16\xe5\x72\x17\x5e\x68\xc2\x49\x1a\x0f\xef\x40\xb2\x67\x0f\x97\x84\x9d\x73\x38\x66\x1f\x9c\x7a\xc3\xcf\xba\x03\xc9\xdd\xa8\xcc\x5f\x9d\x22\x16\xbf\x40\x0a\x1c\x86\x3f\x63\xb2\x0a\xf7\xd0\x4a\x8e\x42\x91\xc0\x81\x3d\x9f\xc8\x0a\xdd\x2a\xc6\x2a\xe1\xab\x6a\xa2\x98\x33\x1d\xf4\x5b\xfc\xe0\x38\x62\x4d\xea\x55\x93\x62\xbb\xd5\x9b\x06\x15\x97\xc5\x27\xa9\x81\x83\x12\x3e\x96\x95\x42\x2b\x76\xee\xe2\x80\x6b\x2f\x9e\x6d\xc7\xb3\x3a\x54\x40\xb4\x96\x75\x8d\xe6\xb7\x88\x66\xbd\xea\x08\x4a\xa1\xcc\xa9\x45\x6a\x01\x72\x22\x5b\x2a\x7a\xbc\x80\x42\x40\xc7\xe7\x76\xa6\x07\x22\xb4\x4b\xe7\xee\xed\x36\xd7\x0e\x1c\xd3\xf9\x34\x5d\x54\xec\x59\xe5\x72\xc8\x5f\x15\x9b\xee\xd6\x90\x0e\x1c\x42\x4a\xd8\x4d\x49\xc3\x51\x1c\xc8\x16\x23\xc6\x58\xf4\x1a\x36\x6b\xf0\x75\x75\x3f\x27\x5c\x3a\x88\x7b\x32\x1d\x85\x20\x98\xde\x31\x8c\xfc\x65\xa2\x80\x78\x36\x6f\x18\x4d\x39\x99\xa4\x39\x7c\x3a\x69\x17\xde\xee\x68\x24\x9a\xc4\x7c\x25\x52\x8d\x5b\xaf\x9a\x8a\xc3\x11\x90\xa2\x27\xbb\x3c\x5e\x68\x7b\x34\xa8\xc4\x0d\x2d\x7b\xde\xe6\x21\xaf\xf1\x00\xf8\x1d\xbb\x6c\x05\x4c\xaf\x83\xac\x10\xa3\xab\x00\x3e\x82\x1d\x45\xf7\x27\xec\x66\x4e\x9f\xe1\xf2\x59\xc4\x2d\xc6\xb8\xfe\xa0\x61\xde\xf3\x69\xce\xdb\xb7\x55\xc4\xf1\xd8\x67\xee\xe3\x4d\xbb\xe8\xbc\x01\x3e\xc6\x12\xe5\xae\x8a\x18\x63\x1c\xb3\x2d\xf8\x5e\x7c\x5a\x4a\xe6\x0b\xd4\x7d\x85\x9e\xaf\xb0\xb3\x9f\xa5\x47\xb0\x18\x51\xef\x59\xfc\x50\xf7\x86\x0b\xca\xbf\x14\x71\xb4\x11\x67\x37\x48\xb8\x52\xea\x06\xe8\xa0\xfe\x6c\x25\x66\x8d\x56\xa1\xea\x5e\xb4\xc1\xc1\xd8\xc6\xb6\x3f\x5d\xdf\x06\x7e\x3e\xe0\x63\x2d\xc1\xda\xc9\x85\xb3\xf8\x61\x87\x71\x26\x3b\xae\x8a\xe5\x7b\x2b\x7c\x48\x6f\x32\x37\x0c\x9e\x05\xf0\x83\x51\x55\x6e\xd6\x8b\x3f\x5a\x1c\x19\x34\x45\xdf\xfb\xa3\xa2\xc9\x2e\xdb\x99\x11\x98\x75\xd0\x67\xfd\xd8\x0d\xd9\xdd\x0f\x99\x2f\xfa\x9a\x79\xf4\xea\xfb\xea\xbf\x00\x00\x00\xff\xff\x35\x7d\xdc\xa3\x8b\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
