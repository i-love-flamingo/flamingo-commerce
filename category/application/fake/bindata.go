// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package fake generated by go-bindata.// sources:
// mock/categoryTree.json
// mock/electronics.json
// mock/flat-screen_tvs.json
package fake

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _categorytreeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x4d\x6b\x02\x31\x10\x40\xef\xfb\x2b\x86\x1c\x7a\xb2\x78\xf7\x56\xb6\x95\xd2\x43\x29\xb8\xf4\x22\x22\x63\x9c\x9a\x94\x98\x48\x32\x5b\x28\xe2\x7f\x2f\xeb\x47\x9b\xc5\x26\x46\xf7\xb2\x7b\x78\x6f\x79\xc9\x30\xd3\x0a\x60\x5b\x01\x00\x88\x1a\x99\x56\xce\x7f\xd7\x6e\x49\x62\x04\x87\x47\x90\x21\xc9\xde\x59\x2d\x83\x18\xf4\xc1\x57\x5c\x47\xe0\x53\x1a\x7c\x43\x56\x59\x70\xd2\x2e\x1a\x4f\x14\x1e\x91\x51\x8c\x60\x5a\x1d\xd0\xed\xf1\x9d\x8c\xfb\x30\xc8\xf7\x41\x7a\x22\x3b\xe7\xaf\xd3\xef\x32\x91\x63\x83\x0c\x93\xbd\x10\xe0\x0e\x9a\xf7\xff\x94\x64\xee\xf0\x5c\x3f\xda\xbb\x41\x69\xb2\x22\x5c\x6e\x94\xb3\x54\x50\xfb\x9c\x65\xaf\xc9\x8c\xf4\xc4\x5d\xf7\xe3\x4b\x0e\x30\x47\x29\x29\x04\xe7\x75\xaf\x2f\x73\x9e\x87\xcb\x42\xfa\x50\xb1\x1c\xb9\xbb\xdf\xef\xd9\xd5\xb3\x60\x5c\x18\xe2\x82\x41\x34\x69\x30\x1d\x7c\x92\xaa\x38\xb4\x8b\xdc\x07\x66\x97\x4e\x1a\xc7\x4a\xdb\x55\x7e\xe3\xea\x8e\xa2\x6e\xc2\x63\x0c\x4a\x3b\x9b\xdf\xbb\x24\x7e\xeb\xf6\x7d\xb6\xeb\x4d\x68\x75\xc9\x05\xbe\xe4\xd0\x0b\x99\xc3\x3f\xf9\xfc\x2a\xab\xd9\x4f\x00\x00\x00\xff\xff\x45\x43\xa8\xe8\xc2\x04\x00\x00")

func categorytreeJsonBytes() ([]byte, error) {
	return bindataRead(
		_categorytreeJson,
		"categoryTree.json",
	)
}

func categorytreeJson() (*asset, error) {
	bytes, err := categorytreeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "categoryTree.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _electronicsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x72\x4e\x2c\x49\x4d\xcf\x2f\xaa\x74\xce\x4f\x49\x55\xb2\x52\x50\x4a\xcd\x49\x4d\x2e\x29\xca\xcf\xcb\x4c\x2e\x56\xd2\x41\x56\xe0\x97\x98\x0b\x56\xe0\x8a\x4b\x41\x40\x62\x49\x06\xba\x02\xae\x5a\x40\x00\x00\x00\xff\xff\x05\xf9\xd5\x8b\x65\x00\x00\x00")

func electronicsJsonBytes() ([]byte, error) {
	return bindataRead(
		_electronicsJson,
		"electronics.json",
	)
}

func electronicsJson() (*asset, error) {
	bytes, err := electronicsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "electronics.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _flatScreen_tvsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\x52\x50\x50\x72\x4e\x2c\x49\x4d\xcf\x2f\xaa\x74\xce\x4f\x49\x55\xb2\x52\x80\x00\xa5\xb4\x9c\xc4\x12\xdd\xe2\xe4\xa2\xd4\xd4\xbc\xf8\x92\xb2\x62\x25\x1d\x64\xa5\x7e\x89\xb9\x48\x4a\xdd\x72\x12\x4b\x14\x82\xc1\x4a\x8b\x15\xd4\x14\x42\xc2\x50\x15\x07\x24\x96\x64\x20\x14\xbb\xe6\xa4\x26\x97\x14\xe5\xe7\x65\x26\x17\xeb\x63\x6a\xe4\xaa\x05\x04\x00\x00\xff\xff\x2b\x75\xd9\xfb\x93\x00\x00\x00")

func flatScreen_tvsJsonBytes() ([]byte, error) {
	return bindataRead(
		_flatScreen_tvsJson,
		"flat-screen_tvs.json",
	)
}

func flatScreen_tvsJson() (*asset, error) {
	bytes, err := flatScreen_tvsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flat-screen_tvs.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"categoryTree.json":    categorytreeJson,
	"electronics.json":     electronicsJson,
	"flat-screen_tvs.json": flatScreen_tvsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"categoryTree.json":    &bintree{categorytreeJson, map[string]*bintree{}},
	"electronics.json":     &bintree{electronicsJson, map[string]*bintree{}},
	"flat-screen_tvs.json": &bintree{flatScreen_tvsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
