// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xe4\x36\x12\xbe\xfb\x29\x64\xcc\xa5\x17\x18\x2c\xb0\x7b\xec\x9b\xdd\x6d\x0f\x1a\x19\x7b\x3c\x9e\xce\xec\x61\x60\x18\xb4\x54\xdd\xcd\x1d\x8a\x54\x48\xca\xb6\x10\xe4\xdd\x17\xa4\x48\x89\x7f\x92\x68\x2f\x36\x97\x4d\x0e\x49\x9a\xac\x2a\x56\x91\x1f\x8b\x5f\x95\x2c\xbb\x06\x8a\x0d\xab\x6b\xe0\x25\x3c\x6e\xa1\x64\x1c\x49\xa8\x36\x88\xcb\xe2\xf7\xb3\xa2\x28\x8a\x12\x71\xb9\x1e\x45\xd4\xcc\xb9\x9e\xa8\xac\xf0\x16\x08\x7e\x06\x8e\x41\xac\x8b\x1f\x9e\xe0\x36\x10\xe9\xce\x1f\xb4\xea\x11\xe2\xa9\xcb\x6e\xc3\x2a\x58\x55\xe6\xa7\xfa\xb1\x2e\xbe\x49\x8e\xe9\xf1\xfc\x6f\x81\x03\x91\xf2\xd9\x1f\x67\x67\x7e\x28\x4e\x04\xb8\x5a\x17\xbb\x6d\xef\x34\x50\x89\x65\xb7\xdb\x0e\xa6\xf5\xe8\x13\x26\x04\xd3\xe3\x45\x55\x71\x10\x22\x58\xcc\x8c\x6a\xc1\xa6\xe5\xe5\x09\x09\xe0\x81\xcc\x1d\x70\xc1\xa8\xd9\x96\xe9\xdd\xf0\x36\x01\x55\x15\x96\x98\x51\x44\xb6\x48\xa2\x78\x51\x67\xb2\xf7\xb2\x41\x5d\x0d\x54\x7e\x03\x02\xa5\x9a\x0b\x54\x1e\xef\x82\xf9\x3e\x34\x20\x8c\x1e\xc5\x9e\x5d\xb4\xf2\xa4\xa2\x2f\xd5\xbe\xfd\xaa\x43\xb8\x64\x8c\x00\xa2\xbd\x75\x14\xce\x87\x9b\x84\x9a\x86\x60\xa8\x36\xac\x6d\x18\x55\xc7\x13\x05\x38\x4e\x99\x10\x2b\x38\xa0\x96\xc8\x4d\xcb\x39\xd0\xb2\xf3\xed\x49\x26\x11\xc1\x12\xea\xc8\xce\xde\xce\x18\x33\x58\x78\xa1\x41\x15\xba\xde\x7b\xf6\x09\x1f\xe4\x06\xf1\x2a\xb2\x77\xe1\xcf\xbb\x20\x7c\x0f\xf6\x0c\xe4\x02\x1b\x76\x47\x8c\xda\xc3\x99\x15\xb8\x41\x98\x7e\x3b\xe1\xa6\xc1\xf4\x78\x75\x83\x30\xf1\xb7\x01\x8b\xab\xba\x91\x5d\x10\xd2\x09\x09\x6b\xf8\x9a\xf1\x59\xef\x06\xbd\x38\xaa\x9d\x84\x7a\xb7\x5d\x61\xfd\x9f\xc5\x88\xce\xad\x81\x5c\x45\x25\x35\x28\xe9\x43\xfb\x2a\xbb\x55\x8d\xf8\x4f\x90\x77\x04\x95\xe0\xb9\xfa\xb1\x78\x46\x1c\x23\x2a\xc3\x00\x76\x54\x8e\x2b\x5f\xbd\x4a\xe0\x14\x91\x7b\x38\x80\x02\x0d\xac\x38\x1c\x16\x3c\xe8\xf7\x51\x42\xbd\x61\x2d\x95\xda\xa0\xb9\x31\x9c\x55\x6d\x29\xdd\x61\xbb\xd2\x77\xd6\x96\x27\xe0\xdf\xd0\x33\xa6\x47\xf7\xca\xdf\x71\x5c\x82\x89\x8a\x23\x5a\xe9\xb8\xe2\x79\x2d\x20\xda\x7a\x8f\x5e\x21\xcc\x18\x8f\x7a\x70\xd8\x19\x0d\x69\x48\x64\x8d\xc7\x7e\x74\x34\x66\x61\x72\x0b\x32\xed\x91\x2f\xf3\x2f\x2c\x4f\x5b\x2c\x4a\x15\xde\x44\x08\x27\x24\xac\xc2\x86\x09\x25\xe5\xdf\x1c\x42\xec\xf4\x1e\x4b\x92\x00\xb0\x68\x9f\xf4\x0e\x7c\xe2\x4c\x4c\xac\xa1\x76\x41\x89\xec\xd1\xeb\x45\xdd\x6f\x75\x5a\xac\xb7\x94\x0c\x2e\x5e\x2b\x23\x38\xc7\x62\x96\x74\xef\xa6\x15\x9b\xf7\xb5\xbe\x65\x54\xa1\xeb\x1e\x88\x7e\x68\xf2\x94\xde\xa8\x71\x42\xe2\x22\xcc\xaa\x89\x0b\x6d\xb2\xdf\x70\x25\xfc\x04\x62\xef\x9e\x5a\x5b\x5c\x76\xfb\xae\x81\x95\x7a\x0b\xc3\x6b\x36\x9f\x63\x47\xac\x6f\x4e\x88\x1f\x21\xda\xc4\x47\x33\x6e\xdc\x1a\x5d\x77\xd2\x6e\x98\xc2\xee\xa1\x46\x98\x62\x7a\x9c\x92\x11\x6d\x1d\x5a\xb9\x66\xbc\x54\x19\x7e\x62\x87\x3f\x0d\x7e\xaa\x23\x5f\xd4\xb2\x3b\x74\x41\xc8\xb0\x8b\xbf\xb5\x98\x43\xb5\xeb\x5f\x9e\xe0\x09\x55\x5a\xfd\x94\xd1\xad\x81\x1f\x61\x40\x56\xb4\x8c\xf3\xbc\x0c\x42\xe1\xd9\x46\xda\xe1\x16\x78\xb0\xf4\xc2\x9a\x02\x4f\x92\xee\xb8\xde\x1b\xea\xd3\x47\x6e\x33\xa5\x58\x17\x01\x0a\x8c\xca\x90\x4a\x1f\x1c\x2d\x9b\x18\x66\x35\x5d\x21\x4f\x7b\x84\x64\x88\x3c\xa3\x39\x08\x9c\x3f\xcc\x86\x63\x7d\x33\x11\xa1\x99\xeb\x14\x3c\x57\xb3\x66\x5d\xc7\x33\x4c\xdb\xc7\x77\x47\x0f\xcc\xbb\x58\xb3\x8b\x0c\x31\x66\xac\x50\x66\x58\xdd\xa3\xd7\x0c\x4b\x4a\xd1\x4f\x11\x8a\x2b\xaf\x8b\x6b\xc2\x90\x9c\xb6\x0c\x16\x34\x9a\x98\xa5\x91\xe7\x1e\x70\xff\xf0\xfd\x88\xec\x3c\x38\x3c\xa2\x4f\x46\xe8\x75\xef\xb8\x14\xbe\xe1\x4a\x67\x32\x60\xfd\x40\x1a\xbf\xfc\xd7\x7c\xa0\x0d\xbb\xf1\xe1\xd7\x3f\xcd\x70\x9a\x97\x69\xac\x61\x2a\x81\x1f\x50\x19\x1d\x5a\x40\xa0\xed\x25\x42\x12\x5e\x50\x8a\xbd\x7e\x47\xa4\x85\xdc\xdb\xb9\xed\xc9\x70\xb4\x08\xae\x1b\x02\x6a\x48\xfc\x99\xee\x44\x25\x94\xb1\x6e\x81\x3e\xcb\x11\x87\xd2\x2f\x79\xc1\xb7\xee\x6c\xa2\xe2\xb3\x37\xfa\xb2\xdb\x55\x2b\x53\x9c\x4d\x56\x78\x4a\x70\x2a\x82\xa4\xe3\xea\x86\x4e\x38\xaf\xa6\x86\x9a\x36\x59\x79\x38\x1e\x0b\x27\x41\x04\xf6\xdc\xdc\xb1\x4c\x92\x16\xa8\x64\x1e\x85\x5a\x62\x50\x6f\x60\x38\xef\x21\x38\x6f\xe6\x37\x6f\xe4\x73\xef\xa3\x73\xf7\xec\x65\x89\x7e\x9f\x90\x30\x18\x1d\x1e\xdd\x59\x30\x29\x88\xd8\xc6\x87\x97\x90\xd5\xc8\x0b\xe3\x3f\x0f\x84\xbd\xf8\xa3\x35\xc8\x13\xab\xfc\xb1\x12\x71\x8e\x15\xdf\x77\x07\x2d\x42\x3f\xb3\x12\x25\xea\xf7\x6d\x30\x6d\x74\x84\x22\x2b\x7b\x5c\xc3\xba\x50\xff\x1e\x32\xb0\xd7\x20\x58\xfd\x84\xce\xe5\x7a\x5e\xdd\xee\x49\xfe\x02\x9d\x47\xf2\x95\xc4\x87\x40\xcc\xd9\x0b\xb1\x2e\x6a\xd4\xfc\x10\x7d\xf2\xfc\xb7\x60\xf4\xef\xf7\xe8\xe5\x06\x84\x40\x47\xc8\x50\xbe\x41\xcd\x28\xe5\xbb\xed\x08\x86\xee\xdf\xa0\x26\xf2\xdd\x11\x0f\x63\x98\x3d\x51\xbb\x9d\x85\x7d\xdd\xa2\xd7\x11\x2d\xb6\x7d\x5a\x01\x97\x41\x8b\xc8\xe3\x70\x19\x6f\x77\x82\x6f\x48\x55\x71\xf9\xae\x34\x0a\xdf\x53\xd7\x5b\xce\x26\x07\x14\x90\xcd\x2c\x92\x2a\x2d\x91\xb6\xe3\x3b\x5a\xaa\x24\x34\x41\x2c\xbc\x89\x85\xb7\x3b\x5c\xd0\x36\xe3\x52\x69\x37\x90\x35\xb0\x7c\xea\x36\xa8\x6e\x10\x3e\xea\xba\x68\x55\x3a\x3f\x1c\x2e\x91\x13\xe6\x53\x4f\x44\x0e\x98\x48\xe0\x73\x5c\x24\xad\x2e\xda\x7a\xaa\xbe\xc8\x09\x7d\x68\xa4\xba\xfe\xfb\xe9\xc2\xa9\xfe\x0a\x7f\x8a\xa0\x27\x20\x3d\xb3\x09\xa7\xcc\x89\xdb\xc9\x69\x2a\x98\xd4\xc6\xc2\x49\xe6\x61\x4d\xc2\xb8\xfc\xc2\x2b\x95\xc0\x0c\xa5\x5a\x62\x11\x0e\xac\x71\xfc\x60\x0e\x0f\xa5\xa1\x70\xde\x3e\xea\x91\xb4\x79\xd7\xaa\xdb\xc4\x0d\x7b\x44\x41\x42\xd6\x0d\xa8\x26\x6a\x40\xe9\x49\xd3\x83\xba\x99\x68\x52\xb9\x5e\xde\xa2\x3a\x98\x10\xac\xe5\x25\x84\x8d\xd1\xdf\x64\xe7\xf4\x9c\x96\xd3\xad\x2f\xa1\x49\x5b\x24\x93\x99\xe1\x87\x4a\x33\x5c\x34\x14\x37\xc7\xdb\x47\x81\xe9\x91\x80\x46\xc9\x5c\x57\x67\x94\x9a\x6c\x47\x71\xf6\xb2\x64\xc6\x8a\xcc\xd9\x98\x7e\xc4\xdf\x93\xd9\xc6\xf7\x26\x61\xda\x50\x83\xf4\xb5\xed\x73\xbb\x01\xdc\x33\x92\xce\xcd\x49\xdf\xa1\x03\xe6\x42\x52\x0d\x93\x49\x19\x82\x92\x22\x3e\x62\x71\x55\x11\xb8\x8d\xa4\x3c\x86\xdf\xbf\x16\xb3\xfe\x08\x44\x5a\x69\xb8\xc5\xa4\x8c\xe4\x00\x89\xd0\x62\x99\x5b\x3e\xe7\xf3\x88\x62\xb3\x6f\x9f\x31\x8d\x71\x5c\xb2\xba\x41\xb4\x8b\x96\xf3\xb2\x1f\x96\xb1\x40\x20\xd3\x30\x21\x87\xfc\x38\xe9\xb5\x2e\x73\x67\xed\x70\x38\x62\x27\xd3\xa6\xfd\x51\x30\xe2\x0b\x3e\xf7\x32\x91\x21\xef\xc4\x80\x40\x73\x62\x74\x0e\x1d\x50\xeb\x0f\x02\x93\x3e\x27\x81\xda\x7f\x6d\xb2\x9d\x80\xe5\x8f\x56\x5a\x5c\x51\x28\x89\x30\x09\x25\xef\xfc\x59\x9b\x61\xb1\x90\x98\x1e\x37\xad\x90\xac\x06\x9e\xf8\x42\x75\x95\x10\x49\xbb\x9b\x92\x0c\xb2\xfa\x4c\x98\x83\x67\xb6\xce\x43\x12\xbe\x1c\x2e\x31\x97\xa7\x20\x6b\x23\x21\x1a\xc6\xfb\xfe\x00\xef\xd2\x93\xb7\x6d\xfd\x14\xf2\x72\x8a\x7a\x1c\x6b\x18\xce\x6e\xbc\x9f\x66\x8d\x43\x3a\xd5\x94\x3a\xb6\x0b\x29\x39\x7e\x6a\x25\x38\xcc\x97\x83\x00\xfe\x0c\x95\x7e\x4f\x17\xbb\x53\x43\x5b\x76\xb2\x08\x99\x62\x8d\x39\xbd\xa0\xe4\x92\x63\xeb\x39\xb9\xe6\x1c\xc3\xb1\x7d\xca\x49\x67\x07\x8a\x92\xcc\xfc\xb6\x3b\x3c\xd9\x1c\xbf\x1f\x25\xe6\xcb\xb7\xc7\xef\x88\xe0\x4a\x9f\xe3\x3d\x88\x96\x58\xce\x75\x42\x42\xc9\x31\x7a\xc5\x39\x1b\xd3\x59\x40\xde\x07\x01\x53\xd7\xfc\x02\x01\x7a\x3e\x60\x4d\x95\x94\x61\xe1\x5c\xd6\xa0\xf7\xa5\xd8\xca\xe8\x87\x36\xd8\x17\x27\x1f\x12\x0e\x27\x84\x8b\xdf\xcf\x34\x96\x6c\x1b\x33\x4a\x06\x7a\x16\xa6\x1c\xfd\x30\xd1\x89\x54\x1c\xc7\xa0\x6f\x2c\x6e\x99\xfa\x6d\x2f\x43\x90\x93\xfc\x0f\x8d\x0b\xb9\xe8\xd1\x2f\x8c\xae\x19\xb7\xd0\x3d\x30\x5e\xf7\x79\xa3\xff\x67\x49\x4d\x27\x90\x42\xbf\xbc\x76\x5b\x12\xbd\x9c\x47\x25\xea\x1c\xf7\xd0\xd3\x69\x38\x2b\x41\x08\x87\xcb\x4e\x38\x6c\x3f\x22\x0f\xdf\x03\x1c\xbc\xfc\x8f\x97\x4e\x18\xb0\x9b\x85\x81\x54\x1a\x05\x71\x4f\x55\x6b\x5d\x0f\x02\x03\x43\xa4\xc0\x11\x99\xd3\x71\x20\x38\xe5\x8c\x05\x5e\xa1\x1b\x19\x69\xf4\x9b\xaf\xf8\x9f\xfb\x4a\x64\x1e\x0d\x81\xaf\xef\xb2\x3c\xec\x87\x4f\xc0\x73\xe1\xe7\xa4\xe6\xbf\x38\xdc\x22\x87\xb3\xcc\xed\x1f\xeb\x65\x99\x7f\x4e\xc9\xfc\x3f\xb3\x3c\xcd\xf0\x9c\x4c\x9a\x92\xc9\x60\x79\x67\x98\x36\xad\x1c\xc1\x1d\xe3\x7a\xa7\x05\x72\x80\xfd\x27\xe2\x3a\x03\xd6\x19\xa8\xce\x00\x75\x06\xa6\x33\x20\x9d\x81\xe8\x0c\x40\x67\xe0\x39\x03\xce\x19\x68\xce\x00\x73\x06\x96\x33\xa0\x9c\x81\xe4\x5c\x20\xc3\xab\x04\x5a\x69\xe2\x59\x7c\x6d\xc7\xef\x33\x5e\xda\x5e\x4f\xfc\xcd\x61\x64\xe1\xc6\xa0\x26\x34\x72\x51\x55\x7b\xa6\x34\x56\x51\xb7\x67\xb7\x3d\xff\x38\xf6\x64\x3e\x16\x8b\x7f\xd5\x15\x78\xe0\xad\xb3\x05\x02\x12\xdc\x7e\xf2\xf2\x5f\x89\x2d\xdb\x53\xe4\x6f\xf8\xe3\x2a\xed\xef\x7f\x65\xf4\xd7\x46\x15\x45\xca\xe8\x57\xd9\x65\xd8\x75\xb6\x27\x77\x09\xfd\xd6\xf6\xeb\xf8\x99\x69\x85\xc6\x0c\xb5\x5e\x4c\x5f\xd1\xb7\xdf\x58\x6e\x7a\xe1\x80\xb8\xad\xc2\x0f\xa1\x1f\xc3\x4f\x31\xd1\x6a\x49\xea\x97\x5a\x50\xd5\x37\xdd\x58\x18\x7d\xe1\xb6\xd2\x59\x95\x59\x07\x94\x30\x79\x0f\x35\x7b\x86\xc1\xce\xd1\xfc\x4f\xde\x81\x4f\xda\x1b\x7d\x5c\xb9\x4d\xe4\x45\x7b\x7f\x9c\xfd\x27\x00\x00\xff\xff\xf2\x70\x84\xfb\xfa\x2b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
