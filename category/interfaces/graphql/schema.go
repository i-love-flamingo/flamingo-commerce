// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\xb1\x6e\xeb\x30\x0c\xdc\xfd\x15\xca\x96\x00\xef\x0b\xb4\xe5\x39\x4b\xb7\xb6\xc9\x56\x14\x06\x23\xb1\xb1\x50\x4b\x74\x25\xaa\x68\x50\xe4\xdf\x0b\x3b\x8e\x6b\x39\x42\xd1\xa1\x4b\x34\xde\x89\xe4\xdd\x91\x7c\x6c\x51\x94\x64\x2d\x7a\x85\x55\x09\x8c\x07\xf2\xc7\x6a\xad\xb5\x61\x43\x0e\x9a\x35\xb3\x37\xfb\xc8\x18\xc4\x67\x21\x84\x10\x6c\xb8\x41\x29\xb6\xec\x8d\x3b\x2c\x7a\xc8\x82\x7f\x45\x36\xee\xb0\xbb\xe6\x42\x4d\x9e\x37\x18\x94\x37\x6d\xd7\x31\x65\x15\x39\x46\xc7\xdf\xe0\xa9\x28\x8c\x63\xf4\x2f\xa0\x32\xba\x06\x09\x8a\xf4\x6c\x8a\x03\x3b\x43\x5a\xe0\x3a\x45\x40\xb1\x79\x47\x29\xfe\x13\x35\x08\x6e\xf8\xe6\xc9\x12\xa3\x9e\xc1\x90\xf1\x2f\x7f\x99\x53\x6f\x22\x9f\xeb\x06\x18\x84\xb1\x6d\x83\x16\x1d\x87\x5b\x36\x98\xd9\xd2\xce\x23\xfe\xbd\x81\x10\xf7\x5d\xe3\x20\xc5\x53\x32\xe9\xb9\x67\x6b\x08\x65\x6d\x1a\x1d\x66\x55\x9a\x54\xec\x32\x2e\x29\x76\xe7\x75\xe7\xf8\x87\xb5\xf4\xc2\x73\x6b\xe9\x88\x5b\x34\x54\x6d\x11\xbc\xaa\x1f\x31\xc4\x86\x2f\x2b\x19\x38\x29\xd2\x77\x55\x3c\xde\x8d\x8e\x8a\xa7\x8d\x64\xf2\xfd\xfe\xfc\x21\x19\xd5\x4b\xc2\x0f\x46\xa7\x45\xaf\xec\x21\xe2\x78\xd4\xd9\xd8\x97\xe7\x88\x2e\x50\x39\x8d\x79\x25\xd3\x4d\x2c\xf2\x6d\x96\x2a\x57\xfc\x6f\x34\x7c\x11\xf8\x16\x31\xf0\xa4\xe5\x19\xaf\x06\x62\x95\xbb\xfe\xa9\xb7\xe2\x54\x7c\x05\x00\x00\xff\xff\xb3\xd1\xbc\x7a\x2d\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
