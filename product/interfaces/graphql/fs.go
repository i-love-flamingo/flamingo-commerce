// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xe3\x36\x10\xbe\xfb\x29\x14\xf4\x92\x02\x7d\x02\xdd\x12\xa7\x5b\x04\x5d\x2f\xd2\xb5\xdb\xcb\x22\x08\xc6\xd4\x58\x26\x4c\x91\x02\x39\xca\x46\x28\xf6\xdd\x0b\x91\x94\xcc\x1f\xc9\xf6\xb1\x87\xcd\x29\x99\xef\xe3\xcc\x70\x34\xf3\x0d\xc3\x25\xa1\x3e\x00\xc3\x62\xad\x9a\x06\x35\xc3\xb7\x17\xad\xaa\x8e\x51\xf1\xef\xaa\x28\x8a\x62\x0f\x06\x9f\x80\xa0\x3c\x13\x1e\xc1\x70\xe6\x59\x03\x74\x67\x89\x84\x60\x50\x27\x54\xcf\xda\x4d\x98\xe3\x9a\x16\x19\x3f\x70\x06\xc4\x95\x34\x39\x7f\x1b\xe1\xee\x0c\x37\x5b\x10\x08\x7b\x81\x65\xf1\xa8\x94\x40\x90\xde\x99\x37\xcf\x87\x1e\x0f\xf9\x24\xfb\x16\xcb\x62\x4b\x9a\xcb\xda\x59\x6a\xa4\xe7\x0a\x25\xf1\x03\x47\x1d\x43\x47\x30\x1b\xac\x38\xdc\xd7\x5a\x75\xed\x84\xfd\x56\x74\x06\xea\xb3\x9b\x5f\x93\x7c\x6a\xa4\x1b\x8f\xa5\xb9\xda\x63\x77\xab\x1f\xab\xd5\x90\xe7\x19\xde\xf2\xa6\x15\x38\x7e\x17\xfb\x47\x83\x92\xcc\xcf\x6f\xf6\xff\xfd\x66\x69\xc1\xfd\xa7\x21\x4e\x43\x31\x82\x9f\x30\x7b\x20\xd2\x7c\xdf\x11\x9a\x91\x92\x86\x7b\x98\x18\xae\x8e\x47\xa5\xe9\x09\x0d\xd3\xbc\x1d\xea\x1e\x17\xa3\x0a\x81\x2c\x58\x33\x64\x1e\xa5\xf2\x6d\xfe\x72\xaf\x2b\xc7\x07\x7d\x42\x7a\x11\xc0\x70\xad\xaa\xe4\x93\x68\x24\xe0\x02\xb5\x43\x92\x48\x23\xb8\x3d\x75\x65\x96\xc6\x08\x7e\x81\x26\x3e\x69\x51\xa6\x11\x08\xab\x07\x1a\xa0\x1d\x6f\xd0\x5a\xbb\xb6\x9a\xb1\xbe\x73\xc3\xf7\x02\x3f\x69\xd5\x94\x99\x75\xa7\x26\xae\x35\xaf\x81\xb0\x56\x9a\xbb\x52\x9f\x6f\xee\xed\xbd\x6b\xff\xbb\x57\x4b\xde\x00\x97\x23\x10\xb4\x40\xc2\xf5\x19\x8f\x46\x35\xd4\x62\x03\x6d\xcb\x65\x5d\x16\xdf\xfc\xb5\x7c\x31\x0d\x29\x76\xfa\x8c\xef\x28\xca\xf8\xc2\x27\xec\xbf\x2b\x5d\x99\xf0\x84\x1b\xa5\x2f\xf8\xdd\xd6\x67\x6a\xdc\xac\xe7\xb2\xc9\xf5\x4d\x67\xbb\x64\xe7\x3a\xcf\x39\xbd\xd8\x3c\x81\x34\xbc\x68\xce\xb0\xc8\xbb\xde\xda\x9f\xe5\x41\xa5\xdc\x67\x33\x94\xdf\xfe\x3a\x8d\x98\xe5\xb4\x1a\xb7\x28\x90\x11\x56\xff\x80\xe6\x20\xc9\x76\x43\x10\xd1\xf6\x63\x51\x2e\x77\xe1\x85\x26\x0c\xd2\x78\x78\x07\x2e\x06\xf5\xb0\x49\x98\x39\x87\x53\xf6\xde\xa9\x3b\xf8\x59\xf5\x20\xa8\x9f\xc0\xfc\xd6\x29\x63\xf1\x0b\xa4\xc4\x71\xf8\x33\x25\xab\xf0\x00\x9d\xa0\x28\x14\x67\x38\xaa\xe7\x13\x37\x4c\x75\x92\xb0\x4a\xf4\xaa\x0a\x80\xb9\xa3\x23\xbe\xc3\x0f\x8a\x23\x36\x5c\xbe\x28\x2e\xc9\xec\xd4\xb6\x45\x49\x65\xf1\x49\x28\x20\x0f\xc2\xc7\x32\xc8\x94\x24\xeb\x2e\x0e\xb8\x76\xe6\xd9\x76\x3c\xc3\xbe\x02\xac\x33\xa4\x1a\xd4\x7f\x44\x32\xeb\xa0\x23\x48\x89\x22\x97\x16\xa1\x18\x88\xc0\xb6\x54\xf4\x78\x01\xf9\x80\x56\xcf\xcd\x4c\x0f\x44\x6c\x9b\xce\xdd\xeb\x6d\xae\x2d\x39\x96\xf3\x30\x5d\x94\xe4\x54\xe5\x72\xc8\xdf\x25\xe9\xfe\xd6\x90\x96\xec\x43\x0a\xd8\x87\xa2\x61\x25\x0e\x44\x87\x91\x62\x2c\x7a\xf5\x9b\xd5\xfb\xba\xba\x9f\x13\x2d\x1d\xcd\x83\x98\x4e\x46\x60\xc4\xdf\xd1\x8f\xfc\x65\xa1\x80\x78\x36\x6f\x18\x4d\x11\x4c\xd2\x1c\x3f\x9d\xb4\x0b\x77\xb7\x32\x12\x4d\x62\xbe\x12\x79\x83\x3b\x07\x85\x66\xff\x08\x48\xd9\xc1\x2e\x8f\x17\xda\x01\x35\x4a\x76\x43\xcb\x9e\xb7\xb9\xcf\x6b\x7a\x00\xfc\x89\x7d\xb6\x02\xc2\xd7\x41\x56\x88\xc9\x95\x27\x1f\xc1\x4c\xa6\xfb\x13\xf6\x33\x4f\x9f\xf1\xe5\xb3\xc8\x5b\x8c\x71\xfd\x42\xe3\xbc\xe7\xd3\x9c\xb7\x6f\x27\x39\xc5\x63\x9f\xb9\x8f\x37\xed\xa2\xf3\x16\xe8\x18\x5b\xa4\x7d\x55\xc4\x1c\x6d\x95\x6d\xc1\xf7\xe2\xd5\x52\x31\x5f\x90\xee\x2b\xf2\x7c\x45\x9d\xdd\x2c\x3d\x82\xc1\x48\x7a\xcf\xe6\x87\x66\x38\xb8\x00\xfe\x2d\x39\x45\x1b\x71\x76\x83\xf8\x57\x4a\xd3\x02\xaf\xe5\xd7\x4e\x60\xd6\x68\x15\xca\x7e\xa3\x34\x8e\x87\x4d\x7c\xf6\x97\xeb\xdb\xc0\xcd\x07\x7c\xac\x05\x18\x13\xbc\x70\x96\x8a\xfb\xb6\x45\xd0\xec\xf8\x15\x4d\x27\xc6\x5d\xd1\x3a\x68\xae\xd9\x7d\x9e\xc6\x1e\xda\x60\xf4\x3f\x84\xf3\xf4\x36\x58\x87\x70\xf8\x41\x28\x2b\x3b\xf0\xc5\x5f\x1d\x4e\x32\x9a\xba\xbc\x77\x2f\x8b\x36\x7b\xde\xce\xcc\xc1\xea\xc7\xea\xbf\x00\x00\x00\xff\xff\x9f\x57\xf0\xa1\x38\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
