interface Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    badges: Commerce_Product_Badges!
}

"""
A simple product, that has no variable attributes and therefore no relation to other products
"""
type Commerce_Product_SimpleProduct implements Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    badges: Commerce_Product_Badges!
}

"""
A configurable product defines the possible variations of a product. It only contains
information about product variants but has no active variant itself.
"""
type Commerce_Product_ConfigurableProduct implements Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    """
    Contains all possible combinations of variation attributes that point to a variant,
    as well as all possible variations to render in the frontend.
    """
    variantSelection: Commerce_Product_VariantSelection!
    badges: Commerce_Product_Badges!
}

type Commerce_Product_VariantSelection {
    variants: [Commerce_Product_VariantSelection_Match!]!
    attributes: [Commerce_Product_VariantSelection_Attribute!]!
}

type Commerce_Product_VariantSelection_Attribute {
    label: String!
    code: String!
    options: [Commerce_Product_VariantSelection_Attribute_Option!]!
}

type Commerce_Product_VariantSelection_Attribute_Option {
    label: String!
    unitCode: String
    otherAttributesRestrictions: [Commerce_Product_VariantSelection_Option_OtherAttributesRestriction!]!
}

type Commerce_Product_VariantSelection_Option_OtherAttributesRestriction {
    code: String!
    availableOptions: [String!]!
}

type Commerce_Product_VariantSelection_Match {
    attributes: [Commerce_Product_VariantSelection_Match_Attributes!]
    variant: Commerce_Product_VariantSelection_Match_Variant!
}

type Commerce_Product_VariantSelection_Match_Attributes {
    key: String!
    value: String!
}

type Commerce_Product_VariantSelection_Match_Variant {
    marketplaceCode: String!
}

"""
An active variant is one of many concrete variants that a configurable provides. All data relates to one active variant
and not the the configurable. It also contains information about itÂ´s siblings (other variants on the same configurable)
"""
type Commerce_Product_ActiveVariantProduct implements Commerce_Product {
    type: String!
    "The marketPlaceCode of the 'configurable' product. See also 'variantMarketPlaceCode' for the variant marketPlaceCode"
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    "The marketPlaceCode of the actual variant"
    variantMarketPlaceCode: String!
    "Contains information about other available product variations"
    variationSelections: [Commerce_Product_VariationSelection!]
    "Convenience property to access the active variant labels easily"
    activeVariationSelections: [Commerce_Product_ActiveVariationSelection!]
    badges: Commerce_Product_Badges!
}

"""
A bundle product, that consists of basic products.
"""
type Commerce_Product_BundleProduct implements Commerce_Product {
    type: String!
    marketPlaceCode: String!
    identifier: String!
    media: Commerce_Product_Media!,
    price: Commerce_Product_PriceInfo!,
    availablePrices: [Commerce_Product_PriceInfo!],
    title: String!
    categories: Commerce_Product_Categories!
    description: String!
    shortDescription: String!
    meta: Commerce_Product_Meta!
    loyalty: Commerce_Product_Loyalty!
    attributes: Commerce_Product_Attributes!
    badges: Commerce_Product_Badges!
    choices: [Commerce_Product_Choice!]
}


"A group of attributes. E.g. 'size'"
type Commerce_Product_VariationSelection {
    code: String!
    label: String!
    "All possible variations for that attribute. E.g. 'M', 'L', 'XL'"
    options: [Commerce_Product_VariationSelection_Option]
}

"Easy-to-access property to display attribute information about an active variant"
type Commerce_Product_ActiveVariationSelection {
    code: String!
    label: String!
    value: String!
    unitCode: String!
}

"An option for a group of attributes"
type Commerce_Product_VariationSelection_Option {
    label: String!
    unitCode: String!
    state: Commerce_Product_VariationSelection_OptionState!
    """
    Contains information about a product that matches this option.
    Depending on if there is an active variant or not, it tries to include the variant,
    that best matches the current option.
    """
    variant: Commerce_Product_VariationSelection_OptionVariant!,
}

"Information about the underlying variant"
type Commerce_Product_VariationSelection_OptionVariant {
    marketPlaceCode: String!
}

"The state of an option related to the currently active variant"
enum Commerce_Product_VariationSelection_OptionState {
    "The currently active variant has this exact attribute + all other active variant attributes"
    ACTIVE
    "A variant (other than the active variant) exists, that matches this exact attribute + all other active variant attributes"
    MATCH
    "No variant exists, that matches this exact attribute + all other active variant attributes."
    NO_MATCH
}

"Wrapper that includes main category and all categories"
type Commerce_Product_Categories {
    main: Commerce_Product_CategoryTeaser!
    all:   [Commerce_Product_CategoryTeaser!]
}

"Meta information about the product"
type Commerce_Product_Meta {
    keywords:        [String!]
}

"Loyalty information about this product"
type Commerce_Product_Loyalty {
    price:      Commerce_Product_Loyalty_PriceInfo
    earning:    Commerce_Product_Loyalty_EarningInfo
}

type Commerce_Product_Loyalty_PriceInfo {
    type: String!
    default: Commerce_Price!
    isDiscounted: Boolean!
    discounted: Commerce_Price!
    discountText: String!
    minPointsToSpent: Float!
    maxPointsToSpent: Float!
    context: Commerce_Product_PriceContext!
}

"Shows the type and the points earned"
type Commerce_Product_Loyalty_EarningInfo {
    "The type of the LoyaltyEarningInfo, e.g. MilesAndMore"
    type: String!
    "The value of the LoyaltyEarningInfo, currency can be e.g. points or miles"
    default: Commerce_Price!
}

type Commerce_Product_PriceContext {
    customerGroup: String!
    deliveryCode: String!
    channelCode: String!
    locale: String!
}

type Commerce_Product_Media {
    all: [Commerce_Product_MediaItem!]
    getMedia(usage: String!): Commerce_Product_MediaItem!
}

type Commerce_Product_MediaItem {
    type:      String!
    mimeType:  String!
    usage:     String!
    title:     String!
    reference: String!
}

type Commerce_Product_Attributes {
    attributeKeys: [String!]
    attributes: [Commerce_Product_Attribute!]
    hasAttribute(key: String!): Boolean
    getAttribute(key: String!): Commerce_Product_Attribute
    getAttributesByKey(keys: [String!]): [Commerce_Product_Attribute!]
}

type Commerce_Product_Attribute {
    "Code of the attribute e.g. `productWeight`"
    code: String!
    "Human-readable code e.g. `The Product Weight`"
    codeLabel: String!
    "Human-readable label of a single value"
    label: String!
    "Value of the selected attribute"
    value: String!
    "Unit of the attribute e.g. `kg`"
    unitCode: String!
    "Values of a multi value attribute"
    values: [String!]
    "Human-readable labels of a multi value attribute"
    labels: [String!]
}

type Commerce_Product_CategoryTeaser {
    code: String!
    path: String!
    name: String!
    parent: Commerce_Product_CategoryTeaser
}

type Commerce_Product_PriceInfo {
    default: Commerce_Price!
    discounted: Commerce_Price!
    discountText: String!
    activeBase: Commerce_Price!
    activeBaseAmount: Float!
    activeBaseUnit: String!
    isDiscounted: Boolean!
    campaignRules: [String!]
    denyMoreDiscounts: Boolean!
    context: Commerce_Product_PriceContext!
    taxClass: String!
}


type Commerce_Product_SearchResult {
    products: [Commerce_Product!]
    facets: [Commerce_Search_Facet!]!
    suggestions: [Commerce_Search_Suggestion!]
    searchMeta: Commerce_Search_Meta!
    hasSelectedFacet: Boolean!
    promotion: Commerce_Search_Promotion
    actions: [Commerce_Search_Action!]
}

type Commerce_Product_Badges {
    all: [Commerce_Product_Badge!]
    first: Commerce_Product_Badge
}

type Commerce_Product_Badge {
    code:  String!
    label: String!
}

type Commerce_Product_Choice {
    identifier: String!
    required: Boolean!
    label: String!
    options: [Commerce_Product_Option!]
    active: Commerce_Product @deprecated(reason: "use activeOption instead")
    activeOption: Commerce_Product_Option
}

type Commerce_Product_Option {
    product: Commerce_Product!
    qty: Int!
}

input Commerce_Product_ChoiceConfigurationInput {
    identifier: String!
    marketplaceCode: String!
    variantMarketplaceCode: String
    qty: Int!
}

extend type Query {
    Commerce_Product(marketPlaceCode: String!, variantMarketPlaceCode: String, bundleConfiguration: [Commerce_Product_ChoiceConfigurationInput!]): Commerce_Product
    Commerce_Product_Search(searchRequest: Commerce_Search_Request!): Commerce_Product_SearchResult!
}
