// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4f\x6f\xdc\xba\x11\xbf\xfb\x53\xc8\xdb\xcb\xbe\x20\x6d\xd0\x1e\x7d\x5b\xef\x26\xc1\x22\xb1\x93\xd8\x9b\xf4\x10\x18\x01\x2d\xcd\xee\x12\xa1\x44\x99\xa4\x6c\x0b\x45\xbe\x7b\xc1\x7f\x12\x49\x91\x92\x36\x69\x1f\xf0\xda\x97\x43\x6c\x89\xc3\xe1\x90\xf3\xe3\xf0\x37\x43\x59\xb4\x35\x64\x6b\x5a\x96\xc0\x72\xf8\xb6\x46\x4c\x7c\xdb\x40\x4e\x19\x12\x50\xc8\xa7\xec\x5f\x67\x59\x96\x65\x39\x62\xe2\x22\x90\x93\xff\x9d\xab\xd6\xc2\xf6\xd8\x00\xc1\x8f\xc0\x30\xf0\x8b\xec\x6b\x42\xab\x91\x69\xcf\xef\x54\xdf\x03\x88\x41\xd3\x65\xbb\xa6\x05\x2c\x0b\xf3\x28\x1f\x2e\xb2\x5b\xc1\x70\x75\x38\xff\x2d\x34\x63\xd0\xdb\xaa\x5d\x11\xf2\x11\xb5\x25\x54\xe2\x06\x1e\x1a\xcc\xa0\xd8\x0a\x28\x79\xd8\xff\x23\xc3\xb9\x69\x3a\xef\xe6\x7a\xdb\x94\x25\x62\x6d\x28\x6b\x5e\x9f\x9f\xfd\x38\x3b\x8b\xac\x9c\x69\x36\x6b\x56\x60\x9e\xd3\xa6\x12\x83\x11\x57\x75\x4d\x30\x14\x1b\xdb\xae\x87\xe5\x4d\x19\x36\x38\x1d\x95\x95\x81\xdc\x5b\xbc\x17\x6b\xc4\x8a\xa4\xdc\x5b\x86\xaa\x62\x47\x05\x22\xff\xc4\xe2\x38\x29\xae\x24\xed\xe0\x5e\x8f\x55\x29\x5f\x45\xfb\x1d\x11\x1f\x9a\x7d\x49\x29\x01\x54\x75\x13\xdb\xa1\x67\x18\x2c\x83\x7a\x69\x25\x8c\xa7\x6e\x81\x40\x2e\x30\xad\xa4\xc4\x6d\x4d\xb0\xf8\x82\x48\x03\x7a\xfc\xcb\xf6\x0a\xc4\x91\x16\x7c\x59\xea\x9f\x17\xd9\x57\x83\x8a\xbb\xdf\x06\xc6\xc5\x5d\xe4\x60\x1a\x17\x17\xd9\x76\xa3\x6d\x84\x4a\x60\xd1\x6e\x37\x1d\xcc\xd4\xdb\x7b\x4c\x08\xae\x0e\xab\xa2\x60\xc0\x87\x6e\xd4\xaf\x95\x64\xdd\xb0\xfc\x88\x38\xb0\x01\xba\x80\x71\x5a\x99\x5d\x32\xb2\x39\xbc\x3d\x81\x8a\x02\xcb\x45\x40\x64\x83\x04\x8a\x8c\xeb\xb4\x6a\x4b\xeb\x60\xf9\x06\x66\x04\xed\x7a\x7a\x40\x68\x75\xe0\x3b\xba\x6a\xc4\x51\xae\x40\x2e\xb7\xd1\x67\x35\x0b\xcf\x83\x28\x6c\x0f\x17\x0a\x69\x04\xac\x69\x53\xd3\x4a\x6e\xd7\xe1\x14\xfb\x36\x33\xc9\x02\xf6\xa8\x21\x62\xdd\x30\x06\x55\xde\xfa\x0a\x85\x84\x22\xd6\xdb\x35\x50\xb4\xb3\x4d\x46\x8f\xfc\x75\xad\xe1\xb9\xad\x4c\x40\xaa\x19\x2d\x9a\x5c\x84\xaf\x31\xf7\xd6\x01\x8a\x60\x9e\x87\x6e\xbf\x84\x68\x3a\xf7\xf6\xc8\x0e\x3d\xc7\x77\x84\x15\xbb\x57\x62\xd7\x90\x10\x40\x83\xfd\xfb\x35\x1a\x21\xac\x80\x1b\x2a\x7f\x2a\x42\xfa\x81\x71\xe3\xf4\x72\xf7\xd0\x99\x15\xb8\x42\xb8\xba\x3d\xe2\xba\xc6\xd5\xe1\xf5\x15\xc2\xc4\x77\x0e\xe6\xaf\xcb\x5a\xb4\xc1\xe2\x1d\x11\xb7\x8a\xdf\x50\x36\x6a\x5e\xd7\x6f\x38\x2d\x19\x87\xb7\x9b\x25\x56\x3f\xa6\xa7\x74\x6e\x35\xcc\xee\x29\xc5\xba\x5e\xca\x4d\x9f\x44\xbb\x2c\x11\xfb\x0e\xe2\x23\x41\x39\x78\xc6\xbe\xcc\x1e\x11\xc3\xa8\x12\xe1\x14\xb6\x95\xe8\x87\x7e\xfd\x2c\x80\x55\x88\xdc\xc0\x1e\x24\x98\x61\xc9\x60\x3f\x65\x82\xed\xfe\x85\x36\xf9\x11\xd8\x2d\x7a\xc4\xd5\x61\x10\x9b\x3b\x53\x65\xcf\x1d\xc4\x42\x8c\x7e\x6b\x14\xf2\xa6\xb4\x9e\x4b\xc2\xcf\x97\x91\x81\x3e\x79\xe2\x0c\x3a\xbc\x65\x94\xf3\x89\x2e\x16\x0e\xb6\xcf\x9a\xf2\xc1\xa1\x80\x08\xb1\xcd\x3b\x2c\x48\x04\x87\x76\x17\xa9\x11\xc7\x37\xda\x1c\xa3\x82\x8d\x39\x6f\xd6\xde\x89\x38\xbe\xe5\xcb\x6b\x5a\x49\xc7\xde\x00\x51\x64\x64\x5e\xa7\x13\x7b\xf4\x87\x6d\x1f\x4e\x23\xdb\xa9\xa3\x3d\x06\x8e\xfe\xf6\xb5\xb8\x57\x94\xe7\xb2\xdd\xb5\x35\x2c\xe5\x49\x19\x42\x7c\x22\xee\xf6\xc1\x72\x7d\x44\xec\x00\x83\x55\xfc\x66\xde\xf7\x80\x18\xf2\x96\x30\x82\xdc\x40\x89\x70\x25\x71\x16\x91\x89\x9f\xe8\x0e\x7f\x73\xc8\xaa\xa1\x7a\xe1\x24\xb4\xf0\xda\x08\x98\x99\x70\x03\xc4\xd1\x3e\xb7\x8e\x90\xe9\x27\xba\x55\x1c\x2c\x96\xee\xd3\x2d\xf3\xf9\xdd\xa8\xf1\xd6\x1e\x63\x3f\x1a\x41\x40\x10\xde\x46\xd5\xba\x26\xcf\x50\x6d\xa3\xf5\xb6\xda\x53\x0f\x0b\xa3\x83\x74\x73\x9c\x31\x42\x3e\x43\xeb\x0e\x3d\xcf\xd0\x24\x3b\xfa\xa8\x96\x29\xc0\x45\xf6\x86\x50\x24\xd2\x9a\xc1\x42\x24\x41\x2d\xd0\xf3\x9d\x73\xa2\xe8\x9d\x81\x9e\x77\xce\x60\x83\x60\xbe\x43\xcf\xc9\xa9\xa8\xc0\x6c\x46\xf4\x29\x49\x77\x7e\x6c\x7b\xf6\xa2\x1e\xcd\xeb\xf8\x11\xad\x50\x84\x2b\x01\x6c\x8f\xf2\x81\x3b\x02\x8a\x67\xc6\x3d\x20\x01\x4f\x28\x46\xaf\x14\xb3\x4e\x38\xca\xb2\xef\x21\xb0\x83\x51\xbe\x29\xb1\x34\xbe\xa3\xe2\xc6\xb4\x87\x06\x11\xbc\xc7\x11\xd2\x1c\xed\xf5\xc9\x8a\x1b\x1b\x55\x74\x49\x04\x9d\x24\x66\xc7\x35\x1b\xc3\x86\xe8\xd2\x09\x47\x80\xb8\x61\x78\x8d\x0f\xba\xd1\x4c\x77\xe0\x20\x5c\xd6\x04\xe4\x2b\xfe\x47\x70\xe5\x20\xcf\xb6\x69\xae\x79\x1c\xa7\x68\x5d\x89\x20\x1e\x2f\x37\x6e\xf3\x88\x09\xd1\x91\x65\xc0\x4a\x8d\x2e\xdb\xba\x75\x88\xef\xfa\xc4\x49\x30\xc8\xfd\x9d\xb6\x69\x82\x32\x91\x4f\xcc\x4b\x27\xa6\xb2\x89\x13\x68\xca\xcf\xb0\x94\x93\x49\xca\x89\xa4\xec\x27\x38\xd9\x11\x71\x03\xa0\x09\x56\xe0\xfa\xdf\xd2\x02\xef\xf4\x91\x6f\x9e\x28\xfb\xbe\x27\xf4\x69\x7a\xaf\xe7\x88\x31\x15\xa8\xdc\x97\x16\x7f\xef\x69\x8e\x62\x49\xf7\x26\x68\x37\x9d\x38\x66\x50\xec\x70\x09\x17\x99\xfc\x7f\x46\xc6\xbf\x6e\xb8\xa0\xe5\x4a\x08\x86\xef\x1b\x21\x19\xd5\xf8\xa4\xed\x80\x59\x32\x9e\xa1\xe9\x92\x46\xc3\xe1\x32\xa8\x7f\x78\x6c\x6d\xce\x61\x1e\x61\x20\x42\xb2\x7d\xdf\x98\x5a\xfa\x37\x05\x6f\x31\xba\x39\x50\xba\x62\x36\x52\x6a\x13\xb6\x24\x66\xdf\x6f\xab\x5c\xee\xc2\x04\xd7\xf0\x1a\xa6\x0e\xfd\x70\xc4\x51\xc2\x11\x08\x9b\x28\x74\xdf\xae\x51\x59\x23\x7c\x50\xfc\x7e\x99\x3b\x0f\x0e\x0d\x99\x35\xd3\x7b\x4d\x62\xf6\x98\x08\x60\xa3\x3c\x66\xd8\x7f\xd6\xfc\x3a\xca\xed\xda\xe8\x6f\x1d\x27\x53\xc9\xfc\x26\x82\xee\x81\x68\xe2\x13\x36\x19\xc7\xda\xc6\x34\x07\x8c\xf6\xc6\xdc\x89\x59\x61\x39\x92\x32\xf1\x81\x15\x72\x33\x1b\xc6\x95\xde\x4e\xce\xa1\xe4\xf8\x31\x96\xcf\xbb\x1c\xcf\x83\x91\x7a\x93\x18\xc0\xd5\xeb\x16\x23\xc3\x72\x42\x10\x9f\x54\xad\xa2\x1e\xd4\x2a\x54\xa3\x29\x57\x5c\x25\xea\x19\xae\x99\xd7\xa8\x0c\x1a\x38\x6d\x58\x0e\x61\x71\xef\x41\xb4\x4e\x0d\xcd\x8f\x54\xef\xa0\xf5\x32\xf7\xa1\x84\xa2\x26\x03\x99\x03\x08\xbf\x8c\xb9\xfc\x0e\xad\x9b\x7c\xea\xdf\xba\xc4\x31\x1c\x34\x14\x37\x1e\xd6\xb3\xc0\xd5\x81\x80\x02\xca\x58\xed\xa0\x97\x4a\x16\x4a\x18\x7d\x9a\x52\x63\x45\xa6\x6a\x7d\x27\x46\xa8\xbf\x18\xdd\x61\xe1\x5c\x3d\x27\xb7\xa6\x8e\xd3\x06\x51\x8f\x48\x38\xbb\x23\xbe\x4f\xf6\x98\x71\x51\x29\x1c\x24\x65\x08\x8a\x8a\xf8\x90\xc4\x45\x41\xe0\x7a\x20\xe5\x11\x55\x1d\xf8\x47\xed\xe1\x88\x34\xc2\x9c\xa5\x49\x19\xc1\x00\x22\x53\x1b\xca\x5c\xb3\x31\x9b\x7b\x98\x9a\x75\x7b\x8f\xab\x21\x50\x73\x5a\xd6\xa8\x6a\x07\xc3\x79\x11\x0e\x8b\xa1\x40\x20\x53\x53\x2e\xba\x18\x98\xb4\x5a\xe5\xb0\xa3\x7a\x18\x1c\xb0\x13\x4d\xe3\xf6\x48\x20\xb1\x09\x9b\xb5\xcc\x40\x91\xe7\x31\x20\x50\x1f\x69\x35\x86\x0e\x28\x55\x79\x38\x69\x73\x22\x0d\x53\xb7\x22\x36\xcf\x9f\x71\xbd\xa2\xe4\x11\xd9\x80\x40\x98\x0c\xaf\xf0\xfc\x66\x1b\x45\x31\x17\xb8\x3a\x68\xf2\x04\x2c\x46\xac\x5e\x47\x64\x12\x26\xc7\x44\x83\xd8\x3d\x36\xd7\xce\x38\x9b\xbb\x20\x01\x1f\xf6\x97\x98\x89\x63\x10\x9c\x11\xe7\x35\x65\xba\x50\xc0\xda\x78\xe3\x75\x53\xde\x87\x6c\xb4\x42\x1a\xcd\x0a\x8c\xe3\xcb\xef\x87\x53\x7b\x84\x07\x24\x73\x9a\x84\x6a\x3c\x72\x60\x8f\x50\xa8\x13\x75\xba\x30\x15\x2a\x31\x63\x2f\xde\x82\xc8\x78\x0d\x39\xde\xe3\x3c\x43\xb6\x39\xbb\x6f\xb3\xef\xd0\x2e\xec\x91\x11\x46\x7d\x5f\xf7\x3b\x68\xd5\x61\x93\x18\xda\x36\x9b\x21\x5d\x55\x26\x5e\xaa\x1c\x7a\xa2\x3a\x65\x8b\xa0\xc9\x9c\x22\xc5\x6f\xe7\xd4\xb1\x12\x6b\xd6\x11\xa8\xe8\xa0\xa3\x34\xcd\x96\x51\x93\xe6\x76\x3c\x2b\x7a\xb8\xd9\x6a\x6c\x32\x19\xbb\xe9\x25\x26\x12\xb2\x2f\x88\xe0\x42\x41\xf4\x06\x78\x43\x2c\x71\x3c\x22\x2e\xe5\x68\xf5\x9a\x31\xda\xc7\xeb\x20\xd3\xe8\x04\xae\x80\x73\x74\x80\x77\xa1\xf3\xb0\xa2\x7b\x52\x2f\x77\x83\x51\x24\xd3\xef\xed\x50\x0a\x93\xb5\x86\x88\xac\x43\x01\x25\xd2\xe3\xf1\x30\x65\xe5\x8f\xb3\xe8\x30\x9f\x44\x7b\x03\x5c\x30\x9c\x0f\x96\x06\x73\xdb\xd2\xf3\x60\x7f\x61\x4a\xf4\xbc\x22\x84\x3e\x39\xed\x59\xcf\xd4\x3a\xef\x6d\xf0\xbe\x23\x92\x4e\xab\xd6\x4d\x99\x73\x6c\x4f\x44\x6d\x49\x27\xcd\x4e\xef\xd3\x6a\x2a\x9f\x6d\x40\x0a\x56\xc3\xbf\x00\x9c\xd2\xef\xa7\x9b\x6f\x28\xb3\xbb\x6c\x61\x5a\xec\x51\x91\xed\x65\x5b\x81\x04\xd2\xa1\x41\x3e\xea\xf0\xae\xff\x45\x0f\x12\xa9\x4f\x6b\xeb\xdd\x9a\xd1\x7d\xc6\x1b\xbd\x05\xec\x6d\xbf\x1d\xe4\x65\x06\x65\x2d\xda\x0c\xef\xbb\x61\x31\x97\x51\x02\x17\x0b\x1b\x30\x8c\x9a\x58\x01\x4a\x0e\xe7\x80\xbe\xab\x43\x2d\x6e\x8f\xf4\x89\x4b\xad\xe2\x08\x19\x83\x87\x06\xb8\xc8\x9e\x10\xcf\x78\x93\xe7\xc0\xf9\xbe\x21\xa4\x95\x1c\x5d\x3e\x80\x19\xab\x7b\xec\xa9\x6e\x22\xe3\x36\x37\xdb\xdd\x15\x90\x03\xa8\x9f\x33\x78\xf6\xd0\x11\x05\xd6\x7f\x6f\x30\x90\xa2\x0f\xf0\xbd\x21\x7a\xbf\x70\xe3\x46\x29\xa5\x76\xda\x30\x53\x56\xca\xdf\x74\x02\x86\x9d\x2d\xde\x42\x05\x0c\x91\x94\xc6\x83\x6e\x1e\xd3\x39\x1e\x05\x7a\x11\x3b\x95\x95\x3c\x39\x24\x6e\xa4\xfb\xd4\x58\x59\xa9\xb7\xfb\xdf\xb2\x0f\x7b\x01\x55\xd6\x70\x28\x24\x24\x33\xc1\x50\xc5\x89\xb2\x6a\x61\x2a\x4b\xf1\xe8\xb5\x58\xc9\xb5\x41\xdf\x25\xfa\xb4\x4a\x95\x19\x7b\x0a\x05\xcd\xf8\x91\x3e\xc9\x9f\x50\x15\xf2\x1d\xcb\xfe\x9a\xe1\x2a\xcb\x11\x87\xac\xa2\xee\x68\x9a\xfb\x98\x35\x30\xdf\x59\xbc\xd7\xb9\xf6\xf8\x0e\x0c\x56\xf9\x7f\x6c\xce\x6a\xd8\x6d\x01\x95\xd0\xc5\x7e\x69\x2f\xd2\xb1\x44\x41\xcf\x41\xa1\x9f\x1b\x8f\xa6\x5b\x4e\x9c\xfa\x33\xe5\x9a\x4c\xb9\x6c\xa2\xf5\xf7\x8b\x69\x99\x7f\xa4\x64\xfe\x9f\x93\x32\x95\x90\x39\xc7\x6d\x4c\x66\x46\x52\x86\xab\xba\x11\x69\x40\x6f\x55\xf3\x1c\x54\xff\x8e\xa0\x9e\x81\xe9\x19\x90\x9e\x81\xe8\x19\x80\x9e\x81\xe7\x19\x70\x9e\x81\xe6\x19\x60\x9e\x81\xe5\x19\x50\x9e\x81\xe4\x19\x40\x9e\x81\xe3\x19\x30\xfe\x15\x14\xdb\x4b\x10\x83\x66\x17\xc9\x8b\xcf\x15\x7e\x68\xa0\xa3\xa5\x2a\x1f\x92\xa7\x0b\xd6\x87\x42\xab\x0e\x38\xdb\xba\x88\x50\x58\xef\x28\xe9\xae\x23\x13\xb4\xb4\xf0\x2d\x49\x14\x38\xba\xed\xd6\xd1\xc3\x86\x14\xda\x10\x99\x9c\x9b\x53\x37\x20\xa7\xd9\x3d\x38\x67\xee\x11\xf3\xc0\xea\xa9\xcb\x9b\xc5\x87\x5a\x17\x00\x32\x7b\x45\x93\xe9\x6f\x6b\xed\xa1\xed\x5e\x81\xcd\xe9\x11\x5c\x90\x05\x5d\xcc\xa5\x57\xbf\xf0\x05\x12\x90\xbd\xca\x04\x2e\xc1\xae\x55\x78\x2d\x36\x7e\xc5\x15\x49\x12\x7e\x5f\xe7\x9e\x98\x73\x78\xac\x7f\xcc\xb1\x5c\xfb\xff\x57\xfd\x3b\xdb\xad\x9d\xe0\x5a\x7b\xf0\xbf\xe5\xce\xd1\xd4\xab\x08\x16\xfb\x0f\x90\x7b\x8d\x85\x1e\xbb\xa6\x7a\xc1\x4e\x8b\x40\xa8\xca\x5e\xbc\xb0\xb5\xcb\x17\x2f\xe6\x03\x76\x86\xc7\x43\xc9\x31\x97\x27\xe3\xab\xad\xa3\xb9\xd3\x9a\x51\x4c\x9b\x08\xd5\x4e\x3d\xd2\x55\x9c\x9e\x6f\x78\x63\xfe\x75\xc4\xca\xf3\x3b\x65\x02\x3c\x0b\x99\x46\xa8\xa8\xf2\xa9\xe9\xbf\x23\x49\xdc\xfa\xad\x23\x7f\xf3\xe2\x35\x9e\x47\x7a\x1b\xd4\xd1\xc1\x37\x4d\x61\xfd\xcb\xf8\x62\xac\x1a\x94\x31\x10\x0d\xab\x3a\xc0\x9a\x7b\x3b\xb9\x15\x58\x57\x19\x92\xe9\x90\x00\x56\x72\x1b\x50\x90\xae\x08\x65\x0f\x0d\x52\x7f\xd4\x60\x42\x08\x64\xb9\xfa\xd2\x5e\xa8\x2f\x61\x32\x54\xe9\x33\xe6\x80\x1f\xa1\x0a\x40\x36\x66\xd3\x32\x75\xfb\x18\xfd\x52\xfa\x65\xdc\x81\x83\xd2\x6d\xac\x0a\x36\x70\xd9\x95\x21\x75\x51\xaf\xad\x8a\x62\x47\xe5\x6f\x43\x03\xb7\x9b\xf3\x97\xfd\x25\xe6\x5c\x93\x26\x3d\xbd\x01\x02\x02\xe4\xaf\x16\xc6\xa7\xfe\xc1\xd2\xb8\xe6\xad\x80\xb2\xfb\x9a\x5d\xcd\xe1\x3f\xa4\xfe\x73\x2d\xc3\xb5\x54\xff\x49\xb4\x33\x46\x70\x16\x6f\xce\x60\x8b\x55\x51\xf0\x57\x7a\x10\xae\x30\x66\xab\x77\xf6\x7e\xd2\x00\xd5\xc5\x63\x0c\x78\x5a\x85\x7f\xcc\x2d\x51\x7f\xb0\x4e\xf1\xa9\x81\xb1\xc3\xfa\x62\x7a\x79\x82\x3a\xda\x32\xfc\xf6\xee\x65\x18\x5a\x07\xa3\x45\x2b\x71\xb1\x01\x57\x75\x4d\xda\xbe\xc8\xff\x81\xd9\xa2\xfd\x32\x9f\xef\xe8\x88\xde\x1b\x28\xe9\x23\x74\xca\x0e\xe6\x97\x13\xd0\x93\x54\xda\x5b\xbb\x74\x3f\xef\x98\xaf\xd4\x07\x09\xad\xe0\x55\xd9\x10\x81\x6b\x02\xdd\xa7\xaf\x16\x2e\xc0\xd3\xe0\x08\xd8\x20\xf0\x65\xcf\xb9\xf5\x8b\xe4\x9f\x5a\xb9\xe9\x81\xfa\xf3\xb1\x71\x39\x89\x96\xbb\x18\xc0\x7f\xd9\x76\x9f\x2c\xf0\x25\xf7\x9f\x93\x86\x45\x48\xc6\x89\xf3\x58\x4b\x2e\xc3\x27\xf7\xa1\x12\x0b\xf9\xa5\xb7\x06\xfd\x59\xac\xa9\x6d\x77\xe2\x8c\xee\xec\xe0\x03\x90\x13\x0f\xf4\xd3\x43\x51\xca\x4a\xef\x08\xc4\x33\x5c\x86\x21\xf8\x20\x65\x59\xc4\x2c\x1e\x61\x37\x33\xec\xff\x71\xf6\xef\x00\x00\x00\xff\xff\xb6\xb5\x75\xa5\x9b\x3b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
