// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	application "flamingo.me/flamingo-commerce/v3/cart/application"
	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	context "context"

	decorator "flamingo.me/flamingo-commerce/v3/cart/domain/decorator"

	domain "flamingo.me/flamingo-commerce/v3/product/domain"

	mock "github.com/stretchr/testify/mock"

	placeorder "flamingo.me/flamingo-commerce/v3/cart/domain/placeorder"

	validation "flamingo.me/flamingo-commerce/v3/cart/domain/validation"

	web "flamingo.me/flamingo/v3/framework/web"
)

// CartService is an autogenerated mock type for the Service type
type CartService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, session, deliveryCode, addRequest
func (_m *CartService) AddProduct(ctx context.Context, session *web.Session, deliveryCode string, addRequest cart.AddRequest) (domain.BasicProduct, error) {
	ret := _m.Called(ctx, session, deliveryCode, addRequest)

	var r0 domain.BasicProduct
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, cart.AddRequest) domain.BasicProduct); ok {
		r0 = rf(ctx, session, deliveryCode, addRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.BasicProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string, cart.AddRequest) error); ok {
		r1 = rf(ctx, session, deliveryCode, addRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdjustItemsToRestrictedQty provides a mock function with given fields: ctx, session
func (_m *CartService) AdjustItemsToRestrictedQty(ctx context.Context, session *web.Session) (application.QtyAdjustmentResults, error) {
	ret := _m.Called(ctx, session)

	var r0 application.QtyAdjustmentResults
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) application.QtyAdjustmentResults); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(application.QtyAdjustmentResults)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyAny provides a mock function with given fields: ctx, session, anyCode
func (_m *CartService) ApplyAny(ctx context.Context, session *web.Session, anyCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, anyCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, anyCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, anyCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyGiftCard provides a mock function with given fields: ctx, session, couponCode
func (_m *CartService) ApplyGiftCard(ctx context.Context, session *web.Session, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, couponCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyVoucher provides a mock function with given fields: ctx, session, couponCode
func (_m *CartService) ApplyVoucher(ctx context.Context, session *web.Session, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, couponCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildAddRequest provides a mock function with given fields: ctx, marketplaceCode, variantMarketplaceCode, qty, additionalData
func (_m *CartService) BuildAddRequest(ctx context.Context, marketplaceCode string, variantMarketplaceCode string, qty int, additionalData map[string]string) cart.AddRequest {
	ret := _m.Called(ctx, marketplaceCode, variantMarketplaceCode, qty, additionalData)

	var r0 cart.AddRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, map[string]string) cart.AddRequest); ok {
		r0 = rf(ctx, marketplaceCode, variantMarketplaceCode, qty, additionalData)
	} else {
		r0 = ret.Get(0).(cart.AddRequest)
	}

	return r0
}

// CancelOrder provides a mock function with given fields: ctx, session, orderInfos, _a3
func (_m *CartService) CancelOrder(ctx context.Context, session *web.Session, orderInfos placeorder.PlacedOrderInfos, _a3 cart.Cart) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, orderInfos, _a3)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, placeorder.PlacedOrderInfos, cart.Cart) *cart.Cart); ok {
		r0 = rf(ctx, session, orderInfos, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, placeorder.PlacedOrderInfos, cart.Cart) error); ok {
		r1 = rf(ctx, session, orderInfos, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOrderWithoutRestore provides a mock function with given fields: ctx, session, orderInfos
func (_m *CartService) CancelOrderWithoutRestore(ctx context.Context, session *web.Session, orderInfos placeorder.PlacedOrderInfos) error {
	ret := _m.Called(ctx, session, orderInfos)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, placeorder.PlacedOrderInfos) error); ok {
		r0 = rf(ctx, session, orderInfos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clean provides a mock function with given fields: ctx, session
func (_m *CartService) Clean(ctx context.Context, session *web.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteCurrentCart provides a mock function with given fields: ctx
func (_m *CartService) CompleteCurrentCart(ctx context.Context) (*cart.Cart, error) {
	ret := _m.Called(ctx)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context) *cart.Cart); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInitialDeliveryIfNotPresent provides a mock function with given fields: ctx, session, deliveryCode
func (_m *CartService) CreateInitialDeliveryIfNotPresent(ctx context.Context, session *web.Session, deliveryCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, deliveryCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, deliveryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, deliveryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllItems provides a mock function with given fields: ctx, session
func (_m *CartService) DeleteAllItems(ctx context.Context, session *web.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartInCache provides a mock function with given fields: ctx, session, _a2
func (_m *CartService) DeleteCartInCache(ctx context.Context, session *web.Session, _a2 *cart.Cart) {
	_m.Called(ctx, session, _a2)
}

// DeleteDelivery provides a mock function with given fields: ctx, session, deliveryCode
func (_m *CartService) DeleteDelivery(ctx context.Context, session *web.Session, deliveryCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, deliveryCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, deliveryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, deliveryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: ctx, session, itemID, deliveryCode
func (_m *CartService) DeleteItem(ctx context.Context, session *web.Session, itemID string, deliveryCode string) error {
	ret := _m.Called(ctx, session, itemID, deliveryCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, string) error); ok {
		r0 = rf(ctx, session, itemID, deliveryCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForceReserveOrderIDAndSave provides a mock function with given fields: ctx, session
func (_m *CartService) ForceReserveOrderIDAndSave(ctx context.Context, session *web.Session) (*cart.Cart, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartReceiverService provides a mock function with given fields:
func (_m *CartService) GetCartReceiverService() *application.CartReceiverService {
	ret := _m.Called()

	var r0 *application.CartReceiverService
	if rf, ok := ret.Get(0).(func() *application.CartReceiverService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*application.CartReceiverService)
		}
	}

	return r0
}

// GetDefaultDeliveryCode provides a mock function with given fields:
func (_m *CartService) GetDefaultDeliveryCode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInitialDelivery provides a mock function with given fields: deliveryCode
func (_m *CartService) GetInitialDelivery(deliveryCode string) (*cart.DeliveryInfo, error) {
	ret := _m.Called(deliveryCode)

	var r0 *cart.DeliveryInfo
	if rf, ok := ret.Get(0).(func(string) *cart.DeliveryInfo); ok {
		r0 = rf(deliveryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.DeliveryInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deliveryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrder provides a mock function with given fields: ctx, session, payment
func (_m *CartService) PlaceOrder(ctx context.Context, session *web.Session, payment *placeorder.Payment) (placeorder.PlacedOrderInfos, error) {
	ret := _m.Called(ctx, session, payment)

	var r0 placeorder.PlacedOrderInfos
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *placeorder.Payment) placeorder.PlacedOrderInfos); ok {
		r0 = rf(ctx, session, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(placeorder.PlacedOrderInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, *placeorder.Payment) error); ok {
		r1 = rf(ctx, session, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlaceOrderWithCart provides a mock function with given fields: ctx, session, _a2, payment
func (_m *CartService) PlaceOrderWithCart(ctx context.Context, session *web.Session, _a2 *cart.Cart, payment *placeorder.Payment) (placeorder.PlacedOrderInfos, error) {
	ret := _m.Called(ctx, session, _a2, payment)

	var r0 placeorder.PlacedOrderInfos
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *cart.Cart, *placeorder.Payment) placeorder.PlacedOrderInfos); ok {
		r0 = rf(ctx, session, _a2, payment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(placeorder.PlacedOrderInfos)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, *cart.Cart, *placeorder.Payment) error); ok {
		r1 = rf(ctx, session, _a2, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveGiftCard provides a mock function with given fields: ctx, session, couponCode
func (_m *CartService) RemoveGiftCard(ctx context.Context, session *web.Session, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, couponCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveVoucher provides a mock function with given fields: ctx, session, couponCode
func (_m *CartService) RemoveVoucher(ctx context.Context, session *web.Session, couponCode string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, couponCode)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string) *cart.Cart); ok {
		r0 = rf(ctx, session, couponCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string) error); ok {
		r1 = rf(ctx, session, couponCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveOrderIDAndSave provides a mock function with given fields: ctx, session
func (_m *CartService) ReserveOrderIDAndSave(ctx context.Context, session *web.Session) (*cart.Cart, error) {
	ret := _m.Called(ctx, session)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) *cart.Cart); ok {
		r0 = rf(ctx, session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreCart provides a mock function with given fields: ctx, _a1
func (_m *CartService) RestoreCart(ctx context.Context, _a1 *cart.Cart) (*cart.Cart, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *cart.Cart) *cart.Cart); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cart.Cart) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdditionalData provides a mock function with given fields: ctx, session, additionalData
func (_m *CartService) UpdateAdditionalData(ctx context.Context, session *web.Session, additionalData map[string]string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, additionalData)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, map[string]string) *cart.Cart); ok {
		r0 = rf(ctx, session, additionalData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, map[string]string) error); ok {
		r1 = rf(ctx, session, additionalData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillingAddress provides a mock function with given fields: ctx, session, billingAddress
func (_m *CartService) UpdateBillingAddress(ctx context.Context, session *web.Session, billingAddress *cart.Address) error {
	ret := _m.Called(ctx, session, billingAddress)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *cart.Address) error); ok {
		r0 = rf(ctx, session, billingAddress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDeliveryAdditionalData provides a mock function with given fields: ctx, session, deliveryCode, additionalData
func (_m *CartService) UpdateDeliveryAdditionalData(ctx context.Context, session *web.Session, deliveryCode string, additionalData map[string]string) (*cart.Cart, error) {
	ret := _m.Called(ctx, session, deliveryCode, additionalData)

	var r0 *cart.Cart
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, map[string]string) *cart.Cart); ok {
		r0 = rf(ctx, session, deliveryCode, additionalData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart.Cart)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session, string, map[string]string) error); ok {
		r1 = rf(ctx, session, deliveryCode, additionalData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeliveryInfo provides a mock function with given fields: ctx, session, deliveryCode, deliveryInfo
func (_m *CartService) UpdateDeliveryInfo(ctx context.Context, session *web.Session, deliveryCode string, deliveryInfo cart.DeliveryInfoUpdateCommand) error {
	ret := _m.Called(ctx, session, deliveryCode, deliveryInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, cart.DeliveryInfoUpdateCommand) error); ok {
		r0 = rf(ctx, session, deliveryCode, deliveryInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemQty provides a mock function with given fields: ctx, session, itemID, deliveryCode, qty
func (_m *CartService) UpdateItemQty(ctx context.Context, session *web.Session, itemID string, deliveryCode string, qty int) error {
	ret := _m.Called(ctx, session, itemID, deliveryCode, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, string, int) error); ok {
		r0 = rf(ctx, session, itemID, deliveryCode, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItemSourceID provides a mock function with given fields: ctx, session, itemID, sourceID
func (_m *CartService) UpdateItemSourceID(ctx context.Context, session *web.Session, itemID string, sourceID string) error {
	ret := _m.Called(ctx, session, itemID, sourceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, string, string) error); ok {
		r0 = rf(ctx, session, itemID, sourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateItems provides a mock function with given fields: ctx, session, updateCommands
func (_m *CartService) UpdateItems(ctx context.Context, session *web.Session, updateCommands []cart.ItemUpdateCommand) error {
	ret := _m.Called(ctx, session, updateCommands)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, []cart.ItemUpdateCommand) error); ok {
		r0 = rf(ctx, session, updateCommands)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePaymentSelection provides a mock function with given fields: ctx, session, paymentSelection
func (_m *CartService) UpdatePaymentSelection(ctx context.Context, session *web.Session, paymentSelection cart.PaymentSelection) error {
	ret := _m.Called(ctx, session, paymentSelection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, cart.PaymentSelection) error); ok {
		r0 = rf(ctx, session, paymentSelection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePurchaser provides a mock function with given fields: ctx, session, purchaser, additionalData
func (_m *CartService) UpdatePurchaser(ctx context.Context, session *web.Session, purchaser *cart.Person, additionalData *cart.AdditionalData) error {
	ret := _m.Called(ctx, session, purchaser, additionalData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *cart.Person, *cart.AdditionalData) error); ok {
		r0 = rf(ctx, session, purchaser, additionalData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateCart provides a mock function with given fields: ctx, session, decoratedCart
func (_m *CartService) ValidateCart(ctx context.Context, session *web.Session, decoratedCart *decorator.DecoratedCart) validation.Result {
	ret := _m.Called(ctx, session, decoratedCart)

	var r0 validation.Result
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session, *decorator.DecoratedCart) validation.Result); ok {
		r0 = rf(ctx, session, decoratedCart)
	} else {
		r0 = ret.Get(0).(validation.Result)
	}

	return r0
}

// ValidateCurrentCart provides a mock function with given fields: ctx, session
func (_m *CartService) ValidateCurrentCart(ctx context.Context, session *web.Session) (validation.Result, error) {
	ret := _m.Called(ctx, session)

	var r0 validation.Result
	if rf, ok := ret.Get(0).(func(context.Context, *web.Session) validation.Result); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Get(0).(validation.Result)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *web.Session) error); ok {
		r1 = rf(ctx, session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
