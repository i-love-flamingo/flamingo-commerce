// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\x51\x6f\xdb\x36\x10\xc7\xdf\xfd\x29\xae\xf0\x4b\x3b\xa0\xfb\x00\x7a\xeb\xbc\x15\x2d\xb0\x2e\x9e\xd3\x76\x0f\xc3\x60\x5c\xc8\x93\x75\x18\x45\x6a\xc7\x53\x52\x61\xd8\x77\x1f\x48\x31\x8e\x12\xcb\x81\xeb\x22\x5b\xf4\x60\xc0\x24\xef\x7f\xbf\x3b\x1e\xa9\x93\x0e\x1d\xc1\x2a\xb4\x2d\x89\xa1\xed\xaa\x21\xf3\x67\xe8\x75\x7b\xa9\x28\xba\x76\x68\xe8\x42\x2c\xc9\x76\x43\xb1\x77\x0a\x7f\x2f\x00\x00\xfa\x9e\x6d\x05\x97\x2a\xec\x77\x2f\x16\xff\x2c\x96\x33\x02\x77\xb6\xab\xe0\x95\xbe\x28\x08\x75\x42\x91\xbc\x46\xd0\x86\x40\x46\xc5\x50\xe7\x7f\xa6\x17\x21\xaf\xf0\x52\x7a\xef\xd9\xef\x5e\x41\x97\x04\x20\x24\x05\x68\x7b\x45\xe5\xe0\x17\x47\x68\x0f\x9d\x8d\xa0\x4b\xf8\xd8\x10\xac\x50\x14\xb4\x41\x05\x8e\xb0\x0b\xec\x77\xa0\x01\xae\x68\x74\x61\xf3\x4a\x83\xa2\xd5\x9d\xf2\x8f\x64\x82\xa0\x92\x4d\xb6\x13\xa9\xd1\xa2\x50\xb1\x07\x83\xf1\x96\x91\x23\xa0\x13\x42\x3b\x4c\x75\xf3\xdc\x7b\x5f\x87\x58\x1d\xe3\xb6\x17\xfb\x35\xc5\xd3\xa5\xa2\x12\x58\xea\xc8\xdb\x44\x1b\x7c\xce\x51\xcc\xc3\xa1\x86\x0e\x87\x36\x25\x0b\xbd\xbd\x97\xa6\xd7\x65\x49\x8b\x03\x98\xe0\x15\xd9\x03\x5a\xcb\x29\x75\xe8\x80\xf7\x2e\xf2\xb2\xa3\x40\x99\x27\x33\x6c\xf3\x6f\xa1\x7a\x03\xbd\xe7\xbf\x7a\x02\xb6\x50\x07\xc9\x48\x9d\x04\x43\x31\xce\x56\xc5\xe2\x78\x5d\x4c\x42\x86\xd7\x23\x17\xe0\x55\xe8\x75\x14\x9d\x24\x39\xcd\xeb\xd0\xb1\x41\xe7\x06\x88\x4d\xb8\xf1\x29\x1d\x08\xb1\x37\x44\x31\x42\x87\x3b\x7a\xb4\x2c\xa6\xbe\xc6\xaa\x28\xe9\x2b\xbb\x52\x9e\xdf\x1f\x4b\xc6\xfa\xce\xe2\xc5\x1f\xa3\xc6\x03\xe9\xea\x81\x06\xca\x81\xfb\x62\x49\x2d\xb2\xdb\xbb\x2d\xcf\x24\x6b\x39\x96\x47\xb7\x66\x42\x53\x22\xda\xa1\xd2\x0d\x0e\xd5\x81\xde\x24\xdc\xb5\x84\x6b\xb6\x24\xd5\xbd\xc9\x96\xb4\x09\xb6\x3a\x24\xc9\x7b\x6e\x84\x2c\xeb\x0a\xc5\x66\x67\xf0\x5d\x0e\x3b\x6f\xcc\xf7\xab\x7b\x73\x79\x3d\xb6\xa1\xf7\x3a\x11\xdb\x47\xb1\x16\x36\x34\x8a\x2a\xab\xa3\x6a\x3e\x76\xf6\x4a\x52\xa7\x82\x3e\xb1\x34\x4b\xfc\x1c\xdf\xb2\x47\x57\xc1\x0f\x21\x38\x42\x9f\x07\x3d\xb6\x54\x1d\x64\xf6\x44\xe1\xed\x2f\x74\x03\xdc\x76\x8e\xda\x7c\x63\xfd\xef\x3c\xbf\x21\xeb\xb3\x02\xba\xec\x4d\x3a\xfa\xcf\x8a\xe9\x2d\xb2\x23\xfb\xa4\x48\x69\x44\x08\x63\xf0\x27\xdf\x9f\x05\x6b\x93\xad\x52\x4c\xcb\xaf\x4b\x74\x13\x6e\xde\xd7\x82\x2d\x9d\x17\xd8\x72\x36\xb2\xe5\x61\x68\x79\x68\xf9\x69\xf3\xf3\xed\xd0\x62\x79\x16\xec\x3b\x6d\xdd\x7f\x82\xfa\xee\xe3\x87\x6f\x61\xdd\x90\x65\x21\x73\xe6\xb1\xfa\xc6\xb4\x7e\xf5\x55\x77\xaf\x8a\x4a\xbd\xde\x16\x62\xd1\x4d\xef\xdc\x33\xce\xcb\x28\xb9\xfd\x49\x24\xc8\x19\xb9\x38\x0d\xec\x7c\xae\xf2\xba\x7b\xae\x78\xe9\x55\xff\x19\x1d\xdb\xdc\xa1\x3e\x21\x65\x1a\xba\xde\x3b\x1a\x1b\xf2\xe9\x1d\x94\x5a\x8e\xcf\x0f\xe6\xc7\x3e\x8c\xbe\x28\x79\x0b\x39\xc6\x5f\x7b\x92\xa1\x38\x38\x64\x7b\x63\x94\xaf\xe9\x8e\x70\x5f\xd8\x87\x42\x1f\x4a\x4f\x7e\xdb\x6a\x5f\x78\x37\x40\x17\x62\xe4\x2b\x47\xc0\xf5\xd8\xc5\xb6\x18\x4d\xc3\x9e\xc0\x07\x05\xcc\xea\x10\x72\xeb\x8c\x50\xa7\xa3\x33\xf6\xa2\x47\x70\x1e\x7c\x85\xbc\x14\xd2\x5e\xfc\x27\x71\xfb\xd3\xf5\x6a\xee\x16\x9e\xff\x78\x29\x3d\x0d\xac\x27\x8c\x63\xbf\xcc\x31\xe3\x65\x9e\x23\x24\x2b\xf4\x86\xdc\x6c\x62\xe6\x0d\x36\x54\x0b\xc5\x66\x6a\x71\xc2\x77\x4b\x4a\xf3\xbf\x01\x00\x00\xff\xff\xa9\x91\x2f\x04\x92\x0d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
