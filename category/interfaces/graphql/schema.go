// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xb1\x6e\xe3\x30\x0c\xdd\xf5\x15\xf4\x96\x03\xee\x0b\xb4\xdd\xb9\x4b\xb7\xb6\x29\xba\x14\x81\xc1\xc8\x6c\x6c\x54\x96\x52\x89\x0a\x1a\x14\xf9\xf7\xc2\xb2\xe3\xda\xa9\xe2\x14\xdd\xa2\xf1\x91\x7c\x7c\x7c\x24\xc4\xfb\x2d\x41\x6e\x9b\x86\x9c\xa2\x22\x47\xa6\x8d\x75\xfb\xe2\x1f\xb3\xab\xd7\x81\xc9\xc3\x87\x00\x00\xd8\x10\x0f\xd8\xe2\x95\xf6\x12\x96\xec\x6a\xb3\xc9\xfe\xc8\xb9\xf2\x2c\x16\xa3\xd6\x5f\x84\x12\x9e\xe7\x0a\x56\xe2\x20\xc4\x25\x55\xbd\x28\x65\x4b\x1a\x84\x44\x44\xe3\x9a\xf4\x14\xda\xa1\x0e\x97\xba\x3e\xb5\x39\x3f\x6b\x1d\x53\xfb\xfe\xe8\xbb\x46\xb3\x1a\x0e\x42\xd4\x86\xc9\xbd\xa0\x4a\x10\x9f\x9d\xc4\x60\x73\x82\x6c\x91\xab\x29\x82\x8a\xeb\x1d\x49\xf8\x6f\xad\x26\x34\x7d\x9a\xb3\x8d\x65\x2a\x4f\x60\x1c\x2d\x60\x6e\xdf\xd9\x79\x13\x6e\x90\x11\xea\x66\xab\xa9\x21\xc3\xfe\x5a\x86\x49\xb8\xff\xe8\xe8\xfc\x0d\xfd\x5a\xac\x0f\xeb\x96\x78\x72\x6b\x2d\xb0\x8a\xd1\x0a\x7d\x5e\xd5\xba\xf4\x27\x55\xa5\x55\xa1\xf5\x33\xb7\xc1\xb0\x84\x5b\xc3\x33\x2b\x88\xc2\x53\x2b\x68\x03\xd7\x38\x50\xb1\x24\x74\xaa\x7a\x20\x1f\x34\x1f\x57\xd2\xc7\x24\x4c\xdf\xb7\xe2\xe1\x46\xca\xa0\x78\x4c\x24\x27\xe9\x77\x5d\xc2\xa4\x55\x94\x44\xef\x4c\xa6\x84\xa8\xec\x3e\xd0\x70\xc0\x49\xdb\x17\x9d\x45\x47\x28\x1f\xdb\x3c\xfe\x04\xdb\xdc\x2c\x4d\xb3\x50\xa9\xe2\xbf\xc3\xc0\x47\x81\x6f\x81\x3c\x8f\x28\x3b\xbc\xe8\x03\xc9\x1f\x77\x3c\x9b\x38\x88\xcf\x00\x00\x00\xff\xff\x97\xc1\x74\xe4\xd7\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
