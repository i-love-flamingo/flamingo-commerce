// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\xe4\x28\x16\x7d\xcf\xaf\x20\xca\x4b\xb5\x94\xdd\xd1\xee\x63\xbd\x25\x55\xe9\x56\x69\x3a\x99\x74\xba\xa6\xf7\xa1\x15\x45\xc4\xbe\x55\x66\x1b\x83\x07\x70\x12\xab\x35\xff\x7d\x05\x06\x17\x5f\xfe\xd8\xd9\x9d\xd1\x4a\x3b\xfd\xd0\x91\xe1\x70\xb9\xe0\xc3\xe1\x80\x4b\x75\x0d\xa0\x0d\xaf\x6b\x10\x05\x3c\x6d\xa1\xe0\x02\x2b\x28\x37\x58\x28\xf4\xfd\x0c\x21\x84\x0a\x2c\xd4\xfa\x04\xd1\x35\xe7\xa6\xa2\x74\xe0\x2d\x50\xf2\x02\x82\x80\x5c\xa3\xaf\x01\x70\x1b\x41\xba\xf3\x47\xd3\xf4\x08\x69\xd5\x75\xb7\xe1\x25\xac\x4a\xfb\xa8\x1f\xd6\xe8\xb3\x12\x84\x1d\xcf\xdf\x45\x09\x24\x8d\xcf\x7e\x3d\x3b\x0b\x87\xe2\x8d\x80\x94\x6b\xb4\xdb\xf6\x49\x03\x53\x44\x75\xbb\xed\x10\xda\x94\x3e\x13\x4a\x09\x3b\x5e\x95\xa5\x00\x29\xa3\xce\x6c\xa9\x01\x36\xad\x28\x2a\x2c\x41\x44\x98\x7b\x10\x92\x33\x3b\x2d\xe3\xb3\x11\x4c\x02\x2e\x4b\xa2\x08\x67\x98\x6e\xb1\xc2\x69\xa7\x5e\x65\x9f\x65\x83\xbb\x1a\x98\xfa\x0c\x14\x0a\x5d\x17\x35\x79\xba\x8f\xea\xfb\xa1\x01\xe5\xec\x28\xf7\xfc\xaa\x55\x95\x1e\x7d\xa1\xe7\xed\x67\x33\x84\x6b\xce\x29\x60\xd6\x47\xc7\x71\x7d\x3c\x49\xb8\x69\x28\x81\x72\xc3\xdb\x86\x33\xfd\x7a\x92\x01\x9e\xaa\xec\x10\x4b\x38\xe0\x96\xaa\x4d\x2b\x04\xb0\xa2\x0b\xe3\x29\xae\x30\x25\x0a\xea\x24\xce\xde\xd5\xd8\x30\x44\x06\x43\x83\x32\x4e\xbd\xcf\xec\x03\x39\xa8\x0d\x16\x65\x12\xef\x2a\xac\xf7\x49\xf8\x5b\xb8\x67\x29\x17\xc5\x70\x33\x62\x9b\x3d\x9e\x39\xc0\x2d\x26\xec\x73\x45\x9a\x86\xb0\xe3\xcd\x2d\x26\xd4\x85\xb6\x63\xbb\xa9\x1b\xd5\x0d\x23\x32\x85\x15\x96\x2e\xec\x7b\x2e\x26\x73\x73\xcd\xd2\x21\xed\x14\xd4\xbb\xed\x8a\x98\x3f\xb3\xc3\x39\x77\x01\x96\x36\xd4\xa8\xa1\x91\x79\x63\x9f\x54\xb7\xaa\xb1\xf8\x06\xea\x9e\xe2\x02\x82\x4c\x2f\xd1\x0b\x16\x04\x33\x15\xe7\xbf\x63\xea\xd4\xf3\xcd\x9b\x02\xc1\x30\x7d\x80\x03\x68\xc6\xc0\x4a\xc0\x61\x26\x83\x7e\x16\x15\xd4\x1b\xde\x32\x65\x02\xda\xe5\x22\x78\xd9\x16\xca\x2f\x76\x3d\x7d\xe1\x6d\x51\x81\xf8\x8c\x5f\x08\x3b\xfa\xeb\xfd\x5e\x90\x02\x7a\x94\xc0\xac\x34\xc3\x8a\xab\x6d\x98\x8b\x1f\x7e\x40\x1f\x40\x5d\x51\x6a\xc9\xf9\x00\xbf\xb4\x44\x40\xa9\xd3\x92\xe8\x2f\x48\x80\x6a\x05\x93\x08\x53\x8a\x54\x05\xa8\x2f\x5f\xe9\xcc\x75\xba\x97\xc8\x91\x62\x67\x9e\x4c\x5f\x06\xf3\x0e\xa9\x0a\x2b\xc4\x00\x4a\xa4\x38\x7a\x06\xd4\x60\x52\xa2\x57\xa2\x2a\x13\xe8\x40\x18\xa6\xe8\x28\xb8\x94\xa8\x19\x12\xbe\x38\xb4\xac\x40\xab\x02\xe9\x0e\xde\x4d\xa4\xb6\x7a\x87\xcc\x38\x6c\xa2\xdf\x7f\xed\xc7\x23\xdb\x7a\x8f\xdf\x20\x56\xbf\x27\x53\xe8\x26\xce\xac\x4e\xc8\x08\xe0\x53\x5f\x7a\x3e\xc4\x72\x83\xbb\x03\x95\x9d\xdf\x10\xf2\x0f\xa2\xaa\x2d\x91\x85\x7e\x57\xf9\xf7\x51\x61\xe9\xf0\x1b\x2e\x35\xc8\x5f\x30\x98\x52\x57\xbb\x27\x8a\x66\x16\xa2\x6c\x9f\xcd\x0c\x7f\xd0\xd3\x36\x96\x91\x41\xec\xf1\xdb\x55\xdd\x93\x26\x8b\xea\xe3\xe4\xc6\x95\x76\x34\x3f\x2e\x2f\xde\x12\x70\x9f\xa2\x43\x4d\xe6\x59\xdf\x71\xa6\x5f\xf1\x03\x50\xb3\x55\x2e\x6a\xf3\xef\x35\xa8\xb0\xbc\x8a\x77\x85\x54\x92\x06\x12\xda\x45\x1d\xe8\x9f\x13\x0f\x43\xc6\xeb\x6e\xdf\x35\xb0\xd2\x3b\x79\xac\x13\xd3\x3b\xc4\x69\xb5\x6e\x2a\x2c\x8e\x90\x4c\xdf\x93\x2d\xcf\x1b\x05\x4d\x72\x6b\x16\xf0\xf8\x68\x75\xbb\x20\x77\x6d\x41\xd6\xe8\x3d\xe5\x58\x9d\x8f\x07\x06\x69\x43\x9b\x0d\x6f\x62\x36\x8f\x66\xc9\xda\x45\xf8\x35\x89\xf3\xe8\x49\x74\x3f\x4d\xf8\x6d\xef\xa5\x14\xcb\xa3\x6e\x33\x9a\x96\x59\xad\x36\xaf\x50\x28\x07\x45\xde\x9d\x34\xd5\x3c\xda\xe2\xfc\x7e\xf7\xa8\x3b\x22\x4c\x81\x38\xe0\x22\xee\x2d\x36\x26\xb6\xdf\x23\x56\xf0\x8a\x73\xae\xe0\x0b\xa6\x2d\xa4\xba\x9b\x1f\xcb\xb6\x37\x19\x49\x27\xa4\x6e\x28\xe8\x22\xf9\x47\xa6\x93\x58\x53\x1b\xdd\xed\xdf\x93\xdb\xef\x60\xa9\x77\x39\x5b\xb4\xf5\x6b\x33\x4e\xda\xed\x89\xd7\xdd\xae\x5c\x59\xd3\x3b\xea\x9c\x35\x70\x6c\x04\xd9\xc4\x77\xec\xc0\x47\x92\xd7\x55\xc3\x59\x21\xeb\xe8\xbc\x8c\xa5\xb7\xeb\x45\xf1\xfc\x0d\x71\xa1\x68\x8f\x6f\xd3\xff\x25\x4d\xff\x5f\x94\xdd\xdf\x79\x8b\x79\xe0\xaf\x33\x4e\xa0\xc2\xd2\x32\x74\xf0\xe1\x93\x54\xd2\x04\x71\xc7\x49\x5f\xd7\x4d\xc9\x2b\x17\xdf\x0e\x94\xbf\x86\xa5\x35\xa8\x8a\x97\x61\x59\x81\x85\x20\xda\x7a\xf8\x85\x8e\x9f\x1f\x79\x81\x33\xa7\xa2\x6d\x54\x6d\xdb\x48\x6d\x87\xf6\xa4\x86\x35\xd2\xff\x0f\xfa\x1b\x1c\xbb\x56\xdf\xa0\xf3\xf7\xa0\xe0\x34\x14\x20\x7f\x84\x2e\xb0\x1c\xc6\x90\x45\x30\x6f\x2e\xe4\x1a\xd5\xb8\xf9\x2a\x7b\xe9\xfc\xa7\xe4\xec\xaf\x0f\xf8\xf5\x16\xa4\xc4\x47\x58\xd0\xf8\x16\x37\x27\x54\x98\xb6\x07\x8c\xd3\xbf\xc5\x4d\x92\xbb\x07\x8f\xc7\x30\xf9\x46\xdd\x74\x22\xb7\xb7\x79\x1b\xd1\xd0\xc9\xcc\x61\xba\x95\x70\x1d\x1d\xbc\x83\x63\x5d\x48\x95\x6c\x3a\xbe\x62\xb8\x4c\xb4\xff\x0b\x53\x31\x26\x79\x6c\x71\xab\x49\x69\xb0\x47\xcb\xdc\x9a\xf1\x4e\x96\x43\xb5\xb7\x69\xf8\x4b\x6d\xc7\x0a\x2d\x41\x63\xfd\x67\x16\x5a\x7e\xb8\x71\x77\xee\x82\x23\x27\xb9\x11\x76\xec\x85\x46\xb0\xe1\xd2\xa7\x6e\x30\x39\x5a\x43\x17\x2e\x42\xcf\xe9\xa1\xb0\x8a\xe2\x67\xa0\xbd\x5b\x88\xab\xec\x3c\xba\xca\x78\x2b\x3d\x51\x28\xdb\x9a\x48\x4f\x20\x23\x96\x48\x2e\xd4\x4f\xa2\xd4\xb2\x60\x6d\xca\xdc\xce\xec\x91\x85\xa4\x9b\xd0\xb0\xf9\x58\x5b\x14\xbc\x34\x53\x92\x0f\xef\x47\xf5\x2f\x9c\xe2\x23\x6d\x24\x73\xe6\xbc\xdc\x24\xe7\x65\x53\x69\x8f\xcc\xb7\x23\x67\x6a\x3f\xcb\x3b\x5c\x47\x15\x92\xb7\xa2\x80\xf8\x12\xe7\x17\xd5\x79\x47\xe4\x79\x11\x0b\x11\xc6\x08\x25\x98\x85\xba\x39\x9c\x18\xe2\x4e\x63\xb8\x7f\xb0\x93\x84\x1d\x29\x18\x96\x64\x4d\xc0\x79\x8c\xca\x2c\xf3\x1e\x23\xf8\xeb\x5c\x18\x07\x19\x8d\x71\x61\x51\xf1\xf6\x68\x9e\x47\x68\x67\xb5\xcd\x52\xe3\x05\x2b\x8f\xe3\x79\xb6\x1f\x88\x90\x8a\x99\x17\x3a\x8a\xa1\x38\x0b\x09\xb9\x45\xca\x92\xc2\x5d\x82\x0a\xfc\x6d\xaf\x96\x93\xf9\x48\x4c\x5b\x65\xf7\xd6\x51\x8c\x12\x00\x99\xa1\xa5\x98\x3b\x31\x95\xf3\x89\x6f\x76\xde\x3e\x12\x96\x32\xae\xe0\x75\x83\x59\x97\x74\x17\xe8\x14\x51\x29\x20\xc2\x34\x5c\xaa\x41\xc9\x46\xb3\x36\xa7\xbc\xc9\x38\x02\x8e\xc4\xd3\xc4\x7c\x3e\x5a\x5e\xc5\x4c\xce\x3d\x26\x09\x14\xbc\x31\xa0\xd0\x54\x9c\x4d\xb1\x03\x6a\x73\xcd\x38\x9a\x73\x96\xa8\xfd\x1d\xb6\x3b\x06\xcf\x5f\x85\x1b\xb8\xb6\x10\x0a\x13\x1a\x23\xef\xc3\x5a\xa7\x85\x44\x2a\xc2\x8e\x9b\x56\x2a\x5e\x83\xc8\xdc\x7b\xdf\x64\x20\xf9\x74\x73\xc8\x48\x7f\x27\x86\x39\x64\xe6\x4e\x39\x58\xc1\x4f\x87\x6b\x22\x54\x15\xe9\x2b\x96\xb2\xe1\xa2\x3f\x1d\x8b\x2e\x5f\x79\xd7\xd6\xcf\xb1\x2f\x65\xb8\xe7\xb1\xa1\xe1\xe4\xc4\x87\x82\x68\x13\x32\x52\x53\x98\xb1\x5d\x29\x25\xc8\x73\xab\xc0\x73\x7e\x02\x24\x88\x17\x28\xcd\xce\xe7\x8b\x7c\xb6\x87\xe1\xba\x64\xd4\x84\x8f\xb9\xa6\xbc\x0e\x86\x6e\x2f\xdb\xe5\xe9\x42\x28\xdb\xe7\x94\x17\x71\xf7\xf4\xa3\xc9\x0e\x66\x22\x2b\xe2\x9a\xfc\x8c\xb0\xe3\xd2\xfb\x83\x2f\x98\x92\xd2\xbc\xac\x07\x90\x2d\x75\x16\xa8\xc2\x52\xe3\x38\xbb\x11\x82\x9f\x34\x2b\x72\xa8\x03\xc0\x9a\xf7\x1f\x21\xa2\xc8\x05\x31\xce\x45\x07\x96\xde\x8a\x8c\xae\x77\xb4\x79\x38\xe5\x61\x02\xf6\x86\xed\x22\x93\x70\x06\x8c\xbe\x9f\x19\xc2\xb8\x3b\xfb\x64\xc5\x9b\x5a\x18\x4b\xf4\x22\x3f\x33\xc6\x72\x58\x8a\x9d\x4e\x70\x5c\x3f\x3b\xc6\x47\xc2\x13\x7e\xa5\x98\x11\x9c\xa7\xd0\xfd\xbf\xe7\xc2\xf1\xf3\xc0\x45\xdd\x8b\x43\xff\x6f\xae\x99\x51\x09\x64\xb6\x57\x37\x2d\x99\xeb\x8a\x27\x0d\xf5\x5e\xf7\x70\x6d\xd1\x08\x5e\x80\x94\x9e\xb5\x1c\x49\xd8\x7d\x7f\x1a\x6e\x34\x3d\xbe\xfc\xce\x5d\x67\x02\xb8\xc9\x22\x40\x4b\xc3\x82\xf4\xda\xd0\xb4\x7a\x3f\x00\x06\xc3\xc6\x40\x60\x3a\xd5\xc6\xa3\xe0\x58\x32\x8e\x78\xc8\x9c\xd6\xf3\xec\xb7\x1f\x00\x3f\xf6\x07\x83\x69\x36\x44\xb9\xfe\xa6\xc8\xc3\x7c\x84\x7e\x78\x29\xfd\x3c\xfd\xfd\xd3\xa8\xcd\x1a\x35\x67\xcf\xfe\xb6\x9e\xc7\xfc\x7d\x0c\xf3\xff\x6c\xe5\x8c\x8d\xf3\x94\x34\x87\x59\x60\xe5\xce\x08\x6b\x5a\x75\x22\x77\xca\xeb\x9d\x01\x2c\x21\xf6\x1f\xc8\xeb\x05\xb4\x5e\xc0\xea\x05\xa4\x5e\xc0\xe9\x05\x94\x5e\xc0\xe8\x05\x84\x5e\xc0\xe7\x05\x74\x5e\xc0\xe6\x05\x64\x5e\xc0\xe5\x05\x54\x5e\xc0\xe4\xa5\x44\x86\x37\x05\xac\x34\xee\x12\x7d\x6a\x4f\x9f\x20\x02\xd9\x5e\x8f\xfc\x5c\x29\x89\x70\x6b\x59\x13\x07\xb9\x2a\xcb\x3d\xd7\x2d\x56\xc9\xe5\xcb\x6e\x7b\x7e\x79\xba\x22\xb9\x44\xb3\x3f\x08\x89\x32\x08\xfa\xd9\x02\x05\x05\xfe\xa5\xe9\xfc\x0f\x4c\xe6\xe3\x69\xf3\x37\xfc\x34\xc3\xe4\xfb\x1f\x05\xfd\xb9\xd1\x27\x1f\x1d\xf4\x93\xea\x16\xc4\xf5\xa6\x67\x69\x17\x66\xaf\xed\xfb\x09\x95\x69\x85\x4f\x0a\xb5\x9e\x95\xaf\xe4\xf3\x66\x8a\x1b\xef\x38\x32\x6e\xab\xf8\x5b\xdf\x65\xfc\xbd\x21\xe9\x2d\x6b\xfd\x34\xe7\xfe\x15\x00\x00\xff\xff\x2f\x05\x8b\x29\x42\x27\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
