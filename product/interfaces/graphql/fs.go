// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x30\x3e\x17\x4e\x70\x5c\x3f\x40\xee\x1c\x37\x3d\x27\x68\xd2\xe6\xd4\x39\xdd\x05\x8a\x22\x18\x4b\x63\x89\x28\x45\x6a\x49\x2a\x8d\xb6\xe8\x5b\xed\x13\xec\x93\x2d\x86\xa4\xfe\x25\x3b\xd9\x16\x0b\x14\x68\x80\x16\x08\xe7\x97\x33\xdf\xfc\x50\xe1\xd2\xa2\xde\x43\x84\x6c\xa3\xb2\x0c\x75\x84\xf7\xb7\x5a\xc5\x45\x64\xd9\x97\x19\x63\x8c\xd9\x32\xc7\x73\xb6\xb5\x9a\xcb\xe4\xc4\x9d\x64\xa0\x3f\xa1\xbd\x15\x10\xe1\x46\xc5\x3d\x22\x8f\x51\x5a\xbe\xe7\xa8\x7b\x42\x18\x73\x38\x1f\x18\xb9\xbf\xa1\xf3\x93\xa5\xe3\xc9\x35\x8f\x70\x84\xe7\x96\xce\xaf\xe4\x5e\x05\x3e\xcb\xad\xe8\x99\x8d\xc0\x62\xa2\x34\x47\x33\x22\xbf\xa9\x89\x9e\x39\x46\x13\x69\x9e\x5b\xae\x64\x57\x8b\x49\x95\xb6\x2f\xa7\xa8\x19\xda\xf1\x1b\x58\xf0\x0c\x42\x95\x20\x6c\x39\xc2\x73\xed\x29\x9e\x0d\xac\xd5\x7c\x57\xd8\x51\x5f\xd7\x35\xd1\x33\xef\x20\x4e\x46\x19\x2f\x1c\xe1\x64\xf6\x75\x36\x9b\xcf\xe7\xb3\x35\x33\x3c\xcb\x05\xb2\xdc\xd3\x97\xcc\xa6\x60\x59\x0a\x86\x49\xc5\x1e\x40\x73\xd8\x09\x6c\xd9\x66\x20\x63\x66\x53\xd4\xb8\x57\x1a\x89\x49\xa3\x00\xba\x35\xb3\x8a\x29\xa2\x54\xba\x8c\xb3\x40\x40\x18\xba\xb1\x75\x56\x2b\xc8\xb8\x5f\x32\x94\xd6\xfc\x84\xd3\x0f\x0e\xa7\x48\xc9\x3d\x4f\x0a\xed\x60\x13\x80\xc0\x62\xdc\x73\x89\x86\x70\xc3\x72\x65\x0c\x27\xa2\x03\x17\xdd\xcf\x30\xb5\x67\x50\x31\xaf\xd8\x95\x65\x4a\x8a\x92\x54\x59\xe0\xd2\xcc\xb8\xdc\x2b\x9d\x79\x90\xc1\x4e\x15\xb6\x56\xec\x74\x10\x6c\x76\x45\x0d\x5a\x88\x2c\x7f\xc0\x8a\xc4\xb8\x35\x28\xf6\xab\x03\x58\xdc\xb4\x5c\xfe\x89\xc8\x1f\x04\x91\x35\x7a\xb6\x28\x30\x72\x30\x3a\x67\x1f\x06\x62\xef\x07\x6c\x27\x1f\x9f\x87\x68\x39\x00\x94\x61\x4a\x22\x61\x36\x03\xe9\x50\x1a\x69\xb4\xd8\x60\xd1\x75\x50\x18\x54\xc2\x03\x8f\xd1\xac\xd8\x5a\x08\x16\x83\x05\xdf\x37\xa9\x28\x94\xd3\xd7\xb5\x32\xa3\x36\x2b\x95\x75\x25\x43\xff\xda\xda\x5c\x89\x80\x30\xaa\x2e\x11\x36\x2c\x11\x6e\xff\xfc\xc3\x30\x2a\x35\x2e\x13\xc3\x4e\x7d\x6b\xae\x9d\xa4\x7e\x9d\x22\x33\x90\x75\x75\x9f\x1d\x28\x94\xb5\x73\xf1\xbd\x57\xf1\x2d\x95\x32\xbf\x4b\xb1\x5f\x2e\x14\x50\xf2\x68\xd1\xf6\x66\xd1\x74\x85\x2d\xa2\xbf\xf3\x22\xdc\xe1\xa6\x2b\xbf\x60\x7b\xa5\x9d\x86\x2a\x51\x3d\x03\xf3\x9f\x45\xfa\x4f\x17\xe9\xa1\x3c\x43\x64\x0b\x10\x55\xb2\xe6\x4d\x51\x0f\x32\xdb\xc3\xce\x66\x1a\xf3\x1e\xe3\xf0\x00\x5c\x74\xe6\x4f\x33\x6a\xe6\xdf\xa5\x79\x90\x0f\x0f\x28\x39\xca\xc8\x19\xc9\x51\xdb\x92\x0a\x19\xa2\x08\x8d\xa9\xee\xd7\xee\x1a\x02\x76\x28\x0c\x43\x30\x5c\x94\xde\x0b\x68\xca\xe9\xb8\x2f\xeb\x09\xe6\xe7\xb4\xb3\x35\x4b\xb4\x2a\x72\x37\x6e\xeb\x4c\xad\xd8\xe5\x2a\x59\xb1\x85\xe1\xbf\xe3\x62\xaa\xf2\x87\x76\x43\x6d\x47\x83\xfc\xb8\x8b\xf6\x52\x46\x3d\x2f\xcc\x7d\xde\x19\xfc\xbe\x64\xa9\x5d\x56\xfe\x54\xee\xdc\x2c\x96\x6c\x71\x4d\xff\xfd\x7a\xbd\xf0\xf1\x52\xf9\x33\x32\x75\xff\xd6\x71\x7f\x74\x17\xbf\x04\x53\xbe\xb0\xea\x45\x48\x4f\x3b\x63\x31\x37\xb9\x80\xb2\x71\x60\x04\x56\xd0\x9f\x01\x4f\x68\x90\x7f\x3b\x58\x0f\x20\x8a\x16\x97\xcb\x9b\x0c\x77\x77\xf1\x82\xb1\x2c\x3e\x3d\x71\x21\x30\xc1\xa5\x11\x07\x8c\x05\x3b\xd6\xc8\x26\x55\x6d\x49\x20\x64\x7a\xee\x53\x75\xa0\x46\xeb\x45\xcf\x27\x3e\x03\x1b\xa5\x6e\x35\xa4\xb9\xea\xf4\xad\x9c\x8a\x97\x98\xa3\x8c\xb9\x4c\x68\x54\xf1\xbd\x7f\x73\xd0\xf0\x1d\x64\x83\x29\x4d\xa3\x72\xc9\xb8\x65\x96\x1a\x25\xe5\x95\xcb\x48\x14\x31\xb6\x07\x42\xe8\xbf\x64\x75\x87\xa6\x6d\x1a\x59\x54\x68\x8d\xa4\xaa\xe5\x41\x75\x99\x20\xfe\x9c\x90\x84\x19\x79\xb2\x74\xf9\xbb\x1a\x04\x81\x4c\x16\x32\x46\x2d\x4a\xba\xe1\x11\x58\x1d\x33\x13\x72\x39\x39\xda\xc8\x07\xea\xc4\x2e\xb3\x0e\x37\x35\xa0\xfc\x12\x12\x53\xc4\x5a\x61\x10\xe5\x00\xf0\x28\x8b\xec\xb9\x98\x08\x7e\x39\xdb\x53\x9a\xdd\xd6\xee\x92\x8f\x8f\x10\xb5\x1a\x01\xfb\x37\x03\x21\xaa\x96\xde\x95\x69\xe3\x9e\x2c\xac\x37\x77\x57\xef\x2f\x43\xaf\xa9\xb9\xc2\xca\x63\x53\x90\x23\x1d\xf9\x8c\xe1\x23\x37\xd6\x2c\x47\x70\xf8\x0d\xae\xdc\xac\xef\x36\xff\xf5\x9e\xbc\x51\x35\xd7\x77\x36\xb5\xf2\xb6\xde\xbc\xbd\xf7\xe6\x28\xc1\xbf\x68\xc8\x73\x0c\xed\x34\xa0\xdf\xb0\x0c\xb8\xac\xf6\x8b\xd2\xbd\xdd\x49\x7d\xb3\x70\x4c\xbe\x89\x6a\x8e\x1a\x5c\x5c\x4e\x6f\x27\xe5\x1d\x82\x41\x1d\x56\x04\x21\xce\x19\x1b\xe9\xd2\x3d\x66\xdf\x9b\x69\x03\x19\x69\x13\xee\xa9\xe8\xe5\xa6\x7c\x74\x92\xde\xbb\x4f\x58\x7e\x56\x3a\x36\x64\xd7\xfd\x7c\x08\xd8\xf7\x36\xc2\x06\x33\x6a\x86\x9b\x63\x76\x2a\xe9\x2f\xed\x3d\x8f\xf9\x36\x37\xce\xda\x2c\x7d\x4e\x04\x41\x4b\x2e\x93\xf3\x83\x22\x97\x9e\xc9\x09\x7d\x9d\x1d\x76\xa5\xd1\x3f\xb9\x62\xc7\xb8\x87\x42\x74\x9b\x16\x8f\x42\x9b\xe6\xe6\x25\x37\x91\x2a\xa4\xc5\xf8\x9c\x5d\x28\x25\x10\x64\x90\x6b\x11\xc6\x44\x2b\xfa\x1d\x3e\xda\xde\x86\xc9\xe5\xad\xe2\xd2\x9a\x3b\xb5\xcd\x91\xfa\xe5\x2b\xa1\xc0\x56\x6f\xe3\xc7\x69\x22\xbd\x62\x9c\xba\xf1\xe5\x79\xe3\xc9\xbe\x8f\x6d\x53\xf5\xd9\xb7\x6c\x17\xa1\xf0\x35\x8a\xe5\x4e\xb9\x8b\x34\xc6\x47\x12\xd9\x0e\x75\xbb\x45\x39\xa1\xb0\x9d\x06\xd6\x16\xe7\x92\x21\x2d\x26\x37\x5c\xa0\x59\xcb\xf8\x46\xe9\xf0\xa2\x98\x78\xde\xb8\x39\x7e\x48\x9d\xef\x88\x51\xc9\x22\x90\x6c\x87\x5e\x7d\xb8\x87\xd2\x2c\x23\x43\xf3\xc3\xb9\x9c\xc4\x49\x3b\x6e\xd5\xf2\x51\x18\xab\x32\xd4\xff\xa1\xe5\xa1\xf7\xfe\x48\x41\x4a\x14\xc3\x5d\x5b\xa8\x08\x44\x77\x90\x4c\x95\x62\xcc\xab\x5a\x74\xe5\x3f\x2c\x7e\xc7\x72\x65\x31\x0b\x1b\x6b\x82\xd6\x1d\x9d\x16\x06\x92\xc6\xc6\xd9\xd4\x33\xcb\x89\x1e\xf1\x80\x78\x3a\x15\xe1\x7e\xba\x20\xcd\xf0\xce\x93\xda\xc7\xc1\x87\x3e\x77\x78\xab\xf5\x8f\x35\xee\x91\x52\xf7\x94\xc8\x34\x4f\xa2\x2a\x3c\xd5\xc1\x6b\x2c\x69\x97\xad\x1b\x55\xff\x75\x35\xf2\x06\xa8\xa8\x81\x3b\x05\x53\x1f\x9d\x7e\xc2\xb2\x1d\xc4\x50\xd4\x55\xa8\x27\xf9\xa6\x8d\x0c\x44\xcd\x45\xf9\x1a\x4b\x52\xd0\xf6\xfb\xec\x98\xa7\xc7\x43\x33\xb9\x1e\xd3\xc9\xf5\x70\x43\x1d\x59\x5a\x0b\xc9\xed\x10\xbf\xae\x06\x3b\x41\x9e\x74\xa6\x3b\x9b\x26\x3d\xca\xc1\xa6\xdd\x13\x09\xd9\x80\x47\xe3\xe8\xba\xd8\xb5\x71\xa4\x7a\x5b\xdd\x69\xa2\xfe\x8f\xf4\xeb\x23\xed\xda\x2f\x17\x17\x60\x70\x54\xb0\x21\xaf\x33\x52\xd0\x69\xd8\x0d\xf1\xff\x92\xd7\x7a\xa7\x47\x4b\xf8\xca\x91\xe5\xc0\x13\xf9\xae\x10\x38\x00\x7e\x8c\xb2\xa4\x96\x5a\x09\x9b\xae\xec\xbf\x9e\x3e\x26\x7c\xe1\xc2\xe3\x46\x80\x31\x9d\x02\x9d\xfa\x53\x04\x82\x8e\xd2\x77\x68\x0a\x61\xeb\x19\xef\xff\x80\x31\x02\xed\xe0\xef\x1e\x22\xec\xd2\xbd\x9a\xfb\x57\x44\x38\xf9\x18\x9e\x52\x45\x92\xa0\x19\xbc\x5a\x03\xeb\xb6\xa6\x06\xa5\xc6\x9d\xdf\x74\xbf\xd4\x04\xe6\xe6\x43\x4d\x0a\xc6\x6f\xdb\x18\x3b\x63\xbd\x01\x9e\x6b\x95\x29\xff\xfd\xa7\xaf\xe3\xb6\x22\x4d\x43\xcf\x7f\x2e\x38\xdc\xc9\x1d\x4f\x15\x07\xae\xcd\x58\x46\x1c\xcf\x11\x33\x9d\x22\x3b\x54\xe0\x5f\x67\x33\x7c\xb4\x48\xa3\x9e\xb4\xfd\xaf\x40\x5d\x6d\x63\x7d\xcd\xa7\x53\x8f\xa0\xe5\x91\x8f\x4b\x23\xad\x70\xd4\x40\x88\xe5\xa9\x09\xa8\xf9\xad\xc0\x4e\x00\x42\xa8\x03\x61\xb4\xc3\xb6\x01\x47\x97\xfb\x2b\x00\x00\xff\xff\xe4\x78\xf6\x19\x4c\x1d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
