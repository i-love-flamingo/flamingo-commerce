// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x14\xec\x25\x05\x8a\x7e\x80\x6f\x89\xd3\x14\x41\x37\x8b\x74\xe5\xf6\xb2\x08\x82\x31\x35\x96\x07\xa6\x48\x81\x1c\x65\x23\x14\xfb\xef\x85\x48\x4a\x16\x45\xc9\xf6\xb1\x87\xdd\xd3\x66\xde\xe3\xcc\x70\x34\xf3\x86\x26\xc5\x68\xf6\x20\x30\xdb\xe8\xaa\x42\x23\xf0\xed\xc5\xe8\xa2\x11\x9c\xfd\xbb\xca\xb2\x2c\xdb\x81\xc5\x07\x60\x58\x9f\x08\xf7\x60\x49\x04\x56\x07\xdd\x38\x22\x23\x58\x34\x13\x6a\x60\x6d\x07\xcc\x73\x6d\x8d\x82\xf6\x24\x80\x49\x2b\x9b\xf2\xf3\x08\xf7\x67\xc8\xe6\x20\x11\x76\x12\xd7\xd9\xbd\xd6\x12\x41\x05\x67\xc1\x3c\x1f\xba\x3f\x14\x92\x6c\x6b\x5c\x67\x39\x1b\x52\xa5\xb7\x94\xc8\x4f\x05\x2a\xa6\x3d\xa1\x89\xa1\x03\xd8\x67\x2c\x08\x6e\x4b\xa3\x9b\x7a\xc0\x7e\xcd\x1a\x0b\xe5\xc9\xcd\x2f\x93\x7c\x4a\xe4\x2b\x8f\x4d\x73\x75\xc7\x6e\x56\x3f\x56\xab\x2e\xcf\x13\x9c\x53\x55\x4b\xec\xbf\x8b\xfb\xa3\x42\xc5\xf6\xe7\x37\xfb\xff\x7e\xb3\x69\xc1\xc3\xa7\x61\xe2\xae\x18\xa3\x7f\xe3\xec\x81\xd9\xd0\xae\x61\xb4\x3d\x65\x1a\xee\x6e\x60\xf8\x3a\x1e\xb4\xe1\x07\xb4\xc2\x50\xdd\xd5\x3d\x2e\x46\x31\x06\x92\x60\x55\x97\x79\x94\xca\xb7\xf9\xcb\xbd\xae\x3c\x1f\xcc\x11\xf9\x45\x82\xc0\x8d\x2e\x26\x9f\xc4\x20\x03\x49\x34\x1e\x99\x44\xea\xc1\xfc\xd8\xac\x93\x34\x7a\xf0\x0b\x54\xf1\x49\x87\x0a\x83\xc0\x58\xdc\x71\x07\x6d\xa9\x42\x67\x6d\xea\x62\xc6\xfa\x4e\x96\x76\x12\x1f\x8d\xae\xd6\x89\x75\xab\x07\xae\x33\x6f\x80\xb1\xd4\x86\x7c\xa9\x4f\x37\x0f\xf6\xd6\xb7\xff\xcd\xab\x23\x3f\x03\xa9\x1e\x18\xb5\xc0\x84\x1b\x32\xee\x8d\xba\xab\xc5\x33\xd4\x35\xa9\x72\x9d\x7d\x0b\xd7\x0a\xc5\xb4\xac\xc5\xf1\x33\xbe\xa3\x5c\xc7\x17\x3e\x62\xfb\x5d\x9b\xc2\x8e\x4f\xf8\x51\xfa\x82\xdf\x5d\x7d\x86\xc6\x4d\x7a\x2e\x99\xdc\xd0\x74\xae\x4b\xb6\xbe\xf3\xbc\xd3\xb3\xcd\x33\x92\x86\x17\x43\x02\xb3\xb4\xeb\x9d\xfd\x49\xed\xf5\x94\xfb\x64\xbb\xf2\xbb\xff\x0e\x23\xe6\x38\xb5\xc1\x1c\x25\x0a\xc6\xe2\x1f\x30\x04\x8a\x5d\x37\x8c\x22\xba\x7e\xcc\xd6\xcb\x5d\x78\xa6\x09\x47\x69\xdc\xbd\x03\xc9\x4e\x3d\x5c\x12\x76\xce\xe1\x90\x7d\x70\xea\x0f\x7e\xd6\x2d\x48\x6e\x07\x30\xbd\xf5\x94\xb1\xf8\x05\xa6\xc4\x7e\xf8\x13\x25\x2b\x70\x0f\x8d\xe4\x28\x14\x09\xec\xd5\xf3\x81\xac\xd0\x8d\x62\x2c\x26\x7a\x55\x8c\x80\xb9\xa3\x3d\xbe\xc5\x0f\x8e\x23\x56\xa4\x5e\x34\x29\xb6\x5b\x9d\xd7\xa8\x78\x9d\x3d\x4a\x0d\x1c\x40\xf8\x58\x06\x85\x56\xec\xdc\xc5\x01\x37\xde\x3c\xdb\x8e\x27\x38\x54\x40\x34\x96\x75\x85\xe6\x8f\x48\x66\x3d\x74\x00\xa5\x50\xa6\xd2\x22\xb5\x00\x39\xb2\x2d\x15\x3d\x5e\x40\x21\xa0\xd3\x73\x3b\xd3\x03\x11\xdb\xa5\x73\xf3\x7a\x9d\x6b\x47\x8e\xe5\x7c\x9c\x2e\x2a\xf6\xaa\x72\x3e\xe4\xef\x8a\x4d\x7b\x6d\x48\x47\x0e\x21\x25\xec\xc6\xa2\xe1\x24\x0e\x64\x83\x91\x62\x2c\x7a\x0d\x9b\x35\xf8\xba\xb8\x9f\x27\x5a\xda\x9b\x3b\x31\x1d\x8c\x20\x98\xde\x31\x8c\xfc\x79\xa1\x80\x78\x36\xaf\x18\x4d\x39\x9a\xa4\x39\xfe\x74\xd2\xce\xdc\xdd\xc9\x48\x34\x89\xe9\x4a\xa4\x0a\xb7\x1e\x1a\x9b\xc3\x23\x60\xca\x1e\xed\xf2\x78\xa1\xed\xd1\xa0\x12\x57\xb4\xec\x69\x9b\x87\xbc\x86\x07\xc0\x9f\xd8\x26\x2b\x60\xfc\x3a\x48\x0a\x31\xb8\x0a\xe4\x03\xd8\xc1\x74\x7b\xc4\x76\xe6\xe9\xd3\xbf\x7c\x16\x79\x8b\x31\x2e\x5f\xa8\x9f\xf7\x74\x9a\xd3\xf6\x6d\x14\x71\x3c\xf6\x89\xfb\x78\xd3\x2e\x3a\xaf\x81\x0f\xb1\x45\xb9\x57\x45\xcc\x31\x4e\xd9\x16\x7c\x2f\x5e\x6d\x2a\xe6\x0b\xd2\x7d\x41\x9e\x2f\xa8\xb3\x9f\xa5\x7b\xb0\x18\x49\xef\xc9\x7c\x57\x75\x07\x17\xc0\xbf\x15\x71\xb4\x11\x67\x37\x48\x78\xa5\x54\x35\x50\xa9\xbe\x36\x12\x93\x46\x2b\x50\xb5\xcf\xda\x60\x7f\xd8\xc6\x67\x3f\x5d\xde\x06\x7e\x3e\xe0\x63\x23\xc1\xda\xd1\x0b\x67\xa9\xb8\x6f\x39\x82\x11\x87\xaf\x68\x1b\xd9\xef\x8a\xda\x43\x73\xcd\x1e\xf2\xfc\x94\x3d\x82\x40\xb6\x99\x75\xa7\x0b\x5d\x01\xa9\xdf\x9c\x6d\xa3\x65\xf7\xd8\x20\xed\x53\xb6\x4d\x59\xa2\x0d\xbf\x5c\x4e\xee\x7c\xd4\xb7\x7c\x40\x83\x63\xef\xef\x19\xa3\x1f\x27\x81\xdc\x59\x5d\x87\xe2\x07\xa3\x2a\x9c\x94\x64\x7f\x35\x38\x08\xf4\x34\xd9\x5b\xff\x66\xa9\x93\x87\xf3\xcc\x84\xad\x7e\xac\xfe\x0b\x00\x00\xff\xff\xbc\x6a\xaa\x74\x92\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
