// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x4f\x4f\xfb\x30\x0c\xbd\xf7\x53\x78\xb7\xfd\xa4\xdf\x27\xc8\x71\x9d\x90\x26\x2e\xc0\x10\x97\x69\x42\x26\x35\x6b\xb4\x36\x29\x89\x33\x51\xd0\xbe\x3b\xea\x9f\x75\x4d\x97\x71\x42\x82\xde\xea\x67\xfb\xbd\x67\x3b\x4a\x33\xd9\x57\x94\x04\xa9\x29\x4b\xb2\x92\x9e\x53\x64\xda\x19\x5b\xc3\x67\x02\x00\x20\x4d\x46\x02\xd6\x6c\x95\xde\xcd\xda\x88\xc6\x72\x12\xa9\x90\xf3\x30\x82\x92\xd5\x81\x04\x2c\x8c\x29\x08\x75\x9f\x66\x4d\x69\x98\xb2\x51\xf8\x98\x24\x09\xd7\x55\x84\x7e\x89\x8c\xa0\xca\xaa\xa0\x92\x34\xbb\xdf\xd3\x17\x19\xd1\xa3\x25\xfa\x79\x7a\xe7\x5f\x9a\xc6\x4e\xc0\x26\x60\xda\xb6\x68\x8e\x2e\xcd\x55\x91\xb9\x49\x55\x66\xa4\x6f\x26\x94\x1a\xaf\x59\xc0\x4a\x73\xab\x3a\x3e\xd4\x56\x78\x6c\xa8\x0d\xf0\xb7\x0d\x29\x5d\x79\x3e\x0b\x5e\x13\x5a\x99\xdf\x52\xfd\x84\x85\xa7\x1b\x55\x30\xd9\x7e\x25\xfb\x50\xda\x41\xc0\xa6\xff\xdf\x5e\x6d\xf4\x40\x6f\x9e\x1c\xf7\x1d\x2a\xdc\xd1\x5a\x7d\x90\x80\xf3\xb7\xd2\x3c\x60\xe3\xf8\x18\x73\xc6\xf2\xa2\x0e\xd1\x8e\x7a\x80\x97\xca\x92\x64\x65\xb4\xb8\x80\xf7\x81\x19\xd7\x26\x6c\xbe\x35\xdc\x19\x8a\xaf\x7a\x30\xe6\x7c\x71\xf2\x25\x7b\x6c\xaa\xff\xa2\x78\x78\x0f\x99\x97\x3c\x6e\x24\x82\xf4\xbb\x2e\x21\xa0\x6a\x14\xd1\x3b\x93\xce\xa0\x15\x76\xef\x69\x78\xab\xd1\x7b\x9c\x77\xb7\x73\x0a\xa5\xe3\xfb\xfb\x27\xc2\x13\x9d\xc5\xdb\xcc\x65\xac\xf8\xff\xe0\x37\xd8\xb1\xb8\xb2\xfb\x31\x57\x74\x88\xc9\x31\xf9\x0a\x00\x00\xff\xff\xfc\xf4\xff\xb3\x2f\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
