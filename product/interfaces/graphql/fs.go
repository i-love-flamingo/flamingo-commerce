// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6e\x1b\x37\x13\x7f\xd7\x29\x68\xbd\xc8\xc6\xa7\xe8\x00\x7e\x93\x15\xe7\xab\x11\x3b\x71\x23\x37\x2d\x10\x18\xc6\x88\x3b\x92\x88\x70\xc9\x2d\xc9\x55\xbc\x0d\x72\xab\x9e\xa0\x27\x2b\x86\xe4\xae\xf6\xaf\x64\x27\x79\x69\x1b\x03\x09\x60\xce\x70\x66\x38\xf3\x9b\x1f\x87\x6b\xa1\x1c\x9a\x35\x70\x64\x0b\x9d\xa6\x68\x38\x3e\xdc\x1a\x9d\xe4\xdc\xb1\xcf\x23\xc6\x18\x73\x45\x86\xe7\x6c\xe9\x8c\x50\x9b\x13\xbf\x92\x82\xf9\x88\xee\x56\x02\xc7\x85\x4e\x5a\x42\x91\xa0\x72\x62\x2d\xd0\xb4\x36\x61\x22\xe0\xbc\xe3\xe4\xe1\x86\xd6\x4f\xa6\x5e\x27\x33\x82\x63\x8f\xce\x2d\xad\x5f\xa9\xb5\x8e\x7a\xb0\x03\x21\x61\x25\xd1\x0b\xec\x39\xfb\x70\x60\xcb\x7d\xd8\xe3\x84\x93\xad\x50\x39\x38\xdc\x68\x23\xc8\x42\xc7\xc0\xa2\x12\x06\xe5\x04\x2d\x37\x22\x73\x42\xab\xa6\x15\xbb\xd5\xc6\xbd\x1c\x92\xa6\xe8\xfa\x4f\xed\x20\x28\x48\x5d\x80\x74\x45\x8f\xce\x75\x90\x04\x35\x70\xce\x88\x55\xee\x7a\x63\x9d\x57\xc2\xa0\xbc\x82\x64\xd3\xab\x78\xe1\x05\x27\xa3\x2f\xa3\xd1\x78\x3c\x1e\xcd\x99\x15\x69\x26\x91\x65\x41\x3e\x65\x6e\x0b\x8e\x6d\xc1\x32\xa5\xd9\x0e\x8c\xa0\x24\xd7\x7c\x33\x50\x09\x73\x5b\x34\xb8\xd6\x06\x49\xc9\xa0\x04\x3a\x35\x73\x9a\x69\x92\x94\xb6\xac\xf7\x40\xe0\xe9\x86\xb1\xf4\x5e\x4b\x98\xf9\x5f\x52\x54\xce\xfe\x80\xe0\x7f\x10\x82\x5c\xab\xb5\xd8\xe4\xc6\x43\x2d\x82\x87\x25\xb8\x16\x0a\x2d\x61\x8d\x65\xda\x5a\x41\x42\x0f\x48\x3a\x9f\x65\x7a\xcd\xa0\x54\x9e\xb1\x2b\xc7\xb4\x92\x05\x99\x72\x20\x94\x1d\x09\xb5\xd6\x26\x0d\xc0\x84\x95\xce\x5d\x65\xd8\xdb\x20\xa8\xad\xf2\x0a\xe8\xc0\x9d\xd8\x61\x29\x62\xc2\x59\x94\xeb\xd9\x01\xfc\x2e\x6a\x21\xff\x40\xf1\xbf\x18\xc5\x15\xe2\x96\x28\x91\x7b\xe8\xf5\xe5\xe8\x7d\x47\xed\xe4\xfe\x79\x5d\xa0\x3a\x20\xb4\x4c\x2b\x24\x9c\xa7\xa0\x3c\xb2\xb9\x41\x87\x7b\xfc\x7a\xa6\x86\x4e\xf7\xec\x44\x82\x76\xc6\xe6\x52\xb2\x04\x1c\x04\x7e\xa6\x46\xd2\xde\x5e\xd3\xcb\x88\xe8\x5c\x69\xe7\xdb\x8c\xfe\xd5\xad\xf9\xb6\x02\x69\x75\xd5\x56\xac\xdb\x56\xc2\xfd\xf5\xa7\x65\xd4\x9e\x42\x6d\x2c\x3b\x0d\x57\x40\x15\x24\xdd\x0b\x5b\x64\x16\xd2\xa6\xed\xb3\x03\xcd\x35\xf7\x21\xbe\x0f\x26\xbe\xa5\xbb\xc6\x77\x5b\x6c\xb7\x18\x25\x94\x22\x9a\xd4\xa3\x99\xec\x99\x64\x89\x18\xce\x3c\x89\x67\xb8\x69\xee\x9f\xb0\xb5\x36\xde\x42\x59\xa8\x96\x83\xf1\x8f\xc6\xfe\x27\x34\xf6\x21\x6c\x00\x77\x39\xc8\xb2\xc0\xe3\x3d\x11\x74\xd0\xd0\xc2\xdb\x62\xb8\x4f\x42\x5f\x54\x55\x69\x5e\x47\x9e\x57\xc6\xdf\x85\x70\x28\x86\x1d\x2a\x81\x8a\x7b\x27\x19\x1a\x57\x50\xf3\x03\xe7\x68\x6d\x79\xbe\x3a\xd3\x48\x58\xa1\xb4\x0c\xc1\x0a\x59\x84\x28\x60\xdf\x82\xc7\x63\x99\x0f\x28\x3f\x87\x02\xe7\x6c\x63\x74\x9e\xf9\x6b\xbd\xaa\xd4\x8c\x5d\xce\x36\x33\x36\xb1\xe2\x0f\x9c\x0c\xb1\x45\xd7\x6f\xe4\x03\xde\xa9\x8f\x3f\x68\xab\x64\xc4\x93\x71\xbe\x10\x8d\x01\x23\xb4\x39\x51\x6c\x19\x4f\x19\xce\xcd\x64\xca\x26\xd7\xf4\xdf\x6f\xd7\x93\x90\x2f\x9d\x3d\xa3\x52\x0f\x6f\xbd\xf6\xbd\x3f\xf8\x25\xd8\xe2\x85\xd3\x2f\x62\x79\xea\x15\x4b\x84\xcd\x24\x14\xfb\x00\x7a\x60\x05\xed\x7b\xe3\x09\xa4\xfa\xd5\xc9\xda\x81\xcc\x6b\x5a\xbe\x6e\x2a\x9e\xdd\xe7\x0b\xfa\xaa\xf8\xf4\xc2\xc5\xc4\xc4\x90\x7a\x02\xb0\x0e\x5c\x1f\xf9\x0d\x9a\x5a\xd2\x86\x58\xe9\x71\x28\xd5\x81\x1e\xad\x06\xca\x50\xf8\x14\x1c\xdf\xfa\x11\x94\xee\x62\x6f\x6f\xe6\x4d\xbc\xc4\x0c\x55\x22\xd4\x86\xae\x37\xb1\x0e\xef\x21\xba\xb0\x3b\xd5\x60\xda\xd0\xf5\x3a\x65\xc2\x31\x47\x44\x49\x75\x15\x8a\xcb\x3c\xc1\xfa\x25\x12\xf9\x97\xbc\xae\xd0\xd6\x5d\x23\xe3\xb9\x31\x48\xa6\x6a\x11\x94\x87\x89\xdb\x9f\x93\x92\x78\xaf\x9e\x4c\x7d\xfd\xae\x3a\x49\x20\x97\xb9\x4a\xd0\xc8\x82\x4e\x78\x04\x56\xc7\xdc\xc4\x5a\x0e\x5e\x87\x14\x03\x31\xb1\xaf\xac\xc7\x4d\x05\xa8\x30\xb8\x24\x94\xb1\x5a\x1a\x64\xd1\x01\x3c\xaa\x3c\x7d\x2e\x26\x62\x5c\xde\xf7\x90\x65\xff\x3a\xf0\xc5\xc7\x47\xe0\x35\x22\x60\xff\x63\x20\x65\x49\xe9\xcd\x3d\x75\xdc\x93\x87\xf9\xe2\xee\xea\xfd\x65\xe4\x9a\x4a\x2b\x8e\x49\x6e\x0b\xaa\x87\x91\xcf\x18\x3e\x0a\xeb\xec\xb4\x07\x87\xdf\x10\xca\xcd\xfc\x6e\xf1\x53\x88\xe4\x8d\xae\xb4\xbe\xb3\xab\x59\xf0\xf5\xe6\xed\x43\x70\x47\x05\xfe\xd5\x40\x96\x61\xa4\xd3\x88\x7e\xcb\x52\x10\xaa\x9c\x2f\x0a\xff\x5d\x81\xcc\xef\x07\x8e\xc1\xb7\x57\xa5\x51\x81\x4b\xa8\xe1\xe9\xa4\xb8\x43\xb0\x68\xe2\x88\x20\xe5\x39\x63\x3d\x2c\xdd\x52\x0e\xdc\x4c\x13\x48\x0f\x4d\xf8\x27\x69\xd8\x37\x14\xa3\xdf\x19\xa2\xfb\x88\xc5\x27\x6d\x12\x4b\x7e\xfd\xcf\x87\x88\xfd\xe0\x23\x4e\x30\xbd\x6e\x84\x3d\xe6\xa7\xdc\xfd\xb9\x3e\x1b\xb2\x40\x73\xfd\xaa\xfb\xa9\xcf\x6f\x41\x30\x4a\xa8\xcd\xf9\xc1\x2d\x97\x41\xc9\x6f\xfa\x32\x3a\x1c\xca\xde\xfe\xe0\x58\x9e\xe0\x1a\x72\xd9\x24\x2d\xc1\x23\x4d\x0b\xfb\x52\x58\xae\x73\xe5\x30\x39\x67\x17\x5a\x4b\x04\x15\xf7\xd5\x04\x7d\x5b\x4b\xf9\x1d\x3e\xba\xd6\x84\x29\xd4\xad\x16\xca\xd9\x3b\xbd\xcc\x90\xf8\xf2\x95\xd4\xe0\xca\x37\xf8\xe3\xb0\x90\x5e\x3e\xde\x5c\xff\xf4\xbc\x08\xe2\xc0\x63\xcb\xad\xfe\x14\x28\xdb\x67\x28\x7e\x29\x63\x99\x37\xee\x33\x8d\xc9\x91\x42\xd6\x53\x5d\xa7\x28\xbf\x29\x4e\xa7\x51\xb5\xa6\x39\x65\x48\x83\xc9\x8d\x90\x68\xe7\x2a\xb9\xd1\x26\xbe\x42\x06\x9e\x44\xfe\x1e\x3f\x64\x2e\x30\x22\x2f\x18\x07\xc5\x56\x18\xcc\xc7\x73\x68\xc3\x52\x72\x34\x3e\x5c\xcb\x41\x9c\xd4\xf3\x56\x0e\x1f\xb9\x75\x3a\x45\xf3\x7f\x1a\x1e\xda\x58\x91\x62\x87\xa6\xe8\x0e\xdb\x7c\x0b\x4a\xa1\xec\x0a\xa4\xe6\x20\x9b\x57\xcc\x50\x93\x26\xa2\xec\x52\x4f\x0c\x5d\x5a\xf0\x2a\x57\x0e\xd3\x38\xcb\x6e\xd0\xf9\xa5\xd3\xdc\xc2\x66\xef\xe3\x6c\xe8\xd1\xe6\xb7\x1e\x89\x80\x74\x1a\xbd\xe2\x7f\x9a\xf0\x4d\xf1\x2e\x88\xea\xcb\x31\x86\xb6\x76\x7c\xc5\xb5\x97\x0d\xae\x91\x8a\xfa\x94\xcc\xec\x1f\x4b\x65\x7a\xca\x85\xd7\x58\xd0\x94\x5b\x51\x58\xfb\xdd\xd5\xf3\x3a\x28\xa5\x51\x7b\x0b\xb6\x5a\x3a\xfd\x88\x45\x3d\x89\xb1\xdd\xcb\x54\x0f\xea\x0d\x3b\xe9\x6c\xb5\x17\xc5\x6b\x2c\xc8\x40\x3d\xee\xb3\x63\x91\x1e\x4f\xcd\xe0\xe0\x4c\x2b\xd7\xdd\xd9\xb5\x67\x9c\xcd\x95\x70\x5d\xfc\xfa\xee\x6c\x24\x79\x30\x98\xe6\xad\x35\x18\x51\x06\x6e\xdb\x5c\x51\x90\x76\x74\x0c\xf6\x0e\x92\x4d\x1f\x47\xfa\xba\xc6\x5b\x07\x59\xfe\xeb\xa9\x3c\x0c\x1e\x17\x60\xb1\x7f\xe7\x5e\x3e\x4f\xc9\x42\x83\xcd\xf7\xc2\x5f\x94\x68\x19\x3e\x70\xf1\x70\x48\x33\x10\x1b\xf5\x2e\x97\xd8\x41\x7f\x82\xaa\x20\xc6\x2d\x77\xdb\xf6\xe6\x27\xde\x20\xbe\x75\xe1\x71\x21\xc1\xda\x46\x8b\x0e\xfd\x09\x05\xc1\xf0\xed\x3b\xb4\xb9\x74\xd5\xfd\x1f\xfe\xf0\xd2\x03\xee\x18\xec\x1a\x38\x36\xe5\xc1\xcc\xc3\x2b\x12\x9c\xdc\xc7\x67\x56\xbe\xd9\xa0\xed\xbc\x68\xa3\xea\xb2\x92\x46\xa3\xd6\xaf\xdf\x34\xbf\xe2\x44\xe5\xfd\x47\x9c\x2d\xd8\x30\x89\x63\xe2\x9d\xb5\xd2\x94\x19\x9d\xea\xf0\x6d\xa8\x6d\xe3\xb6\x14\x0d\x83\x2f\x7c\x4a\x38\xcc\xe5\x5e\xa7\xcc\x83\x30\xb6\xaf\x24\x5e\xe7\x88\x9b\x46\x9b\x1d\x6a\xf1\x2f\xa3\x11\x3e\x3a\xa4\x31\x80\xac\xfd\x9c\xa3\x29\x27\xb5\xb6\xe5\xd3\xa1\x07\xd2\xf4\xc8\x87\xa7\x1e\x32\xec\x75\x10\x73\x79\x6a\x23\x6a\x7e\xcf\xb1\x91\x80\x98\xea\x28\xe8\xe5\xd8\x3a\xe0\xe8\x70\x7f\x07\x00\x00\xff\xff\xd8\xa0\x0f\x0c\x38\x1e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
