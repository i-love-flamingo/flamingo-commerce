// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\xd0\xba\x2f\xdb\x20\xbd\x43\xfb\xe8\xb7\xf5\x6e\x12\x2c\xee\xec\x24\xb6\xef\xfa\x70\x30\x0c\x5a\x9a\xdd\x65\x43\x91\x32\x49\xd9\x16\x8a\xfb\xee\x05\xff\x49\x24\x45\x4a\x4a\x02\x1c\x70\x6d\xef\xe1\xe2\x25\x87\xc3\x21\xe7\xc7\xe1\x6f\x86\x92\x5d\x03\xc5\x96\xd5\x35\xf0\x12\x1e\x76\x50\x32\x8e\x24\x54\x5b\xc4\x65\xf1\xef\xb3\xa2\x28\x8a\x12\x71\x79\x31\x88\xa8\x9e\x95\xee\xa8\x9c\xf0\x0e\x08\x7e\x06\x8e\x41\x5c\x14\xbf\x05\x82\xbb\x48\xa4\x5b\xdd\xeb\xa1\x47\x18\x77\x5d\x76\x5b\x56\xc1\xba\xb2\x3f\xd5\x8f\x8b\xe2\x56\x72\x4c\x8f\xab\xbf\x46\x06\x8c\x06\x3b\xad\x1b\x42\x3e\xa1\xae\x06\x2a\x6f\xe0\xa9\xc5\x1c\xaa\xbd\x84\x5a\x44\xc3\x1f\x3e\x71\x5c\xda\xae\x55\xbf\xc8\xdb\xb6\xae\x11\xef\x62\x59\xdb\xbc\x3a\xfb\xfd\xec\x2c\xdc\x2d\xbf\xdb\x6e\x56\x85\x45\xc9\x5a\x2a\xe3\x19\x37\x4d\x43\x30\x54\x3b\xd7\xad\x85\x45\x5b\xc7\xed\xde\x30\x6d\x63\x24\xf7\x01\x1f\xe4\x16\xf1\x2a\x2b\xf7\x81\x23\x5a\xdd\x31\x89\xc8\x3f\xb1\x3c\xcd\x8a\x6b\x49\x37\x79\x30\x62\x53\xab\xa6\xe4\xb8\x13\x12\x63\xb3\x2f\x19\x23\x80\xe8\xaa\xd7\x8c\x5e\x61\xb4\xed\xba\x31\xbd\x8f\x76\xff\x70\x75\x51\xec\x77\x46\x0b\x50\x89\x65\xb7\xdf\xf5\x28\xd0\xad\x8f\x98\x10\x4c\x8f\x9b\xaa\xe2\x20\x46\xdb\x6c\x5a\xb5\x60\xd3\xf2\xf2\x84\x04\xf0\x48\xe6\x13\x70\xc1\xa8\x45\x70\x1e\xb8\x01\x5e\x51\x55\x61\x89\x19\x45\x64\x87\x24\x1a\x4f\xea\x75\x1a\x2b\x1b\x03\xc2\x5b\x20\x50\xaa\xbe\x11\x00\xa3\x7e\xb3\x34\x20\x8c\x1e\xc5\x1d\xdb\xb4\xf2\xa4\x56\x5f\x2a\x88\xff\xa2\x97\x10\xec\x2f\x8a\xfb\xe3\x4d\x42\xc6\x3f\x5b\xd6\x36\x8c\xaa\x93\x34\x5a\xe0\xd0\x65\x97\x58\xc1\x01\xb5\x44\x6e\x5b\xce\x81\x96\x5d\xa8\x4f\x2a\x9c\x60\x73\x92\x42\x3d\x77\xae\xc7\xaa\x51\x7f\x6e\x0d\x74\xf6\xd4\x06\x8a\x86\xb3\xaa\x2d\x65\xdc\x8c\x45\xb0\x0b\x50\x45\xab\x3c\xf6\x58\x8e\x61\xb8\x0a\xf0\x7b\x87\x5e\xd3\x68\x75\x62\x8f\x5a\xec\x1a\x32\x02\x68\x74\xb6\x7e\x4b\x9d\x5d\xd7\xef\x87\xb0\x6f\x89\x5c\x61\xc0\xda\x79\x83\xd4\xcc\x76\xd8\xfd\x99\x13\xb8\x42\x98\xde\x9e\x70\xd3\x60\x7a\x7c\x77\x85\x30\x09\x3d\x83\xc5\xbb\xba\x91\x5d\xb4\x75\x27\x24\x9c\xe2\xf7\x8c\x4f\x5a\xd7\x8f\x1b\xaf\x4a\xc5\xc7\xfd\x6e\x8d\xf5\x3f\xb3\x2b\x5a\x39\x05\x4b\x07\x2a\xa9\x7e\x90\x76\xd1\x67\xd9\xad\x6b\xc4\xbf\x80\xfc\x44\x50\x09\x81\xa9\x6f\x8b\x67\xc4\x31\xa2\x32\x5e\xc0\x9e\xca\x61\xe6\x77\xaf\x12\x38\x45\xe4\x06\x0e\xa0\x70\x0c\x6b\x0e\x87\x19\x0b\xdc\xe8\x5f\x59\x5b\x9e\x80\xdf\xa2\x67\x4c\x8f\xa3\x90\xd9\x5b\xaa\x51\x0f\x89\xc0\xf2\x60\x5a\xad\x42\xd1\xd6\xce\x6d\x59\xe4\x85\x32\x2a\xfe\x66\x2f\x82\xde\xaf\x6e\xc0\x96\x89\x51\xdc\x45\x84\xb8\xee\x3b\x2c\x49\x02\x50\xee\x30\x7c\xe0\x4c\x64\xe6\x08\x44\x16\xd8\xe4\x9d\xaf\x45\xd2\xe1\xa5\x33\x7d\x72\xeb\x6b\x46\x95\x93\x6e\x80\xe8\xdb\x7e\xd9\xa0\xaf\x1c\x31\xdc\x67\x43\x50\x4c\x9c\x8b\x9e\x57\x58\x64\x85\xe7\xd0\x41\x58\x73\x8a\xcb\xee\xae\x6b\x60\xad\x6e\xb9\x18\xad\xd3\xd1\x73\x08\x79\xdb\x13\xe2\x47\x18\x6d\xe2\x83\x6d\xb7\x66\x0d\xa6\x7b\xd1\x2b\x8e\x04\x37\x50\x23\x4c\x31\x3d\xa6\x64\xd2\xa4\xc6\xe3\x47\x1e\x0b\xb4\x54\x2a\x5a\x83\x15\xee\xcf\x93\x59\x89\xb0\x38\x9c\x1c\x73\xeb\x09\xd9\x71\xb2\xdf\xc4\x78\xaf\xec\x98\x7e\x97\x57\xf7\x93\xc6\x3b\x7b\xac\xfd\x68\x02\x00\x51\x9c\x9a\x54\xeb\x9b\xbc\x40\xb5\x8b\xba\x7b\x7a\x60\x01\x14\x26\x27\xe9\xd7\xb8\x60\x86\x72\x81\xd6\x3b\xf4\xba\x40\x93\x1a\x18\x82\x5a\x51\xec\x8b\xe2\x3d\x61\x48\xe6\x35\x83\x83\x48\x92\x1f\x28\x89\x7b\xef\x6a\x30\x07\x03\xbd\xde\x79\x93\xc5\x61\x59\x8d\xc9\x2e\x45\xc7\x58\x3b\x63\x48\x2c\xfa\x9b\x60\x3f\x70\x10\xfd\xd3\x36\xa7\xaf\x5a\x8d\x22\x4c\x25\xf0\x03\x2a\x47\xee\x88\x68\x9a\x9d\xf7\x88\x24\xbc\xa0\x14\x47\xfa\x15\x91\x16\x32\x8e\x52\x29\x46\x43\xb0\x1c\x03\x3b\x9a\xe5\x41\x8b\xe5\xf1\x9d\x14\xb7\xa6\x3d\xb5\x88\xe0\x03\x1e\x5f\x4e\xe9\x51\x9f\x9d\xb8\xb5\x51\x47\x97\x4c\xd0\xc9\x62\x76\x5a\xb3\x35\x6c\x8c\xae\x1a\xe4\x89\x55\x11\xe2\xc6\xd1\x35\x3d\xe9\xce\xd0\xd5\x91\x83\x70\xdd\x10\x50\x4d\xe2\x4f\xe0\xca\x51\x1a\xeb\xb2\x48\xfb\x73\x92\x69\xf5\xe9\x77\x32\x5a\xee\xfc\xde\x44\xd6\xed\xc2\xe3\x65\xb7\xaf\xd6\x36\xeb\xca\x66\xd9\x4a\x30\xb7\x82\xa4\xe1\x2a\xdc\x65\x8c\x57\x5d\xfd\x26\x26\x43\x46\xe6\x16\x89\xf4\xf9\x81\x78\x9e\xda\xcc\x24\x14\xcb\xf2\x89\xb9\x74\xe2\x2b\x08\xce\xb7\xf0\x9b\xaf\xa6\x37\x5f\x49\xe7\xbe\x81\xcd\x9d\x90\xb0\xe8\x9b\x26\x14\xbe\xf3\x1d\xa1\x08\xee\x2d\xd5\xf2\xc2\xf8\x97\x03\x61\x2f\xf3\x51\xa2\x44\x9c\xeb\x10\xe7\x37\x3a\xec\xfd\xcc\x4a\x94\x48\xb9\x77\x51\xb7\x1d\x23\x30\x87\xea\x0e\xd7\x70\x51\xa8\xff\xf7\x75\xa4\x20\xa7\x5f\x7f\x81\xce\x27\x71\x41\xaa\x1d\x48\xfe\x04\x5d\x40\xba\x95\xc4\x5f\x22\x31\x6f\x2f\xc4\x45\x51\xa3\xe6\x37\x61\x6e\xa2\x7f\x09\x46\x7f\xb8\x41\x2f\x57\x20\x04\x3a\xc2\x82\xc1\x57\xa8\x19\xa4\x42\xb3\x3d\xc1\xd8\xfc\x2b\xd4\x8c\x6c\xf7\xc4\xe3\x35\x4c\x7a\xd4\x6d\x67\x91\x0d\xf3\x68\xb6\x52\xd3\x0a\xb8\x8c\xaa\x3a\x01\x87\x5d\x40\x71\x12\xb4\x4c\xaa\x0c\x28\x34\xa5\x51\xc8\xcd\x1d\x5c\x39\x79\xec\x51\xbe\x50\x97\xaa\xef\x79\xf7\x88\x7f\x8c\xf6\xb4\x54\xe1\x25\xc3\xbf\x82\x8e\x19\x22\x14\x4f\x38\xc5\xc1\x22\x59\x0b\xcb\xc7\x6e\x8b\xea\x06\xe1\xa3\x4e\x78\xd6\xa5\xf7\xc3\x23\x66\x4b\x96\xf9\x68\x58\xdd\x01\x13\x09\x7c\x8a\xd8\x8d\x87\x2f\x59\x5b\x9f\x81\xf8\x06\x86\xf1\xc0\xcb\xdb\x8a\xb0\x8b\xa0\x47\x20\x86\x07\xc6\x5d\xd6\xa5\xae\x33\x4f\x89\x93\xa3\xb1\xf0\xe2\x70\x5c\xff\x64\x5c\x7e\xe4\x95\x8a\x50\x96\x80\x66\xe3\xa2\x77\xc3\x7a\x2e\x4c\xd4\x29\x7c\xc2\x1b\xe0\x47\xb7\xa4\xd5\xfb\x5a\xfd\xc2\x6a\x5c\x24\x89\x22\xae\xae\xc0\x34\xa3\x0a\x8c\xee\xb4\x45\x98\xab\x4c\x95\xc6\xb7\xf2\x1a\xd5\x51\x87\x60\x2d\x2f\x21\x2e\x56\x3e\xc9\xce\xab\x0a\xce\xc7\xd3\x50\x42\xd3\xb4\x91\xcc\xc2\x10\xde\x27\xd1\xf1\xa4\xb1\xb8\x75\xaf\x59\x05\xa6\x47\x02\x1a\x25\x53\x65\x94\x41\x2a\x5b\xff\xe1\xec\x65\x4e\x8d\x13\x99\xab\x5e\x2e\x0d\x4c\xc3\x75\xc1\xd9\x4b\x5c\xa4\xd7\xbf\x73\x87\xd2\x84\x66\x0b\xa7\x67\x24\xbd\x73\x91\x3e\x21\x07\xcc\x85\xa4\x1a\x04\x59\x19\x82\x92\x22\x21\x1e\x71\x55\x11\xb8\x1e\x49\x05\x8c\xdd\x04\xfb\x49\x7b\x04\x22\xad\xb4\xd4\x20\x2b\x23\x39\x40\x62\x69\x63\x99\x6b\x3e\x65\xf3\x80\x51\xbb\x6f\x3f\x63\x3a\x46\x69\xc9\xea\x06\xd1\x6e\x34\x5d\x10\xdb\xb0\x1c\x0b\x44\x32\x0d\x13\xb2\x8f\x7e\x59\xab\x75\x32\x3f\xa9\x87\xc3\x11\x7b\x71\x34\x6d\x8f\x82\x11\x9f\xb1\xd9\xc8\x8c\x14\x05\x1e\x03\x02\xcd\x89\xd1\x29\x74\x40\xad\xeb\xdd\x59\x9b\x93\x40\x35\xef\x3b\xae\xde\x31\xff\x4c\xa4\xc5\x15\x03\x92\x08\x93\x58\xf2\x53\xd8\xeb\xe2\x27\x16\x12\xd3\xe3\xb6\x15\x92\xd5\xc0\x13\x6f\x42\xef\x12\x22\x69\x73\x53\x92\x51\xcc\x9e\x58\x66\x6f\x99\x4b\xc0\x90\x84\x8f\x87\x4b\xcc\xe5\x29\x8a\xc9\x48\x88\x86\x71\x53\x2b\xe1\x5d\xba\xf3\xba\xad\x1f\x63\x5a\x4d\x91\xc1\xb1\x86\xe1\xe4\xc6\x87\x41\xd4\x1a\xa4\x43\x4d\xa9\xd7\xb6\x91\x92\xe3\xc7\x56\x82\x47\x5c\x39\x08\xe0\xcf\x50\xe9\xdb\x72\xb6\x06\xd7\x97\x4b\xb3\x39\x44\x8e\xf4\x2d\xa9\x78\x25\xa7\x1c\x4a\xc2\xc9\x39\xa7\xf8\x8b\x2b\xb7\x66\x8d\xed\x09\x48\x32\xf0\xbb\xaa\x6d\x36\xf3\xba\x19\x24\x66\xca\xb9\xbf\x22\x82\x2b\xed\xc7\x1b\x10\x2d\x71\x8c\xea\x84\x84\x92\x63\xf4\x1d\xe7\x6c\x08\x67\x11\xf7\xee\x05\x6c\x5a\xf2\x13\x44\xe8\xc1\x9a\x07\x29\xbd\xc2\x3f\xab\x51\x65\x44\x71\x91\xc1\x0e\xad\x30\x5b\xe1\x4a\xc8\x7a\xe4\x48\xc1\x24\x1d\x2e\x72\x56\xfe\x7e\x96\x9c\xe6\xb3\xec\x6e\x40\xe5\x5e\xe5\x68\x6b\xb0\x70\x3d\x03\x41\x0c\x37\xa6\x46\xaf\x1b\x42\xd8\x8b\xd7\x5f\x0c\x2c\xa6\xf7\xde\x0e\x1f\x7a\x92\xe5\xf5\x1a\xdd\x8c\x7b\xb7\xda\x4c\x61\x58\x51\x2d\x7b\x4c\x86\x24\x9a\xa9\xdf\xee\xd4\x46\xbb\x11\x3e\xf8\xcd\xe9\x0f\x13\xb0\xf7\x8c\xbb\x33\x76\x6e\x7b\x5c\x28\x2d\x0e\xaa\xaf\x42\x12\x9d\x9b\x5b\x9e\xf1\xda\x04\x40\xf3\x5f\xa8\xd6\xd3\x67\xb4\x0d\x6e\x2d\xd8\xa1\x10\xad\x39\x02\xee\x55\xdf\x4d\xf2\xb6\x80\xba\x91\x5d\x81\x0f\xfd\xb4\x58\x14\xcf\x6a\xec\xb9\xe5\x1f\x4e\x4d\xa2\xd4\xf4\xa0\xa6\xf3\x40\xdf\x97\x9c\xce\x6f\x4f\xec\x45\x28\xad\xf2\x04\x05\x87\xa7\x16\x84\x2c\x5e\x90\x28\x44\x5b\x96\x20\xc4\xa1\x25\xa4\x53\xfc\x55\xfd\x00\x3b\x57\xff\x73\xa0\x81\x99\x4f\x41\xec\x3b\x76\xff\x52\xe4\x01\xea\xdb\x0c\x5e\x3c\x75\x42\x81\xf3\xdf\x7b\x0c\xa4\x2a\x44\x03\x25\x3e\xe0\xd2\x33\xc4\x9c\x17\x61\xdd\xa8\xa4\xf4\x49\x1b\x97\xf0\xb5\xf2\xf7\xbd\x80\x25\x2f\xe7\x1f\x80\x02\x47\x24\xa7\xf1\x68\xba\xa7\x74\x4e\x47\x81\x41\xc4\x2d\x65\x53\x7c\x81\x4e\xe1\x46\xb9\x4f\xcf\x55\xd4\xe6\xb8\xff\x50\x7c\x3c\x48\xa0\x45\x2b\xa0\x52\x90\x2c\x24\x47\x54\x10\x6d\xd5\xb9\xad\x23\xa5\xa3\xd7\xf9\x46\xed\x0d\xfa\xa2\xd0\x67\x54\xea\x94\x31\x50\x28\x59\x21\x4e\xec\x45\xfd\x0b\xb4\x52\x6d\xbc\xf8\x5b\x81\x69\x51\x22\x01\x05\x65\xfe\x6c\x86\x1d\xd8\x3d\xb0\x1f\x55\xfc\x6c\x92\xd0\xe9\x13\x18\xed\xf2\x7f\xd9\x9a\xf5\xb4\xfb\x0a\xa8\x34\x8f\x02\xca\x5e\x64\x62\x89\x86\x9e\x87\xc2\x30\x6f\x4c\x6f\xd6\x38\x4e\xfd\x3f\x23\x99\xcd\x48\x5c\x1e\xf2\xf7\x8b\x79\x99\x7f\xe4\x64\xfe\x97\x73\x16\x9d\xaf\x78\xd7\x6d\x4a\x66\x41\xce\x82\x69\xd3\xca\x3c\xa0\xf7\xba\x7b\x09\xaa\xff\x40\x50\x2f\xc0\xf4\x02\x48\x2f\x40\xf4\x02\x40\x2f\xc0\xf3\x02\x38\x2f\x40\xf3\x02\x30\x2f\xc0\xf2\x02\x28\x2f\x40\xf2\x02\x20\x2f\xc0\xf1\x02\x18\x7f\x0f\x8a\xdd\xab\x80\x45\xb3\x8f\xe4\xf3\x5f\x28\x7e\x6a\xa1\xa7\xa5\x3a\x1f\x52\xb7\x0b\x36\x97\x42\xa7\x2f\x38\xd7\x7b\x9e\xa0\xb0\xc1\x55\xd2\x3f\x3c\x66\x68\x69\x15\x5a\x12\x13\xae\xf8\xb8\xf5\xf4\xb0\x25\x95\x31\x44\xa5\xb0\xf6\xd6\x8d\xc8\x69\xf1\x08\xde\x9d\x7b\xc2\x22\xb2\x7a\xee\x39\xe3\xfc\x63\x63\xd2\xe4\xc2\xbd\x5a\x14\x57\xfa\x91\xcb\x5d\xda\xfe\x83\xd7\x92\x11\xd1\x73\x58\xf6\xc5\x3c\xd8\x11\x9f\xe2\xff\xb1\xae\xf9\xca\x8c\x21\xe0\xec\x53\x6e\x11\xc6\x7b\xdf\xeb\x9d\xc5\x4e\xe9\x05\xb7\x66\xff\xd3\xce\x28\x26\xb2\x9e\x2a\xda\xa9\x3f\x41\xda\x33\x75\xea\xdd\x86\x18\xb4\x2e\x06\x17\xa2\xc5\x9b\x37\xae\xa6\xf6\xe6\xcd\x72\xa0\x2d\xf0\x54\x2c\x39\xe5\x2a\x1d\xd5\xe0\x55\x2a\xba\xab\xcf\xcf\xe7\x76\xf8\xb2\x21\x58\xb1\xb7\xf1\xc1\x07\x15\xab\xb1\xa8\xf3\x07\x1b\x7d\x90\x13\x17\x65\xac\xa9\x53\x25\x8a\x82\x83\x6c\x39\xed\x5d\x69\x1f\x5a\x14\x48\x78\x5f\xae\x50\x1c\x5d\x02\xaf\x85\x3b\x27\xc8\x94\x29\x8a\xa7\x16\xe9\x2f\xea\xed\xc9\x80\xa2\xd4\xdf\x7a\x4b\xfd\x25\x46\x81\xa8\x09\x7c\x47\xfc\x0c\x34\xf2\xc1\x94\x4d\xeb\xdc\x73\x51\xf2\x83\xdd\xb7\x69\x7f\x8e\xbe\x00\x4b\x95\x66\x46\xfe\xb9\xb2\x4c\x23\x76\xd1\xa6\xaa\xee\x98\x52\x33\xb6\x6d\xbf\x5b\xbd\x1d\x1e\x9c\x16\x58\x33\xe5\xdf\x1d\x10\x90\xe0\xbf\x86\xcf\x7f\x03\x3e\xaf\x6f\x2f\xa1\xee\x3f\x9d\xd6\xf6\x7e\x97\xd2\x5f\x9a\x0a\x19\xa5\x9f\x65\xb7\x40\xaf\xb7\x3d\x33\x53\x9c\x6f\xaa\x4a\xfc\x68\xf4\x0b\x8d\x1d\x57\x2a\x72\x6f\x45\x16\x80\x3e\xce\x52\x80\x32\x2a\xc2\xa8\xbc\x46\xc3\x3d\x30\x77\x79\x8f\xd0\x33\x2e\x66\xa5\x4e\xa6\x99\x36\x2a\xda\xac\xe3\x0f\xc2\xde\xc6\x11\x65\x34\x5b\xb2\xec\x93\x9a\x70\xd3\x34\xa4\x1b\x0a\xca\x1f\xb9\xab\x10\xaf\xcb\x45\x9e\x4d\xa8\xbc\x81\x9a\x3d\x43\xaf\xe7\x68\xff\x58\x86\x94\xac\xbe\xc1\xc6\xb5\xff\xb4\xbe\x48\x5f\x88\x0a\x46\xe1\xc7\xba\x25\x12\x37\x04\xfa\x0f\x30\x1d\x3e\x40\xe4\xd1\x10\xb1\x15\x10\xeb\x81\xd1\x99\x86\x51\x49\x29\x45\x3e\x57\xf7\xa3\x6f\xae\x53\x44\xe8\x3e\x85\xe8\xef\xb6\x3d\xbc\x0f\xc5\x5a\x84\xbf\xb3\x86\x85\xe3\x96\x2f\xe1\xf7\xb3\xff\x04\x00\x00\xff\xff\xb9\x9d\xfc\xea\xce\x37\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
