// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cart "flamingo.me/flamingo-commerce/v3/cart/domain/cart"

	decorator "flamingo.me/flamingo-commerce/v3/cart/domain/decorator"

	domain "flamingo.me/flamingo-commerce/v3/sourcing/domain"

	mock "github.com/stretchr/testify/mock"

	productdomain "flamingo.me/flamingo-commerce/v3/product/domain"
)

// SourcingService is an autogenerated mock type for the SourcingService type
type SourcingService struct {
	mock.Mock
}

// AllocateItems provides a mock function with given fields: ctx, decoratedCart
func (_m *SourcingService) AllocateItems(ctx context.Context, decoratedCart *decorator.DecoratedCart) (domain.ItemAllocations, error) {
	ret := _m.Called(ctx, decoratedCart)

	var r0 domain.ItemAllocations
	if rf, ok := ret.Get(0).(func(context.Context, *decorator.DecoratedCart) domain.ItemAllocations); ok {
		r0 = rf(ctx, decoratedCart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ItemAllocations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *decorator.DecoratedCart) error); ok {
		r1 = rf(ctx, decoratedCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableSources provides a mock function with given fields: ctx, product, deliveryInfo, decoratedCart
func (_m *SourcingService) GetAvailableSources(ctx context.Context, product productdomain.BasicProduct, deliveryInfo *cart.DeliveryInfo, decoratedCart *decorator.DecoratedCart) (domain.AvailableSources, error) {
	ret := _m.Called(ctx, product, deliveryInfo, decoratedCart)

	var r0 domain.AvailableSources
	if rf, ok := ret.Get(0).(func(context.Context, productdomain.BasicProduct, *cart.DeliveryInfo, *decorator.DecoratedCart) domain.AvailableSources); ok {
		r0 = rf(ctx, product, deliveryInfo, decoratedCart)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AvailableSources)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, productdomain.BasicProduct, *cart.DeliveryInfo, *decorator.DecoratedCart) error); ok {
		r1 = rf(ctx, product, deliveryInfo, decoratedCart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
