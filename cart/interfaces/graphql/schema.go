// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xcf\x6f\xe4\x28\x16\xbe\xe7\xaf\xa8\xd2\x5e\x6a\xa4\xd6\x4a\xbb\xc7\xba\x25\x55\xe9\x56\x69\x3a\xe9\x74\x52\xd3\x7b\x68\x45\x11\xb1\x5f\x55\xb1\x8d\x8d\x07\x70\x12\x6b\xb5\xff\xfb\x0a\x0c\x36\x3f\x6d\x92\xd5\x8c\xd4\x9a\xcc\x61\x26\x05\x1f\x8f\x07\x7c\x3c\x3e\x1e\x1e\xd1\x35\xb0\xd8\xd0\xaa\x02\x56\xc0\xc3\x16\x0a\xca\x90\x80\x72\x83\x98\x58\xfc\xe7\x6c\xb1\x58\x2c\x0a\xc4\xc4\x7a\x84\xc8\x9a\xa5\xaa\x28\x0d\x78\x0b\x04\x3f\x01\xc3\xc0\xd7\x8b\xef\x0e\x70\xeb\x41\xba\xe5\xbd\x6a\x7a\x84\xb0\xea\xa2\xdb\xd0\x12\x56\xa5\xfe\x29\x7f\xac\x17\x77\x82\xe1\xfa\xb8\xfc\xc5\x73\x20\x68\x6c\xac\x9e\x13\x72\x83\xba\x0a\x6a\x71\x0b\xbf\xb7\x98\x41\xb9\x13\x50\x71\xaf\xf9\xc3\x0d\xc3\x85\xae\x5a\x0e\x83\xbc\x6b\xab\x0a\xb1\xce\xc7\xea\xe2\xe5\xd9\x7f\xcf\xce\xdc\xd9\xb2\xab\xf5\x64\x95\x98\x17\xb4\xad\x85\xdf\xe3\x79\xd3\x10\x0c\xe5\xd6\x54\x2b\x30\x6f\x2b\xbf\xdc\x6a\xa6\x7c\xf4\x70\x9f\xf0\x41\x6c\x10\x2b\x93\xb8\x4f\x0c\xd5\xe5\x9e\x0a\x44\xfe\x85\xc5\x69\x16\xae\x90\xa6\x73\xa7\xc5\x79\x25\x8b\xa2\xed\x4e\x88\x87\x6e\x5f\x50\x4a\x00\xd5\xcb\xc1\x32\x7a\x81\x60\xda\x55\x61\x7c\x1e\xf5\xfc\xe1\x72\xbd\xd8\x6d\x7b\x2b\x50\x0b\x2c\xba\xdd\x76\x60\x81\x2a\x7d\xc4\x84\xe0\xfa\x78\x5e\x96\x0c\x78\x30\xcd\x7d\xa9\x02\x36\x2d\x2b\x4e\x88\x03\xf3\x30\x37\xc0\x38\xad\x35\x83\xd3\xc4\x75\xf8\x8a\xca\x12\x0b\x4c\x6b\x44\xb6\x48\xa0\xb0\x53\xab\xb2\xf7\xb2\xe9\x49\x78\x07\x04\x0a\x59\x17\x10\xd0\xab\xef\x87\x06\x84\xd6\x47\xbe\xa7\xe7\xad\x38\xc9\xd1\x17\x92\xe2\xbf\xa9\x21\x38\xf3\x8b\xfc\x7a\x7f\x92\x50\xbf\x3e\x1b\xda\x36\xb4\x96\x3b\x29\x18\xe0\x58\xa5\x87\x58\xc2\x01\xb5\x44\x6c\x5a\xc6\xa0\x2e\x3a\xd7\x9e\x90\x3c\xc1\xfd\x4e\x72\xed\xec\x4d\x8d\x36\x23\xff\xdc\xf4\xd4\xd9\xd5\x3a\x50\x34\x8c\x96\x6d\x21\xfc\x62\xcc\x9d\x59\x80\xd2\x1b\xe5\x71\xe0\xb2\x4f\xc3\xa5\xc3\xdf\x3d\x7a\x89\xb3\xd5\xc0\x1e\x15\xec\x1a\x12\x00\x14\xec\xad\xef\xb1\xbd\x6b\xea\xed\x10\xf6\x96\xc8\xe5\x06\xac\xad\xd5\x48\xf6\xac\x9b\xdd\x9f\x19\xc0\x15\xc2\xf5\xdd\x09\x37\x0d\xae\x8f\x97\x57\x08\x13\x77\x65\x30\xbf\xac\x1a\xd1\x79\x53\x77\x42\xdc\x18\xfe\x48\xd9\xa4\x77\x43\xbb\x70\x54\x32\x3e\xee\xb6\x2b\xac\xfe\x33\x3b\xa2\xa5\x31\x90\xdb\x50\xa2\x86\x46\x6a\x89\xbe\x8a\x6e\x55\x21\xf6\x03\xc4\x0d\x41\x05\x38\xae\x7e\x58\x3c\x21\x86\x51\x2d\xfc\x01\xec\x6a\x31\xf6\x7c\xf9\x22\x80\xd5\x88\xdc\xc2\x01\x24\x8f\x61\xc5\xe0\x30\xe3\x81\x69\xfd\x8d\xb6\xc5\x09\xd8\x1d\x7a\xc2\xf5\x31\x08\x99\x83\xa7\x8a\xf5\x10\x09\x2c\x0f\x7d\xa9\x36\xc8\xdb\xca\x2c\x5b\x92\x79\x2e\x46\xc6\xdf\xe4\x41\x30\xac\xab\x69\xb0\xa1\x3c\x88\xbb\x88\x10\x53\xbd\xc7\x82\x44\x08\x65\x36\xc3\x27\x46\x79\xa2\x0f\x07\x92\xe1\x93\xb5\xbf\xb2\xd0\xee\xa1\x33\xbd\x73\xab\x6b\x5a\xcb\x45\xba\x05\xa2\x4e\xfb\xbc\x46\xaf\x6c\x31\x9e\x67\x63\x50\x8c\xec\x8b\x41\x57\x68\x66\xb9\xfb\xd0\x50\x58\x69\x8a\x8b\x6e\xdf\x35\xb0\x92\xa7\x9c\xcf\xd6\xe9\xe8\x39\x86\xbc\xcd\x09\xb1\x23\x04\x93\xf8\xa0\xcb\xb5\x5b\xa3\xeb\x56\xf4\xf2\x23\xc1\x2d\x54\x08\xd7\xb8\x3e\xc6\x30\x71\x51\x63\xe9\x23\x4b\x05\x6a\x29\xe5\x8d\x41\x83\x87\xfd\xd4\x8f\x84\x6b\x1e\x4e\xb6\xb9\xb3\x40\xba\x9d\x18\x26\xd1\x9f\x2b\xdd\x66\x98\xe5\xe5\xfd\xa4\xf3\xc6\x1f\xed\x3f\x9a\x20\x80\x17\xa7\x26\xcd\xda\x2e\x67\x98\x36\x51\x77\x57\x1f\xa8\x43\x85\xc9\x4e\x86\x31\x66\xf4\x50\x64\x58\xdd\xa3\x97\x0c\x4b\xb2\xa1\x4b\x6a\x29\xb1\xd7\x8b\x8f\x84\x22\x91\xb6\x0c\x86\x22\x51\x7d\x20\x11\xf7\xd6\xd1\xd0\x6f\x0c\xf4\xb2\xb7\x3a\xf3\xc3\xb2\x6c\x93\x1c\x8a\x8a\xb1\xba\x47\x57\x58\x0c\x27\xc1\x6e\xd4\x20\xea\xa7\x2e\x8e\x1f\xb5\x8a\x45\xb8\x16\xc0\x0e\xa8\x08\x96\xc3\x93\x69\xba\xdf\x23\x12\xf0\x8c\x62\x1a\xe9\x1b\x22\x2d\x84\xd3\x1b\x1f\xcb\xb6\x97\x5c\x41\x27\xb8\x6a\x08\xc8\x22\xfe\x67\xba\x13\xdc\xa9\xcc\x95\x46\xff\x9c\x3c\xf6\x87\xbb\x60\x74\xeb\x6e\xed\xda\xc8\x15\xd0\xec\xd5\x8b\x6e\x57\xae\xf4\x15\x20\x79\xe5\x93\xc0\xd4\x08\xa2\x8e\xcb\xbd\x97\x70\x5e\x56\x0d\xe1\x2d\xca\xdf\x44\x48\xf3\xec\xd9\x51\x61\xfe\x9c\x9d\x51\xb7\x79\xe2\x76\x4e\xdb\xbe\xe2\xb4\x7d\xcb\x61\xfb\xea\xb3\xf6\x95\xda\xe2\x0d\xd2\xe2\x84\xb8\x66\xdf\xf4\xe9\x66\x2f\xbe\x39\xdd\x9c\x20\x2a\x4b\x9e\x29\xfb\x71\x20\xf4\xd9\x2d\xad\x40\x9c\x68\xe9\x96\x15\x88\x31\x2c\xc5\xa0\x5d\x68\xb8\xf7\x99\x16\x28\x72\xff\xdb\x7a\xd5\xba\x0d\xc7\x0c\xca\x3d\xae\x60\xbd\x90\xff\x1e\x92\x1a\xce\x05\x73\xf5\x03\x3a\x5b\x51\x38\xf7\x3e\x07\xf9\x2b\x74\x8e\x02\x94\x88\xbf\x79\x30\x6b\x2e\xf8\x7a\x51\xa1\xe6\x3b\xef\xc3\xe2\xbf\x39\xad\xff\x7e\x8b\x9e\xaf\x80\x73\x74\x84\x8c\xc6\x57\xa8\x19\x51\xae\xdb\x16\xd0\x77\xff\x0a\x35\x81\xef\x16\xdc\x1f\xc3\xe4\x8a\x9a\xe9\x5c\xe8\x65\x0d\x4f\x34\x34\x9b\x36\x68\x39\x5c\x78\x29\x06\x47\x50\x65\x9c\xb7\x11\x8d\x20\xa4\x1c\x77\x5d\x69\x24\x73\x53\x1b\x57\x4c\x6e\x7b\x94\xce\x1a\xc5\x92\x4d\xd6\x81\x60\x6f\xa3\x5d\x5d\xc8\xf0\x92\x10\x03\x4e\xc5\xcc\xa9\xec\x77\x38\x25\x08\x3c\xac\xa6\xe5\x63\xb7\x41\x55\x83\xf0\x51\xa9\xef\x55\x61\xfd\xb0\x54\x42\xce\x30\x1f\x7b\x89\x71\xc0\x44\x00\x9b\x52\x19\x61\xf3\x9c\xb1\x0d\x72\xd8\x76\xd0\x8d\x07\xd6\x25\x62\xe1\x56\x11\xf4\x08\xa4\x17\x25\x7e\x95\x5e\x52\x53\x99\xd6\x67\xd1\xd6\x98\x5b\x71\xd8\x4f\xc6\x51\x26\xbe\xb0\x52\x46\x28\xad\x86\xe6\x04\x80\xc5\x5b\x1c\x9e\x75\xc3\x19\xa7\xd5\x97\xc3\x1f\x55\x12\x37\x6f\x5b\xb5\xb3\x7c\xfe\x8d\xdd\x8b\xb8\x2a\x1d\xd0\x04\xe9\x00\x55\xa9\x33\x02\x57\x89\x94\x81\xed\xe5\x35\xaa\xbc\x0a\x4e\x5b\x56\x80\x9f\x39\xfb\x5d\x74\x56\x8a\x6a\x3e\x9e\xba\x08\xa5\xb7\x02\x4c\x66\x08\x1f\x6e\x74\x7e\xa7\x3e\x5c\x2f\x6f\x3f\x0a\x5c\x1f\x09\x28\x96\x4c\xdd\xe9\x47\x54\x32\x19\xc1\xe8\xf3\x9c\x19\x03\x99\x4b\xa5\xe5\x06\xa6\xf1\xb8\x60\xf4\xd9\xcf\x18\xab\xdf\xa9\x4d\xd9\x87\x66\x4d\xa7\x27\x24\xac\x7d\x11\xdf\x21\x07\xcc\xb8\xa8\x15\x09\x92\x18\x82\xa2\x10\x97\x8f\xb8\x2c\x09\x5c\x07\x28\x47\x7a\xf7\xc1\x7e\xd2\x1f\x8e\x48\x2b\xb4\x34\x48\x62\x04\x03\x88\x0c\x2d\xc4\x5c\xb3\x29\x9f\x47\x8e\xea\x79\xfb\x8c\xeb\x90\xa5\x05\xad\x1a\x54\x77\x41\x77\x4e\x6c\xc3\x22\x04\x78\x98\x86\x72\x31\x44\xbf\xa4\xd7\xea\x66\x39\x69\x87\xc1\x11\x5b\x71\x34\xee\x8f\xa4\x11\x9b\xf1\xb9\xc7\x04\x86\x9c\x15\x03\x02\xcd\x89\xd6\x53\xec\x80\x4a\x25\x5f\x93\x3e\x47\x89\xda\x3f\x36\x98\xcb\xf7\xfc\x9b\x85\x82\x4b\x05\x24\x10\x26\x3e\xf2\xc6\xad\x35\xf1\x13\x73\x81\xeb\xe3\xa6\xe5\x82\x56\xc0\x22\x0f\x14\x97\x11\x48\xdc\xdd\x18\xd2\x8b\xd9\x13\xc3\x1c\x3c\x33\x17\x30\x24\xe0\xcb\xe1\x02\x33\x71\xf2\x62\x32\xe2\xbc\xa1\xac\xbf\xb8\xb3\x2e\x5e\x79\xdd\x56\x8f\xbe\xac\xae\x51\xcf\x63\x45\xc3\xc9\x89\x77\x83\xa8\x76\x48\x85\x9a\x42\x8d\xed\x5c\x08\x86\x1f\x5b\x01\x96\x70\x65\xc0\x81\x3d\x41\xa9\x4e\xcb\xd9\x84\xd0\x90\xbb\x4b\xde\x21\x52\xa2\x2f\x27\xfd\x12\xed\x72\xcc\x4f\x46\xfb\x9c\xd2\x2f\x26\xf7\x97\x74\x76\x10\x20\xd1\xc0\x6f\x52\x88\xc9\x9b\xd7\xed\x88\x98\xc9\x2d\x7e\x43\x04\x97\x6a\x1d\x6f\x81\xb7\xc4\x28\xaa\x13\xe2\x12\x47\xeb\x4b\xc6\xe8\x18\xce\x3c\xed\x3d\x00\xf4\xb5\xe4\x57\xf0\xd8\x83\x95\x0e\x92\x76\xb9\xbd\x57\xbd\xa4\x94\xd4\x22\xa3\x1f\xca\x60\x32\x9d\x18\xc1\x5a\xe2\x48\xd2\x24\x1e\x2e\x52\x5e\x26\x12\x7f\x52\xbd\x68\xe6\x8d\xf7\x52\x2a\x7f\x9b\x8d\xe0\x75\xe0\x3e\xe8\xcc\xc4\xa1\x07\xf7\x4e\xf3\x91\x32\x43\xdb\x03\x65\x55\x1f\x33\xfa\x7f\xe6\x9a\xa9\xe0\xb1\x50\xa7\xae\x99\x93\x48\x82\xe5\x41\x42\xad\xa5\x1e\x12\x2d\x0d\xa3\x05\x70\x6e\xa9\xd4\xd4\xbb\xba\x7e\x14\x1c\xd2\xee\x16\x57\xfe\xe0\xae\x23\x06\xcc\x64\x61\x20\xa5\xa2\x40\x98\xe8\x54\xad\x3e\x0e\x80\x41\xfb\xd5\xc0\x10\x99\x6a\x33\x4d\xbf\x11\xa2\x7d\xa8\x12\xcc\xd7\x0f\xb8\x9f\xfb\x3b\xc6\x34\x1b\x3c\x5f\xdf\x64\x79\x98\x0f\x57\x5a\xe7\xd2\xcf\x0a\xcb\xef\xfa\x6d\x56\xbf\x19\xd5\xf6\x8f\xf5\x3c\xe6\x9f\x29\xcc\x5f\x59\xe1\x29\x75\x67\x45\xd2\x18\x26\x43\xe1\x9d\xe1\xba\x69\xc5\x48\xee\x90\xd7\x3b\x05\xc8\x21\xf6\x9f\xc8\xeb\x0c\x5a\x67\xb0\x3a\x83\xd4\x19\x9c\xce\xa0\x74\x06\xa3\x33\x08\x9d\xc1\xe7\x0c\x3a\x67\xb0\x39\x83\xcc\x19\x5c\xce\xa0\x72\x06\x93\x73\x89\xec\xf1\xd8\x64\x50\xdf\x89\xfc\x4e\xe4\x9f\x9a\xc8\xfa\x61\xd5\x61\xb3\xcd\xe4\xd2\xad\x5a\xcf\x6f\x01\xd5\x6c\xee\x55\xc0\xbc\x0d\x5e\x39\x0f\x44\x4e\xd5\xc6\x7d\x27\x8a\x68\xf8\x69\x09\x15\xf1\x8f\x5b\x1a\x3e\x14\x97\x91\x06\x49\x95\x19\xc1\x66\xdd\x0f\x22\xed\x86\x0b\xc2\xdc\x9c\xc5\x07\xbf\x08\x9e\xd9\x7a\x3e\x45\x66\xef\x0f\xbe\x06\x24\xc6\xf6\x2e\x5a\xdf\x45\xeb\xcf\x25\x5a\xe1\x45\x40\x5d\xaa\x04\xd3\xe2\x6b\x3b\x7e\x20\xe1\xd0\x7d\x9d\xf8\xbf\x00\x96\x21\xd4\xec\x2a\x1a\x7c\x01\xe9\xe7\x76\x82\xee\xaf\x34\xff\x7c\x0f\xce\xcb\x72\x4f\xa5\x89\x55\xf0\xe0\xb3\xdb\x2e\x3f\x8c\xcf\x32\x1f\xe2\x61\xe3\x97\x4c\xf7\xb7\x40\x40\x80\xfd\x66\x3c\xff\xd9\xee\xbc\xbd\x9d\x80\x6a\xf8\xda\x55\xf9\xfb\x7f\x19\xfd\xad\x29\x51\x6f\xf4\xab\xe8\x32\xec\x5a\xd3\x93\xdb\x85\x5a\xad\xbe\x1f\x37\x46\xaf\xd0\x18\xed\xd6\xb3\xf7\x9c\xe0\xcb\xad\x10\x97\xee\xd8\xcb\xf0\xac\xfc\xcf\x98\x3e\xf8\x9f\x5b\x04\xbd\x45\x73\x44\xb1\x0e\xcf\x9b\x86\x74\x63\xf6\xf4\x0b\x33\xe9\xd0\x55\x91\xb5\x40\x11\x93\xb7\x50\xd1\x27\x18\xec\x1c\xf5\x1f\x79\x0b\x9e\xb4\x37\xfa\xb8\xb2\xdf\x91\xdf\x60\xaf\x9f\x63\xef\x0c\x03\xbe\x1a\x05\x50\x5f\x30\x27\x1b\xd4\x3a\x2f\xef\x83\xb9\x8f\xc9\x11\xb9\xdd\xff\x17\x00\x00\xff\xff\x4b\x67\x4a\x02\x51\x34\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
