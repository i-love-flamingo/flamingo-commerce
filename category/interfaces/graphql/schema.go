// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x54\xc1\x4e\xc3\x30\x0c\xbd\xe7\x2b\xdc\xdb\x90\xf8\x82\xde\xa0\x5c\xb8\x01\x43\x5c\xd0\x54\x79\xa9\x59\x2b\xa5\xc9\x48\x9c\x89\x09\xed\xdf\x51\xb3\xb6\x5a\xb6\xb4\x20\x6e\xeb\xf1\xd9\x7e\x7e\x7e\x76\xc3\xfb\x2d\x41\x61\xda\x96\xac\xa4\xb2\x40\xa6\x8d\xb1\xfb\xf2\x8e\xd9\x36\x6b\xcf\xe4\xe0\x5b\x00\x00\x6c\x88\x17\xd2\x54\x94\xc3\x92\x6d\xa3\x37\xd9\x4d\x3e\x57\x16\x6a\x6a\x74\x17\x35\xf7\xc6\x28\x42\x1d\xe2\xa8\x54\x0e\xef\x33\x2c\xd9\x4a\x1c\x84\xf8\x4d\x62\xaf\x30\xea\x14\x10\x85\x6b\x52\x31\xb4\x43\xe5\xc9\xcd\x77\x7d\xeb\x72\xfe\xd6\x3a\xa4\xf6\xfd\x03\xf5\xac\x80\x83\x10\x8d\x66\xb2\x1f\x28\x13\xac\x93\x63\x68\x6c\xcf\x90\x2d\x72\x1d\x23\x28\xb9\xd9\xd1\x68\x6f\x9f\x66\x4d\x6b\x98\xaa\x33\x18\xc7\xdd\xce\xae\xd0\x65\xd3\x0e\x3c\x20\x23\x34\xed\x56\x51\x4b\x9a\xdd\xb5\x0c\x93\x70\xff\xd5\xd2\xf4\x01\xfd\x5b\xac\xf3\xeb\x8e\x38\x3a\xb4\x0e\x58\x0d\xff\x45\x51\x37\xaa\x72\x67\x55\x95\x91\xbe\xf3\xb3\x30\x5e\x73\x0e\x8f\x9a\x67\x56\x10\x84\xa7\x56\xd0\x05\xae\x71\xa0\x72\x49\x68\x65\xfd\x42\xce\x2b\x1e\x56\xd2\xc7\x72\x88\xbf\x8b\xe2\xf1\x46\x2a\x2f\xf9\x94\x28\x8f\xd2\x9f\x8e\x09\x51\xab\x20\x89\xbe\x98\x74\x05\x41\xd9\xb3\xa7\xf1\x80\x93\xb6\x2f\x8e\x16\x0d\x50\x31\xf5\x2c\x76\xb9\x59\x9a\x66\x21\x53\xc5\xb7\xe3\xc0\x83\xc0\x4f\x4f\x8e\x4f\x28\x8f\x78\xd9\x07\x92\x6f\xf0\xe9\x6c\xe2\x20\x7e\x02\x00\x00\xff\xff\x72\x76\xbd\x6a\xe1\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
