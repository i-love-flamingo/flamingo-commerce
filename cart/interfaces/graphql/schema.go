// Code generated for package graphql by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x57\xcd\x6e\xe3\x36\x10\x3e\xaf\x9f\x42\x46\x2e\xbb\xc0\xa2\x0f\xa0\x9b\x63\x17\x0b\xa3\x1b\x37\x4d\xdc\xf6\xb0\x08\x16\x13\x71\x6c\xb3\xa1\x48\x95\x1c\x25\x11\x8a\xbe\x7b\x41\x89\xb2\xf9\x27\x79\x9b\x43\x90\x70\x3e\x0e\xbf\x19\x7e\x33\x43\x51\xd7\x60\xb1\x56\x75\x8d\xba\xc2\xef\x1b\xac\x94\x06\x42\xb6\x06\x4d\xc5\x3f\x8b\xa2\x28\x8a\x0a\x34\x95\x17\x88\xb5\x2c\x7b\x03\x1b\xc1\xdf\x19\x0a\xfe\x8a\x9a\xa3\x29\x8b\x6f\x01\xf2\xec\x70\x33\x40\xba\xe5\xd3\xe2\xdf\xc5\x22\x3c\xd5\x3b\x8c\xb3\xb2\xd8\x6e\x06\xff\x28\x89\x53\xb7\xdd\x94\xc5\x23\x69\x2e\x8f\xc3\xea\x33\x17\x82\xcb\xe3\x8a\x31\x8d\xc6\x44\xc4\xdc\x6a\x0f\x6c\x5a\x5d\x9d\xc0\xa0\x8e\x30\xf7\xa8\x8d\x92\x2e\x82\x69\xde\x67\xba\x16\x78\xf3\x01\x18\xe3\xc4\x95\x04\xb1\x01\x82\xf4\x58\xcf\xb8\x74\x5b\x1a\xe8\x6a\x94\xf4\x88\x02\x2b\x6b\x8d\x79\x44\x66\x17\x1e\x0a\x25\x8f\x66\xaf\x56\x2d\x9d\x6c\x06\x2a\x9b\xbd\xdf\xfb\x30\x6e\x95\x12\x08\x0e\x08\xb1\x3d\x4e\xd4\xcd\x07\x68\x1a\xc1\x91\xad\x55\xdb\x28\xb9\x56\x2c\x0d\xf3\x62\x72\x81\x32\x3c\x40\x2b\x68\xdd\x6a\x8d\xb2\xea\x2e\x1e\x6f\xac\x95\x14\x81\xe0\x84\x75\xe2\x68\x3f\x5a\x9c\x1f\xfb\xe7\x5a\xb5\x92\xca\x62\x2b\x9d\x5e\x1a\xad\x58\x5b\x51\xbc\xcc\x4d\x90\x09\x64\x51\xa0\xe7\x38\xbe\xf0\x03\xad\x41\xb3\xe4\xf0\x55\x68\x77\x14\x8e\x1a\x24\xeb\x79\x79\x89\xbf\xd7\xbc\xc2\x65\x5e\x82\x89\x56\x9d\x26\x9d\x4a\xba\x32\x86\x3b\x89\x84\xc5\xb0\xcd\xa5\x67\xe3\x5b\xa7\x4a\x60\xe2\xd8\xad\x3c\xa8\x89\xa3\xad\xe9\x5c\xa3\xd9\x7b\xd9\x5e\xae\xc4\x9c\x78\xd3\x70\x79\xb4\x4b\x91\xbf\x47\xcf\x34\x60\xdb\xe7\x3e\x73\x5f\xb4\x0a\x6a\xac\x4f\xdf\x95\xec\x3a\x07\x75\x6f\xdc\xc3\xfb\xaa\x1e\x2e\x3c\x8b\x1a\x8e\xd9\xe1\x94\x7d\xf0\xb2\xe1\xa6\xb2\x4e\x66\x5d\xd5\x3b\x25\x6d\x00\x0f\x28\xfa\x4b\xfc\xa1\x3d\xff\x77\x83\x97\x96\x3f\x39\x9d\xc6\x3d\xf9\x1c\x79\xe1\x5d\x07\x9f\xc0\x38\xe9\x9c\xd5\x3f\xab\x12\x7b\xf7\x63\x87\x56\x0c\xc3\xda\x7f\x53\xfa\xe5\x20\xd4\x5b\xb8\x5a\x23\x9d\x14\x0b\xd7\x2a\xd0\x9a\xdb\xe6\xe2\x2f\x8e\xd2\xfb\xaa\x2a\xc8\x74\xae\x4d\x64\x76\x7b\x0c\xd7\xc8\xf6\xbc\xc6\xb2\xb0\xbf\x07\x99\x60\xd4\x1c\x3f\xbe\xe0\xa5\xab\x7c\x0a\x8f\x0d\x7b\xec\x2f\xd8\x59\x39\x3b\xc0\xd3\xd0\x81\x3c\x88\x97\x07\x53\x16\x35\x34\xdf\x4c\x0f\x7d\xfa\xcb\x28\xf9\xd3\x03\xbc\xdd\xa1\x31\x70\xc4\xf9\x34\x8e\x31\x14\x2e\x97\x16\x99\xb0\xba\x32\x69\x5a\x83\xb7\xd1\x54\x0a\x3a\x58\x78\x3f\x59\x3a\x7e\x05\x8e\x4c\x38\x89\x88\x4a\x63\xd5\x32\x55\x2c\x34\x5b\x6a\x6c\x5e\xdd\xf3\x0d\xd1\x63\xc5\xd3\xee\x71\xee\x1a\xae\xc1\x07\xce\xfb\x95\xbc\x7b\xdf\xab\x3f\xf6\xdf\x09\xb5\x04\xf1\x80\x07\xb4\x43\x28\xca\x41\x0d\xfa\x05\xa9\x11\x50\xe1\x3a\xd1\xfd\x2b\x68\x0e\x92\xee\x7a\xcc\x7d\x1e\xe3\x58\xee\xa0\x8e\x0c\x46\xb5\xba\xc2\x78\x8c\xfe\x4d\x9d\x37\xac\xe6\x25\x9a\x22\xfe\x00\xd1\x62\x82\xf9\xc1\xaa\x18\xfb\xc2\x2a\x3e\x34\x86\x3b\xb5\x0d\x51\x70\x79\x14\xd8\xdf\x6a\xb6\x7b\x2f\x63\x54\x46\x4f\x03\x46\xab\xb7\x6b\x6e\x46\x48\xd6\xc7\x8d\x43\xec\xe1\x1d\xfd\xfd\xfd\xff\xcb\x79\xc5\x2c\x17\x79\xcd\xb8\x02\x73\xb2\x79\x05\x2a\x8b\xcc\x8f\x7f\x7f\x07\xae\x0d\xc9\xfe\xb2\x27\x31\x02\xb2\x90\x50\x77\x9c\x31\x81\xbb\x04\xe5\x63\x5c\xc9\xce\xf2\x31\x20\x5a\x72\x5d\x75\x12\x43\x1a\x31\x13\x5a\x8a\xd9\xe9\x39\xce\x17\x2d\xba\xbc\x7d\xe5\x32\x55\x63\xa5\xea\x06\x64\x97\x1c\x17\x8c\x09\x4e\x29\x20\xc2\x34\xca\xd0\x50\x6e\x73\xac\x81\xae\x65\x48\xe3\x91\x0f\x8f\xd2\xe9\x0c\xf5\xbd\x4c\x5f\xe1\x3c\x60\x12\x47\xc1\x8d\xa1\xc0\xe6\xa4\xe4\x9c\x3a\xb0\x06\x2e\x66\x38\x67\x85\x3a\x7c\x65\x38\x9d\x5e\x1f\x21\x4d\x0f\xb7\x53\x8d\x80\x8b\x18\x79\x1f\x5a\xc7\x3e\xc9\x0d\x71\x79\x5c\xb7\x86\x54\x8d\x3a\xf3\x5d\xf2\x73\x06\x92\xa7\x9b\x43\x46\xbd\x79\x26\xcc\x33\xb3\xf1\xe9\x0a\x84\xbf\x1e\x6e\xb9\xa6\x53\xd4\x7b\xc1\x98\x46\xe9\xe1\x1b\x40\x77\x79\xe3\xae\xad\x9f\xe3\x17\x89\x84\x41\xc7\xbd\x0c\xbd\xc4\xdb\x61\x21\x59\x3f\xb5\x8b\xdf\xda\xcb\xe3\xb9\xf2\x49\x96\x13\x1f\xb8\x89\x87\x3b\x57\x99\xb1\x93\x15\x63\x7b\x65\x77\x7c\x4c\xa6\xcf\x76\xb3\xfc\x7c\x9e\x11\x9f\xcf\x2f\xa7\x60\xec\x7c\x9a\x23\xf0\x5f\x00\x00\x00\xff\xff\xba\xe6\x99\xf2\x81\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3937, mode: os.FileMode(420), modTime: time.Unix(1567424663, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
