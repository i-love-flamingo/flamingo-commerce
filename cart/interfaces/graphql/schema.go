// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcf\x6e\xdb\x38\x13\x3f\x7f\x7e\x0a\x05\xbd\xe4\x03\x8a\x7d\x00\xdf\x1c\x7b\x51\x18\xdb\xb8\x69\xeb\xee\x1e\x8a\x62\x31\x11\xc7\x32\xb7\x14\xa9\x25\x47\x49\x85\x22\xef\xbe\x20\x45\xc9\x24\x45\xc9\x59\x6c\x0e\x41\xc4\xf9\x71\xfe\x70\x66\x7e\x1c\x86\xba\x06\x8b\xad\xaa\x6b\xd4\x25\xfe\xb9\xc3\x52\x69\x20\x64\x5b\xd0\x54\xfc\x5c\x15\x45\x51\x94\xa0\x69\x7d\x81\x58\xc9\x8d\x13\xb0\x01\xbc\x43\xc1\x9f\x50\x73\x34\xeb\xe2\x6b\x04\xdc\x25\x90\xee\xe6\xdb\xea\x65\xb5\x8a\x8d\x06\xb6\x38\x5b\x17\xfb\x5d\xaf\x1e\x25\x71\xea\xf6\xbb\x75\xf1\x99\x34\x97\x55\xbf\xfa\xc8\x85\xe0\xb2\xda\x30\xa6\xd1\x98\xc4\x2f\xbf\xea\x80\x4d\xab\xcb\x33\x18\xd4\x09\xe6\x01\xb5\x51\xd2\x07\x30\xef\xf7\xe8\xae\x05\x02\x63\x9c\xb8\x92\x20\x76\x40\x30\x35\x1a\x08\x7b\x2f\xdf\xfc\xaf\x81\xae\x46\x49\x9f\x51\x60\x69\xa5\xa9\x17\x89\xd8\x07\x87\x42\xc9\xca\x1c\xd5\xa6\xa5\xb3\x8d\xbf\xb4\x67\xf7\xc5\x05\x71\xa7\x94\x40\xf0\x40\x48\xe5\xe9\x31\x41\xd3\x08\x8e\x6c\xab\xda\x46\xc9\xad\x62\xd3\x10\x2f\x22\x1f\x24\xc3\x13\xb4\x82\xb6\xad\xd6\x28\xcb\x2e\xd6\x47\x8a\x40\x70\xc2\x7a\xa2\xe7\x38\x48\xbc\x1a\xfb\xe7\x56\xb5\x92\xd6\xc5\x5e\xfa\x4a\x69\xb4\x62\x6d\x49\xe9\x32\x37\xd1\x31\x20\x4b\xa2\xac\x34\x48\xe6\xf4\x07\xa7\xf7\xa0\x79\x89\x51\x90\xef\xf8\x89\xb6\xa0\xd9\xc4\xb5\x4d\x2c\xf7\x0e\x56\x38\xa6\xf7\xae\xb3\xf1\xdf\xfa\x3a\x70\x1f\x63\xd8\xff\x4f\x32\x36\xec\x49\x75\x0c\x87\xeb\xb7\xcd\xd4\xf7\xa4\x11\x7c\xc1\x0f\xa6\x67\x8c\x25\x8d\xb6\xcf\x25\x60\x17\x4a\xe7\xed\x67\xcd\xee\xe5\x49\xcd\x98\xb6\xa2\xb1\xff\xb3\x99\xdf\x5f\x92\x6e\xce\xbc\x69\xb8\xac\xec\x52\xa2\xef\x73\x20\xea\xb1\xed\xa3\xcb\xe9\x3b\xad\xa2\x06\x76\x89\xbd\x92\x77\xaf\xa0\x76\xc2\x23\xfc\xd8\xd4\x7d\x49\x65\x51\xbd\x99\x03\xce\xc9\x7b\x2d\x3b\x6e\x4a\xab\x64\x51\x55\x7d\x50\xd2\x06\xf0\x09\x85\x4b\xe2\xab\xf6\xfc\xdb\x0d\xc1\xb1\xfc\xc1\xe9\x3c\xec\xc9\x9f\x51\x10\xde\x75\xf0\x19\x8c\x2f\x9d\xb1\xbf\x16\xab\xc4\xe6\x7e\x60\xff\xb0\x27\xdc\xca\xb3\xd2\xdf\x4f\x42\x3d\xc7\xab\x35\xd2\x59\xb1\x78\xad\x04\xad\xb9\xe5\xae\x70\x71\x28\xbd\xf7\xaa\x84\x0c\x31\xee\x12\xb1\xdf\x63\xb8\x46\x76\xe4\x35\xae\x0b\xfb\x7b\x68\xc2\x98\x7b\x6f\xbf\x63\x17\xf6\x6f\x44\x88\x11\xf2\x37\xec\xa2\x9e\x7d\x93\x40\x82\x73\x30\xeb\xa2\x86\xe6\xab\x71\xd0\x6f\x7f\x19\x25\x7f\xf9\x04\xcf\xf7\x68\x0c\x54\xb8\x7c\x8c\x43\x0c\x85\x3f\x4b\x8b\x9c\x78\x75\xe5\x1a\x6b\x0d\xde\x25\x57\x5e\xc4\x91\x71\x7e\xb2\xee\x84\x1d\x38\x78\xc2\x49\x24\xae\x34\xb6\x5a\xe6\x9a\x85\x16\x5b\xcd\xf3\x70\xae\x06\x03\x1a\x1e\xc5\x33\x6e\xa6\xb0\x61\x24\xc8\x51\x4f\x82\x9d\x63\xbd\x04\x36\x0e\x34\x75\x03\xbc\x92\x3d\xdd\xc7\x15\x3b\x5e\x8a\x6b\xfb\x19\x8a\x04\x3c\xa2\x70\xab\x45\x2a\xf2\xf1\x0f\xc2\xdc\x55\xd5\xa7\x3e\xbb\x9b\x9b\x80\x28\x92\xec\x1a\xa5\xe9\x83\x66\xb6\x87\xec\x8f\xbb\x39\x97\xef\x97\x20\xc9\x7c\x4a\xc6\x23\x09\xfb\x1b\x39\x4a\xa7\x5b\xc9\xab\x0f\xb5\x86\x23\xda\x0f\x42\x2d\x41\x7c\xc2\x13\xda\xa1\x21\x29\xa9\x1a\xf4\x77\xa4\x46\x40\x89\xdb\x09\x8d\x3c\x81\xe6\x20\xe9\xde\x61\x1e\xf2\x18\xef\xe5\x01\xea\x44\x60\x54\xab\x4b\x4c\x87\x9e\xbf\xa9\x0b\xa6\x8b\xe5\x8e\x9f\x22\x7e\x07\xd1\xe2\x04\xf3\x4a\x92\x19\x68\x76\x93\x1a\x4d\xe1\x3e\xbd\x7d\x14\x5c\x56\x02\x5d\x95\x64\x2f\xc3\x9b\x14\x95\x69\xcf\x1e\xa3\xd5\xf3\x35\x35\x03\x24\xab\xe3\x8d\x47\x1c\xe1\x07\x86\xfb\xdd\xf7\x5c\xbf\xf6\x7c\xe4\xcb\xe2\x09\x28\xa8\xef\x7c\xa5\x9f\xb8\x36\x24\x5d\x32\x67\x31\x02\xb2\x90\xb8\xae\x38\x63\x02\x0f\x13\x54\x34\xb0\xf6\x0c\xb7\xe8\x8f\x01\xd1\x92\xbf\x84\x66\x31\xa4\x11\x33\xa1\x4d\x31\x07\xbd\xe4\xf3\xa5\xd6\xfc\xb9\xbd\xe7\x72\x5a\x6d\xa5\xaa\x1b\x90\xdd\xc4\x5c\xc4\x51\x9c\xa6\x80\x04\xd3\x28\x43\x23\x8b\xcd\x7a\x0d\x74\xed\x84\x34\x56\x3c\xe0\xc3\xbc\x3f\x96\x5a\xf5\x15\x9f\x7b\xcc\x44\x51\x94\x31\x14\xd8\x9c\x95\x5c\xaa\x0e\xac\x81\x8b\x05\x9f\xb3\x85\xda\xbf\xf8\x7c\x9d\x5e\xbf\x71\x1b\x07\xb7\x43\x00\x01\x17\x29\xf2\x21\x96\x0e\x3c\xc8\x0d\x71\x59\x6d\x5b\x43\xaa\x46\x9d\x79\x25\xfe\x9a\x81\xe4\xdd\xcd\x21\x13\xee\x5d\x08\x73\xf4\x6c\x98\xf4\x81\xf0\xc3\xe9\x8e\x6b\x3a\x27\xdc\x0a\xc6\x34\x4a\xf7\x8f\x32\xdd\xe5\x85\x87\xb6\x7e\x4c\x07\x38\x09\x7d\x1d\xbb\x32\x5c\x3c\xf8\x98\x0c\x8b\x9f\x3d\xcd\x94\x2e\xae\x0d\x91\xe6\x8f\x2d\xd9\x1e\xb8\x87\xc6\x57\x9b\x41\xfd\x84\xcc\xdd\x78\x21\xb9\x67\xb5\x8f\x0f\xcf\xd9\x49\x75\x6e\xca\xc9\x13\x64\x3c\x9d\x65\x4d\x5e\xde\xcc\x59\x9b\x4b\x33\xc8\xf0\x08\x9d\x75\x76\x1c\x22\xb2\xe4\x6d\x0b\x5f\x72\x59\x4d\xc5\x2f\xab\x95\xbd\x86\x25\x73\x01\x14\x1f\xdb\xcb\x2b\x2f\xf2\x63\x3d\xf3\x5f\x9e\x89\x86\x7b\xcf\x89\xa9\x92\x0d\x63\x47\x65\x77\xdc\x4e\xee\xf5\xfd\xee\xe6\xed\xe5\xf6\x7d\x5b\x5c\x7d\x50\x27\x1e\x44\x76\x76\x28\x90\x30\x9c\xa3\xaf\x3f\xd0\xaf\xeb\xb3\x13\xcc\xad\xad\x16\x5b\x57\xce\xdf\xff\xa4\xf4\x4b\x63\x1b\xcb\x2a\xfd\x48\xdd\x2b\xf4\x06\xc7\xb3\x60\xe2\x65\xf5\x4f\x00\x00\x00\xff\xff\xb2\xe7\xb9\x30\x8f\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
