// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x30\x3e\x17\x4e\x70\x5c\x3f\x40\xee\x1c\x37\x3d\x27\x68\xd2\xe6\xd4\x39\xdd\x05\x8a\x22\x18\x4b\x23\x89\x28\x45\x6a\x49\x2a\x8d\xb6\xe8\x5b\xed\x13\xec\x93\x2d\x86\xa4\x64\xfd\xda\xc9\xb6\x58\xa0\x40\x03\xb4\x40\x38\xbf\x9c\xf9\xe6\x87\x0a\x97\x16\x75\x02\x11\xb2\x8d\xca\x73\xd4\x11\xde\xdf\x6a\x15\x97\x91\x65\x5f\x66\x8c\x31\x66\xab\x02\xcf\xd9\xd6\x6a\x2e\xd3\x13\x77\x92\x83\xfe\x84\xf6\x56\x40\x84\x1b\x15\xf7\x88\x3c\x46\x69\x79\xc2\x51\xf7\x84\x30\xe6\x70\x3e\x30\x72\x7f\x43\xe7\x27\x4b\xc7\x53\x68\x1e\xe1\x08\xcf\x2d\x9d\x5f\xc9\x44\x05\x3e\xcb\xad\xe8\x99\x8d\xc0\x62\xaa\x34\x47\x33\x22\xbf\x69\x88\x9e\x39\x46\x13\x69\x5e\x58\xae\x64\x57\x8b\xc9\x94\xb6\x2f\xa7\xa8\x39\xda\xf1\x1b\x58\xf0\x0c\x42\x55\x20\x6c\x35\xc2\x73\xed\x29\x9e\x0d\xac\xd5\x7c\x57\xda\x51\x5f\xd7\x0d\xd1\x33\xef\x20\x4e\x47\x19\x2f\x1c\xe1\x64\xf6\x75\x36\x9b\xcf\xe7\xb3\x35\x33\x3c\x2f\x04\xb2\xc2\xd3\x97\xcc\x66\x60\x59\x06\x86\x49\xc5\x1e\x40\x73\xd8\x09\x6c\xd9\x66\x20\x63\x66\x33\xd4\x98\x28\x8d\xc4\xa4\x51\x00\xdd\x9a\x59\xc5\x14\x51\x6a\x5d\xc6\x59\x20\x20\x0c\xdd\xd8\x3a\xab\x35\x64\xdc\x2f\x39\x4a\x6b\x7e\xc2\xe9\x07\x87\x53\xa4\x64\xc2\xd3\x52\x3b\xd8\x04\x20\xb0\x18\x13\x2e\xd1\x10\x6e\x58\xa1\x8c\xe1\x44\x74\xe0\xa2\xfb\x19\xa6\x12\x06\x35\xf3\x8a\x5d\x59\xa6\xa4\xa8\x48\x95\x05\x2e\xcd\x8c\xcb\x44\xe9\xdc\x83\x0c\x76\xaa\xb4\x8d\x62\xa7\x83\x60\xb3\x2b\x1b\xd0\x42\x64\xf9\x03\xd6\x24\xc6\xad\x41\x91\xac\x0e\x60\x71\xd3\x72\xf9\x27\x22\x7f\x10\x44\x36\xe8\xd9\xa2\xc0\xc8\xc1\xe8\x9c\x7d\x18\x88\xbd\x1f\xb0\x9d\x7c\x7c\x1e\xa2\xe5\x00\x50\x86\x29\x89\x84\xd9\x1c\xa4\x43\x69\xa4\xd1\xe2\x1e\x8b\xae\x83\xc2\xa0\x12\x1e\x78\x8c\x66\xc5\xd6\x42\xb0\x18\x2c\xf8\xbe\x49\x45\xa1\x9c\xbe\xae\x95\x19\xb5\x59\xa9\xac\x2b\x19\xfa\xd7\xd6\xe6\x4a\x04\x84\x51\x4d\x89\xb0\x61\x89\x70\xfb\xe7\x1f\x86\x51\xa9\x71\x99\x1a\x76\xea\x5b\x73\xe3\x24\xf5\xeb\x0c\x99\x81\xbc\xab\xfb\xec\x40\xa1\xac\x9d\x8b\xef\xbd\x8a\x6f\xa9\x94\xf9\x5d\x86\xfd\x72\xa1\x80\x92\x47\x8b\xb6\x37\x8b\x7d\x57\xd8\x22\xfa\x3b\x2f\xc2\x1d\x6e\xba\xf2\x0b\x96\x28\xed\x34\xd4\x89\xea\x19\x98\xff\x2c\xd2\x7f\xba\x48\x0f\xe5\x19\x22\x5b\x82\xa8\x93\x35\xdf\x17\xf5\x20\xb3\x3d\xec\x6c\xa6\x31\xef\x31\x0e\x0f\xc0\x45\x67\xfe\xec\x47\xcd\xfc\xbb\x34\x0f\xf2\xe1\x01\x25\x47\x19\x39\x23\x05\x6a\x5b\x51\x21\x43\x14\xa1\x31\xf5\xfd\xda\x5d\x43\xc0\x0e\x85\x61\x08\x86\x8b\xca\x7b\x01\xfb\x72\x3a\xee\xcb\x7a\x82\xf9\x39\xed\x6c\xcd\x52\xad\xca\xc2\x8d\xdb\x26\x53\x2b\x76\xb9\x4a\x57\x6c\x61\xf8\xef\xb8\x98\xaa\xfc\xa1\xdd\x50\xdb\xd1\x20\x3f\xee\xa2\xbd\x94\x51\xcf\x0b\x73\x9f\x77\x06\xbf\x2f\x59\x6a\x97\xb5\x3f\xb5\x3b\x37\x8b\x25\x5b\x5c\xd3\x7f\xbf\x5e\x2f\x7c\xbc\x54\xf1\x8c\x4c\xdd\xbf\x75\xdc\x1f\xdd\xc5\x2f\xc1\x54\x2f\xac\x7a\x11\xd2\xd3\xce\x58\xcc\x4d\x21\xa0\xda\x3b\x30\x02\x2b\xe8\xcf\x80\x27\x34\xc8\xbf\x1d\xac\x07\x10\x65\x8b\xcb\xe5\x4d\x86\xbb\xbb\x78\xc1\x58\x16\x9f\x9e\xb8\x10\x98\xe0\xd2\x88\x03\xc6\x82\x1d\x6b\x64\x93\xaa\xb6\x24\x10\x32\x3d\xf7\xa9\x3a\x50\xa3\xcd\xa2\xe7\x13\x9f\x83\x8d\x32\xb7\x1a\xd2\x5c\x75\xfa\x56\x4e\xc5\x4b\x2c\x50\xc6\x5c\xa6\x34\xaa\x78\xe2\xdf\x1c\x34\x7c\x07\xd9\x60\x4a\xd3\xa8\x5c\x32\x6e\x99\xa5\x46\x49\x79\xe5\x32\x12\x65\x8c\xed\x81\x10\xfa\x2f\x59\xdd\xa1\x69\x9b\x46\x16\x95\x5a\x23\xa9\x6a\x79\x50\x5f\x26\x88\x3f\x27\x24\x61\x46\x9e\x2c\x5d\xfe\xae\x06\x41\x20\x93\xa5\x8c\x51\x8b\x8a\x6e\x78\x04\x56\xc7\xcc\x84\x5c\x4e\x8e\x36\xf2\x81\x3a\xb1\xcb\xac\xc3\x4d\x03\x28\xbf\x84\xc4\x14\xb1\x56\x18\x44\x35\x00\x3c\xca\x32\x7f\x2e\x26\x82\x5f\xce\xf6\x94\x66\xb7\xb5\xbb\xe4\xe3\x23\x44\xad\x46\xc0\xfe\xcd\x40\x88\xba\xa5\x77\x65\xda\xb8\x27\x0b\xeb\xcd\xdd\xd5\xfb\xcb\xd0\x6b\x1a\xae\xb0\xf2\xd8\x0c\xe4\x48\x47\x3e\x63\xf8\xc8\x8d\x35\xcb\x11\x1c\x7e\x83\x2b\x37\xeb\xbb\xcd\x7f\xbd\x27\x6f\x54\xc3\xf5\x9d\x4d\xad\xbc\xad\x37\x6f\xef\xbd\x39\x4a\xf0\x2f\x1a\x8a\x02\x43\x3b\x0d\xe8\x37\x2c\x07\x2e\xeb\xfd\xa2\x72\x6f\x77\x52\xbf\x5f\x38\x26\xdf\x44\x0d\x47\x03\x2e\x2e\xa7\xb7\x93\xea\x0e\xc1\xa0\x0e\x2b\x82\x10\xe7\x8c\x8d\x74\xe9\x1e\xb3\xef\xcd\xb4\x81\x8c\xb4\x09\xf7\x54\xf4\x72\x53\x3e\x3a\x49\xef\xdd\x27\xac\x3e\x2b\x1d\x1b\xb2\xeb\x7e\x3e\x04\xec\x7b\x1b\x61\x83\x19\x35\xc3\xcd\x31\x3b\xb5\xf4\x97\xf6\x9e\xc7\x7c\x9b\x1b\x67\xdd\x2f\x7d\x4e\x04\x41\x4b\x2e\xd3\xf3\x83\x22\x97\x9e\xc9\x09\x7d\x9d\x1d\x76\x65\xaf\x7f\x72\xc5\x8e\x31\x81\x52\x74\x9b\x16\x8f\x42\x9b\xe6\xe6\x25\x37\x91\x2a\xa5\xc5\xf8\x9c\x5d\x28\x25\x10\x64\x90\x6b\x11\xc6\x44\x6b\xfa\x1d\x3e\xda\xde\x86\xc9\xe5\xad\xe2\xd2\x9a\x3b\xb5\x2d\x90\xfa\xe5\x2b\xa1\xc0\xd6\x6f\xe3\xc7\x69\x22\xbd\x62\x9c\xba\xf1\xe5\x79\xe3\xc9\xbe\x8f\x6d\x33\xf5\xd9\xb7\x6c\x17\xa1\xf0\x35\x8a\x15\x4e\xb9\x8b\x34\xc6\x47\x12\xd9\x0e\x75\xbb\x45\x39\xa1\xb0\x9d\x06\xd6\x16\xe7\x92\x21\x2d\x26\x37\x5c\xa0\x59\xcb\xf8\x46\xe9\xf0\xa2\x98\x78\xde\xb8\x39\x7e\x48\x9d\xef\x88\x51\xc5\x22\x90\x6c\x87\x5e\x7d\xb8\x87\xd2\x2c\x27\x43\xf3\xc3\xb9\x9c\xc4\x49\x3b\x6e\xf5\xf2\x51\x1a\xab\x72\xd4\xff\xa1\xe5\xa1\xf7\xfe\xc8\x40\x4a\x14\xc3\x5d\x5b\xa8\x08\x44\x77\x90\x4c\x95\x62\xcc\xeb\x5a\x74\xe5\x3f\x2c\x7e\xc7\x72\x65\x31\x0f\x1b\x6b\x8a\xd6\x1d\x9d\x96\x06\xd2\xbd\x8d\xb3\xa9\x67\x96\x13\x3d\xe2\x01\xf1\x74\x2a\xc2\xfd\x74\x41\x9a\xe3\x9d\x27\xb5\x8f\x83\x0f\x7d\xee\xf0\x56\xeb\x1f\x6b\x4c\x90\x52\xf7\x94\xc8\xec\x9f\x44\x75\x78\xea\x83\xd7\x58\xd1\x2e\xdb\x34\xaa\xfe\xeb\x6a\xe4\x0d\x50\x53\x03\x77\x06\xa6\x39\x3a\xfd\x84\x55\x3b\x88\xa1\xa8\xeb\x50\x4f\xf2\x4d\x1b\x19\x88\x9a\x8b\xea\x35\x56\xa4\xa0\xed\xf7\xd9\x31\x4f\x8f\x87\x66\x72\x3d\xa6\x93\xeb\xe1\x86\x3a\xb2\xb4\x96\x92\xdb\x21\x7e\x5d\x0d\x76\x82\x3c\xe9\x4c\x77\x36\x4d\x7a\x54\x80\xcd\xba\x27\x12\xf2\x01\x8f\xc6\xd1\x75\xb1\x6b\xe3\x48\xf5\xb6\xba\xd3\x44\xfd\x1f\xe9\xd7\x47\xda\xb5\x5f\x2e\x2e\xc0\x60\xa7\x17\xef\x8f\xd7\x39\x09\x4e\x10\xff\x2f\x79\xa3\x6f\x7a\xa4\x84\xaf\x1b\x79\x01\x3c\x95\xef\x4a\x81\x03\xc0\xc7\x28\x2b\x6a\xa5\xb5\xb0\xe9\xca\xfe\xeb\xe9\xe3\xc1\x17\x2c\x3c\x6e\x04\x18\xd3\x29\xcc\xa9\x3f\x41\x20\xe8\x28\x7b\x87\xa6\x14\xb6\x99\xed\xfe\x0f\x17\x23\x90\x0e\xfe\x26\x10\x61\x97\xee\xd5\xdc\xbf\x22\xc2\xc9\xc7\xf0\x84\x2a\xd3\x14\xcd\xe0\xb5\x1a\x58\xb7\x0d\x35\x28\x35\xee\xfc\xa6\xfb\x85\x26\x30\xef\x3f\xd0\x64\x60\xfc\x96\x8d\xb1\x33\xd6\x1b\xdc\x85\x56\xb9\xf2\xdf\x7d\xfa\x3a\x6e\x6b\xd2\x34\xe4\xfc\x67\x82\xc3\x1d\xdc\xf1\xd4\x71\xe0\xda\x8c\x65\xc4\xf1\x1c\x31\xd3\x29\xae\x43\x85\xfd\x75\x36\xc3\x47\x8b\x34\xe2\x49\xdb\xff\x4a\xd4\xf5\x16\xd6\xd7\x7c\x3a\xf5\xf8\x59\x1e\xf9\xa8\x34\xd2\x02\x47\x0d\x84\x58\x9e\x9a\x80\x9a\xdf\x4a\xec\x04\x20\x84\x3a\x10\x46\x3b\x6b\x1b\x70\x74\xb9\xbf\x02\x00\x00\xff\xff\xe9\x9c\x6d\x55\x44\x1d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
