// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x51\x6f\xe3\x36\x0c\x7e\x5e\x81\xfe\x07\x1d\xee\xa5\x03\xf6\x0b\xfc\xd6\xa6\xbb\xa1\xd8\xf5\xae\x5b\xb2\xbd\x1c\x86\x81\x91\x99\x94\x88\x2c\x19\x12\xdd\xd6\x18\xf6\xdf\x07\xcb\x96\x6d\xc9\x8a\x9b\x3d\x0e\x58\x9e\x62\xf2\x23\x29\x51\xe4\x47\x92\x66\xb4\x07\x90\x28\x36\xa6\xaa\xd0\x4a\xfc\xf3\xc9\x9a\xb2\x91\x2c\xfe\xba\xbe\x12\x42\x88\x3d\x38\xbc\x07\x86\x62\x42\xdc\x81\x23\x39\xc0\x3a\xd5\x87\x1e\xc9\x08\x0e\x6d\x82\x1d\x60\xbb\x51\x37\x80\x5d\x8d\x92\x0e\x24\x81\xc9\x68\xb7\x34\xd8\x46\xfa\xc1\x88\xdc\x16\x14\xc2\x5e\x61\x21\xee\x8c\x51\x08\x3a\xb8\x1b\xe4\xf9\xe8\xc1\x2a\x1c\xb4\xad\xb1\x10\x5b\xb6\xa4\x8f\x83\xe8\x88\xfc\x50\xa2\x66\x3a\x10\xda\x44\xf7\x0c\xee\x11\x4b\x82\x9b\xa3\x35\x4d\x3d\x2a\x7f\x10\x8d\x83\xe3\xe4\xe8\xfb\xf4\x4c\x47\xe4\x0b\xed\xd2\xf3\x7a\xb3\x0f\xd7\x57\x7f\x5f\x5f\x5d\x5f\x75\xa7\x9d\x10\x5b\xaa\x6a\x85\xe1\x8d\xfc\x47\x85\x9a\xdd\xff\xef\xf7\xdf\x78\xbf\x34\xf7\xe1\x99\x98\xb8\xcb\xca\xec\x17\xdd\x01\x98\x2d\xed\x1b\x46\x17\x30\x69\xcc\xdb\x11\x31\x64\xf4\xd9\x58\xbe\x47\x27\x2d\xd5\xdd\x1b\x24\x49\x29\xe7\x9a\x65\xbc\xaa\xbb\x41\x74\x9c\x6f\xf9\x4b\xfe\xd1\x5d\xd1\x5b\x80\x3d\x21\x3f\x29\x90\xb8\x31\x65\xfa\x3e\x16\x19\x48\xa1\xed\x55\x69\xb4\xa0\xdd\x9e\x9a\x62\x79\x96\xa0\xfd\x02\x55\x62\xdb\xeb\xa5\x45\x60\x2c\x6f\xb9\x53\xee\xa8\x0a\x65\xd2\xd4\x65\x56\xfe\x42\x8e\xf6\x0a\x3f\x59\x53\x15\x19\xf9\xce\xcc\xf0\xbd\x66\x03\x8c\x47\x63\xa9\xcf\xfe\x94\x89\x41\xde\xf6\xdd\xd1\xe5\xa2\x43\x3f\x02\xe9\xa0\x99\xd5\x46\x02\x1e\x4f\x1f\xc4\xa6\xcb\xcd\x23\xd4\x35\xe9\x63\x21\xbe\x0d\x97\x1c\xf3\xeb\xd8\xc8\xd3\x67\x7c\x41\x55\xa4\x09\x38\x61\xfb\x6a\x6c\xe9\x22\xab\xbe\xdf\xbe\xe0\xab\x4f\xd9\x54\xd9\x99\x9a\x5c\xf4\x78\x28\x4a\x5f\x43\xbb\xbe\x32\x7b\xcf\xeb\xb5\x35\xe7\x91\x27\x4b\x12\xc5\xb2\x37\xbc\xfc\x41\x1f\xcc\x02\xfc\xe0\xba\x27\xf1\x7f\xc7\x56\xec\x41\xb5\xc5\x2d\x2a\x94\x8c\xe5\xef\x60\x09\x34\xfb\x4a\x99\x07\xf5\x05\x2b\x8a\x95\x32\x5d\x29\xd2\xf9\x51\x6e\x5f\x80\x54\x47\x36\xfe\x20\x2e\xe7\x72\xbc\x42\x70\xdb\x5b\x7e\x36\x2d\x28\x6e\x47\xed\xf2\xee\x29\x62\xed\x35\x52\xec\x48\x14\x4b\xf2\x2b\xf1\x00\x8d\xe2\x28\x1e\x49\x1c\x49\xf7\x9e\x9c\x34\x8d\x66\x2c\x53\x8a\x2b\x67\x9a\xac\x71\x00\xec\xf0\x8d\x93\xa8\x15\xe9\x27\x43\x9a\xdd\xce\x6c\x6b\xd4\x5c\x88\x4f\xca\x00\x07\x2d\xbc\x9d\xd1\x7e\xf4\x55\x6f\x34\x7b\x97\x71\xd4\x4d\x2f\x5e\x2d\xd3\x78\xb2\x84\xb4\x78\x8e\x76\x99\xc7\x8a\xe0\x3f\x75\xa8\xee\xd5\x2e\x74\xef\xf1\x09\x45\x47\x49\x40\xcd\x3d\x2d\xac\xc7\xfd\x51\xb3\x6d\xff\x45\x5c\x8f\x0f\x71\x15\xec\xa3\xa6\xf7\x5c\x05\xaa\xc1\xb8\xe1\x57\x5c\x0f\xe3\x33\x38\x7c\x7f\x0c\x4f\xdc\x18\xcb\x3b\x6e\x9c\xa4\x1f\xc5\xee\xeb\xfd\xd7\x69\x09\x11\xa4\x45\xed\xdb\x9e\xc1\x9d\x8a\x01\xf4\x1d\x48\xa6\x17\x1c\xfa\xfa\x1d\x3a\x80\xb8\xfb\x2e\x69\x3e\x35\x6b\x94\x9c\x41\xda\x48\xeb\xb9\xf2\x74\x11\xf7\x5a\x66\x3a\x52\x85\xbb\x5e\x17\xc9\x87\xc5\x60\x81\x9f\x0d\xf7\x64\xb2\x1d\xd0\xa2\x96\xf3\xaa\x3a\x7f\xb4\x69\xc2\x8f\x45\x8f\x93\xf0\x67\x6c\x97\x03\x60\x0e\xc8\xe5\x66\x54\x06\x83\x67\x70\xa3\xec\xe6\x84\x6d\x66\x3b\x5a\x7a\x4e\x81\x67\xa3\x5c\x74\xbb\x70\x39\xb9\xdc\x22\x72\x9d\xd0\x68\xe2\x64\xe1\xc8\x04\x89\x87\xef\x4a\x88\x1a\xf8\x39\x11\x69\xbf\x77\x24\x28\xeb\x39\xed\x8c\xff\xb5\x7b\x2e\x08\xfd\x0c\x7b\xbf\x47\xd0\xef\xf2\x73\xdf\x76\x77\xe0\x30\x66\xe6\x49\x7e\x5b\x75\xa6\xe7\xb4\xbf\x69\xe2\x78\x40\x66\x27\x49\xd8\x62\xaa\x1a\xe8\xa8\x7f\x6d\x14\x2e\xcb\xb0\x44\xdd\x3e\x1a\x8b\xc1\xdc\x25\xd6\x17\x8c\x84\xa1\x91\xe0\x6d\xa3\xc0\xb9\x68\x05\xf2\xb9\xc6\x37\x46\x5d\xfa\x8e\x15\xbf\x34\x38\xb1\x67\x9a\xff\x9b\x7e\x07\xa8\x17\x8b\x6a\xa6\x70\xbd\xef\x7f\x02\x00\x00\xff\xff\x0a\x6e\x23\x31\x23\x0f\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 3875, mode: os.FileMode(438), modTime: time.Unix(1561646749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
