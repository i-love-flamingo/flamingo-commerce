// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xdb\x72\xd4\x48\x0f\xbe\xcf\x53\x28\x70\xf1\x43\x55\x78\x01\xdf\x85\x01\xfe\xcd\x16\x6c\x66\x13\x0e\x17\x14\x35\xa5\xb8\x35\x71\x17\xed\x96\xe9\x96\x33\xb8\xb6\xf6\xdd\xb7\xfa\x60\x8f\xe7\xc8\x24\x0c\xb0\x9b\x0b\x8a\xe9\xc3\xa7\x4f\x52\xeb\x60\x49\xd7\x10\x4c\xb8\xae\xc9\x95\x34\x9b\x54\x54\x7e\xe6\x56\x66\xd7\x82\x4e\xa6\x06\x4b\xba\x74\x8a\xdc\xec\x8a\x7c\x6b\x04\xfe\x3a\x01\x00\x68\x5b\xad\x0a\xb8\x16\xa7\xed\xed\xe9\xc9\xdf\x27\x8f\xb7\x00\x2c\xef\x4e\xd8\x0a\x7d\x15\x70\xd4\x38\xf2\x64\xc5\x83\x54\x04\x2e\x21\xf2\x3c\xfe\x2a\x5b\xe7\xc8\x0a\x3c\x71\xad\xb5\xda\xde\x3e\x85\x26\x00\x00\x07\x04\xa8\x5b\x41\xd1\x6c\x4f\x76\xb0\xdd\x14\x96\x88\x3e\x86\xb7\x15\xc1\x04\x9d\x80\x54\x28\xa0\x3d\xdc\xb2\xb6\xb7\x20\x0c\x37\x94\x44\xa8\x78\xb2\x44\x27\xc5\x12\xf9\x05\x95\xec\x50\x48\x85\xbb\x23\xa8\x74\x23\xb3\xd2\x16\x4a\xf4\x3d\x47\xed\x01\x8d\x23\x54\xdd\x18\x37\xee\x5d\xd8\x39\xfb\x62\x17\x6f\x75\x39\x9c\xc9\x92\xae\x05\x85\x40\x51\x43\x56\x05\xb6\x6c\xa3\x8d\x7c\x5c\xe6\x39\x34\xd8\xd5\xc1\x58\x68\xd5\x8a\x99\x9e\xe5\x23\x35\x76\x50\xb2\x15\xd4\x16\x50\x29\x1d\x4c\x87\x06\xf4\x20\x22\x1e\xdb\x49\x28\xf2\x89\x1c\x66\xf1\xdf\xd3\x4c\xeb\x1c\x5a\xab\xbf\xb4\x04\x5a\xc1\x9c\x5d\xe4\xd4\x38\x2e\xc9\xfb\xad\xcf\xe2\x64\xf7\xc3\x18\xe9\x0c\xcf\x12\x31\xc0\x1b\x6e\x25\x81\x8e\xac\x1c\xf6\xa5\x6b\x74\x89\xc6\x74\xe0\x2b\x5e\xd8\x60\x0f\x04\xdf\x96\x44\xde\x43\x83\xb7\xb4\xf7\x5d\x8c\x65\xa5\x67\x91\xed\x97\xdd\x92\xff\x3e\xee\xb3\xc6\x74\x79\xe3\xf4\x53\xc2\x58\x83\x2e\xd6\x30\xd0\x6d\x88\xcf\x37\xa9\x46\x6d\x06\xb1\xf9\x6f\x64\xb5\xa8\xcb\x5e\xdf\x8c\xd8\x64\x8d\x6e\x51\x68\x81\x5d\xb1\x81\x37\x52\x77\xea\xf8\x4e\x2b\x72\xc5\xca\x66\x4d\x52\xb1\x2a\x36\x99\x84\xff\x63\xcd\xad\x95\xd1\xe6\xc0\x6a\xea\x74\x99\x1f\x86\x68\x31\x54\x6c\xd7\xe5\x44\x5b\x21\x37\x0f\x4f\xf4\xc0\xc7\x96\x15\xb2\x58\x53\xb1\x61\x95\x03\x31\x66\x1f\x50\x0b\xe8\xba\x31\x54\xc7\x7c\xf3\xb3\x65\xbf\x62\x37\x69\xbd\x70\x1d\xf2\xc2\xaf\xa1\x71\xdd\x96\x21\x30\x7f\x95\xf8\x57\xa8\x0d\xa9\x63\x49\x0f\x2b\x8e\xd0\xb3\x3d\x38\x69\x65\x06\x57\xf1\xd6\x03\xcc\x57\xf1\xe2\x62\xee\xb0\xa6\x63\xea\xf0\xee\xea\xf5\x77\x78\xb4\xe2\xc5\x6f\x6f\xdf\xbc\x3e\x26\xa1\x80\xf7\x70\x46\x57\xa4\xb4\xa3\xf2\x68\xa1\x76\x14\x13\x7d\x40\x63\x48\x72\x8a\x3c\x26\xb3\x47\x09\x79\xa8\xbe\x29\x73\xa6\xc6\x62\x81\x1e\xca\x8a\x3d\x59\x68\x1c\xdd\x69\x6e\xbd\xe9\x1e\x8d\xb3\xef\x9b\x9c\x67\x57\x10\x43\x06\x77\x75\x6c\x6d\xc0\x12\x29\x52\xa1\x33\x29\x1d\x05\x1e\x38\x48\x6a\x7d\xec\x59\x2a\x82\xac\xd6\x15\x7d\x69\xc9\x0b\x9c\x4f\x2f\x56\x84\xe4\xf5\xf3\xe9\xc5\x21\x71\x32\x5d\xbf\x74\x1f\x83\x6f\x5c\xce\x76\x7b\x34\x49\x8d\x47\x6a\xf2\x7e\xbf\xbe\xfc\x03\xc8\x96\x1c\x54\xcb\x06\x53\x28\x38\xf4\x0f\xbb\x14\x4a\x67\x5f\xa0\xe0\x9a\xc9\x76\xc3\x2b\x12\xd4\xc6\x7f\x13\x3a\x9f\x3b\x18\x97\x9b\xe0\x9f\x6f\xe3\xe6\x73\x6b\xb8\x97\x4d\xee\xbe\xc8\xaa\x86\x75\xf4\x26\xa5\xfe\x89\x6f\x82\xc4\xe0\x5a\x84\x60\xed\x0a\xad\x80\x27\xef\x35\xdb\x33\xb0\x1c\x7e\x08\xe8\xd4\x20\x2f\x56\x1f\x9f\x62\xf2\xf6\x7f\xa1\xa9\xfe\xd2\x6a\x47\x63\x84\x3b\x34\x5a\xc5\x37\xd5\x9b\x32\x6d\xbc\x1f\xd6\x47\x31\x96\x48\xbe\xec\xb9\x09\x43\xe8\xd0\xa1\xe4\x10\x37\x42\x6a\x10\x28\x9c\xd0\xfa\x9d\xef\x8a\xd3\x29\x7b\xf9\xe1\xc9\x23\x2c\x4c\x31\xa4\x70\x21\xe7\x8b\xfd\x0d\x5e\xae\x19\xec\xea\xd9\x70\xe7\xf4\x53\x50\xec\xde\x1d\xcc\x4a\xe5\xc9\x54\xfb\xe2\x95\x8d\x1e\x3a\xa3\x07\x94\xd3\x04\x39\x7b\xe9\x1c\x3f\xa4\xaf\x38\x8c\xd8\xc3\x79\xe5\xc0\xf8\xb7\xd2\x9b\xa0\x2d\xc9\x90\x7a\xde\x7d\x47\x6f\xf6\x93\x6c\xf8\x9f\xe0\x1a\xbe\x71\x96\x49\xe5\x07\xba\x3d\x2c\x2d\xb3\x5a\x1a\x45\x8c\x0b\x5c\xf8\xd6\x7a\xbf\xb6\x7f\x9f\xa4\xb4\x1a\xf6\x99\xc3\x67\xea\x56\x73\xc9\x1d\x9a\x96\x0a\xf8\x98\xd7\x62\x72\xa0\xaf\x42\x56\x41\x94\xf3\x67\x4b\xae\x1b\x06\x0f\x17\xb1\x92\xc4\xcc\x8c\xa5\xe8\x3b\x5a\xf9\x52\x1f\x7f\x36\x6f\xf2\x3b\x8f\x17\x96\x2c\x0b\x78\xce\x6c\x08\xed\xe9\x8e\x0b\x93\x34\x3d\xc9\xc3\x8f\xfd\xb5\x3f\x1f\x3a\x5d\xa7\xff\x26\xcf\x58\x06\x0d\x2e\xad\xe9\xa0\x61\xef\xf5\x8d\xa1\x50\x86\xfa\xe1\x42\x59\x69\x4b\xb1\x3e\x65\xcd\x38\xce\x42\x10\xe6\x3a\x14\xba\x78\xec\x0c\x38\xa8\xbf\xd0\x9e\xc0\x91\xb4\x2e\x57\xd6\x7e\xce\x93\xc7\x3c\xdf\x30\xc4\xda\x14\xea\x49\x42\x7a\xe7\xcc\xe0\x99\xa7\xdb\x94\xdd\x3e\xbc\xea\xc7\x18\x29\xb6\x7c\xec\xb4\xd6\xd9\x6c\xba\xe8\x6c\x8b\x09\xb4\x8f\xda\x47\x75\x77\x79\x24\x0a\xd9\xe9\xc2\xc7\x30\x31\x84\x2e\xd9\xc4\xa0\x17\xf0\xc2\x8e\xd4\x3d\x18\xec\x95\x1e\xc0\xf7\x08\xff\x3f\xc9\x7e\xd1\x49\x0a\x5a\x05\x64\x7d\xeb\xc8\xa7\x36\x77\x39\x85\xea\x5f\x41\xe4\x48\xca\x87\x7e\xc5\xc2\x8d\xe1\xf2\x73\x1f\xb1\x9b\xb4\xae\x68\xee\xc8\x57\x63\x62\x07\xbd\xd4\x35\xd2\x35\xfb\xd0\xf8\x94\xc1\x73\x9b\xa4\x6f\x3a\x58\xa0\x96\xe0\xce\xbe\x63\x5b\xa5\x2c\xdc\xb3\x3e\x4b\x21\x3a\x67\x47\xf7\xa6\xfe\x3c\x9f\x3f\x38\xd8\xfe\x09\x00\x00\xff\xff\x40\x76\x54\x6c\x69\x15\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
