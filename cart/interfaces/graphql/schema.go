// Code generated for package graphql by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xcd\x6e\xe3\x36\x10\x3e\xaf\x9f\x42\x46\x2e\x59\x60\xd1\x07\xd0\xcd\xb1\x8a\x85\xd1\x8d\x9b\x4d\xbc\xed\x61\x11\x14\x13\x71\x6c\xb3\xa1\x48\x95\x1c\x25\x11\x8a\x7d\xf7\x82\x12\x65\x93\x14\x25\x6f\xd0\x1c\x82\x84\xf3\x71\x7e\xbf\x99\xa1\xa8\xad\x31\x5b\xab\xaa\x42\x5d\xe2\x5f\x05\x96\x4a\x03\x21\x5b\x83\xa6\xec\xdf\x45\x96\x65\x59\x09\x9a\xf2\x33\xc4\x4a\x96\x9d\x80\x0d\xe0\x02\x05\x7f\x41\xcd\xd1\xe4\xd9\xf7\x00\x58\x44\x90\x76\xf9\xb8\xf8\xb1\x58\x84\x46\x3d\x5b\x9c\xe5\xd9\xa6\xe8\xd5\xa3\x24\x4e\xed\xa6\xc8\xb3\x07\xd2\x5c\x1e\xfa\xd3\x27\x2e\x04\x97\x87\x15\x63\x1a\x8d\x89\xfc\x72\xa7\x1d\xb0\x6e\x74\x79\x04\x83\x3a\xc2\xdc\xa1\x36\x4a\xba\x00\xa6\xfd\x3e\xb9\x6b\x81\x57\x1f\x80\x31\x4e\x5c\x49\x10\x05\x10\x8c\xcd\x7a\xc2\xa5\xbb\x52\x43\x5b\xa1\xa4\x07\x14\x58\x5a\x69\xec\x47\x24\x76\xe1\xa1\x50\xf2\x60\x76\x6a\xd5\xd0\xd1\x66\xa0\xb4\xd9\xfb\xd6\x85\x71\xa3\x94\x40\x70\x40\x88\xe5\x71\xa2\xae\x3e\x40\x5d\x0b\x8e\x6c\xad\x9a\x5a\xc9\xb5\x62\xe3\x30\xcf\x22\x17\x28\xc3\x3d\x34\x82\xd6\x8d\xd6\x28\xcb\xf6\xac\xf1\xca\x4a\x49\x11\x08\x4e\x58\x8d\x14\xed\x06\x89\xd3\x63\xff\x5c\xab\x46\x52\x9e\x6d\xa4\xa3\x4b\xad\x15\x6b\x4a\x8a\x8f\xb9\x09\x32\x81\x2c\x0a\xf4\xa0\x41\xb2\x4e\xbf\x97\xc0\x3b\xcd\x4b\x8c\xe2\xfc\xcc\xf7\xb4\x06\xcd\x46\xce\xad\x42\xf9\x14\x05\x47\x5c\x75\x9c\x74\x2c\x69\xf3\x18\xee\x28\x12\xf6\xc2\x26\x95\x9e\xc2\x97\x4e\xdb\x4f\x9a\xdd\xc8\xbd\x9a\x30\x6d\x45\xa7\x16\x4d\xd6\x65\x73\x2e\x89\x39\xf2\xba\xe6\xf2\x60\x8f\x22\x7d\x0f\x9e\xa8\xc7\x36\x4f\x5d\xc6\x3f\x6b\x15\xf4\x58\x97\xf6\x0b\x55\x71\x0a\xaa\x4e\xb8\x83\xb7\x55\xd5\x17\x3c\x89\xea\xcd\x6c\x71\x4a\xde\x6b\x29\xb8\x29\xad\x92\x59\x55\xd5\x56\x49\x1b\xc0\x3d\x8a\xae\x88\x3f\x75\xe7\xbd\x17\xbc\xb4\xfc\xc9\xe9\x38\xdc\x49\xe7\xc8\x0b\xef\x32\xf8\x08\xc6\x51\xe7\xc4\xfe\x59\x96\xd8\xda\x0f\x03\x5a\x31\x0c\x7b\xff\x55\xe9\xe7\xbd\x50\xaf\xe1\x69\x85\x74\x54\x2c\x3c\x2b\x41\x6b\x6e\x87\x8b\x7f\x38\x50\xef\x8b\x2a\x21\x31\xb9\x8a\x48\xec\xee\x18\xae\x91\xed\x78\x85\x79\x66\x7f\xf7\x34\xc1\x68\x38\x5e\x3f\xe3\x79\xaa\x7c\x0c\xcd\x86\x33\xf6\x37\x6c\x2d\x9d\x1d\xe0\xb1\x9f\x40\x1e\xc4\xcb\x83\xc9\xb3\x0a\xea\xef\xa6\x83\x3e\xfe\x6d\x94\xfc\xe5\x1e\x5e\x6f\xd1\x18\x38\xe0\x7c\x1a\x87\x18\x32\x97\x4b\x8b\x1c\x79\x75\x61\xd3\x34\x06\x6f\xa2\xad\x14\x4c\xb0\xb0\x3e\x49\x77\xfc\x0e\x1c\x3c\xe1\x24\x22\x57\x6a\xcb\x96\xa9\x66\xa1\xd9\x56\x63\xf3\xec\x9e\x1f\x88\x9e\x57\x7c\x3c\x3d\x4e\x53\xc3\x0d\xf8\x40\x79\x77\x92\x56\xef\x6b\xf5\xd7\xfe\x1b\xa1\x96\x20\xee\x71\x8f\x76\x09\x45\x39\xa8\x40\x3f\x23\xd5\x02\x4a\x5c\x8f\x78\xff\x02\x9a\x83\xa4\xdb\x0e\x73\x97\xc6\x38\x2f\xb7\x50\x45\x02\xa3\x1a\x5d\x62\xbc\x46\xff\xa1\xd6\x5b\x56\xf3\x14\x1d\x23\xfe\x00\xd1\xe0\x08\xf3\x93\x5d\x31\xcc\x85\x55\x6c\x34\x86\x3b\xb6\xf5\x51\x70\x79\x10\xd8\x55\x35\x39\xbd\x97\x31\x2a\xc1\xa7\x1e\xa3\xd5\xeb\x25\x35\x03\x24\xa9\xe3\xca\x21\x76\xf0\x86\xfe\xfd\xee\xff\xe5\x3c\x63\x96\x8b\x34\x67\x5c\x83\x39\xda\xbc\x00\xe5\x59\xe2\xc7\xaf\xdf\x9e\x6b\x43\xb2\x2b\xf6\x24\x46\x40\x12\x12\xf2\x8e\x33\x26\x70\x3b\x42\xf9\x18\xd7\xb2\xb3\xfe\x18\x10\x0d\xb9\xa9\x3a\x89\x21\x8d\x98\x08\x6d\x8c\xd9\xea\x39\x9f\xcf\x5c\x74\x79\xfb\xc2\xe5\x98\x8d\xa5\xaa\x6a\x90\xed\xc8\x5c\xb0\x26\x38\x8d\x01\x11\xa6\x56\x86\xfa\x76\x9b\xf3\x1a\xe8\x52\x86\x34\x1e\x78\xff\x28\x9d\xce\x50\x37\xcb\xf4\x05\x9f\x7b\xcc\x48\x51\x50\x31\x14\x58\x1f\x95\x9c\x63\x07\x56\xc0\xc5\x8c\xcf\x49\xa2\xf6\x5f\x19\x8e\xa7\x97\x57\x48\xdd\xc1\xed\x56\x23\xe0\x22\x46\xde\x85\xd2\x61\x4e\x72\x43\x5c\x1e\xd6\x8d\x21\x55\xa1\x4e\x7c\x97\xfc\x9a\x80\xa4\xdd\x4d\x21\xa3\xd9\x3c\x13\xe6\xc9\xb3\xe1\xe9\x0a\x84\xbf\xef\x6f\xb8\xa6\x63\x34\x7b\xc1\x98\x5a\xe9\xfe\x1b\x40\xb7\x69\xe1\xb6\xa9\x9e\xe2\x17\x89\x84\x9e\xc7\x1d\x0d\xbd\xc4\xdb\x65\x21\x59\xb7\xb5\xb3\xaf\xcd\xf9\xf1\x5c\xfa\x4e\xe6\x13\xdf\xb7\x23\x0d\xb7\xae\x33\x63\x25\x2b\xc6\x76\xca\xde\xb8\x1e\x6d\x9f\x4d\xb1\xfc\x74\xda\x11\x9f\x4e\x2f\xa7\x60\xed\x7c\x9c\x76\x20\x30\x53\xa0\x40\x42\xff\x75\x72\x9d\xd2\xf7\x3e\x75\x76\xcb\x5e\xdb\xad\xbd\x61\xce\xdb\xff\xe5\xe3\xb7\xda\x16\xd7\x2a\xfd\x4a\x6d\xaf\xb7\x98\xd3\x7b\x4e\xce\x9c\x89\x1f\x8b\xff\x02\x00\x00\xff\xff\x5a\xef\x04\xca\x87\x10\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 4231, mode: os.FileMode(420), modTime: time.Unix(1567424705, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
