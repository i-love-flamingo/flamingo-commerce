// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdc\x38\xd2\xbe\xfb\x57\xd0\xfd\x5e\x7a\x02\xbf\x3b\xd8\x3d\xfa\xd6\xe9\x4e\x82\xc6\x8c\x9d\xc4\xf6\xcc\x1e\x06\x81\x41\x4b\xd5\xdd\x44\x28\x51\x26\x29\xdb\xc2\x62\xfe\xfb\x82\x5f\x12\xbf\xf4\xe1\x64\x77\x80\xd9\xdd\x1c\x62\x4b\x2c\x16\x8b\xac\xa7\x8a\x0f\x8b\xb2\xec\x1a\x40\x5b\x56\x55\xc0\x0b\xb8\xdf\x41\xc1\x38\x96\x50\x6e\x31\x97\xe8\x1f\x67\x08\x21\x54\x60\x2e\x2f\x07\x11\xd5\x72\xae\x1b\x4a\x27\xbc\x03\x4a\x9e\x80\x13\x10\x97\xe8\xb7\x40\x70\x17\x89\x74\xe7\x5f\x74\xd7\x23\xa4\x4d\x6f\xbb\x2d\x2b\x61\x5d\xda\x47\xf5\x70\x89\x6e\x25\x27\xf5\xf1\xfc\x87\xc8\x80\xa4\xb3\xd3\xba\xa1\xf4\x13\xee\x2a\xa8\xe5\x0d\x3c\xb6\x84\x43\xb9\x97\x50\x89\xa8\xfb\xfd\x27\x4e\x0a\xdb\x74\xde\x4f\xf2\xb6\xad\x2a\xcc\xbb\x58\xd6\xbe\x3e\x3f\xfb\xfd\xec\x2c\x5c\x2d\xbf\xd9\x2e\x56\x49\x44\xc1\xda\x5a\xc6\x23\x6e\x9a\x86\x12\x28\x77\xae\xd9\x8c\x2a\xda\x2a\x6e\xf0\xfa\x69\x23\x23\xb9\x0f\xe4\x20\xb7\x98\x97\xa3\x72\x1f\x38\xae\xcb\x3b\x26\x31\xfd\x3b\x91\xa7\x59\x71\x2d\xe9\x06\x0f\x7a\x6c\x2a\xf5\x2a\xdb\xef\x84\x45\x6a\xf6\x5b\xc6\x28\xe0\xba\x9f\xd8\x1d\x7e\x81\x64\xdd\xf5\x4b\x27\x61\x1d\x75\x0b\x14\x0a\x49\x58\xad\x24\x6e\x1b\x4a\xe4\xaf\x98\xb6\x60\xc6\x7f\xdb\x5d\x81\x3c\xb1\x52\xac\x2b\xf3\xf3\x12\xfd\x66\x31\xf1\xe5\x87\xc4\xb8\xac\x87\xac\x67\x48\x79\x89\xf6\x3b\x63\x1e\xd4\x92\xc8\x6e\xbf\xeb\xf1\xa5\xdf\x3e\x10\x4a\x49\x7d\xdc\x94\x25\x07\x91\x38\xd0\xbc\xd5\x82\x4d\xcb\x8b\x13\x16\xc0\x23\x99\x4f\xc0\x05\xab\x6d\x6c\x8c\x87\x44\x10\x09\xb8\x2c\x89\x9a\x3c\xa6\x3b\x2c\x71\x3a\xa8\xd7\x68\xac\x6c\xa2\x55\x4b\xa0\x1d\xb5\x9b\xa9\x01\x65\xf5\x51\xdc\xb1\x4d\x2b\x4f\x6a\xf6\x85\x0a\x9e\x5f\xf4\x14\x02\xc7\xe1\xb8\x3d\x5e\x24\x6c\x1c\xbf\x65\x6d\xc3\x6a\x15\xa3\xc9\x04\x87\x26\x3b\xc5\x12\x0e\xb8\xa5\x72\xdb\x72\x0e\x75\xd1\x85\xfa\xa4\x02\x20\x31\x31\x1a\xea\xb9\x73\x2d\x56\x8d\xfa\x75\x6b\x30\xb9\xaf\x6d\x0a\x6a\x38\x2b\xdb\x42\xc6\xaf\x89\x08\x56\x01\xca\x68\x96\xc7\x3e\x48\x62\x08\x9d\x07\x81\x71\x87\x5f\xf2\x61\xe0\xc4\x1e\xb4\xd8\x35\x8c\x08\xe0\x24\x68\x7f\xcb\x65\x05\xd7\xee\x27\xc7\x6f\xc9\x89\x61\x2a\xdc\x79\x9d\xfc\xb0\x39\x73\x02\x57\x98\xd4\xb7\x27\xd2\x34\xa4\x3e\xbe\xbb\xc2\x84\x86\x9e\x21\xe2\x5d\xd5\xc8\x2e\x5a\xba\x13\x16\x4e\xf1\x7b\xc6\x27\xad\xeb\xfb\xa5\xb3\x52\x99\x77\xbf\x5b\x13\xfd\x63\x76\x46\xe7\x4e\xc1\xd2\x8e\x4a\xaa\xef\xa4\x5d\xf4\x59\x76\xeb\x0a\xf3\xaf\x20\x3f\x51\x5c\x40\x60\xea\x05\x7a\xc2\x9c\xe0\x5a\xc6\x13\xd8\xd7\x72\x18\xf9\xdd\x8b\x04\x5e\x63\x7a\x03\x07\x50\x38\x86\x35\x87\xc3\x8c\x05\xae\xf7\xaf\xac\x2d\x4e\xc0\x6f\xf1\x13\xa9\x8f\x49\x2e\xee\x2d\xd5\xa8\x87\x4c\x62\xb9\x37\x6f\xad\x42\xd1\x56\xce\x6d\xa3\xc8\x0b\x65\x54\x62\x1f\xdd\x61\x92\x0e\x1f\x38\x13\x62\xa6\x8b\xc3\x82\xeb\xb3\x65\x22\xd9\x04\x30\xa5\xae\xf9\x8e\x48\x9a\x01\xa1\x0b\x20\x3d\xe2\x74\x8c\x2d\x31\x2a\x8a\xc9\x65\xb3\x0e\x76\xc0\xe9\x68\xaf\xae\x59\xad\x1c\x7b\x03\x54\x73\x8f\x65\x9d\x5e\xd9\x63\xd8\x5c\x87\x44\x9a\x89\xa5\x9e\xe5\x58\x34\x86\xb1\xeb\x60\xaf\x19\xce\xdb\xee\xae\x6b\x60\xad\x76\xc6\x18\xe1\xd3\x19\x77\x48\x93\xdb\x13\xe6\x47\x48\x16\xf1\xde\xbe\x1f\xf0\x90\xd2\x94\x38\x7b\xdc\x40\x85\x49\xad\x60\x96\x91\xc9\x53\x2c\x8f\xad\x79\x9c\xd4\x12\xbb\x68\x0e\x56\xb8\x8f\x41\x33\x13\x61\x71\x38\xd9\xe7\xd6\x13\xb2\xfd\x64\xbf\x88\xf1\x5a\xd9\x3e\xfd\x2a\x9f\x7f\x99\x34\xde\xd9\x63\xed\xc7\x13\x00\x88\x72\xdb\xa4\x5a\xdf\xe4\x05\xaa\x5d\xa6\xde\xd7\x07\x16\x40\x61\x72\x90\x7e\x8e\x0b\x46\x28\x16\x68\xbd\xc3\x2f\x0b\x34\xa9\x8e\x21\xa8\x15\xe1\xbf\x44\xef\x29\xc3\x72\x5c\x33\x38\x88\x64\x39\x85\x92\xf8\xe2\x6d\x27\x26\x30\xf0\xcb\x9d\x37\x58\x9c\xca\x55\x9f\xd1\xa9\xe8\xbc\x6c\x47\x0c\xc9\x48\xbf\x7b\xec\x07\xde\xa2\x1f\xed\xeb\xfc\xf6\xac\x51\x44\x6a\x09\xfc\x80\x8b\xc4\x1d\x11\xb5\xb3\xe3\x1e\xb1\x84\x67\x9c\xe3\x55\x9a\x48\x8f\x38\xca\x91\xed\x14\xd8\xd1\x28\xf7\x5a\x6c\x1c\xdf\x59\x71\x6b\xda\x63\x8b\x29\x39\x90\x74\x43\xcb\xf7\xfa\xec\xc4\xad\x8d\x3a\xbb\x8c\x24\x9d\x51\xcc\x4e\x6b\xb6\x86\xa5\xe8\x32\xe7\x8b\x08\x71\x69\x76\xcd\x0f\xba\x33\x14\x37\x71\x10\xa9\x1a\x0a\xea\x95\xf8\x13\xb8\x32\x39\x54\xbb\x33\xad\x7d\x9c\x64\x67\x7d\x31\x20\x9b\x2d\x77\x7e\xeb\xf8\xf8\xd9\x61\x55\xb2\x1a\x19\x5a\x35\xf5\x4b\x90\x0d\xf8\x91\x3d\x20\xd2\xe7\xa7\xd1\x79\x62\x32\x73\x84\x58\x76\x82\x98\x3b\x40\xbc\x82\x9e\x7c\x0b\x3b\x79\x35\x39\x79\x25\x19\xfb\x06\x2e\x76\xc2\xc2\x62\x67\x9a\x0e\xf8\xce\x77\x74\x20\xd8\x75\xd4\x9b\x67\xc6\xbf\x1e\x28\x7b\x9e\x8f\xf1\x02\x73\xae\x13\x94\xff\xd2\x61\xef\x67\x56\xe0\xcc\x21\x7b\x17\x35\xdb\x3e\x82\x70\x28\xef\x48\x05\x97\x48\xfd\x3f\x7f\xbe\xbf\xdf\xb6\x42\xb2\x6a\x23\x25\x27\x0f\xad\x54\x44\x6a\x72\xca\x6e\x3c\x34\x9a\xc5\xf0\x6c\xf1\xa2\x15\xf0\x36\x2a\x74\x04\x14\x6d\xc1\x0e\x9e\x61\x1d\x52\x11\xfc\xd0\x94\x46\xb9\x76\x0c\xd9\x72\x32\x2e\xf0\x78\x51\x6c\xbc\x98\x26\x5d\xd1\xcb\xbd\xdf\xd7\x85\x8a\xbf\x11\x7a\x11\x34\xcc\xec\xf3\xf1\x80\x53\x14\x23\x92\xb5\xc9\xe7\xa1\xdb\xe2\xaa\xc1\xe4\xa8\xf9\xfc\xba\xf0\x1e\x3c\xde\xb1\x64\x9a\x0f\x86\xb4\x1c\x08\x95\xc0\xa7\x78\x4b\xda\x7d\xc9\xdc\x7a\x82\xed\x1b\x18\x06\x8c\x77\x2c\x41\x61\x13\xc5\x0f\x40\x0d\xcd\x89\x9b\xac\x4b\x5d\xe3\x38\xe3\xcb\xf6\x26\xc2\x4b\x54\x71\xad\x91\x71\xf9\x91\x97\x2a\x84\x2d\xbf\x1a\x8d\x22\x6f\x13\xf2\x5c\x98\x39\xba\xfb\x7c\x2e\xc0\x8f\x7e\x93\x57\xef\x6b\xf5\x6b\x8d\x71\xdd\x20\x4a\x49\xba\x28\xd1\x24\x45\x09\xdd\x68\xeb\x12\x57\x23\x85\x0b\xdf\xca\x6b\x5c\x45\x0d\x82\xb5\xbc\x80\xb8\x7e\xf7\x28\x3b\xaf\x50\x16\x66\xa7\x9f\xa0\x0b\xce\xe8\xa9\x84\x66\x21\x89\xcc\x11\xa2\x4a\xe5\xfa\x2b\x74\xfe\x31\xd3\xfc\xd6\x9f\x11\xe3\x41\x63\x71\xeb\x5e\x33\x0b\x52\x1f\x29\x68\x94\x4c\x55\x09\x06\xa9\xd1\x92\x08\x67\xcf\x73\x6a\x9c\xc8\x5c\x41\xef\x75\x89\xe9\xff\xac\xea\xb8\x22\xae\x9f\xc7\xa2\xd2\xe4\x66\x8b\xa7\x27\x2c\xbd\xc0\xc8\x87\xc8\x81\x70\x21\x6b\x8d\x82\x51\x19\x8a\xb3\x22\x21\x20\x49\x59\x52\xb8\x4e\xa4\x02\x46\x6a\xb2\xfd\xa4\x3d\x02\xd3\x56\xda\xcd\x73\x54\x46\x72\x80\xcc\xd4\x52\x99\x6b\x3e\x65\xf3\x00\x52\xbb\x6e\x3f\x93\x3a\x85\x69\xc1\xaa\x06\xd7\x5d\x32\x5c\x90\xdc\x88\x4c\x05\x22\x99\x86\x09\xd9\xa7\xbf\x51\xab\xf5\x61\x75\x52\x0f\x87\x23\xf1\x12\x69\xde\x1e\x85\x23\x3e\x63\xb3\x91\x49\x14\x05\x1e\x03\x0a\xcd\x89\xd5\x53\xe8\x80\x4a\xd7\x80\x47\x6d\xce\x02\xd5\xdc\x79\xb8\xf3\xfc\xfc\xd5\x89\x16\xc7\x74\x07\x12\x13\x1a\x4b\x7e\x0a\x5b\x5d\x02\x25\x42\x92\xfa\x68\xb8\x12\xf0\x0c\x8f\x7a\x97\x11\xc9\x9b\x9b\x93\x8c\x92\xf6\xc4\x34\x7b\xcb\xdc\x11\x05\x4b\xf8\x78\x78\x4b\xb8\x3c\x45\x49\x19\x0b\xd1\x30\x6e\x6a\x01\xbc\xcb\x37\x5e\xb7\xd5\x43\x4c\x3c\x6b\x6c\x70\xac\x61\x38\xb9\xf0\x61\x16\x75\xdb\x76\xc4\x27\xe7\xf9\xa6\x01\xa2\x00\xfe\x04\xa5\xde\x45\xe7\x4b\x4f\xb1\x12\x3b\xf6\xea\x03\x48\x24\x1a\x28\xc8\x81\x14\x08\xbb\x66\xf4\xd0\xa1\xaf\xd0\xad\xdc\x4e\x11\x27\xfb\x49\xdd\x53\xd5\x90\x48\xd4\x5a\xe1\x6b\x5f\x66\xbf\xdd\x6d\xc6\xcf\xea\x0b\x06\x42\x3a\x49\xeb\x13\xfa\x4c\x2d\x33\x52\x66\x14\xfc\xab\xc6\x9e\x9c\x77\x5f\xdd\x1d\x3d\x34\x8d\x91\xf8\x25\x05\xba\xec\x90\x43\x05\x3b\x3b\xe6\x14\x1f\x75\xd5\xe1\x51\x63\x7b\x42\x99\xdd\xc8\x5d\x91\x79\xf4\xa8\x79\x33\x48\xcc\x78\xec\x57\x4c\x49\xa9\xc3\xf2\x06\x44\x4b\x1d\x43\x3e\x61\xa1\xe4\x58\xfd\x8e\x73\x36\xec\x4e\xd1\x59\xaa\x17\xb8\x02\x21\xf0\x11\x7e\x8a\x3d\x47\x34\xaf\x55\x7a\x85\x9f\x7a\xa3\x42\x8e\xe2\x96\x83\x1d\x5a\xe1\x68\x41\x2e\x23\xeb\x91\x5d\x15\xde\xf9\xec\x3f\x66\xe5\xef\x67\xd9\x61\x3e\xcb\xee\x06\x84\xe4\xa4\x48\x96\x86\x08\xd7\x32\x10\xfe\x70\x61\x2a\xfc\xb2\xa1\x94\x3d\x7b\xed\x68\x60\xa5\xbd\xf7\x76\xe4\xd0\x93\x66\xaf\xd5\xe8\x66\xdc\x23\x29\x33\x75\x6c\x45\x9d\x6d\x7a\x1b\xaa\x06\x4c\x3d\xbb\x24\x1c\xad\x46\x78\xa7\x39\xa7\x3f\x3c\x50\xbf\x67\xdc\xc5\xd8\xca\xb6\xb8\x9d\x11\x1d\x54\x5b\x89\x25\x36\xf9\x50\x3d\x9a\xfd\xcc\xfc\x0b\xd5\x7a\xfa\x8c\xb6\xc1\xad\x88\x1d\x90\x68\x4d\x08\xb8\x0f\x17\xdc\x20\x17\x08\xaa\x46\x76\x88\x1c\xfa\x61\x89\x50\x29\x82\x94\x2b\x97\x2d\xac\x9a\x4c\x6d\xed\x5e\x0d\xe7\x81\xbe\xaf\xb1\xad\x6e\x4f\xec\x59\x28\xad\xf2\x04\x88\xc3\x63\x0b\x42\xa2\x67\x2c\x90\x68\x8b\x02\x84\x38\xb4\x94\x76\xea\x3c\xa2\x1e\xc0\x8e\xd5\x3f\x0e\xb4\x7e\xe4\x3b\x1a\x7b\x55\xdf\x5f\x6c\x79\x80\xfa\x36\x83\x17\x0f\x9d\x51\xe0\xfc\xf7\x9e\x00\x2d\x87\x5d\x6d\x30\xc4\xc4\x8b\xb0\x6e\x54\x52\x3a\xd2\xd2\x1b\x07\xad\xfc\x7d\x2f\x60\xb9\xe8\xea\x03\xd4\xc0\x31\x1d\xd3\x78\x34\xcd\x53\x3a\xa7\xb3\xc0\x20\xe2\xa6\xb2\x51\xdb\x86\xc2\x8d\x72\x9f\x1e\x0b\x55\x26\xdc\xff\x82\x3e\x1e\x24\xd4\xa8\x15\x50\x2a\x48\x22\xc9\x71\x2d\xa8\xb6\x6a\x65\x0b\x67\xf9\xec\xb5\xda\xa8\xb5\xc1\x5f\x15\xfa\x8c\x4a\x5d\x02\x08\x14\x4a\x86\xc4\x89\x3d\xab\x9f\x50\x97\xea\x1d\x47\xff\x8f\x48\x8d\x0a\x2c\x00\xd5\xcc\x1f\xcd\x90\x3d\xbb\x06\xf6\xbb\x91\x9f\x4d\x51\x61\x3a\x02\xa3\x55\xfe\x0f\x9b\xb3\x1e\x76\x5f\x42\x2d\xcd\x1d\x86\xb2\x17\x9b\x5c\xa2\xa1\xe7\xa1\x30\xac\x03\xe4\x17\x2b\xcd\x53\xff\x3b\x60\xce\x1e\x30\xdd\xb1\xf2\xaf\x97\xf3\x32\x7f\x1b\x93\xf9\x6f\x3e\x82\xea\xe3\xa7\xb7\xdd\xe6\x64\x16\x1c\x41\x49\xdd\xb4\x72\x1c\xd0\x7b\xdd\xbc\x04\xd5\x7f\x20\xa8\x17\x60\x7a\x01\xa4\x17\x20\x7a\x01\xa0\x17\xe0\x79\x01\x9c\x17\xa0\x79\x01\x98\x17\x60\x79\x01\x94\x17\x20\x79\x01\x90\x17\xe0\x78\x01\x8c\xbf\x07\xc5\xee\x96\xc7\xa2\xd9\x47\xf2\xea\x97\x9a\x3c\xb6\xd0\xd3\x52\x7d\x1e\x52\xbb\x0b\x31\x9b\x42\xa7\x37\x38\xd7\xba\xca\x50\xd8\x60\x2b\xe9\x6f\x5a\x47\x68\x69\x19\x5a\x12\x13\xae\x38\xdc\x7a\x7a\xd8\xd2\xd2\x18\x82\x25\x76\xbb\x6e\x44\x4e\xd1\x03\x78\x7b\xee\x89\x88\xc8\xea\xb9\xeb\xa9\xd5\xc7\xc6\x54\x3d\x90\xbb\x85\x42\xe6\x0b\x61\xb7\x69\xfb\x37\x7c\x4b\x7a\x44\xf7\x7f\x51\x17\x7b\xa9\x37\x2c\x7c\x89\x25\xa0\x1f\x91\x24\x15\xb8\xb5\x8a\xaf\xfd\xc6\x3e\x11\x08\xd6\xd4\x3f\x24\xfc\xb1\xce\x7d\xe5\x99\x23\x60\xfd\x53\x8e\x15\xc6\xff\xdf\xeb\xdf\xc5\x6e\xed\x05\xb7\xc6\x83\xff\x2e\x77\x4e\x1e\xbd\xca\x68\xb1\xff\x04\x67\xaf\xa9\xd4\xe3\xd6\xd4\x2c\xd8\x62\x7c\xe2\x1a\xbd\x79\xe3\xea\xb4\x6f\xde\x2c\xc7\xea\x02\x67\xc7\x92\x53\xde\xd6\xa9\x15\x5e\xa4\xe2\xdc\x3a\x04\x3f\xb7\xc3\xf7\x24\xc1\x8c\xbd\x85\x0f\xfe\xe6\xe5\x3c\x15\x75\xfe\x60\xc9\x47\x4c\x71\x65\xc8\x9a\x3a\x55\x27\x41\x1c\x64\xcb\xeb\xde\x95\xf6\xf6\x4e\x81\x84\xf7\x35\x13\x75\x50\x90\xc0\x2b\xe1\x42\x0d\x9b\x5a\x09\x7a\x6c\xb1\xfe\xcb\x05\x1b\x5c\x80\x0a\xfd\x4d\xbd\xd4\xdf\xbf\x20\x5c\x9b\xec\x7b\x24\x4f\x50\x47\x3e\x98\xb2\x69\x3d\x76\x07\x99\xfd\x30\xfa\x22\xef\xcf\xa4\x92\x9b\xab\x0f\x25\xfe\xb9\xb2\x74\x27\x76\xd1\xa6\x2c\xef\x98\x52\x93\xda\xb6\xdf\x9d\x5f\x0c\xb7\x98\x0b\xac\x99\xf2\xef\x0e\x28\x48\xf0\x3f\xb1\x98\xff\xd6\x7e\x5e\xdf\x5e\x42\xd5\x7f\xa2\xae\xed\xfd\x2e\xa5\xbf\x34\x2a\x4b\x29\xa5\x9f\x65\xb7\x40\xaf\xb7\x3c\x33\x43\xac\x36\x65\x29\x7e\x34\xfa\x85\xc6\x8e\xab\x57\xb9\xfb\x47\x0b\x40\x1f\x67\x39\x40\x19\x15\x61\x62\x5f\xe3\x61\x2b\x99\x63\x10\x09\x7a\xd2\x8a\x5a\x2e\x32\xcd\xb0\x51\xe5\x68\x1d\x7f\x44\x77\x11\x67\x94\x64\xb4\x6c\xed\x29\x37\xe0\xa6\x69\x68\x37\x54\xb5\x3f\x72\x57\xa6\x5e\x17\x8b\x3c\x9b\x51\x79\x03\x15\x7b\x82\x5e\xcf\xd1\xfe\xb2\x0c\x29\xa3\xfa\x06\x1b\xd7\xfe\xf7\x1a\x8b\xf4\x85\xa8\x60\x35\xfc\x58\xb5\x54\x92\x86\x42\xff\xd1\xaa\xc3\x07\x88\x71\x34\x44\x84\x07\xc4\x7a\xa0\x95\xe6\x45\x52\xd7\xca\x31\x60\xfd\x77\x5e\xd3\x72\x0a\x1e\x5f\x72\x88\xfe\x6e\xdb\xc3\xfd\x50\xac\x45\xf8\x3c\x6a\x58\xd8\xef\x95\x53\xd8\xaa\x9d\x5a\xcc\xc6\x9c\x16\x4b\xd8\x13\x48\xe1\x5d\x87\x1b\xc2\xd6\xef\x16\x23\x9a\x6e\x27\xbf\xdf\xb8\x88\x6e\x97\xe6\x72\xca\xa4\x09\x53\xbb\x52\x62\xc6\x7b\xc6\xa7\xd3\xf2\x05\xfa\x46\x43\x7f\x3f\xfb\x67\x00\x00\x00\xff\xff\xe2\xa6\xfd\xe1\xf8\x3a\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
