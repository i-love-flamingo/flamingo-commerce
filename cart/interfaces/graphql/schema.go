// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\xc8\xc8\xc5\x2f\x50\xbc\xc0\xee\xd1\x37\xc7\x6e\x0b\xa3\x4d\x9a\xa6\x69\xf7\x50\x14\x06\x23\x8e\x6d\x6e\x29\x52\x4b\x52\x49\x84\xa2\xff\x7d\x41\x8a\x94\xf9\xa5\x8f\xed\x62\x7b\xd9\xcd\xa1\xa8\x35\x0f\x87\xc3\xe1\x33\xc3\x47\x94\x6a\x6b\x28\x36\xbc\xaa\x40\x94\xb0\xdf\x42\xc9\x05\x52\x80\x37\x48\xa8\xe2\xdb\x45\x51\x14\x45\x89\x84\x5a\x9d\x21\xda\xb2\x30\x06\xec\xc0\x5b\xa0\xe4\x11\x04\x01\xb9\x2a\x3e\x07\xc0\x6d\x04\x69\x17\x5f\xcc\xd0\x23\xa4\xa6\xab\x76\xc3\x31\x2c\xb1\xfd\xa9\x7f\xac\x8a\x0f\x4a\x10\x76\x5c\xfc\x2f\x0a\x20\x19\x7c\xf1\xfd\xe2\x22\x5c\x8a\xb7\x02\x82\x57\xc5\x6e\xdb\x05\x0d\x4c\x11\xd5\xee\xb6\xbd\x6b\xf3\xf4\x81\x50\x4a\xd8\x71\x8d\xb1\x00\x29\xa3\xc9\xec\x53\x03\xac\x1b\x51\x9e\x90\x04\x11\x61\x6e\x41\x48\xce\x6c\x5a\x86\xb3\x11\x24\x01\x61\x4c\x14\xe1\x0c\xd1\x2d\x52\x28\x9d\xd4\x33\x76\x51\xd6\xa8\xad\x80\xa9\x0f\x40\xa1\xd4\xb6\x68\xc8\xfe\x36\xb2\x77\x4b\x03\xca\xd9\x51\xde\xf3\x75\xa3\x4e\x7a\xf5\xa5\xce\xdb\x47\xb3\x84\x2b\xce\x29\x20\xd6\x79\x47\xb1\x3d\x4e\x12\xaa\x6b\x4a\x00\x6f\x78\x53\x73\xa6\xb7\x27\x59\xe0\xd9\x64\x97\x88\xe1\x80\x1a\xaa\x36\x8d\x10\xc0\xca\x36\xf4\xa7\xb8\x42\x94\x28\xa8\x12\x3f\xf7\xce\x62\xdd\xe8\xff\x6e\x78\xc3\xd4\xaa\xd8\x31\xcb\xbe\x5a\x70\xdc\x94\x2a\x7e\x4c\x64\x90\x05\xc0\xd1\x2a\x8f\x02\x31\x6c\xfc\x7b\xd9\xbb\x15\xa4\x84\xce\x2e\x9b\xca\x58\xef\xd1\xf3\xba\xea\x7c\xe7\x61\x0f\x06\x76\x03\x03\x00\x9b\xac\xd7\xe4\xa0\x36\x48\xe0\x64\x89\xeb\xd0\xee\xd7\xc5\x8f\x94\x83\xad\x82\xc8\x87\xdb\x24\x3b\xec\x8b\xae\x12\xc2\x14\x88\x03\x2a\x61\x82\x3c\xb6\x76\x8e\x48\xc1\x13\xca\xed\xdc\x27\x44\x1b\x48\x17\x9f\x2d\xc4\xfd\xb6\x23\x42\x32\x09\xa9\x6a\x0a\xfa\x91\xfc\x99\xe1\x24\xed\xc3\x7a\x77\xc9\x1e\x48\x6f\xd4\xf6\x76\x39\xea\x6e\x7d\x6b\xa6\xdb\x69\x8c\x36\x5d\xb5\x3b\xbc\xb4\x8d\x69\xb0\xbb\x69\xe0\xd0\x0a\xb2\x81\xef\xd8\x81\x0f\x04\xaf\x4d\x7d\x3f\xcf\x56\x9d\x17\xb1\x3c\x91\xba\x26\xec\xa8\x1f\x45\xfe\x3e\x78\xa6\xa0\x14\x5e\x0b\x1e\xb4\x4e\xb3\x01\x13\x35\x37\xaf\xe4\xa6\x2a\x2e\xf0\xb2\x25\xb2\xd4\x4e\x46\x5d\x55\x37\x9c\xe9\x05\xdc\x01\x35\x34\x98\x35\xe6\xaf\x0e\xf0\xd2\xf2\x1b\x51\x27\x37\x26\x9f\x23\x6f\x79\xd3\xe0\x13\x92\x96\x7c\x7d\x6f\x1b\x65\x89\xde\x7b\x77\x9a\xfb\x7d\xc4\x3c\x79\xe2\xe2\xeb\x81\xf2\xa7\xf0\x69\x05\xea\xc4\x71\xf8\xac\x44\x42\x10\x7d\x6e\xf8\x0f\x1d\xf5\xde\xf2\x12\x65\x0e\xa5\x6d\x64\xb6\x63\x24\x11\x80\xef\x49\x05\xab\x42\xff\xeb\xca\x24\x3c\xf5\x96\x5f\xa1\xf5\x7b\x5e\x70\x18\x05\xc8\x37\xd0\x06\x7d\x4e\x23\x2e\x23\x98\x97\x0b\xb9\x2a\x2a\x54\x7f\x96\x06\xfe\xe5\x77\xc9\xd9\xff\xef\xd0\xd3\x35\x48\x89\x8e\x30\x63\xf0\x35\xaa\xcf\xa8\x30\x6c\x0f\x18\x87\x7f\x8d\xea\x24\x76\x0f\x1e\xaf\x61\x74\x47\x5d\x3a\x0b\xbb\xad\x1a\x99\x24\x68\x42\xcb\x34\x12\xae\x22\xdd\x13\x1c\x95\x21\x55\xb2\xe1\xf8\xcd\xc0\x45\x42\x14\x8d\x42\xa9\x35\x71\x87\xea\x56\x8d\x56\xbd\x3d\x46\x73\xe5\xe0\x9d\xa2\xbd\x79\x20\xcc\x18\xe6\x74\x61\xae\x0b\x46\xd8\xa1\x8d\x88\x60\xbd\x56\xae\x6a\x44\x8e\xac\x3b\xad\xc3\xe2\xe9\xb5\xd1\x4a\xff\xf4\x4d\x14\x3d\x00\x35\x4f\x8b\xd8\x64\xd7\xef\x8c\x39\xa5\xd1\x6d\x7d\x76\x34\x91\x5e\xcf\x8a\x76\x57\x72\xa1\xde\x09\xac\xcb\x59\xff\x19\x01\x35\x7e\x58\x7a\x9b\x4c\xd2\x73\xa1\x3f\x0f\xac\x30\x0b\xb6\xd3\x3c\xc9\xbb\xf7\xbd\xfa\x3a\xfd\x59\x81\x60\x88\xde\xc1\x01\xb4\x76\x8c\x28\x55\x21\xf1\x15\x54\x4d\x51\x09\x9b\xa4\xa3\x3d\x22\x41\x10\x53\xd7\x06\x73\x9b\xc7\xd8\x28\x6f\x50\x15\x19\x24\x6f\x44\x09\xb1\xf6\xfd\x43\xb5\x9e\xc8\x9c\x6e\x3e\x21\xc2\x68\x93\x04\x33\xb3\xdf\xb9\x8e\xbf\x8e\x27\x8d\xe1\x76\x7b\xbb\x55\x10\x76\xa4\x60\x58\x92\x3d\x97\x17\x31\x6a\x50\xc8\x0a\xfe\x34\xe5\xc6\x41\x06\x7d\x5c\x5a\xd4\x3d\x7a\x06\xdf\x87\xf9\x3d\x54\xb3\x5d\x4f\xb2\xd4\x78\x44\xca\xe3\x78\x9e\xed\x07\x22\xa4\x62\x66\x43\x07\x31\x14\x65\x21\x21\xb7\x08\xc6\x14\x6e\x12\x54\x20\x39\xbb\x2e\x37\x1a\x8f\x44\xb4\x51\xf6\x4c\x1c\xc4\x28\x01\x90\x59\x5a\x8a\xb9\x11\x63\x31\x9f\xf9\x66\xf3\xf6\x96\xb0\x94\x71\x25\xaf\x6a\xc4\xda\x64\xba\xa0\x4f\x11\x95\x02\x22\x4c\xcd\xa5\xea\x3b\xd9\x60\xd4\x48\x4d\x65\x48\xc0\x91\x78\x3d\x31\x1f\x8f\x6e\xaf\x62\x22\xe6\x0e\x93\x38\x0a\x76\x0c\x28\xd4\x27\xce\xc6\xd8\x01\x15\x22\x74\x24\xe6\x2c\x51\xbb\x57\x7f\xcb\xd3\xe9\x53\xb7\x36\x70\x7d\xf4\x2b\x44\x68\x8c\xbc\x0d\xad\xae\x17\x12\xa9\x08\x3b\x6e\x1a\xa9\x78\x05\x22\x73\x5d\xf0\x32\x03\xc9\x87\x9b\x43\x46\xfd\x77\x64\x99\x7d\x64\xee\xc5\x03\x29\x78\x77\xb8\x22\x42\x9d\xa2\xfe\x8a\xa4\xac\xb9\xe8\xde\xcf\x45\x9b\x37\xde\x34\xd5\x43\xac\x27\x19\xea\x78\x6c\x68\x38\x9a\xf8\xb0\x21\xda\x80\x4c\xab\x29\xcd\xda\xd6\x4a\x09\xf2\xd0\x28\xf0\x14\x9b\x00\x09\xe2\x11\xb0\x39\xf9\xfc\x26\x9f\x9d\xa1\xbf\x87\x18\x14\xcf\x43\x6a\x27\xdf\x07\x43\x95\x96\x9d\xf2\x7c\x85\x92\x9d\x73\x4c\x8b\xb8\xbb\x84\xc1\x60\x7b\x31\x91\x6d\xe2\x9a\xfc\x8c\xb0\xe3\xdc\x57\xfa\x4f\x88\x12\x6c\x36\xeb\x0e\x64\x43\x9d\x04\x3a\x21\xa9\x71\x9c\xbd\x14\x82\x9f\x7b\x56\xa4\x2c\x7b\x80\x15\xdd\x6f\x20\xa2\xc8\x25\x31\xca\x45\x3b\x96\x5e\x45\x86\x5a\x6d\xaf\xc5\xc3\x39\x0e\xe3\xb0\x13\x6c\x97\x99\x80\x33\xe0\xe2\xdb\x85\x21\x8c\x9e\x4c\xb3\x21\xa9\x78\x63\x85\xa1\x40\x2f\xf3\x99\x31\x92\xc3\x52\xec\xfc\xe6\xc5\xf5\x6f\xc7\xf8\xa8\xf1\x84\xb7\x3c\x13\x0d\x67\x1f\xaa\xf6\x57\x5c\x38\x7e\x1e\xb8\xa8\xba\xe6\xd0\xfd\x4d\x0d\x33\x5d\xa2\x30\xc7\xab\x4b\x4b\xe6\x06\x61\xaf\xa1\xde\x76\xf7\x37\x09\xb5\xe0\x25\x48\xe9\x49\xcb\x81\x80\xdd\x5d\x9c\xbd\xd4\x09\xf8\xf2\x0f\x4f\x9d\x71\xe0\x92\x45\x80\x62\xc3\x82\xe4\x1d\xa0\x1b\xf5\xaa\x07\xf4\x82\x8d\x81\x40\x74\x6c\x8c\x47\xc1\xa1\x60\x1c\xf1\x0a\xf3\x96\x9d\x67\xbf\xbd\x37\x7d\xdb\xbd\x18\x8c\xb3\x21\x8a\xf5\x87\x3c\xf7\xf9\x08\xf5\xf0\x5c\xfa\x79\xfd\xf7\x3f\xa1\x36\x29\xd4\x9c\x3c\xfb\x65\x35\x8d\xf9\x75\x08\xf3\x6f\x96\x72\x46\xc6\x79\x9d\x34\x87\x99\x21\xe5\x2e\x08\xab\x1b\x75\x26\x77\xca\xeb\x9d\x01\xcc\x21\xf6\x4f\xe4\xf5\x0c\x5a\xcf\x60\xf5\x0c\x52\xcf\xe0\xf4\x0c\x4a\xcf\x60\xf4\x0c\x42\xcf\xe0\xf3\x0c\x3a\xcf\x60\xf3\x0c\x32\xcf\xe0\xf2\x0c\x2a\xcf\x60\xf2\x5c\x22\xc3\xb3\x02\x86\x8d\xba\x2c\xde\x37\xe7\xaf\x02\x41\xdb\x5e\x0d\x7c\xe5\x5d\xa4\xd0\xfd\x6b\x50\x69\x31\xc4\x47\x73\x8a\x48\x82\xb9\xb6\x04\x8c\xe3\x59\x63\x7c\xcf\xb5\x93\x65\x72\x8f\xb3\xdb\x2e\x5e\x9c\x6f\x5b\x5e\x14\x93\xdf\xbf\xc6\x16\xb3\x05\x0a\x0a\xfc\x7b\xd3\xe9\xef\x69\xd3\xfe\xb4\x8e\x5c\x3a\xc5\x68\xe2\xfd\x5b\x4e\x3f\xd6\xfa\x25\x4a\x3b\x7d\xaf\xda\x19\x7e\xbd\xf4\xcc\x9d\xc2\xec\x57\x37\x4f\xb8\x6b\x4b\x94\xdd\xdf\x81\x4e\x18\x7f\xa7\xca\x52\x60\x68\xe2\x48\x03\x2e\xe3\x2f\x79\x2f\xe2\x4f\x0e\xc9\x6c\x59\x15\xb9\xb8\xf8\xfe\x67\x00\x00\x00\xff\xff\x56\xde\xd9\xa2\xc3\x20\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
