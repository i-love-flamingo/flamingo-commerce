// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"math/big"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"flamingo.me/flamingo-commerce/v3/cart/domain/cart"
	"flamingo.me/flamingo-commerce/v3/cart/domain/decorator"
	"flamingo.me/flamingo-commerce/v3/cart/domain/placeorder"
	"flamingo.me/flamingo-commerce/v3/cart/domain/validation"
	"flamingo.me/flamingo-commerce/v3/cart/interfaces/controller/forms"
	dto1 "flamingo.me/flamingo-commerce/v3/cart/interfaces/graphql/dto"
	domain1 "flamingo.me/flamingo-commerce/v3/category/domain"
	dto3 "flamingo.me/flamingo-commerce/v3/category/interfaces/graphql/dto"
	application1 "flamingo.me/flamingo-commerce/v3/checkout/application"
	"flamingo.me/flamingo-commerce/v3/checkout/domain/placeorder/process"
	"flamingo.me/flamingo-commerce/v3/checkout/domain/placeorder/states"
	dto2 "flamingo.me/flamingo-commerce/v3/checkout/interfaces/graphql/dto"
	domain2 "flamingo.me/flamingo-commerce/v3/price/domain"
	"flamingo.me/flamingo-commerce/v3/product/application"
	"flamingo.me/flamingo-commerce/v3/product/domain"
	domain4 "flamingo.me/flamingo-commerce/v3/search/domain"
	"flamingo.me/flamingo-commerce/v3/search/interfaces/graphql/dto"
	domain3 "flamingo.me/form/domain"
	graphql1 "flamingo.me/graphql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CommerceBasicProductData struct {
		Attributes            func(childComplexity int) int
		Categories            func(childComplexity int) int
		CategoryToCodeMapping func(childComplexity int) int
		CreatedAt             func(childComplexity int) int
		Description           func(childComplexity int) int
		IsNew                 func(childComplexity int) int
		Keywords              func(childComplexity int) int
		MainCategory          func(childComplexity int) int
		MarketPlaceCode       func(childComplexity int) int
		Media                 func(childComplexity int) int
		RetailerCode          func(childComplexity int) int
		RetailerName          func(childComplexity int) int
		RetailerSku           func(childComplexity int) int
		ShortDescription      func(childComplexity int) int
		StockLevel            func(childComplexity int) int
		Title                 func(childComplexity int) int
		UpdatedAt             func(childComplexity int) int
		VisibleFrom           func(childComplexity int) int
		VisibleTo             func(childComplexity int) int
	}

	CommerceCart struct {
		AdditionalData               func(childComplexity int) int
		AppliedCouponCodes           func(childComplexity int) int
		AppliedGiftCards             func(childComplexity int) int
		AuthenticatedUserID          func(childComplexity int) int
		BelongsToAuthenticatedUser   func(childComplexity int) int
		BillingAddress               func(childComplexity int) int
		DefaultCurrency              func(childComplexity int) int
		Deliveries                   func(childComplexity int) int
		EntityID                     func(childComplexity int) int
		GetDeliveryByCodeWithoutBool func(childComplexity int, deliveryCode string) int
		GetDeliveryCodes             func(childComplexity int) int
		GrandTotal                   func(childComplexity int) int
		ID                           func(childComplexity int) int
		IsPaymentSelected            func(childComplexity int) int
		ItemCount                    func(childComplexity int) int
		PaymentSelection             func(childComplexity int) int
		ProductCount                 func(childComplexity int) int
		Purchaser                    func(childComplexity int) int
		SubTotalNet                  func(childComplexity int) int
		SumTotalTaxAmount            func(childComplexity int) int
		Totalitems                   func(childComplexity int) int
	}

	CommerceCartAdditionalData struct {
		ReservedOrderID func(childComplexity int) int
	}

	CommerceCartAddress struct {
		AdditionalAddressLines func(childComplexity int) int
		City                   func(childComplexity int) int
		Company                func(childComplexity int) int
		Country                func(childComplexity int) int
		CountryCode            func(childComplexity int) int
		Email                  func(childComplexity int) int
		Firstname              func(childComplexity int) int
		Lastname               func(childComplexity int) int
		MiddleName             func(childComplexity int) int
		PostCode               func(childComplexity int) int
		RegionCode             func(childComplexity int) int
		Salutation             func(childComplexity int) int
		State                  func(childComplexity int) int
		Street                 func(childComplexity int) int
		StreetNr               func(childComplexity int) int
		Telephone              func(childComplexity int) int
		Title                  func(childComplexity int) int
		Vat                    func(childComplexity int) int
	}

	CommerceCartAppliedDiscount struct {
		Applied       func(childComplexity int) int
		CampaignCode  func(childComplexity int) int
		CouponCode    func(childComplexity int) int
		IsItemRelated func(childComplexity int) int
		Label         func(childComplexity int) int
		SortOrder     func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	CommerceCartAppliedDiscounts struct {
		Items func(childComplexity int) int
	}

	CommerceCartAppliedGiftCard struct {
		Applied   func(childComplexity int) int
		Code      func(childComplexity int) int
		Remaining func(childComplexity int) int
	}

	CommerceCartCouponCode struct {
		Code func(childComplexity int) int
	}

	CommerceCartDecoratedDelivery struct {
		DecoratedItems           func(childComplexity int) int
		Delivery                 func(childComplexity int) int
		GetDecoratedCartItemByID func(childComplexity int, id string) int
	}

	CommerceCartDecoratedItem struct {
		Item    func(childComplexity int) int
		Product func(childComplexity int) int
	}

	CommerceCartDelivery struct {
		Cartitems                       func(childComplexity int) int
		DeliveryInfo                    func(childComplexity int) int
		GrandTotal                      func(childComplexity int) int
		HasItems                        func(childComplexity int) int
		ShippingItem                    func(childComplexity int) int
		SubTotalGross                   func(childComplexity int) int
		SubTotalGrossWithDiscounts      func(childComplexity int) int
		SubTotalNet                     func(childComplexity int) int
		SubTotalNetWithDiscounts        func(childComplexity int) int
		SumItemRelatedDiscountAmount    func(childComplexity int) int
		SumNonItemRelatedDiscountAmount func(childComplexity int) int
		SumTotalDiscountAmount          func(childComplexity int) int
		SumTotalTaxAmount               func(childComplexity int) int
	}

	CommerceCartDeliveryInfo struct {
		AdditionalDataKeys         func(childComplexity int) int
		AdditionalDeliveryInfoKeys func(childComplexity int) int
		Carrier                    func(childComplexity int) int
		Code                       func(childComplexity int) int
		DeliveryLocation           func(childComplexity int) int
		DesiredTime                func(childComplexity int) int
		GetAdditionalData          func(childComplexity int, key string) int
		Method                     func(childComplexity int) int
		Workflow                   func(childComplexity int) int
	}

	CommerceCartDeliveryLocation struct {
		Address           func(childComplexity int) int
		Code              func(childComplexity int) int
		Type              func(childComplexity int) int
		UseBillingAddress func(childComplexity int) int
	}

	CommerceCartExistingCustomerData struct {
		ID func(childComplexity int) int
	}

	CommerceCartItem struct {
		AdditionalDataKeys     func(childComplexity int) int
		AdditionalDataValues   func(childComplexity int) int
		ExternalReference      func(childComplexity int) int
		GetAdditionalData      func(childComplexity int, key string) int
		HasAdditionalDataKey   func(childComplexity int, key string) int
		ID                     func(childComplexity int) int
		MarketplaceCode        func(childComplexity int) int
		ProductName            func(childComplexity int) int
		Qty                    func(childComplexity int) int
		RowPriceGross          func(childComplexity int) int
		RowPriceNet            func(childComplexity int) int
		SinglePriceGross       func(childComplexity int) int
		SinglePriceNet         func(childComplexity int) int
		SourceID               func(childComplexity int) int
		VariantMarketPlaceCode func(childComplexity int) int
	}

	CommerceCartPerson struct {
		Address              func(childComplexity int) int
		ExistingCustomerData func(childComplexity int) int
		PersonalDetails      func(childComplexity int) int
	}

	CommerceCartPersonalDetails struct {
		DateOfBirth     func(childComplexity int) int
		Nationality     func(childComplexity int) int
		PassportCountry func(childComplexity int) int
		PassportNumber  func(childComplexity int) int
	}

	CommerceCartShippingItem struct {
		AppliedDiscounts func(childComplexity int) int
		PriceNet         func(childComplexity int) int
		TaxAmount        func(childComplexity int) int
		Title            func(childComplexity int) int
	}

	CommerceCartTotalitem struct {
		Code  func(childComplexity int) int
		Price func(childComplexity int) int
		Title func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	CommerceCartBillingAddressForm struct {
		FormData       func(childComplexity int) int
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	CommerceCartBillingAddressFormData struct {
		AddressLine1 func(childComplexity int) int
		AddressLine2 func(childComplexity int) int
		City         func(childComplexity int) int
		Company      func(childComplexity int) int
		Country      func(childComplexity int) int
		CountryCode  func(childComplexity int) int
		Email        func(childComplexity int) int
		Firstname    func(childComplexity int) int
		Lastname     func(childComplexity int) int
		MiddleName   func(childComplexity int) int
		PhoneNumber  func(childComplexity int) int
		PostCode     func(childComplexity int) int
		RegionCode   func(childComplexity int) int
		Salutation   func(childComplexity int) int
		State        func(childComplexity int) int
		Street       func(childComplexity int) int
		StreetNr     func(childComplexity int) int
		Title        func(childComplexity int) int
		Vat          func(childComplexity int) int
	}

	CommerceCartDefaultPaymentSelection struct {
		Gateway    func(childComplexity int) int
		TotalValue func(childComplexity int) int
	}

	CommerceCartFormError struct {
		DefaultLabel func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	CommerceCartFormFieldError struct {
		DefaultLabel func(childComplexity int) int
		FieldName    func(childComplexity int) int
		MessageKey   func(childComplexity int) int
	}

	CommerceCartFormValidationInfo struct {
		FieldErrors   func(childComplexity int) int
		GeneralErrors func(childComplexity int) int
	}

	CommerceCartPlacedOrderInfo struct {
		DeliveryCode func(childComplexity int) int
		OrderNumber  func(childComplexity int) int
	}

	CommerceCartSelectedPaymentResult struct {
		Processed      func(childComplexity int) int
		ValidationInfo func(childComplexity int) int
	}

	CommerceCartValidationResult struct {
		CommonErrorMessageKey func(childComplexity int) int
		HasCommonError        func(childComplexity int) int
	}

	CommerceCategoryData struct {
		Active     func(childComplexity int) int
		Attributes func(childComplexity int) int
		Code       func(childComplexity int) int
		Name       func(childComplexity int) int
		Path       func(childComplexity int) int
		Promoted   func(childComplexity int) int
	}

	CommerceCategoryTeaser struct {
		Code   func(childComplexity int) int
		Name   func(childComplexity int) int
		Parent func(childComplexity int) int
		Path   func(childComplexity int) int
	}

	CommerceCategoryTree struct {
		Active        func(childComplexity int) int
		Code          func(childComplexity int) int
		DocumentCount func(childComplexity int) int
		HasChilds     func(childComplexity int) int
		Name          func(childComplexity int) int
		Path          func(childComplexity int) int
		SubTrees      func(childComplexity int) int
	}

	CommerceCategoryAttribute struct {
		Code   func(childComplexity int) int
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	CommerceCategoryAttributeValue struct {
		Label func(childComplexity int) int
		Value func(childComplexity int) int
	}

	CommerceCategoryAttributes struct {
		All func(childComplexity int) int
		Get func(childComplexity int, code string) int
		Has func(childComplexity int, code string) int
	}

	CommerceCategorySearchResult struct {
		Category            func(childComplexity int) int
		ProductSearchResult func(childComplexity int) int
	}

	CommerceCharge struct {
		Price     func(childComplexity int) int
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	CommerceChargeQualifier struct {
		Reference func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderContext struct {
		Cart       func(childComplexity int) int
		OrderInfos func(childComplexity int) int
		State      func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderPaymentInfo struct {
		Amount          func(childComplexity int) int
		Gateway         func(childComplexity int) int
		Method          func(childComplexity int) int
		PaymentProvider func(childComplexity int) int
		Title           func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateCancellationReasonPaymentError struct {
		Reason func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateCancellationReasonValidationError struct {
		Reason           func(childComplexity int) int
		ValidationResult func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateFatalError struct {
		IsFinal func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateNew struct {
		IsFinal func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateSuccess struct {
		IsFinal func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	CommerceCheckoutPlaceOrderStateStateWait struct {
		IsFinal func(childComplexity int) int
		Name    func(childComplexity int) int
	}

	CommerceCheckoutPlacedOrderInfos struct {
		Email            func(childComplexity int) int
		PaymentInfos     func(childComplexity int) int
		PlacedOrderInfos func(childComplexity int) int
	}

	CommerceDecoratedCart struct {
		Cart                                  func(childComplexity int) int
		DecoratedDeliveries                   func(childComplexity int) int
		GetDecoratedDeliveryByCodeWithoutBool func(childComplexity int, deliveryCode string) int
	}

	CommercePrice struct {
		Currency    func(childComplexity int) int
		FloatAmount func(childComplexity int) int
	}

	CommercePriceContext struct {
		ChannelCode   func(childComplexity int) int
		CustomerGroup func(childComplexity int) int
		Locale        func(childComplexity int) int
	}

	CommerceProductAttribute struct {
		Code     func(childComplexity int) int
		Label    func(childComplexity int) int
		UnitCode func(childComplexity int) int
	}

	CommerceProductAttributes struct {
		Attribute     func(childComplexity int, key string) int
		AttributeKeys func(childComplexity int) int
		Attributes    func(childComplexity int) int
		HasAttribute  func(childComplexity int, key string) int
	}

	CommerceProductLoyaltyPriceInfo struct {
		Context          func(childComplexity int) int
		Default          func(childComplexity int) int
		DiscountText     func(childComplexity int) int
		Discounted       func(childComplexity int) int
		IsDiscounted     func(childComplexity int) int
		MaxPointsToSpent func(childComplexity int) int
		MinPointsToSpent func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	CommerceProductMedia struct {
		MimeType  func(childComplexity int) int
		Reference func(childComplexity int) int
		Title     func(childComplexity int) int
		Type      func(childComplexity int) int
		Usage     func(childComplexity int) int
	}

	CommerceProductPriceInfo struct {
		ActiveBase        func(childComplexity int) int
		ActiveBaseAmount  func(childComplexity int) int
		ActiveBaseUnit    func(childComplexity int) int
		CampaignRules     func(childComplexity int) int
		Default           func(childComplexity int) int
		DenyMoreDiscounts func(childComplexity int) int
		DiscountText      func(childComplexity int) int
		Discounted        func(childComplexity int) int
		IsDiscounted      func(childComplexity int) int
		TaxClass          func(childComplexity int) int
	}

	CommerceProductSaleable struct {
		ActivePrice     func(childComplexity int) int
		AvailablePrices func(childComplexity int) int
		IsSaleable      func(childComplexity int) int
		LoyaltyPrices   func(childComplexity int) int
		SaleableFrom    func(childComplexity int) int
		SaleableTo      func(childComplexity int) int
	}

	CommerceProductSpecificationEntry struct {
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	CommerceProductSpecificationGroup struct {
		Entries func(childComplexity int) int
		Title   func(childComplexity int) int
	}

	CommerceProductSpecifications struct {
		Groups func(childComplexity int) int
	}

	CommerceProductTeaserData struct {
		MarketPlaceCode        func(childComplexity int) int
		Media                  func(childComplexity int) int
		PreSelectedVariantSku  func(childComplexity int) int
		ShortDescription       func(childComplexity int) int
		ShortTitle             func(childComplexity int) int
		TeaserAvailablePrices  func(childComplexity int) int
		TeaserLoyaltyPriceInfo func(childComplexity int) int
		TeaserPrice            func(childComplexity int) int
		TeaserPriceIsFromPrice func(childComplexity int) int
	}

	CommerceProductSearchResult struct {
		Products    func(childComplexity int) int
		SearchMeta  func(childComplexity int) int
		Suggestions func(childComplexity int) int
	}

	CommerceSearchMeta struct {
		NumPages      func(childComplexity int) int
		NumResults    func(childComplexity int) int
		OriginalQuery func(childComplexity int) int
		Page          func(childComplexity int) int
		Query         func(childComplexity int) int
		SortOptions   func(childComplexity int) int
	}

	CommerceSearchSortOption struct {
		Field        func(childComplexity int) int
		Label        func(childComplexity int) int
		SelectedAsc  func(childComplexity int) int
		SelectedDesc func(childComplexity int) int
	}

	CommerceSearchSuggestion struct {
		Highlight func(childComplexity int) int
		Text      func(childComplexity int) int
	}

	CommerceSimpleProduct struct {
		BaseData          func(childComplexity int) int
		GetIdentifier     func(childComplexity int) int
		GetMedia          func(childComplexity int, group string, usage string) int
		GetSpecifications func(childComplexity int) int
		HasMedia          func(childComplexity int, group string, usage string) int
		IsSaleable        func(childComplexity int) int
		SaleableData      func(childComplexity int) int
		TeaserData        func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	Mutation struct {
		CommerceAddToCart                 func(childComplexity int, marketplaceCode string, qty int, deliveryCode string) int
		CommerceCartUpdateBillingAddress  func(childComplexity int, addressForm *forms.BillingAddressForm) int
		CommerceCartUpdateSelectedPayment func(childComplexity int, gateway string, method string) int
		CommerceCheckoutCancelPlaceOrder  func(childComplexity int) int
		CommerceCheckoutStartPlaceOrder   func(childComplexity int, returnURL string) int
		CommerceDeleteCartDelivery        func(childComplexity int, deliveryCode string) int
		CommerceDeleteItem                func(childComplexity int, itemID string, deliveryCode string) int
		CommerceUpdateItemQty             func(childComplexity int, itemID string, deliveryCode string, qty int) int
		Flamingo                          func(childComplexity int) int
	}

	Query struct {
		CommerceCart                      func(childComplexity int) int
		CommerceCategory                  func(childComplexity int, categoryCode string, categorySearchRequest *dto.CommerceSearchRequest) int
		CommerceCategoryTree              func(childComplexity int, activeCategoryCode string) int
		CommerceCheckoutPlaceOrderContext func(childComplexity int) int
		CommerceProduct                   func(childComplexity int, marketplaceCode string) int
		CommerceProductSearch             func(childComplexity int, searchRequest *dto.CommerceSearchRequest) int
		Flamingo                          func(childComplexity int) int
	}
}

type MutationResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceAddToCart(ctx context.Context, marketplaceCode string, qty int, deliveryCode string) (*decorator.DecoratedCart, error)
	CommerceDeleteCartDelivery(ctx context.Context, deliveryCode string) (*decorator.DecoratedCart, error)
	CommerceDeleteItem(ctx context.Context, itemID string, deliveryCode string) (*decorator.DecoratedCart, error)
	CommerceUpdateItemQty(ctx context.Context, itemID string, deliveryCode string, qty int) (*decorator.DecoratedCart, error)
	CommerceCartUpdateBillingAddress(ctx context.Context, addressForm *forms.BillingAddressForm) (*dto1.BillingAddressForm, error)
	CommerceCartUpdateSelectedPayment(ctx context.Context, gateway string, method string) (*dto1.SelectedPaymentResult, error)
	CommerceCheckoutStartPlaceOrder(ctx context.Context, returnURL string) (bool, error)
	CommerceCheckoutCancelPlaceOrder(ctx context.Context) (bool, error)
}
type QueryResolver interface {
	Flamingo(ctx context.Context) (*string, error)
	CommerceProduct(ctx context.Context, marketplaceCode string) (domain.BasicProduct, error)
	CommerceProductSearch(ctx context.Context, searchRequest *dto.CommerceSearchRequest) (*application.SearchResult, error)
	CommerceCart(ctx context.Context) (*decorator.DecoratedCart, error)
	CommerceCheckoutPlaceOrderContext(ctx context.Context) (*dto2.PlaceOrderContext, error)
	CommerceCategoryTree(ctx context.Context, activeCategoryCode string) (domain1.Tree, error)
	CommerceCategory(ctx context.Context, categoryCode string, categorySearchRequest *dto.CommerceSearchRequest) (*dto3.CategorySearchResult, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Commerce_BasicProductData.attributes":
		if e.complexity.CommerceBasicProductData.Attributes == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Attributes(childComplexity), true

	case "Commerce_BasicProductData.Categories":
		if e.complexity.CommerceBasicProductData.Categories == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Categories(childComplexity), true

	case "Commerce_BasicProductData.categoryToCodeMapping":
		if e.complexity.CommerceBasicProductData.CategoryToCodeMapping == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.CategoryToCodeMapping(childComplexity), true

	case "Commerce_BasicProductData.createdAt":
		if e.complexity.CommerceBasicProductData.CreatedAt == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.CreatedAt(childComplexity), true

	case "Commerce_BasicProductData.description":
		if e.complexity.CommerceBasicProductData.Description == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Description(childComplexity), true

	case "Commerce_BasicProductData.isNew":
		if e.complexity.CommerceBasicProductData.IsNew == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.IsNew(childComplexity), true

	case "Commerce_BasicProductData.keywords":
		if e.complexity.CommerceBasicProductData.Keywords == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Keywords(childComplexity), true

	case "Commerce_BasicProductData.MainCategory":
		if e.complexity.CommerceBasicProductData.MainCategory == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.MainCategory(childComplexity), true

	case "Commerce_BasicProductData.marketPlaceCode":
		if e.complexity.CommerceBasicProductData.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.MarketPlaceCode(childComplexity), true

	case "Commerce_BasicProductData.media":
		if e.complexity.CommerceBasicProductData.Media == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Media(childComplexity), true

	case "Commerce_BasicProductData.retailerCode":
		if e.complexity.CommerceBasicProductData.RetailerCode == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.RetailerCode(childComplexity), true

	case "Commerce_BasicProductData.retailerName":
		if e.complexity.CommerceBasicProductData.RetailerName == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.RetailerName(childComplexity), true

	case "Commerce_BasicProductData.retailerSku":
		if e.complexity.CommerceBasicProductData.RetailerSku == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.RetailerSku(childComplexity), true

	case "Commerce_BasicProductData.shortDescription":
		if e.complexity.CommerceBasicProductData.ShortDescription == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.ShortDescription(childComplexity), true

	case "Commerce_BasicProductData.stockLevel":
		if e.complexity.CommerceBasicProductData.StockLevel == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.StockLevel(childComplexity), true

	case "Commerce_BasicProductData.title":
		if e.complexity.CommerceBasicProductData.Title == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.Title(childComplexity), true

	case "Commerce_BasicProductData.updatedAt":
		if e.complexity.CommerceBasicProductData.UpdatedAt == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.UpdatedAt(childComplexity), true

	case "Commerce_BasicProductData.visibleFrom":
		if e.complexity.CommerceBasicProductData.VisibleFrom == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.VisibleFrom(childComplexity), true

	case "Commerce_BasicProductData.visibleTo":
		if e.complexity.CommerceBasicProductData.VisibleTo == nil {
			break
		}

		return e.complexity.CommerceBasicProductData.VisibleTo(childComplexity), true

	case "Commerce_Cart.additionalData":
		if e.complexity.CommerceCart.AdditionalData == nil {
			break
		}

		return e.complexity.CommerceCart.AdditionalData(childComplexity), true

	case "Commerce_Cart.appliedCouponCodes":
		if e.complexity.CommerceCart.AppliedCouponCodes == nil {
			break
		}

		return e.complexity.CommerceCart.AppliedCouponCodes(childComplexity), true

	case "Commerce_Cart.appliedGiftCards":
		if e.complexity.CommerceCart.AppliedGiftCards == nil {
			break
		}

		return e.complexity.CommerceCart.AppliedGiftCards(childComplexity), true

	case "Commerce_Cart.authenticatedUserID":
		if e.complexity.CommerceCart.AuthenticatedUserID == nil {
			break
		}

		return e.complexity.CommerceCart.AuthenticatedUserID(childComplexity), true

	case "Commerce_Cart.belongsToAuthenticatedUser":
		if e.complexity.CommerceCart.BelongsToAuthenticatedUser == nil {
			break
		}

		return e.complexity.CommerceCart.BelongsToAuthenticatedUser(childComplexity), true

	case "Commerce_Cart.billingAddress":
		if e.complexity.CommerceCart.BillingAddress == nil {
			break
		}

		return e.complexity.CommerceCart.BillingAddress(childComplexity), true

	case "Commerce_Cart.defaultCurrency":
		if e.complexity.CommerceCart.DefaultCurrency == nil {
			break
		}

		return e.complexity.CommerceCart.DefaultCurrency(childComplexity), true

	case "Commerce_Cart.deliveries":
		if e.complexity.CommerceCart.Deliveries == nil {
			break
		}

		return e.complexity.CommerceCart.Deliveries(childComplexity), true

	case "Commerce_Cart.entityID":
		if e.complexity.CommerceCart.EntityID == nil {
			break
		}

		return e.complexity.CommerceCart.EntityID(childComplexity), true

	case "Commerce_Cart.getDeliveryByCode":
		if e.complexity.CommerceCart.GetDeliveryByCodeWithoutBool == nil {
			break
		}

		args, err := ec.field_Commerce_Cart_getDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCart.GetDeliveryByCodeWithoutBool(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Cart.getDeliveryCodes":
		if e.complexity.CommerceCart.GetDeliveryCodes == nil {
			break
		}

		return e.complexity.CommerceCart.GetDeliveryCodes(childComplexity), true

	case "Commerce_Cart.grandTotal":
		if e.complexity.CommerceCart.GrandTotal == nil {
			break
		}

		return e.complexity.CommerceCart.GrandTotal(childComplexity), true

	case "Commerce_Cart.id":
		if e.complexity.CommerceCart.ID == nil {
			break
		}

		return e.complexity.CommerceCart.ID(childComplexity), true

	case "Commerce_Cart.isPaymentSelected":
		if e.complexity.CommerceCart.IsPaymentSelected == nil {
			break
		}

		return e.complexity.CommerceCart.IsPaymentSelected(childComplexity), true

	case "Commerce_Cart.itemCount":
		if e.complexity.CommerceCart.ItemCount == nil {
			break
		}

		return e.complexity.CommerceCart.ItemCount(childComplexity), true

	case "Commerce_Cart.paymentSelection":
		if e.complexity.CommerceCart.PaymentSelection == nil {
			break
		}

		return e.complexity.CommerceCart.PaymentSelection(childComplexity), true

	case "Commerce_Cart.productCount":
		if e.complexity.CommerceCart.ProductCount == nil {
			break
		}

		return e.complexity.CommerceCart.ProductCount(childComplexity), true

	case "Commerce_Cart.purchaser":
		if e.complexity.CommerceCart.Purchaser == nil {
			break
		}

		return e.complexity.CommerceCart.Purchaser(childComplexity), true

	case "Commerce_Cart.subTotalNet":
		if e.complexity.CommerceCart.SubTotalNet == nil {
			break
		}

		return e.complexity.CommerceCart.SubTotalNet(childComplexity), true

	case "Commerce_Cart.sumTotalTaxAmount":
		if e.complexity.CommerceCart.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.CommerceCart.SumTotalTaxAmount(childComplexity), true

	case "Commerce_Cart.totalitems":
		if e.complexity.CommerceCart.Totalitems == nil {
			break
		}

		return e.complexity.CommerceCart.Totalitems(childComplexity), true

	case "Commerce_CartAdditionalData.reservedOrderID":
		if e.complexity.CommerceCartAdditionalData.ReservedOrderID == nil {
			break
		}

		return e.complexity.CommerceCartAdditionalData.ReservedOrderID(childComplexity), true

	case "Commerce_CartAddress.additionalAddressLines":
		if e.complexity.CommerceCartAddress.AdditionalAddressLines == nil {
			break
		}

		return e.complexity.CommerceCartAddress.AdditionalAddressLines(childComplexity), true

	case "Commerce_CartAddress.city":
		if e.complexity.CommerceCartAddress.City == nil {
			break
		}

		return e.complexity.CommerceCartAddress.City(childComplexity), true

	case "Commerce_CartAddress.company":
		if e.complexity.CommerceCartAddress.Company == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Company(childComplexity), true

	case "Commerce_CartAddress.country":
		if e.complexity.CommerceCartAddress.Country == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Country(childComplexity), true

	case "Commerce_CartAddress.countryCode":
		if e.complexity.CommerceCartAddress.CountryCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.CountryCode(childComplexity), true

	case "Commerce_CartAddress.email":
		if e.complexity.CommerceCartAddress.Email == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Email(childComplexity), true

	case "Commerce_CartAddress.firstname":
		if e.complexity.CommerceCartAddress.Firstname == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Firstname(childComplexity), true

	case "Commerce_CartAddress.lastname":
		if e.complexity.CommerceCartAddress.Lastname == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Lastname(childComplexity), true

	case "Commerce_CartAddress.middleName":
		if e.complexity.CommerceCartAddress.MiddleName == nil {
			break
		}

		return e.complexity.CommerceCartAddress.MiddleName(childComplexity), true

	case "Commerce_CartAddress.postCode":
		if e.complexity.CommerceCartAddress.PostCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.PostCode(childComplexity), true

	case "Commerce_CartAddress.regionCode":
		if e.complexity.CommerceCartAddress.RegionCode == nil {
			break
		}

		return e.complexity.CommerceCartAddress.RegionCode(childComplexity), true

	case "Commerce_CartAddress.salutation":
		if e.complexity.CommerceCartAddress.Salutation == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Salutation(childComplexity), true

	case "Commerce_CartAddress.state":
		if e.complexity.CommerceCartAddress.State == nil {
			break
		}

		return e.complexity.CommerceCartAddress.State(childComplexity), true

	case "Commerce_CartAddress.street":
		if e.complexity.CommerceCartAddress.Street == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Street(childComplexity), true

	case "Commerce_CartAddress.streetNr":
		if e.complexity.CommerceCartAddress.StreetNr == nil {
			break
		}

		return e.complexity.CommerceCartAddress.StreetNr(childComplexity), true

	case "Commerce_CartAddress.telephone":
		if e.complexity.CommerceCartAddress.Telephone == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Telephone(childComplexity), true

	case "Commerce_CartAddress.title":
		if e.complexity.CommerceCartAddress.Title == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Title(childComplexity), true

	case "Commerce_CartAddress.vat":
		if e.complexity.CommerceCartAddress.Vat == nil {
			break
		}

		return e.complexity.CommerceCartAddress.Vat(childComplexity), true

	case "Commerce_CartAppliedDiscount.applied":
		if e.complexity.CommerceCartAppliedDiscount.Applied == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Applied(childComplexity), true

	case "Commerce_CartAppliedDiscount.campaignCode":
		if e.complexity.CommerceCartAppliedDiscount.CampaignCode == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.CampaignCode(childComplexity), true

	case "Commerce_CartAppliedDiscount.couponCode":
		if e.complexity.CommerceCartAppliedDiscount.CouponCode == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.CouponCode(childComplexity), true

	case "Commerce_CartAppliedDiscount.isItemRelated":
		if e.complexity.CommerceCartAppliedDiscount.IsItemRelated == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.IsItemRelated(childComplexity), true

	case "Commerce_CartAppliedDiscount.label":
		if e.complexity.CommerceCartAppliedDiscount.Label == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Label(childComplexity), true

	case "Commerce_CartAppliedDiscount.sortOrder":
		if e.complexity.CommerceCartAppliedDiscount.SortOrder == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.SortOrder(childComplexity), true

	case "Commerce_CartAppliedDiscount.type":
		if e.complexity.CommerceCartAppliedDiscount.Type == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscount.Type(childComplexity), true

	case "Commerce_CartAppliedDiscounts.items":
		if e.complexity.CommerceCartAppliedDiscounts.Items == nil {
			break
		}

		return e.complexity.CommerceCartAppliedDiscounts.Items(childComplexity), true

	case "Commerce_CartAppliedGiftCard.applied":
		if e.complexity.CommerceCartAppliedGiftCard.Applied == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Applied(childComplexity), true

	case "Commerce_CartAppliedGiftCard.code":
		if e.complexity.CommerceCartAppliedGiftCard.Code == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Code(childComplexity), true

	case "Commerce_CartAppliedGiftCard.remaining":
		if e.complexity.CommerceCartAppliedGiftCard.Remaining == nil {
			break
		}

		return e.complexity.CommerceCartAppliedGiftCard.Remaining(childComplexity), true

	case "Commerce_CartCouponCode.code":
		if e.complexity.CommerceCartCouponCode.Code == nil {
			break
		}

		return e.complexity.CommerceCartCouponCode.Code(childComplexity), true

	case "Commerce_CartDecoratedDelivery.decoratedItems":
		if e.complexity.CommerceCartDecoratedDelivery.DecoratedItems == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedDelivery.DecoratedItems(childComplexity), true

	case "Commerce_CartDecoratedDelivery.delivery":
		if e.complexity.CommerceCartDecoratedDelivery.Delivery == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedDelivery.Delivery(childComplexity), true

	case "Commerce_CartDecoratedDelivery.getDecoratedCartItemById":
		if e.complexity.CommerceCartDecoratedDelivery.GetDecoratedCartItemByID == nil {
			break
		}

		args, err := ec.field_Commerce_CartDecoratedDelivery_getDecoratedCartItemById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartDecoratedDelivery.GetDecoratedCartItemByID(childComplexity, args["id"].(string)), true

	case "Commerce_CartDecoratedItem.item":
		if e.complexity.CommerceCartDecoratedItem.Item == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedItem.Item(childComplexity), true

	case "Commerce_CartDecoratedItem.product":
		if e.complexity.CommerceCartDecoratedItem.Product == nil {
			break
		}

		return e.complexity.CommerceCartDecoratedItem.Product(childComplexity), true

	case "Commerce_CartDelivery.cartitems":
		if e.complexity.CommerceCartDelivery.Cartitems == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.Cartitems(childComplexity), true

	case "Commerce_CartDelivery.deliveryInfo":
		if e.complexity.CommerceCartDelivery.DeliveryInfo == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.DeliveryInfo(childComplexity), true

	case "Commerce_CartDelivery.grandTotal":
		if e.complexity.CommerceCartDelivery.GrandTotal == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.GrandTotal(childComplexity), true

	case "Commerce_CartDelivery.hasItems":
		if e.complexity.CommerceCartDelivery.HasItems == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.HasItems(childComplexity), true

	case "Commerce_CartDelivery.shippingItem":
		if e.complexity.CommerceCartDelivery.ShippingItem == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.ShippingItem(childComplexity), true

	case "Commerce_CartDelivery.subTotalGross":
		if e.complexity.CommerceCartDelivery.SubTotalGross == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalGross(childComplexity), true

	case "Commerce_CartDelivery.subTotalGrossWithDiscounts":
		if e.complexity.CommerceCartDelivery.SubTotalGrossWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalGrossWithDiscounts(childComplexity), true

	case "Commerce_CartDelivery.subTotalNet":
		if e.complexity.CommerceCartDelivery.SubTotalNet == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalNet(childComplexity), true

	case "Commerce_CartDelivery.subTotalNetWithDiscounts":
		if e.complexity.CommerceCartDelivery.SubTotalNetWithDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SubTotalNetWithDiscounts(childComplexity), true

	case "Commerce_CartDelivery.sumItemRelatedDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_CartDelivery.sumNonItemRelatedDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumNonItemRelatedDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumNonItemRelatedDiscountAmount(childComplexity), true

	case "Commerce_CartDelivery.sumTotalDiscountAmount":
		if e.complexity.CommerceCartDelivery.SumTotalDiscountAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumTotalDiscountAmount(childComplexity), true

	case "Commerce_CartDelivery.sumTotalTaxAmount":
		if e.complexity.CommerceCartDelivery.SumTotalTaxAmount == nil {
			break
		}

		return e.complexity.CommerceCartDelivery.SumTotalTaxAmount(childComplexity), true

	case "Commerce_CartDeliveryInfo.additionalDataKeys":
		if e.complexity.CommerceCartDeliveryInfo.AdditionalDataKeys == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.AdditionalDataKeys(childComplexity), true

	case "Commerce_CartDeliveryInfo.additionalDeliveryInfoKeys":
		if e.complexity.CommerceCartDeliveryInfo.AdditionalDeliveryInfoKeys == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.AdditionalDeliveryInfoKeys(childComplexity), true

	case "Commerce_CartDeliveryInfo.carrier":
		if e.complexity.CommerceCartDeliveryInfo.Carrier == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Carrier(childComplexity), true

	case "Commerce_CartDeliveryInfo.code":
		if e.complexity.CommerceCartDeliveryInfo.Code == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Code(childComplexity), true

	case "Commerce_CartDeliveryInfo.deliveryLocation":
		if e.complexity.CommerceCartDeliveryInfo.DeliveryLocation == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.DeliveryLocation(childComplexity), true

	case "Commerce_CartDeliveryInfo.desiredTime":
		if e.complexity.CommerceCartDeliveryInfo.DesiredTime == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.DesiredTime(childComplexity), true

	case "Commerce_CartDeliveryInfo.getAdditionalData":
		if e.complexity.CommerceCartDeliveryInfo.GetAdditionalData == nil {
			break
		}

		args, err := ec.field_Commerce_CartDeliveryInfo_getAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartDeliveryInfo.GetAdditionalData(childComplexity, args["key"].(string)), true

	case "Commerce_CartDeliveryInfo.method":
		if e.complexity.CommerceCartDeliveryInfo.Method == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Method(childComplexity), true

	case "Commerce_CartDeliveryInfo.workflow":
		if e.complexity.CommerceCartDeliveryInfo.Workflow == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryInfo.Workflow(childComplexity), true

	case "Commerce_CartDeliveryLocation.address":
		if e.complexity.CommerceCartDeliveryLocation.Address == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Address(childComplexity), true

	case "Commerce_CartDeliveryLocation.code":
		if e.complexity.CommerceCartDeliveryLocation.Code == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Code(childComplexity), true

	case "Commerce_CartDeliveryLocation.type":
		if e.complexity.CommerceCartDeliveryLocation.Type == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.Type(childComplexity), true

	case "Commerce_CartDeliveryLocation.useBillingAddress":
		if e.complexity.CommerceCartDeliveryLocation.UseBillingAddress == nil {
			break
		}

		return e.complexity.CommerceCartDeliveryLocation.UseBillingAddress(childComplexity), true

	case "Commerce_CartExistingCustomerData.id":
		if e.complexity.CommerceCartExistingCustomerData.ID == nil {
			break
		}

		return e.complexity.CommerceCartExistingCustomerData.ID(childComplexity), true

	case "Commerce_CartItem.additionalDataKeys":
		if e.complexity.CommerceCartItem.AdditionalDataKeys == nil {
			break
		}

		return e.complexity.CommerceCartItem.AdditionalDataKeys(childComplexity), true

	case "Commerce_CartItem.additionalDataValues":
		if e.complexity.CommerceCartItem.AdditionalDataValues == nil {
			break
		}

		return e.complexity.CommerceCartItem.AdditionalDataValues(childComplexity), true

	case "Commerce_CartItem.externalReference":
		if e.complexity.CommerceCartItem.ExternalReference == nil {
			break
		}

		return e.complexity.CommerceCartItem.ExternalReference(childComplexity), true

	case "Commerce_CartItem.getAdditionalData":
		if e.complexity.CommerceCartItem.GetAdditionalData == nil {
			break
		}

		args, err := ec.field_Commerce_CartItem_getAdditionalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartItem.GetAdditionalData(childComplexity, args["key"].(string)), true

	case "Commerce_CartItem.hasAdditionalDataKey":
		if e.complexity.CommerceCartItem.HasAdditionalDataKey == nil {
			break
		}

		args, err := ec.field_Commerce_CartItem_hasAdditionalDataKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCartItem.HasAdditionalDataKey(childComplexity, args["key"].(string)), true

	case "Commerce_CartItem.id":
		if e.complexity.CommerceCartItem.ID == nil {
			break
		}

		return e.complexity.CommerceCartItem.ID(childComplexity), true

	case "Commerce_CartItem.marketplaceCode":
		if e.complexity.CommerceCartItem.MarketplaceCode == nil {
			break
		}

		return e.complexity.CommerceCartItem.MarketplaceCode(childComplexity), true

	case "Commerce_CartItem.productName":
		if e.complexity.CommerceCartItem.ProductName == nil {
			break
		}

		return e.complexity.CommerceCartItem.ProductName(childComplexity), true

	case "Commerce_CartItem.qty":
		if e.complexity.CommerceCartItem.Qty == nil {
			break
		}

		return e.complexity.CommerceCartItem.Qty(childComplexity), true

	case "Commerce_CartItem.rowPriceGross":
		if e.complexity.CommerceCartItem.RowPriceGross == nil {
			break
		}

		return e.complexity.CommerceCartItem.RowPriceGross(childComplexity), true

	case "Commerce_CartItem.rowPriceNet":
		if e.complexity.CommerceCartItem.RowPriceNet == nil {
			break
		}

		return e.complexity.CommerceCartItem.RowPriceNet(childComplexity), true

	case "Commerce_CartItem.singlePriceGross":
		if e.complexity.CommerceCartItem.SinglePriceGross == nil {
			break
		}

		return e.complexity.CommerceCartItem.SinglePriceGross(childComplexity), true

	case "Commerce_CartItem.singlePriceNet":
		if e.complexity.CommerceCartItem.SinglePriceNet == nil {
			break
		}

		return e.complexity.CommerceCartItem.SinglePriceNet(childComplexity), true

	case "Commerce_CartItem.sourceID":
		if e.complexity.CommerceCartItem.SourceID == nil {
			break
		}

		return e.complexity.CommerceCartItem.SourceID(childComplexity), true

	case "Commerce_CartItem.variantMarketPlaceCode":
		if e.complexity.CommerceCartItem.VariantMarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceCartItem.VariantMarketPlaceCode(childComplexity), true

	case "Commerce_CartPerson.address":
		if e.complexity.CommerceCartPerson.Address == nil {
			break
		}

		return e.complexity.CommerceCartPerson.Address(childComplexity), true

	case "Commerce_CartPerson.existingCustomerData":
		if e.complexity.CommerceCartPerson.ExistingCustomerData == nil {
			break
		}

		return e.complexity.CommerceCartPerson.ExistingCustomerData(childComplexity), true

	case "Commerce_CartPerson.personalDetails":
		if e.complexity.CommerceCartPerson.PersonalDetails == nil {
			break
		}

		return e.complexity.CommerceCartPerson.PersonalDetails(childComplexity), true

	case "Commerce_CartPersonalDetails.dateOfBirth":
		if e.complexity.CommerceCartPersonalDetails.DateOfBirth == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.DateOfBirth(childComplexity), true

	case "Commerce_CartPersonalDetails.nationality":
		if e.complexity.CommerceCartPersonalDetails.Nationality == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.Nationality(childComplexity), true

	case "Commerce_CartPersonalDetails.passportCountry":
		if e.complexity.CommerceCartPersonalDetails.PassportCountry == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.PassportCountry(childComplexity), true

	case "Commerce_CartPersonalDetails.passportNumber":
		if e.complexity.CommerceCartPersonalDetails.PassportNumber == nil {
			break
		}

		return e.complexity.CommerceCartPersonalDetails.PassportNumber(childComplexity), true

	case "Commerce_CartShippingItem.appliedDiscounts":
		if e.complexity.CommerceCartShippingItem.AppliedDiscounts == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.AppliedDiscounts(childComplexity), true

	case "Commerce_CartShippingItem.priceNet":
		if e.complexity.CommerceCartShippingItem.PriceNet == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.PriceNet(childComplexity), true

	case "Commerce_CartShippingItem.taxAmount":
		if e.complexity.CommerceCartShippingItem.TaxAmount == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.TaxAmount(childComplexity), true

	case "Commerce_CartShippingItem.title":
		if e.complexity.CommerceCartShippingItem.Title == nil {
			break
		}

		return e.complexity.CommerceCartShippingItem.Title(childComplexity), true

	case "Commerce_CartTotalitem.code":
		if e.complexity.CommerceCartTotalitem.Code == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Code(childComplexity), true

	case "Commerce_CartTotalitem.price":
		if e.complexity.CommerceCartTotalitem.Price == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Price(childComplexity), true

	case "Commerce_CartTotalitem.title":
		if e.complexity.CommerceCartTotalitem.Title == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Title(childComplexity), true

	case "Commerce_CartTotalitem.type":
		if e.complexity.CommerceCartTotalitem.Type == nil {
			break
		}

		return e.complexity.CommerceCartTotalitem.Type(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.formData":
		if e.complexity.CommerceCartBillingAddressForm.FormData == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.FormData(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.processed":
		if e.complexity.CommerceCartBillingAddressForm.Processed == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.Processed(childComplexity), true

	case "Commerce_Cart_BillingAddressForm.validationInfo":
		if e.complexity.CommerceCartBillingAddressForm.ValidationInfo == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressForm.ValidationInfo(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.addressLine1":
		if e.complexity.CommerceCartBillingAddressFormData.AddressLine1 == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.AddressLine1(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.addressLine2":
		if e.complexity.CommerceCartBillingAddressFormData.AddressLine2 == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.AddressLine2(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.city":
		if e.complexity.CommerceCartBillingAddressFormData.City == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.City(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.company":
		if e.complexity.CommerceCartBillingAddressFormData.Company == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Company(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.country":
		if e.complexity.CommerceCartBillingAddressFormData.Country == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Country(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.countryCode":
		if e.complexity.CommerceCartBillingAddressFormData.CountryCode == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.CountryCode(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.email":
		if e.complexity.CommerceCartBillingAddressFormData.Email == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Email(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.firstname":
		if e.complexity.CommerceCartBillingAddressFormData.Firstname == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Firstname(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.lastname":
		if e.complexity.CommerceCartBillingAddressFormData.Lastname == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Lastname(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.middleName":
		if e.complexity.CommerceCartBillingAddressFormData.MiddleName == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.MiddleName(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.phoneNumber":
		if e.complexity.CommerceCartBillingAddressFormData.PhoneNumber == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.PhoneNumber(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.postCode":
		if e.complexity.CommerceCartBillingAddressFormData.PostCode == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.PostCode(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.regionCode":
		if e.complexity.CommerceCartBillingAddressFormData.RegionCode == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.RegionCode(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.salutation":
		if e.complexity.CommerceCartBillingAddressFormData.Salutation == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Salutation(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.state":
		if e.complexity.CommerceCartBillingAddressFormData.State == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.State(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.street":
		if e.complexity.CommerceCartBillingAddressFormData.Street == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Street(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.streetNr":
		if e.complexity.CommerceCartBillingAddressFormData.StreetNr == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.StreetNr(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.title":
		if e.complexity.CommerceCartBillingAddressFormData.Title == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Title(childComplexity), true

	case "Commerce_Cart_BillingAddressFormData.vat":
		if e.complexity.CommerceCartBillingAddressFormData.Vat == nil {
			break
		}

		return e.complexity.CommerceCartBillingAddressFormData.Vat(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.gateway":
		if e.complexity.CommerceCartDefaultPaymentSelection.Gateway == nil {
			break
		}

		return e.complexity.CommerceCartDefaultPaymentSelection.Gateway(childComplexity), true

	case "Commerce_Cart_DefaultPaymentSelection.totalValue":
		if e.complexity.CommerceCartDefaultPaymentSelection.TotalValue == nil {
			break
		}

		return e.complexity.CommerceCartDefaultPaymentSelection.TotalValue(childComplexity), true

	case "Commerce_Cart_Form_Error.defaultLabel":
		if e.complexity.CommerceCartFormError.DefaultLabel == nil {
			break
		}

		return e.complexity.CommerceCartFormError.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_Error.messageKey":
		if e.complexity.CommerceCartFormError.MessageKey == nil {
			break
		}

		return e.complexity.CommerceCartFormError.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_FieldError.defaultLabel":
		if e.complexity.CommerceCartFormFieldError.DefaultLabel == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.DefaultLabel(childComplexity), true

	case "Commerce_Cart_Form_FieldError.fieldName":
		if e.complexity.CommerceCartFormFieldError.FieldName == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.FieldName(childComplexity), true

	case "Commerce_Cart_Form_FieldError.messageKey":
		if e.complexity.CommerceCartFormFieldError.MessageKey == nil {
			break
		}

		return e.complexity.CommerceCartFormFieldError.MessageKey(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.fieldErrors":
		if e.complexity.CommerceCartFormValidationInfo.FieldErrors == nil {
			break
		}

		return e.complexity.CommerceCartFormValidationInfo.FieldErrors(childComplexity), true

	case "Commerce_Cart_Form_ValidationInfo.generalErrors":
		if e.complexity.CommerceCartFormValidationInfo.GeneralErrors == nil {
			break
		}

		return e.complexity.CommerceCartFormValidationInfo.GeneralErrors(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.deliveryCode":
		if e.complexity.CommerceCartPlacedOrderInfo.DeliveryCode == nil {
			break
		}

		return e.complexity.CommerceCartPlacedOrderInfo.DeliveryCode(childComplexity), true

	case "Commerce_Cart_PlacedOrderInfo.orderNumber":
		if e.complexity.CommerceCartPlacedOrderInfo.OrderNumber == nil {
			break
		}

		return e.complexity.CommerceCartPlacedOrderInfo.OrderNumber(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.processed":
		if e.complexity.CommerceCartSelectedPaymentResult.Processed == nil {
			break
		}

		return e.complexity.CommerceCartSelectedPaymentResult.Processed(childComplexity), true

	case "Commerce_Cart_SelectedPaymentResult.validationInfo":
		if e.complexity.CommerceCartSelectedPaymentResult.ValidationInfo == nil {
			break
		}

		return e.complexity.CommerceCartSelectedPaymentResult.ValidationInfo(childComplexity), true

	case "Commerce_Cart_ValidationResult.commonErrorMessageKey":
		if e.complexity.CommerceCartValidationResult.CommonErrorMessageKey == nil {
			break
		}

		return e.complexity.CommerceCartValidationResult.CommonErrorMessageKey(childComplexity), true

	case "Commerce_Cart_ValidationResult.hasCommonError":
		if e.complexity.CommerceCartValidationResult.HasCommonError == nil {
			break
		}

		return e.complexity.CommerceCartValidationResult.HasCommonError(childComplexity), true

	case "Commerce_CategoryData.active":
		if e.complexity.CommerceCategoryData.Active == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Active(childComplexity), true

	case "Commerce_CategoryData.attributes":
		if e.complexity.CommerceCategoryData.Attributes == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Attributes(childComplexity), true

	case "Commerce_CategoryData.code":
		if e.complexity.CommerceCategoryData.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Code(childComplexity), true

	case "Commerce_CategoryData.name":
		if e.complexity.CommerceCategoryData.Name == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Name(childComplexity), true

	case "Commerce_CategoryData.path":
		if e.complexity.CommerceCategoryData.Path == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Path(childComplexity), true

	case "Commerce_CategoryData.promoted":
		if e.complexity.CommerceCategoryData.Promoted == nil {
			break
		}

		return e.complexity.CommerceCategoryData.Promoted(childComplexity), true

	case "Commerce_CategoryTeaser.code":
		if e.complexity.CommerceCategoryTeaser.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryTeaser.Code(childComplexity), true

	case "Commerce_CategoryTeaser.name":
		if e.complexity.CommerceCategoryTeaser.Name == nil {
			break
		}

		return e.complexity.CommerceCategoryTeaser.Name(childComplexity), true

	case "Commerce_CategoryTeaser.parent":
		if e.complexity.CommerceCategoryTeaser.Parent == nil {
			break
		}

		return e.complexity.CommerceCategoryTeaser.Parent(childComplexity), true

	case "Commerce_CategoryTeaser.path":
		if e.complexity.CommerceCategoryTeaser.Path == nil {
			break
		}

		return e.complexity.CommerceCategoryTeaser.Path(childComplexity), true

	case "Commerce_CategoryTree.active":
		if e.complexity.CommerceCategoryTree.Active == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Active(childComplexity), true

	case "Commerce_CategoryTree.code":
		if e.complexity.CommerceCategoryTree.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Code(childComplexity), true

	case "Commerce_CategoryTree.documentCount":
		if e.complexity.CommerceCategoryTree.DocumentCount == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.DocumentCount(childComplexity), true

	case "Commerce_CategoryTree.hasChilds":
		if e.complexity.CommerceCategoryTree.HasChilds == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.HasChilds(childComplexity), true

	case "Commerce_CategoryTree.name":
		if e.complexity.CommerceCategoryTree.Name == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Name(childComplexity), true

	case "Commerce_CategoryTree.path":
		if e.complexity.CommerceCategoryTree.Path == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.Path(childComplexity), true

	case "Commerce_CategoryTree.subTrees":
		if e.complexity.CommerceCategoryTree.SubTrees == nil {
			break
		}

		return e.complexity.CommerceCategoryTree.SubTrees(childComplexity), true

	case "Commerce_Category_Attribute.code":
		if e.complexity.CommerceCategoryAttribute.Code == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Code(childComplexity), true

	case "Commerce_Category_Attribute.label":
		if e.complexity.CommerceCategoryAttribute.Label == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Label(childComplexity), true

	case "Commerce_Category_Attribute.values":
		if e.complexity.CommerceCategoryAttribute.Values == nil {
			break
		}

		return e.complexity.CommerceCategoryAttribute.Values(childComplexity), true

	case "Commerce_Category_AttributeValue.label":
		if e.complexity.CommerceCategoryAttributeValue.Label == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributeValue.Label(childComplexity), true

	case "Commerce_Category_AttributeValue.value":
		if e.complexity.CommerceCategoryAttributeValue.Value == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributeValue.Value(childComplexity), true

	case "Commerce_Category_Attributes.all":
		if e.complexity.CommerceCategoryAttributes.All == nil {
			break
		}

		return e.complexity.CommerceCategoryAttributes.All(childComplexity), true

	case "Commerce_Category_Attributes.get":
		if e.complexity.CommerceCategoryAttributes.Get == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_get_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCategoryAttributes.Get(childComplexity, args["code"].(string)), true

	case "Commerce_Category_Attributes.has":
		if e.complexity.CommerceCategoryAttributes.Has == nil {
			break
		}

		args, err := ec.field_Commerce_Category_Attributes_has_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceCategoryAttributes.Has(childComplexity, args["code"].(string)), true

	case "Commerce_Category_SearchResult.category":
		if e.complexity.CommerceCategorySearchResult.Category == nil {
			break
		}

		return e.complexity.CommerceCategorySearchResult.Category(childComplexity), true

	case "Commerce_Category_SearchResult.productSearchResult":
		if e.complexity.CommerceCategorySearchResult.ProductSearchResult == nil {
			break
		}

		return e.complexity.CommerceCategorySearchResult.ProductSearchResult(childComplexity), true

	case "Commerce_Charge.price":
		if e.complexity.CommerceCharge.Price == nil {
			break
		}

		return e.complexity.CommerceCharge.Price(childComplexity), true

	case "Commerce_Charge.reference":
		if e.complexity.CommerceCharge.Reference == nil {
			break
		}

		return e.complexity.CommerceCharge.Reference(childComplexity), true

	case "Commerce_Charge.type":
		if e.complexity.CommerceCharge.Type == nil {
			break
		}

		return e.complexity.CommerceCharge.Type(childComplexity), true

	case "Commerce_Charge.value":
		if e.complexity.CommerceCharge.Value == nil {
			break
		}

		return e.complexity.CommerceCharge.Value(childComplexity), true

	case "Commerce_ChargeQualifier.reference":
		if e.complexity.CommerceChargeQualifier.Reference == nil {
			break
		}

		return e.complexity.CommerceChargeQualifier.Reference(childComplexity), true

	case "Commerce_ChargeQualifier.type":
		if e.complexity.CommerceChargeQualifier.Type == nil {
			break
		}

		return e.complexity.CommerceChargeQualifier.Type(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.cart":
		if e.complexity.CommerceCheckoutPlaceOrderContext.Cart == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.Cart(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.orderInfos":
		if e.complexity.CommerceCheckoutPlaceOrderContext.OrderInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.OrderInfos(childComplexity), true

	case "Commerce_Checkout_PlaceOrderContext.state":
		if e.complexity.CommerceCheckoutPlaceOrderContext.State == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderContext.State(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.amount":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Amount == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Amount(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.gateway":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Gateway == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Gateway(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.method":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Method == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Method(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.paymentProvider":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.PaymentProvider == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.PaymentProvider(childComplexity), true

	case "Commerce_Checkout_PlaceOrderPaymentInfo.title":
		if e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Title == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderPaymentInfo.Title(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonPaymentError.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonPaymentError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError.reason":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonValidationError.Reason == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonValidationError.Reason(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError.validationResult":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonValidationError.ValidationResult == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateCancellationReasonValidationError.ValidationResult(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FatalError.isFinal":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFatalError.IsFinal == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFatalError.IsFinal(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_FatalError.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateFatalError.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateFatalError.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_New.isFinal":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateNew.IsFinal == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateNew.IsFinal(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_New.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateNew.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateNew.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Success.isFinal":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.IsFinal == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.IsFinal(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Success.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateSuccess.Name(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Wait.isFinal":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateWait.IsFinal == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateWait.IsFinal(childComplexity), true

	case "Commerce_Checkout_PlaceOrderState_State_Wait.name":
		if e.complexity.CommerceCheckoutPlaceOrderStateStateWait.Name == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlaceOrderStateStateWait.Name(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.email":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.Email == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.Email(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.paymentInfos":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.PaymentInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.PaymentInfos(childComplexity), true

	case "Commerce_Checkout_PlacedOrderInfos.placedOrderInfos":
		if e.complexity.CommerceCheckoutPlacedOrderInfos.PlacedOrderInfos == nil {
			break
		}

		return e.complexity.CommerceCheckoutPlacedOrderInfos.PlacedOrderInfos(childComplexity), true

	case "Commerce_DecoratedCart.cart":
		if e.complexity.CommerceDecoratedCart.Cart == nil {
			break
		}

		return e.complexity.CommerceDecoratedCart.Cart(childComplexity), true

	case "Commerce_DecoratedCart.decoratedDeliveries":
		if e.complexity.CommerceDecoratedCart.DecoratedDeliveries == nil {
			break
		}

		return e.complexity.CommerceDecoratedCart.DecoratedDeliveries(childComplexity), true

	case "Commerce_DecoratedCart.getDecoratedDeliveryByCode":
		if e.complexity.CommerceDecoratedCart.GetDecoratedDeliveryByCodeWithoutBool == nil {
			break
		}

		args, err := ec.field_Commerce_DecoratedCart_getDecoratedDeliveryByCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceDecoratedCart.GetDecoratedDeliveryByCodeWithoutBool(childComplexity, args["deliveryCode"].(string)), true

	case "Commerce_Price.currency":
		if e.complexity.CommercePrice.Currency == nil {
			break
		}

		return e.complexity.CommercePrice.Currency(childComplexity), true

	case "Commerce_Price.amount":
		if e.complexity.CommercePrice.FloatAmount == nil {
			break
		}

		return e.complexity.CommercePrice.FloatAmount(childComplexity), true

	case "Commerce_PriceContext.channelCode":
		if e.complexity.CommercePriceContext.ChannelCode == nil {
			break
		}

		return e.complexity.CommercePriceContext.ChannelCode(childComplexity), true

	case "Commerce_PriceContext.customerGroup":
		if e.complexity.CommercePriceContext.CustomerGroup == nil {
			break
		}

		return e.complexity.CommercePriceContext.CustomerGroup(childComplexity), true

	case "Commerce_PriceContext.locale":
		if e.complexity.CommercePriceContext.Locale == nil {
			break
		}

		return e.complexity.CommercePriceContext.Locale(childComplexity), true

	case "Commerce_ProductAttribute.code":
		if e.complexity.CommerceProductAttribute.Code == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.Code(childComplexity), true

	case "Commerce_ProductAttribute.label":
		if e.complexity.CommerceProductAttribute.Label == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.Label(childComplexity), true

	case "Commerce_ProductAttribute.unitCode":
		if e.complexity.CommerceProductAttribute.UnitCode == nil {
			break
		}

		return e.complexity.CommerceProductAttribute.UnitCode(childComplexity), true

	case "Commerce_ProductAttributes.getAttribute":
		if e.complexity.CommerceProductAttributes.Attribute == nil {
			break
		}

		args, err := ec.field_Commerce_ProductAttributes_getAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductAttributes.Attribute(childComplexity, args["key"].(string)), true

	case "Commerce_ProductAttributes.attributeKeys":
		if e.complexity.CommerceProductAttributes.AttributeKeys == nil {
			break
		}

		return e.complexity.CommerceProductAttributes.AttributeKeys(childComplexity), true

	case "Commerce_ProductAttributes.attributes":
		if e.complexity.CommerceProductAttributes.Attributes == nil {
			break
		}

		return e.complexity.CommerceProductAttributes.Attributes(childComplexity), true

	case "Commerce_ProductAttributes.hasAttribute":
		if e.complexity.CommerceProductAttributes.HasAttribute == nil {
			break
		}

		args, err := ec.field_Commerce_ProductAttributes_hasAttribute_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceProductAttributes.HasAttribute(childComplexity, args["key"].(string)), true

	case "Commerce_ProductLoyaltyPriceInfo.context":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Context == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Context(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.default":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Default == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Default(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.discountText":
		if e.complexity.CommerceProductLoyaltyPriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.DiscountText(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.discounted":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Discounted == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Discounted(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.isDiscounted":
		if e.complexity.CommerceProductLoyaltyPriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.maxPointsToSpent":
		if e.complexity.CommerceProductLoyaltyPriceInfo.MaxPointsToSpent == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.MaxPointsToSpent(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.minPointsToSpent":
		if e.complexity.CommerceProductLoyaltyPriceInfo.MinPointsToSpent == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.MinPointsToSpent(childComplexity), true

	case "Commerce_ProductLoyaltyPriceInfo.type":
		if e.complexity.CommerceProductLoyaltyPriceInfo.Type == nil {
			break
		}

		return e.complexity.CommerceProductLoyaltyPriceInfo.Type(childComplexity), true

	case "Commerce_ProductMedia.mimeType":
		if e.complexity.CommerceProductMedia.MimeType == nil {
			break
		}

		return e.complexity.CommerceProductMedia.MimeType(childComplexity), true

	case "Commerce_ProductMedia.reference":
		if e.complexity.CommerceProductMedia.Reference == nil {
			break
		}

		return e.complexity.CommerceProductMedia.Reference(childComplexity), true

	case "Commerce_ProductMedia.title":
		if e.complexity.CommerceProductMedia.Title == nil {
			break
		}

		return e.complexity.CommerceProductMedia.Title(childComplexity), true

	case "Commerce_ProductMedia.type":
		if e.complexity.CommerceProductMedia.Type == nil {
			break
		}

		return e.complexity.CommerceProductMedia.Type(childComplexity), true

	case "Commerce_ProductMedia.usage":
		if e.complexity.CommerceProductMedia.Usage == nil {
			break
		}

		return e.complexity.CommerceProductMedia.Usage(childComplexity), true

	case "Commerce_ProductPriceInfo.activeBase":
		if e.complexity.CommerceProductPriceInfo.ActiveBase == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBase(childComplexity), true

	case "Commerce_ProductPriceInfo.activeBaseAmount":
		if e.complexity.CommerceProductPriceInfo.ActiveBaseAmount == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBaseAmount(childComplexity), true

	case "Commerce_ProductPriceInfo.activeBaseUnit":
		if e.complexity.CommerceProductPriceInfo.ActiveBaseUnit == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.ActiveBaseUnit(childComplexity), true

	case "Commerce_ProductPriceInfo.campaignRules":
		if e.complexity.CommerceProductPriceInfo.CampaignRules == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.CampaignRules(childComplexity), true

	case "Commerce_ProductPriceInfo.default":
		if e.complexity.CommerceProductPriceInfo.Default == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.Default(childComplexity), true

	case "Commerce_ProductPriceInfo.denyMoreDiscounts":
		if e.complexity.CommerceProductPriceInfo.DenyMoreDiscounts == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.DenyMoreDiscounts(childComplexity), true

	case "Commerce_ProductPriceInfo.discountText":
		if e.complexity.CommerceProductPriceInfo.DiscountText == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.DiscountText(childComplexity), true

	case "Commerce_ProductPriceInfo.discounted":
		if e.complexity.CommerceProductPriceInfo.Discounted == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.Discounted(childComplexity), true

	case "Commerce_ProductPriceInfo.isDiscounted":
		if e.complexity.CommerceProductPriceInfo.IsDiscounted == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.IsDiscounted(childComplexity), true

	case "Commerce_ProductPriceInfo.taxClass":
		if e.complexity.CommerceProductPriceInfo.TaxClass == nil {
			break
		}

		return e.complexity.CommerceProductPriceInfo.TaxClass(childComplexity), true

	case "Commerce_ProductSaleable.activePrice":
		if e.complexity.CommerceProductSaleable.ActivePrice == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.ActivePrice(childComplexity), true

	case "Commerce_ProductSaleable.availablePrices":
		if e.complexity.CommerceProductSaleable.AvailablePrices == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.AvailablePrices(childComplexity), true

	case "Commerce_ProductSaleable.isSaleable":
		if e.complexity.CommerceProductSaleable.IsSaleable == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.IsSaleable(childComplexity), true

	case "Commerce_ProductSaleable.loyaltyPrices":
		if e.complexity.CommerceProductSaleable.LoyaltyPrices == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.LoyaltyPrices(childComplexity), true

	case "Commerce_ProductSaleable.saleableFrom":
		if e.complexity.CommerceProductSaleable.SaleableFrom == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.SaleableFrom(childComplexity), true

	case "Commerce_ProductSaleable.saleableTo":
		if e.complexity.CommerceProductSaleable.SaleableTo == nil {
			break
		}

		return e.complexity.CommerceProductSaleable.SaleableTo(childComplexity), true

	case "Commerce_ProductSpecificationEntry.label":
		if e.complexity.CommerceProductSpecificationEntry.Label == nil {
			break
		}

		return e.complexity.CommerceProductSpecificationEntry.Label(childComplexity), true

	case "Commerce_ProductSpecificationEntry.values":
		if e.complexity.CommerceProductSpecificationEntry.Values == nil {
			break
		}

		return e.complexity.CommerceProductSpecificationEntry.Values(childComplexity), true

	case "Commerce_ProductSpecificationGroup.entries":
		if e.complexity.CommerceProductSpecificationGroup.Entries == nil {
			break
		}

		return e.complexity.CommerceProductSpecificationGroup.Entries(childComplexity), true

	case "Commerce_ProductSpecificationGroup.title":
		if e.complexity.CommerceProductSpecificationGroup.Title == nil {
			break
		}

		return e.complexity.CommerceProductSpecificationGroup.Title(childComplexity), true

	case "Commerce_ProductSpecifications.groups":
		if e.complexity.CommerceProductSpecifications.Groups == nil {
			break
		}

		return e.complexity.CommerceProductSpecifications.Groups(childComplexity), true

	case "Commerce_ProductTeaserData.marketPlaceCode":
		if e.complexity.CommerceProductTeaserData.MarketPlaceCode == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.MarketPlaceCode(childComplexity), true

	case "Commerce_ProductTeaserData.media":
		if e.complexity.CommerceProductTeaserData.Media == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.Media(childComplexity), true

	case "Commerce_ProductTeaserData.preSelectedVariantSku":
		if e.complexity.CommerceProductTeaserData.PreSelectedVariantSku == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.PreSelectedVariantSku(childComplexity), true

	case "Commerce_ProductTeaserData.shortDescription":
		if e.complexity.CommerceProductTeaserData.ShortDescription == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.ShortDescription(childComplexity), true

	case "Commerce_ProductTeaserData.shortTitle":
		if e.complexity.CommerceProductTeaserData.ShortTitle == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.ShortTitle(childComplexity), true

	case "Commerce_ProductTeaserData.teaserAvailablePrices":
		if e.complexity.CommerceProductTeaserData.TeaserAvailablePrices == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.TeaserAvailablePrices(childComplexity), true

	case "Commerce_ProductTeaserData.teaserLoyaltyPriceInfo":
		if e.complexity.CommerceProductTeaserData.TeaserLoyaltyPriceInfo == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.TeaserLoyaltyPriceInfo(childComplexity), true

	case "Commerce_ProductTeaserData.teaserPrice":
		if e.complexity.CommerceProductTeaserData.TeaserPrice == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.TeaserPrice(childComplexity), true

	case "Commerce_ProductTeaserData.teaserPriceIsFromPrice":
		if e.complexity.CommerceProductTeaserData.TeaserPriceIsFromPrice == nil {
			break
		}

		return e.complexity.CommerceProductTeaserData.TeaserPriceIsFromPrice(childComplexity), true

	case "Commerce_Product_SearchResult.products":
		if e.complexity.CommerceProductSearchResult.Products == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Products(childComplexity), true

	case "Commerce_Product_SearchResult.searchMeta":
		if e.complexity.CommerceProductSearchResult.SearchMeta == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.SearchMeta(childComplexity), true

	case "Commerce_Product_SearchResult.suggestions":
		if e.complexity.CommerceProductSearchResult.Suggestions == nil {
			break
		}

		return e.complexity.CommerceProductSearchResult.Suggestions(childComplexity), true

	case "Commerce_Search_Meta.numPages":
		if e.complexity.CommerceSearchMeta.NumPages == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.NumPages(childComplexity), true

	case "Commerce_Search_Meta.numResults":
		if e.complexity.CommerceSearchMeta.NumResults == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.NumResults(childComplexity), true

	case "Commerce_Search_Meta.originalQuery":
		if e.complexity.CommerceSearchMeta.OriginalQuery == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.OriginalQuery(childComplexity), true

	case "Commerce_Search_Meta.page":
		if e.complexity.CommerceSearchMeta.Page == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.Page(childComplexity), true

	case "Commerce_Search_Meta.query":
		if e.complexity.CommerceSearchMeta.Query == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.Query(childComplexity), true

	case "Commerce_Search_Meta.sortOptions":
		if e.complexity.CommerceSearchMeta.SortOptions == nil {
			break
		}

		return e.complexity.CommerceSearchMeta.SortOptions(childComplexity), true

	case "Commerce_Search_SortOption.field":
		if e.complexity.CommerceSearchSortOption.Field == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.Field(childComplexity), true

	case "Commerce_Search_SortOption.label":
		if e.complexity.CommerceSearchSortOption.Label == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.Label(childComplexity), true

	case "Commerce_Search_SortOption.selectedAsc":
		if e.complexity.CommerceSearchSortOption.SelectedAsc == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.SelectedAsc(childComplexity), true

	case "Commerce_Search_SortOption.selectedDesc":
		if e.complexity.CommerceSearchSortOption.SelectedDesc == nil {
			break
		}

		return e.complexity.CommerceSearchSortOption.SelectedDesc(childComplexity), true

	case "Commerce_Search_Suggestion.highlight":
		if e.complexity.CommerceSearchSuggestion.Highlight == nil {
			break
		}

		return e.complexity.CommerceSearchSuggestion.Highlight(childComplexity), true

	case "Commerce_Search_Suggestion.text":
		if e.complexity.CommerceSearchSuggestion.Text == nil {
			break
		}

		return e.complexity.CommerceSearchSuggestion.Text(childComplexity), true

	case "Commerce_SimpleProduct.baseData":
		if e.complexity.CommerceSimpleProduct.BaseData == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.BaseData(childComplexity), true

	case "Commerce_SimpleProduct.getIdentifier":
		if e.complexity.CommerceSimpleProduct.GetIdentifier == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.GetIdentifier(childComplexity), true

	case "Commerce_SimpleProduct.getMedia":
		if e.complexity.CommerceSimpleProduct.GetMedia == nil {
			break
		}

		args, err := ec.field_Commerce_SimpleProduct_getMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceSimpleProduct.GetMedia(childComplexity, args["group"].(string), args["usage"].(string)), true

	case "Commerce_SimpleProduct.specifications":
		if e.complexity.CommerceSimpleProduct.GetSpecifications == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.GetSpecifications(childComplexity), true

	case "Commerce_SimpleProduct.hasMedia":
		if e.complexity.CommerceSimpleProduct.HasMedia == nil {
			break
		}

		args, err := ec.field_Commerce_SimpleProduct_hasMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.CommerceSimpleProduct.HasMedia(childComplexity, args["group"].(string), args["usage"].(string)), true

	case "Commerce_SimpleProduct.isSaleable":
		if e.complexity.CommerceSimpleProduct.IsSaleable == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.IsSaleable(childComplexity), true

	case "Commerce_SimpleProduct.saleableData":
		if e.complexity.CommerceSimpleProduct.SaleableData == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.SaleableData(childComplexity), true

	case "Commerce_SimpleProduct.teaserData":
		if e.complexity.CommerceSimpleProduct.TeaserData == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.TeaserData(childComplexity), true

	case "Commerce_SimpleProduct.type":
		if e.complexity.CommerceSimpleProduct.Type == nil {
			break
		}

		return e.complexity.CommerceSimpleProduct.Type(childComplexity), true

	case "Mutation.Commerce_AddToCart":
		if e.complexity.Mutation.CommerceAddToCart == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_AddToCart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceAddToCart(childComplexity, args["marketplaceCode"].(string), args["qty"].(int), args["deliveryCode"].(string)), true

	case "Mutation.Commerce_Cart_UpdateBillingAddress":
		if e.complexity.Mutation.CommerceCartUpdateBillingAddress == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateBillingAddress(childComplexity, args["addressForm"].(*forms.BillingAddressForm)), true

	case "Mutation.Commerce_Cart_UpdateSelectedPayment":
		if e.complexity.Mutation.CommerceCartUpdateSelectedPayment == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCartUpdateSelectedPayment(childComplexity, args["gateway"].(string), args["method"].(string)), true

	case "Mutation.Commerce_Checkout_CancelPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder == nil {
			break
		}

		return e.complexity.Mutation.CommerceCheckoutCancelPlaceOrder(childComplexity), true

	case "Mutation.Commerce_Checkout_StartPlaceOrder":
		if e.complexity.Mutation.CommerceCheckoutStartPlaceOrder == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceCheckoutStartPlaceOrder(childComplexity, args["returnUrl"].(string)), true

	case "Mutation.Commerce_DeleteCartDelivery":
		if e.complexity.Mutation.CommerceDeleteCartDelivery == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_DeleteCartDelivery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceDeleteCartDelivery(childComplexity, args["deliveryCode"].(string)), true

	case "Mutation.Commerce_DeleteItem":
		if e.complexity.Mutation.CommerceDeleteItem == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_DeleteItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceDeleteItem(childComplexity, args["itemID"].(string), args["deliveryCode"].(string)), true

	case "Mutation.Commerce_UpdateItemQty":
		if e.complexity.Mutation.CommerceUpdateItemQty == nil {
			break
		}

		args, err := ec.field_Mutation_Commerce_UpdateItemQty_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CommerceUpdateItemQty(childComplexity, args["itemID"].(string), args["deliveryCode"].(string), args["qty"].(int)), true

	case "Mutation.flamingo":
		if e.complexity.Mutation.Flamingo == nil {
			break
		}

		return e.complexity.Mutation.Flamingo(childComplexity), true

	case "Query.Commerce_Cart":
		if e.complexity.Query.CommerceCart == nil {
			break
		}

		return e.complexity.Query.CommerceCart(childComplexity), true

	case "Query.Commerce_Category":
		if e.complexity.Query.CommerceCategory == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Category_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategory(childComplexity, args["categoryCode"].(string), args["categorySearchRequest"].(*dto.CommerceSearchRequest)), true

	case "Query.Commerce_CategoryTree":
		if e.complexity.Query.CommerceCategoryTree == nil {
			break
		}

		args, err := ec.field_Query_Commerce_CategoryTree_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceCategoryTree(childComplexity, args["activeCategoryCode"].(string)), true

	case "Query.Commerce_Checkout_PlaceOrderContext":
		if e.complexity.Query.CommerceCheckoutPlaceOrderContext == nil {
			break
		}

		return e.complexity.Query.CommerceCheckoutPlaceOrderContext(childComplexity), true

	case "Query.Commerce_Product":
		if e.complexity.Query.CommerceProduct == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProduct(childComplexity, args["marketplaceCode"].(string)), true

	case "Query.Commerce_Product_Search":
		if e.complexity.Query.CommerceProductSearch == nil {
			break
		}

		args, err := ec.field_Query_Commerce_Product_Search_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommerceProductSearch(childComplexity, args["searchRequest"].(*dto.CommerceSearchRequest)), true

	case "Query.flamingo":
		if e.complexity.Query.Flamingo == nil {
			break
		}

		return e.complexity.Query.Flamingo(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_cart_interfaces_graphql-Service.graphql", Input: `type Commerce_DecoratedCart {
    cart: Commerce_Cart!
    decoratedDeliveries: [Commerce_CartDecoratedDelivery!]
    getDecoratedDeliveryByCode(deliveryCode: String!): Commerce_CartDecoratedDelivery
}

type Commerce_Cart {
    id: ID!
    entityID: String!
    billingAddress: Commerce_CartAddress
    purchaser: Commerce_CartPerson
    deliveries: [Commerce_CartDelivery!]
    additionalData: Commerce_CartAdditionalData!
    paymentSelection: Commerce_Cart_PaymentSelection
    belongsToAuthenticatedUser: Boolean!
    authenticatedUserID: String!
    appliedCouponCodes: [Commerce_CartCouponCode!]
    defaultCurrency: String!
    totalitems: [Commerce_CartTotalitem!]
    itemCount: Int!
    productCount: Int!
    isPaymentSelected: Boolean!
    grandTotal: Commerce_Price!
    sumTotalTaxAmount: Commerce_Price!
    subTotalNet: Commerce_Price!
    appliedGiftCards: [Commerce_CartAppliedGiftCard!]
    getDeliveryByCode(deliveryCode: String!): Commerce_CartDelivery
    getDeliveryCodes: [String!]
}

interface Commerce_Cart_PaymentSelection {
    gateway: String!
    totalValue: Commerce_Price!
}

type Commerce_Cart_DefaultPaymentSelection implements Commerce_Cart_PaymentSelection {
    gateway: String!
    totalValue: Commerce_Price!
}

type Commerce_CartDecoratedDelivery {
    delivery: Commerce_CartDelivery!
    decoratedItems: [Commerce_CartDecoratedItem!]
    getDecoratedCartItemById(id: ID!): Commerce_CartDecoratedItem
}

type Commerce_CartDelivery {
    deliveryInfo: Commerce_CartDeliveryInfo
    cartitems: [Commerce_CartItem!]
    shippingItem: Commerce_CartShippingItem
    subTotalGross: Commerce_Price
    grandTotal: Commerce_Price
    sumTotalTaxAmount: Commerce_Price
    subTotalNet: Commerce_Price
    sumTotalDiscountAmount: Commerce_Price
    sumNonItemRelatedDiscountAmount: Commerce_Price
    sumItemRelatedDiscountAmount: Commerce_Price
    subTotalGrossWithDiscounts: Commerce_Price
    subTotalNetWithDiscounts: Commerce_Price
    hasItems: Boolean!
}

type Commerce_CartDeliveryInfo {
    code: String!
    workflow: String!
    method: String!
    carrier: String!
    deliveryLocation: Commerce_CartDeliveryLocation
    desiredTime: Time
    getAdditionalData(key: String!): String!
    additionalDataKeys: [String!]
    #    additionalDeliveryInfos: map[string]json.RawMessage
    #    additionalDeliveryInfos: Map
    #    getAdditionalDeliveryInfo(key: String!): Map!
    additionalDeliveryInfoKeys: [String!]
}

type Commerce_CartDeliveryLocation  {
    type: String!
    address: Commerce_CartAddress
    useBillingAddress: Boolean!
    code: String!
}

type Commerce_CartShippingItem {
    title: String!
    priceNet: Commerce_Price
    taxAmount: Commerce_Price
    appliedDiscounts: Commerce_CartAppliedDiscounts!
}

type Commerce_CartAppliedDiscounts {
    items: [Commerce_CartAppliedDiscount!]
}

type Commerce_CartAppliedDiscount {
    campaignCode:  String!
    couponCode:    String!
    label:         String!
    applied:       Commerce_Price!
    type:          String!
    isItemRelated: Boolean!
    sortOrder:     Int!
}

type Commerce_CartDecoratedItem {
    item: Commerce_CartItem
    product: Commerce_Product
}

type Commerce_CartItem {
    id: ID!
    externalReference: String!
    marketplaceCode: String!
    variantMarketPlaceCode: String!
    productName: String!
    sourceID: String!
    qty: Int!
    additionalDataKeys: [String!]
    additionalDataValues: [String!]
    getAdditionalData(key: String!): String
    hasAdditionalDataKey(key: String!): Boolean
    singlePriceGross: Commerce_Price!
    singlePriceNet: Commerce_Price!
    rowPriceGross: Commerce_Price!
    rowPriceNet: Commerce_Price!
    #    rowTaxes: Commerce_Taxes!
}

type Commerce_CartAddress {
    vat:                    String!
    firstname:              String!
    lastname:               String!
    middleName:             String!
    title:                  String!
    salutation:             String!
    street:                 String!
    streetNr:               String!
    additionalAddressLines: [String!]
    company:                String!
    city:                   String!
    postCode:               String!
    state:                  String!
    regionCode:             String!
    country:                String!
    countryCode:            String!
    telephone:              String!
    email:                  String!
}

type Commerce_CartPerson {
    address: Commerce_CartAddress
    personalDetails: Commerce_CartPersonalDetails!
    existingCustomerData: Commerce_CartExistingCustomerData
}

type Commerce_CartExistingCustomerData {
    id: ID!
}

type Commerce_CartPersonalDetails {
    dateOfBirth: String!
    passportCountry: String!
    passportNumber: String!
    nationality: String!
}

type Commerce_CartAdditionalData {
    #    customAttributes: Map
    reservedOrderID: String!
}

type Commerce_CartTotalitem {
    code: String!
    title: String!
    price: Commerce_Price!
    type: String!
}

type Commerce_CartCouponCode {
    code: String!
}

type Commerce_CartAppliedGiftCard {
    code: String!
    applied: Commerce_Price!
    remaining: Commerce_Price!
}

type Commerce_Cart_ValidationResult {
    hasCommonError:        Boolean!
    commonErrorMessageKey: String!
    #itemResults:          [Commerce_Cart_ItemValidationError!]
}

#type Commerce_Cart_ItemValidationError {
#    itemID:          String!
#    errorMessageKey: String!
#}

type Commerce_Cart_PlacedOrderInfo {
    orderNumber:    String!
    deliveryCode:   String!
}

type Commerce_Cart_BillingAddressForm {
    formData:       Commerce_Cart_BillingAddressFormData
    validationInfo: Commerce_Cart_Form_ValidationInfo
    processed: Boolean
}

type Commerce_Cart_SelectedPaymentResult {
    validationInfo: Commerce_Cart_Form_ValidationInfo
    processed: Boolean
}

type Commerce_Cart_Form_ValidationInfo {
    fieldErrors: [Commerce_Cart_Form_FieldError!]
    generalErrors: [Commerce_Cart_Form_Error!]
}

type Commerce_Cart_Form_Error {
    messageKey: String!
    defaultLabel: String!
}

type Commerce_Cart_Form_FieldError {
    messageKey: String!
    defaultLabel: String!
    fieldName: String!
}

type Commerce_Cart_BillingAddressFormData {
    vat:                    String!
    firstname:              String!
    lastname:               String!
    middleName:             String!
    title:                  String!
    salutation:             String!
    street:                 String!
    streetNr:               String!
    addressLine1:           String!
    addressLine2:           String!
    company:                String!
    city:                   String!
    postCode:               String!
    state:                  String!
    regionCode:             String!
    country:                String!
    countryCode:            String!
    phoneNumber:            String!
    email:                  String!
}


input Commerce_BillingAddressFormInput {
    vat:                    String
    firstname:              String!
    lastname:               String!
    middleName:             String
    title:                  String
    salutation:             String
    street:                 String
    streetNr:               String
    addressLine1:           String
    addressLine2:           String
    company:                String
    city:                   String
    postCode:               String
    state:                  String
    regionCode:             String
    country:                String
    countryCode:            String
    phoneNumber:            String
    email:                  String!
}

extend type Query {
    Commerce_Cart: Commerce_DecoratedCart!
}

extend type Mutation {
    Commerce_AddToCart(marketplaceCode: ID!, qty: Int!, deliveryCode: String!): Commerce_DecoratedCart!
    Commerce_DeleteCartDelivery(deliveryCode: String!): Commerce_DecoratedCart!
    Commerce_DeleteItem(itemID: ID!, deliveryCode: String!): Commerce_DecoratedCart!
    Commerce_UpdateItemQty(itemID: ID!, deliveryCode: String!, qty: Int!): Commerce_DecoratedCart!
    Commerce_Cart_UpdateBillingAddress(addressForm: Commerce_BillingAddressFormInput): Commerce_Cart_BillingAddressForm!
    Commerce_Cart_UpdateSelectedPayment(gateway: String!, method: String!): Commerce_Cart_SelectedPaymentResult!
}`},
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_category_interfaces_graphql-Service.graphql", Input: `type Commerce_Category_Attributes {
    get(code: String!): Commerce_Category_Attribute
    has(code: String!): Boolean
    all: [Commerce_Category_Attribute!]
}

type Commerce_Category_Attribute {
    code: String!
    label: String!
    values: [Commerce_Category_AttributeValue!]
}

type Commerce_Category_AttributeValue {
    value: String!
    label: String!
}

interface Commerce_Category {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    promoted: Boolean!
    attributes: Commerce_Category_Attributes!
}

type Commerce_CategoryData implements Commerce_Category {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    promoted: Boolean!
    attributes: Commerce_Category_Attributes!
}

interface Commerce_Tree {
    code: String!
    name: String!
    path: String!
    active: Boolean!
    subTrees: [Commerce_Tree]
    hasChilds: Boolean!
    documentCount: Int!
}

type Commerce_CategoryTree implements Commerce_Tree{
    code: String!
    name: String!
    path: String!
    active: Boolean!
    subTrees: [Commerce_Tree]
    hasChilds: Boolean!
    documentCount: Int!
}

type Commerce_Category_SearchResult {
    category:               Commerce_Category!
    productSearchResult:    Commerce_Product_SearchResult!
}

extend type Query {
    Commerce_CategoryTree(activeCategoryCode: String!): Commerce_Tree!
    Commerce_Category(categoryCode: String!, categorySearchRequest: Commerce_Search_Request): Commerce_Category_SearchResult
}
`},
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_checkout_interfaces_graphql-Service.graphql", Input: `# Commerce_Checkout_PlaceOrderContext represents the result of the current (running) place order mutation
type Commerce_Checkout_PlaceOrderContext {
    # The Cart that is going to be placed
    cart: Commerce_DecoratedCart
    # The placed order in case order is already placed
    orderInfos: Commerce_Checkout_PlacedOrderInfos
    # State depending on the state of payment and place order - state may contain additional infos
    state: Commerce_Checkout_PlaceOrderState_State
}


# Commerce_Checkout_PlacedOrderInfos - infos about the placed orders - typically shown on a suceess page
type Commerce_Checkout_PlacedOrderInfos {
    paymentInfos:        [Commerce_Checkout_PlaceOrderPaymentInfo!]
    placedOrderInfos:    [Commerce_Cart_PlacedOrderInfo!]
    email:               String!
}

type  Commerce_Checkout_PlaceOrderPaymentInfo {
    gateway:         String!
    paymentProvider: String!
    method:          String!
    #creditCardInfo  *placeorder.CreditCardInfo
    amount:          Commerce_Price!
    title:           String!
}

interface Commerce_Checkout_PlaceOrderState_State {
    isFinal: Boolean
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_New implements Commerce_Checkout_PlaceOrderState_State {
    isFinal: Boolean
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Wait implements Commerce_Checkout_PlaceOrderState_State {
    isFinal: Boolean
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_Success implements Commerce_Checkout_PlaceOrderState_State {
    isFinal: Boolean
    name: String!
}

type Commerce_Checkout_PlaceOrderState_State_FatalError implements Commerce_Checkout_PlaceOrderState_State {
    isFinal: Boolean
    name: String!
    #error: String
}

#type Commerce_Checkout_PlaceOrderState_State_ShowIframe implements Commerce_Checkout_PlaceOrderState_State {
#    isFinal: Boolean
#    name: String!
#    #URL: String
#}

#type Commerce_Checkout_PlaceOrderState_State_ShowHtml implements Commerce_Checkout_PlaceOrderState_State {
#    isFinal: Boolean
#    name: String!
#    #HTML: String
#}

#type Commerce_Checkout_PlaceOrderState_State_Redirect implements Commerce_Checkout_PlaceOrderState_State {
#    isFinal: Boolean
#    name: String!
#    #URL: String
#}

interface Commerce_Checkout_PlaceOrderState_State_CancellationReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError implements Commerce_Checkout_PlaceOrderState_State_CancellationReason {
    reason: String
}

type Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError implements Commerce_Checkout_PlaceOrderState_State_CancellationReason {
    reason: String
    validationResult: Commerce_Cart_ValidationResult
}


extend type Query {
    # Gets the last place order context with its state infos
    Commerce_Checkout_PlaceOrderContext: Commerce_Checkout_PlaceOrderContext!
}


extend type Mutation {
    #Only possible if Statemaschine not active or in a final state
    Commerce_Checkout_StartPlaceOrder(returnUrl: String!): Boolean!
    # Possible if state is not final
    Commerce_Checkout_CancelPlaceOrder: Boolean!
}
`},
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_price_interfaces_graphql-Service.graphql", Input: `type Commerce_Price{
    amount: Float
    currency: String!
}

type Commerce_Charge {
    price: Commerce_Price!
    value: Commerce_Price!
    type: String!
    reference: String!
}

type Commerce_ChargeQualifier {
    type: String!
    reference: String!
}`},
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_product_interfaces_graphql-Service.graphql", Input: `interface Commerce_Product {
    baseData: Commerce_BasicProductData!
    teaserData: Commerce_ProductTeaserData!
    specifications: Commerce_ProductSpecifications!
    isSaleable: Boolean!
    saleableData: Commerce_ProductSaleable!
    type: String!
    getIdentifier: String!
    hasMedia(group: String!, usage: String!): Boolean!
    getMedia(group: String!, usage: String!): Commerce_ProductMedia!
}

type Commerce_SimpleProduct implements Commerce_Product {
    baseData: Commerce_BasicProductData!
    teaserData: Commerce_ProductTeaserData!
    specifications: Commerce_ProductSpecifications!
    isSaleable: Boolean!
    saleableData: Commerce_ProductSaleable!
    type: String!
    getIdentifier: String!
    hasMedia(group: String!, usage: String!): Boolean!
    getMedia(group: String!, usage: String!): Commerce_ProductMedia!
}

type Commerce_BasicProductData {
    title:            String!
    attributes:       Commerce_ProductAttributes
    shortDescription: String!
    description:      String!
    media:            [Commerce_ProductMedia!]

    marketPlaceCode: String!
    retailerCode:    String!
    retailerSku:     String!
    retailerName:    String!

    createdAt:   Time
    updatedAt:   Time
    visibleFrom: Time
    visibleTo:   Time

    Categories:   [Commerce_CategoryTeaser!]
    MainCategory: Commerce_CategoryTeaser!

    categoryToCodeMapping: [String!]

    stockLevel: String!

    keywords: [String!]
    isNew:    Boolean!
}

type Commerce_ProductTeaserData {
    shortTitle: String
    shortDescription: String
    teaserPrice : Commerce_ProductPriceInfo
    teaserPriceIsFromPrice: Boolean
    preSelectedVariantSku: String
    media : [Commerce_ProductMedia!]
    marketPlaceCode: String
    teaserAvailablePrices : [Commerce_ProductPriceInfo!]
    teaserLoyaltyPriceInfo: Commerce_ProductLoyaltyPriceInfo
}

type Commerce_ProductLoyaltyPriceInfo {
    type: String!
    default: Commerce_Price!
    isDiscounted: Boolean!
    discounted: Commerce_Price!
    discountText: String!
    minPointsToSpent: Float!
    maxPointsToSpent: Float!
    context: Commerce_PriceContext!
}

type Commerce_PriceContext {
    customerGroup: String!
    channelCode: String!
    locale: String!
}

type Commerce_ProductSpecifications {
    groups: [Commerce_ProductSpecificationGroup!]
}

type Commerce_ProductSpecificationGroup {
    title: String!
    entries: [Commerce_ProductSpecificationEntry!]
}

type Commerce_ProductSpecificationEntry {
    label: String!
    values: [String!]
}

type Commerce_ProductSaleable {
    isSaleable: Boolean!
    saleableFrom: Time
    saleableTo: Time
    activePrice: Commerce_ProductPriceInfo
    availablePrices: [Commerce_ProductPriceInfo!]
    loyaltyPrices: [Commerce_ProductLoyaltyPriceInfo!]
}

type Commerce_ProductMedia {
    type:      String!
    mimeType:  String!
    usage:     String!
    title:     String!
    reference: String!
}

type Commerce_ProductAttributes {
    attributeKeys: [String!]
    attributes: [Commerce_ProductAttribute!]
    hasAttribute(key: String!): Boolean
    getAttribute(key: String!): Commerce_ProductAttribute
}

type Commerce_ProductAttribute {
    code: String!
    label: String!
    unitCode: String!
}

type Commerce_CategoryTeaser {
    code: String!
    path: String!
    name: String!
    parent: Commerce_CategoryTeaser
}

type Commerce_ProductPriceInfo {
    default: Commerce_Price
    discounted: Commerce_Price
    discountText: String!
    activeBase: Float!
    activeBaseAmount: Float!
    activeBaseUnit: String
    isDiscounted: Boolean
    campaignRules: [String!]
    denyMoreDiscounts: Boolean
    #    context: Commerce_PriceContext
    taxClass: String!

}

type Commerce_Product_SearchResult {
    products: [Commerce_Product!]
    # Facets searchdomain.FacetCollection
    suggestions: [Commerce_Search_Suggestion!]
    searchMeta: Commerce_Search_Meta!
}

extend type Query {
    Commerce_Product(marketplaceCode: String!): Commerce_Product
    Commerce_Product_Search(searchRequest: Commerce_Search_Request): Commerce_Product_SearchResult!
}
`},
	&ast.Source{Name: "graphql/schema/flamingo.me_flamingo-commerce_v3_search_interfaces_graphql-Service.graphql", Input: `input Commerce_Search_KeyValueFilter {
    k: String!
    v: [String!]
}

input Commerce_Search_Request {
    pageSize:           Int
    page:               Int
    sortBy:             String
    sortDirection:      String
    keyValueFilters:    [Commerce_Search_KeyValueFilter!]
    query:              String
}

#input Commerce_Search_LiveSearchRequest {
#    query:              String
#}

type Commerce_Search_Meta {
    query:          String!
    originalQuery:  String!
    page:           Int!
    numPages:       Int!
    numResults:     Int!
    sortOptions:    [Commerce_Search_SortOption!]
}

type Commerce_Search_SortOption {
    label: String!
    field: String!
    selectedAsc: Boolean!
    selectedDesc: Boolean!
}

type Commerce_Search_Suggestion {
    text:      String!
    highlight: String!
}

#type Commerce_Search_Result {
#    hits: []Commerce_Search_Document  / Or maybe we dont need hits and the modules need to add a edge to this object... we will see
#    searchMeta:     Commerce_Search_Meta!
    # Facets: domain.FacetCollection
#    suggestions:    [Commerce_Search_Suggestion]
#}


#extend type Query {
#    Commerce_Search(searchRequest: Commerce_Search_Request): Commerce_Search_Result
#    Commerce_Search_LiveSearch(searchRequest: Commerce_Search_LiveSearchRequest): Commerce_Search_ResultCommerce_Search_LiveSearchRequest!
#}`},
	&ast.Source{Name: "graphql/schema/schema.graphql", Input: `type Query { flamingo: String }
type Mutation { flamingo: String }
scalar Time
scalar Map`},
)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Commerce_CartDecoratedDelivery_getDecoratedCartItemById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_CartDeliveryInfo_getAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_CartItem_getAdditionalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_CartItem_hasAdditionalDataKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Cart_getDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_get_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_Category_Attributes_has_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["code"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_DecoratedCart_getDecoratedDeliveryByCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_ProductAttributes_getAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_ProductAttributes_hasAttribute_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["key"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["key"] = arg0
	return args, nil
}

func (ec *executionContext) field_Commerce_SimpleProduct_getMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["group"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["group"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["usage"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Commerce_SimpleProduct_hasMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["group"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["group"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["usage"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["usage"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_AddToCart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketplaceCode"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketplaceCode"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["qty"]; ok {
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qty"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *forms.BillingAddressForm
	if tmp, ok := rawArgs["addressForm"]; ok {
		arg0, err = ec.unmarshalOCommerce_BillingAddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addressForm"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["gateway"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["gateway"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["method"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["method"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["returnUrl"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["returnUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_DeleteCartDelivery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_DeleteItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_Commerce_UpdateItemQty_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["itemID"]; ok {
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["deliveryCode"]; ok {
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deliveryCode"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["qty"]; ok {
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["qty"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_CategoryTree_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["activeCategoryCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["activeCategoryCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Category_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["categoryCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categoryCode"] = arg0
	var arg1 *dto.CommerceSearchRequest
	if tmp, ok := rawArgs["categorySearchRequest"]; ok {
		arg1, err = ec.unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["categorySearchRequest"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_Search_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *dto.CommerceSearchRequest
	if tmp, ok := rawArgs["searchRequest"]; ok {
		arg0, err = ec.unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchRequest"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Commerce_Product_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["marketplaceCode"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketplaceCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Commerce_BasicProductData_title(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_attributes(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Attributes)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductAttributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_shortDescription(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_description(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_media(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Media)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductMedia2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_retailerCode(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetailerCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_retailerSku(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetailerSku, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_retailerName(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RetailerName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_updatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_visibleFrom(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisibleFrom, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_visibleTo(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VisibleTo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_Categories(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.CategoryTeaser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_MainCategory(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainCategory, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.CategoryTeaser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_categoryToCodeMapping(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryToCodeMapping, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_stockLevel(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StockLevel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_keywords(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Keywords, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_BasicProductData_isNew(ctx context.Context, field graphql.CollectedField, obj *domain.BasicProductData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_BasicProductData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsNew, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_id(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_entityID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_billingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingAddress, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartAddress2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_purchaser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purchaser, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Person)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartPerson2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_deliveries(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deliveries, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Delivery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_additionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalData, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.AdditionalData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_CartAdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_paymentSelection(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentSelection, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.PaymentSelection)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_belongsToAuthenticatedUser(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BelongsToAuthenticatedUser, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_authenticatedUserID(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticatedUserID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_appliedCouponCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedCouponCodes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.CouponCode)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartCouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_defaultCurrency(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCurrency, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_totalitems(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Totalitems, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Totalitem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartTotalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_itemCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCount(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_productCount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductCount(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_isPaymentSelected(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsPaymentSelected(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_appliedGiftCards(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedGiftCards, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedGiftCard)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartAppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_getDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Cart_getDeliveryByCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryByCodeWithoutBool(args["deliveryCode"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Delivery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_getDeliveryCodes(ctx context.Context, field graphql.CollectedField, obj *cart.Cart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDeliveryCodes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAdditionalData_reservedOrderID(ctx context.Context, field graphql.CollectedField, obj *cart.AdditionalData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAdditionalData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedOrderID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_vat(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_firstname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_lastname(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_middleName(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_title(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_salutation(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_street(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_streetNr(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_additionalAddressLines(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalAddressLines, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_company(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_city(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_postCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_state(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_regionCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_country(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_countryCode(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_telephone(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telephone, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAddress_email(ctx context.Context, field graphql.CollectedField, obj *cart.Address) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAddress",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_campaignCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_couponCode(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CouponCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_label(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_type(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_isItemRelated(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsItemRelated, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscount_sortOrder(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscount",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOrder, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedDiscounts_items(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedDiscounts) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedDiscounts",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.AppliedDiscount)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartAppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedGiftCard_code(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedGiftCard_applied(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Applied, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartAppliedGiftCard_remaining(ctx context.Context, field graphql.CollectedField, obj *cart.AppliedGiftCard) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartAppliedGiftCard",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Remaining, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartCouponCode_code(ctx context.Context, field graphql.CollectedField, obj *cart.CouponCode) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartCouponCode",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDecoratedDelivery_delivery(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedDelivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDecoratedDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delivery, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Delivery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_CartDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDecoratedDelivery_decoratedItems(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedDelivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDecoratedDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedItems, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]decorator.DecoratedCartItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDecoratedDelivery_getDecoratedCartItemById(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedDelivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDecoratedDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_CartDecoratedDelivery_getDecoratedCartItemById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDecoratedCartItemByID(args["id"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCartItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDecoratedItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDecoratedItem_item(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedCartItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDecoratedItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDecoratedItem_product(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedCartItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDecoratedItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.BasicProduct)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_deliveryInfo(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_cartitems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cartitems, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]cart.Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_shippingItem(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShippingItem, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.ShippingItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_subTotalGross(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGross(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_grandTotal(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrandTotal(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_sumTotalTaxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalTaxAmount(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_subTotalNet(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNet(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_sumTotalDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumTotalDiscountAmount(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_sumNonItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumNonItemRelatedDiscountAmount(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_sumItemRelatedDiscountAmount(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SumItemRelatedDiscountAmount(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_subTotalGrossWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalGrossWithDiscounts(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_subTotalNetWithDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTotalNetWithDiscounts(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDelivery_hasItems(ctx context.Context, field graphql.CollectedField, obj *cart.Delivery) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDelivery",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasItems(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_workflow(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Workflow, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_method(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_carrier(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Carrier, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_deliveryLocation(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryLocation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(cart.DeliveryLocation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_desiredTime(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredTime, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_getAdditionalData(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_CartDeliveryInfo_getAdditionalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAdditionalData(args["key"].(string)), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_additionalDataKeys(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataKeys(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryInfo_additionalDeliveryInfoKeys(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryInfo",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDeliveryInfoKeys(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryLocation_type(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryLocation_address(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartAddress2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryLocation_useBillingAddress(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseBillingAddress, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartDeliveryLocation_code(ctx context.Context, field graphql.CollectedField, obj *cart.DeliveryLocation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartDeliveryLocation",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartExistingCustomerData_id(ctx context.Context, field graphql.CollectedField, obj *cart.ExistingCustomerData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartExistingCustomerData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_id(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_externalReference(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalReference, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_marketplaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketplaceCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_variantMarketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VariantMarketPlaceCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_productName(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_sourceID(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceID, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_qty(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Qty, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_additionalDataKeys(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataKeys(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_additionalDataValues(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalDataValues(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_getAdditionalData(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_CartItem_getAdditionalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetAdditionalData(args["key"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_hasAdditionalDataKey(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_CartItem_hasAdditionalDataKey_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAdditionalDataKey(args["key"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_singlePriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceGross, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_singlePriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SinglePriceNet, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_rowPriceGross(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceGross, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartItem_rowPriceNet(ctx context.Context, field graphql.CollectedField, obj *cart.Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RowPriceNet, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPerson_address(ctx context.Context, field graphql.CollectedField, obj *cart.Person) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPerson",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.Address)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartAddress2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPerson_personalDetails(ctx context.Context, field graphql.CollectedField, obj *cart.Person) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPerson",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalDetails, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.PersonalDetails)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_CartPersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPerson_existingCustomerData(ctx context.Context, field graphql.CollectedField, obj *cart.Person) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPerson",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistingCustomerData, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*cart.ExistingCustomerData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPersonalDetails_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPersonalDetails_passportCountry(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportCountry, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPersonalDetails_passportNumber(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassportNumber, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartPersonalDetails_nationality(ctx context.Context, field graphql.CollectedField, obj *cart.PersonalDetails) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartPersonalDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nationality, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartShippingItem_title(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartShippingItem_priceNet(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceNet, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartShippingItem_taxAmount(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxAmount, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartShippingItem_appliedDiscounts(ctx context.Context, field graphql.CollectedField, obj *cart.ShippingItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartShippingItem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliedDiscounts, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.AppliedDiscounts)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_CartAppliedDiscounts2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscounts(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartTotalitem_code(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartTotalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartTotalitem_title(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartTotalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartTotalitem_price(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartTotalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CartTotalitem_type(ctx context.Context, field graphql.CollectedField, obj *cart.Totalitem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CartTotalitem",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_formData(ctx context.Context, field graphql.CollectedField, obj *dto1.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FormData, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(forms.BillingAddressForm)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_BillingAddressFormData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto1.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto1.ValidationInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm_processed(ctx context.Context, field graphql.CollectedField, obj *dto1.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressForm",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_vat(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vat, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_firstname(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Firstname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_lastname(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lastname, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_middleName(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MiddleName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_title(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_salutation(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Salutation, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_street(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Street, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_streetNr(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNr, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_addressLine1(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine1, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_addressLine2(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddressLine2, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_company(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_city(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_postCode(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_state(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_regionCode(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_country(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_countryCode(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountryCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData_email(ctx context.Context, field graphql.CollectedField, obj *forms.BillingAddressForm) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_BillingAddressFormData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_gateway(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_DefaultPaymentSelection",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection_totalValue(ctx context.Context, field graphql.CollectedField, obj *cart.DefaultPaymentSelection) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_DefaultPaymentSelection",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalValue(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_Error_messageKey(ctx context.Context, field graphql.CollectedField, obj *domain3.Error) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_Error",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_Error_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *domain3.Error) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_Error",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_messageKey(ctx context.Context, field graphql.CollectedField, obj *dto1.FieldError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageKey, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_defaultLabel(ctx context.Context, field graphql.CollectedField, obj *dto1.FieldError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultLabel, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_FieldError_fieldName(ctx context.Context, field graphql.CollectedField, obj *dto1.FieldError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_FieldError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldName, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx context.Context, field graphql.CollectedField, obj *dto1.ValidationInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_ValidationInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FieldErrors, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto1.FieldError)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo_generalErrors(ctx context.Context, field graphql.CollectedField, obj *dto1.ValidationInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_Form_ValidationInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralErrors, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain3.Error)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐError(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_orderNumber(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_PlacedOrderInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderNumber, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx context.Context, field graphql.CollectedField, obj *placeorder.PlacedOrderInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_PlacedOrderInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeliveryCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_validationInfo(ctx context.Context, field graphql.CollectedField, obj *dto1.SelectedPaymentResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_SelectedPaymentResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto1.ValidationInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult_processed(ctx context.Context, field graphql.CollectedField, obj *dto1.SelectedPaymentResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_SelectedPaymentResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_hasCommonError(ctx context.Context, field graphql.CollectedField, obj *validation.Result) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_ValidationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasCommonError, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx context.Context, field graphql.CollectedField, obj *validation.Result) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Cart_ValidationResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommonErrorMessageKey, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_code(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_name(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_path(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_active(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_promoted(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Promoted(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryData_attributes(ctx context.Context, field graphql.CollectedField, obj *domain1.CategoryData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryData",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Attributes)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTeaser_code(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryTeaser) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTeaser_path(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryTeaser) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTeaser_name(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryTeaser) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTeaser_parent(ctx context.Context, field graphql.CollectedField, obj *domain.CategoryTeaser) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTeaser",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parent, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.CategoryTeaser)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_code(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_name(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_path(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_active(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_subTrees(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubTrees(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Tree)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_hasChilds(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChilds(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_CategoryTree_documentCount(ctx context.Context, field graphql.CollectedField, obj *domain1.TreeData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_CategoryTree",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DocumentCount(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_code(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_label(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attribute_values(ctx context.Context, field graphql.CollectedField, obj *domain1.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.AttributeValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_AttributeValue_value(ctx context.Context, field graphql.CollectedField, obj *domain1.AttributeValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_AttributeValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_AttributeValue_label(ctx context.Context, field graphql.CollectedField, obj *domain1.AttributeValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_AttributeValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_get(ctx context.Context, field graphql.CollectedField, obj *domain1.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Category_Attributes_get_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get(args["code"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain1.Attribute)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_has(ctx context.Context, field graphql.CollectedField, obj *domain1.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_Category_Attributes_has_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Has(args["code"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_Attributes_all(ctx context.Context, field graphql.CollectedField, obj *domain1.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_Attributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.All(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain1.Attribute)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_SearchResult_category(ctx context.Context, field graphql.CollectedField, obj *dto3.CategorySearchResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Category)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Category_SearchResult_productSearchResult(ctx context.Context, field graphql.CollectedField, obj *dto3.CategorySearchResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Category_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductSearchResult, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*application.SearchResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋapplicationᚐSearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Charge_price(ctx context.Context, field graphql.CollectedField, obj *domain2.Charge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Charge_value(ctx context.Context, field graphql.CollectedField, obj *domain2.Charge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Charge_type(ctx context.Context, field graphql.CollectedField, obj *domain2.Charge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Charge_reference(ctx context.Context, field graphql.CollectedField, obj *domain2.Charge) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Charge",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ChargeQualifier_type(ctx context.Context, field graphql.CollectedField, obj *domain2.ChargeQualifier) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ChargeQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ChargeQualifier_reference(ctx context.Context, field graphql.CollectedField, obj *domain2.ChargeQualifier) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ChargeQualifier",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_cart(ctx context.Context, field graphql.CollectedField, obj *dto2.PlaceOrderContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_orderInfos(ctx context.Context, field graphql.CollectedField, obj *dto2.PlaceOrderContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderInfos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto2.PlacedOrderInfos)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext_state(ctx context.Context, field graphql.CollectedField, obj *dto2.PlaceOrderContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(process.State)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐState(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx context.Context, field graphql.CollectedField, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gateway, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx context.Context, field graphql.CollectedField, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentProvider, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx context.Context, field graphql.CollectedField, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx context.Context, field graphql.CollectedField, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx context.Context, field graphql.CollectedField, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderPaymentInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError_reason(ctx context.Context, field graphql.CollectedField, obj *dto2.CancellationReasonPaymentError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError_reason(ctx context.Context, field graphql.CollectedField, obj *dto2.CancellationReasonValidationError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError_validationResult(ctx context.Context, field graphql.CollectedField, obj *dto2.CancellationReasonValidationError) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidationResult, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(validation.Result)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FatalError_isFinal(ctx context.Context, field graphql.CollectedField, obj *states.Failed) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FatalError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinal(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FatalError_name(ctx context.Context, field graphql.CollectedField, obj *states.Failed) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_FatalError",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_New_isFinal(ctx context.Context, field graphql.CollectedField, obj *states.New) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_New",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinal(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_New_name(ctx context.Context, field graphql.CollectedField, obj *states.New) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_New",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success_isFinal(ctx context.Context, field graphql.CollectedField, obj *states.Success) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Success",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinal(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success_name(ctx context.Context, field graphql.CollectedField, obj *states.Success) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Success",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait_isFinal(ctx context.Context, field graphql.CollectedField, obj *states.Wait) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Wait",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFinal(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx context.Context, field graphql.CollectedField, obj *states.Wait) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlaceOrderState_State_Wait",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx context.Context, field graphql.CollectedField, obj *dto2.PlacedOrderInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentInfos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]application1.PlaceOrderPaymentInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx context.Context, field graphql.CollectedField, obj *dto2.PlacedOrderInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacedOrderInfos, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]placeorder.PlacedOrderInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos_email(ctx context.Context, field graphql.CollectedField, obj *dto2.PlacedOrderInfos) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Checkout_PlacedOrderInfos",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_DecoratedCart_cart(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedCart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cart, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(cart.Cart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_DecoratedCart_decoratedDeliveries(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedCart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DecoratedDeliveries, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]decorator.DecoratedDelivery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_DecoratedCart_getDecoratedDeliveryByCode(ctx context.Context, field graphql.CollectedField, obj *decorator.DecoratedCart) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_DecoratedCart",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_DecoratedCart_getDecoratedDeliveryByCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetDecoratedDeliveryByCodeWithoutBool(args["deliveryCode"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedDelivery)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_CartDecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_amount(ctx context.Context, field graphql.CollectedField, obj *domain2.Price) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Price",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FloatAmount(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Price_currency(ctx context.Context, field graphql.CollectedField, obj *domain2.Price) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Price",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_PriceContext_customerGroup(ctx context.Context, field graphql.CollectedField, obj *domain.PriceContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerGroup, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_PriceContext_channelCode(ctx context.Context, field graphql.CollectedField, obj *domain.PriceContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChannelCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_PriceContext_locale(ctx context.Context, field graphql.CollectedField, obj *domain.PriceContext) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_PriceContext",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttribute_code(ctx context.Context, field graphql.CollectedField, obj *domain.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttribute_label(ctx context.Context, field graphql.CollectedField, obj *domain.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttribute_unitCode(ctx context.Context, field graphql.CollectedField, obj *domain.Attribute) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttribute",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnitCode, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttributes_attributeKeys(ctx context.Context, field graphql.CollectedField, obj *domain.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttributeKeys(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttributes_attributes(ctx context.Context, field graphql.CollectedField, obj *domain.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Attribute)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductAttribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttributes_hasAttribute(ctx context.Context, field graphql.CollectedField, obj *domain.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_ProductAttributes_hasAttribute_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasAttribute(args["key"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductAttributes_getAttribute(ctx context.Context, field graphql.CollectedField, obj *domain.Attributes) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductAttributes",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_ProductAttributes_getAttribute_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attribute(args["key"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.Attribute)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductAttribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_type(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_minPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinPointsToSpent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_maxPointsToSpent(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxPointsToSpent, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*big.Float)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2ᚖmathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo_context(ctx context.Context, field graphql.CollectedField, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductLoyaltyPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.PriceContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductMedia_type(ctx context.Context, field graphql.CollectedField, obj *domain.Media) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductMedia_mimeType(ctx context.Context, field graphql.CollectedField, obj *domain.Media) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductMedia_usage(ctx context.Context, field graphql.CollectedField, obj *domain.Media) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usage, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductMedia_title(ctx context.Context, field graphql.CollectedField, obj *domain.Media) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductMedia_reference(ctx context.Context, field graphql.CollectedField, obj *domain.Media) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductMedia",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_default(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Default, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_discounted(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discounted, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain2.Price)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_discountText(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscountText, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_activeBase(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBase, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_activeBaseAmount(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseAmount, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(big.Float)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_activeBaseUnit(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveBaseUnit, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_isDiscounted(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDiscounted, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_campaignRules(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignRules, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_denyMoreDiscounts(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DenyMoreDiscounts, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductPriceInfo_taxClass(ctx context.Context, field graphql.CollectedField, obj *domain.PriceInfo) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductPriceInfo",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaxClass, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_isSaleable(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSaleable, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_saleableFrom(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleableFrom, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_saleableTo(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleableTo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_activePrice(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActivePrice, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.PriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_availablePrices(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailablePrices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.PriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductPriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSaleable_loyaltyPrices(ctx context.Context, field graphql.CollectedField, obj *domain.Saleable) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSaleable",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoyaltyPrices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.LoyaltyPriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductLoyaltyPriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSpecificationEntry_label(ctx context.Context, field graphql.CollectedField, obj *domain.SpecificationEntry) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSpecificationEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSpecificationEntry_values(ctx context.Context, field graphql.CollectedField, obj *domain.SpecificationEntry) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSpecificationEntry",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSpecificationGroup_title(ctx context.Context, field graphql.CollectedField, obj *domain.SpecificationGroup) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSpecificationGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSpecificationGroup_entries(ctx context.Context, field graphql.CollectedField, obj *domain.SpecificationGroup) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSpecificationGroup",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entries, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SpecificationEntry)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductSpecificationEntry2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductSpecifications_groups(ctx context.Context, field graphql.CollectedField, obj *domain.Specifications) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductSpecifications",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.SpecificationGroup)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductSpecificationGroup2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationGroup(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_shortTitle(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortTitle, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_shortDescription(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShortDescription, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_teaserPrice(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeaserPrice, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.PriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_teaserPriceIsFromPrice(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeaserPriceIsFromPrice, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_preSelectedVariantSku(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreSelectedVariantSku, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_media(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.Media)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductMedia2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_marketPlaceCode(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MarketPlaceCode, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_teaserAvailablePrices(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeaserAvailablePrices, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.PriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductPriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_ProductTeaserData_teaserLoyaltyPriceInfo(ctx context.Context, field graphql.CollectedField, obj *domain.TeaserData) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_ProductTeaserData",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeaserLoyaltyPriceInfo, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.LoyaltyPriceInfo)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_ProductLoyaltyPriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_products(ctx context.Context, field graphql.CollectedField, obj *application.SearchResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Products, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain.BasicProduct)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_suggestions(ctx context.Context, field graphql.CollectedField, obj *application.SearchResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suggestions, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain4.Suggestion)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Product_SearchResult_searchMeta(ctx context.Context, field graphql.CollectedField, obj *application.SearchResult) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Product_SearchResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SearchMeta, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain4.SearchMeta)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_query(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_originalQuery(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalQuery, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_page(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Page, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_numPages(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumPages, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_numResults(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumResults, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Meta_sortOptions(ctx context.Context, field graphql.CollectedField, obj *domain4.SearchMeta) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Meta",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SortOptions, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]domain4.SortOption)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Search_SortOption2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSortOption(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_label(ctx context.Context, field graphql.CollectedField, obj *domain4.SortOption) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_field(ctx context.Context, field graphql.CollectedField, obj *domain4.SortOption) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Field, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_selectedAsc(ctx context.Context, field graphql.CollectedField, obj *domain4.SortOption) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedAsc, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_SortOption_selectedDesc(ctx context.Context, field graphql.CollectedField, obj *domain4.SortOption) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_SortOption",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedDesc, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Suggestion_text(ctx context.Context, field graphql.CollectedField, obj *domain4.Suggestion) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Suggestion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_Search_Suggestion_highlight(ctx context.Context, field graphql.CollectedField, obj *domain4.Suggestion) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_Search_Suggestion",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Highlight, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_baseData(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaseData(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.BasicProductData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_BasicProductData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProductData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_teaserData(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TeaserData(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.TeaserData)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_ProductTeaserData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐTeaserData(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_specifications(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetSpecifications(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Specifications)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_ProductSpecifications2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecifications(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_isSaleable(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSaleable(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_saleableData(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaleableData(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Saleable)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_ProductSaleable2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSaleable(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_type(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_getIdentifier(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetIdentifier(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_hasMedia(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_SimpleProduct_hasMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasMedia(args["group"].(string), args["usage"].(string)), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Commerce_SimpleProduct_getMedia(ctx context.Context, field graphql.CollectedField, obj *domain.SimpleProduct) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Commerce_SimpleProduct",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Commerce_SimpleProduct_getMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GetMedia(args["group"].(string), args["usage"].(string)), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.Media)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_ProductMedia2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_flamingo(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Flamingo(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_AddToCart(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_AddToCart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceAddToCart(rctx, args["marketplaceCode"].(string), args["qty"].(int), args["deliveryCode"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_DeleteCartDelivery(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_DeleteCartDelivery_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceDeleteCartDelivery(rctx, args["deliveryCode"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_DeleteItem(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_DeleteItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceDeleteItem(rctx, args["itemID"].(string), args["deliveryCode"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_UpdateItemQty(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_UpdateItemQty_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceUpdateItemQty(rctx, args["itemID"].(string), args["deliveryCode"].(string), args["qty"].(int))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateBillingAddress(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateBillingAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateBillingAddress(rctx, args["addressForm"].(*forms.BillingAddressForm))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.BillingAddressForm)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Cart_UpdateSelectedPayment(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Cart_UpdateSelectedPayment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCartUpdateSelectedPayment(rctx, args["gateway"].(string), args["method"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto1.SelectedPaymentResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_StartPlaceOrder(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Commerce_Checkout_StartPlaceOrder_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutStartPlaceOrder(rctx, args["returnUrl"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Commerce_Checkout_CancelPlaceOrder(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CommerceCheckoutCancelPlaceOrder(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_flamingo(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Flamingo(rctx)
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Product(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Product_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProduct(rctx, args["marketplaceCode"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.BasicProduct)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Product_Search(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Product_Search_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceProductSearch(rctx, args["searchRequest"].(*dto.CommerceSearchRequest))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*application.SearchResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋapplicationᚐSearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Cart(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCart(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*decorator.DecoratedCart)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Checkout_PlaceOrderContext(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCheckoutPlaceOrderContext(rctx)
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto2.PlaceOrderContext)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_CategoryTree(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_CategoryTree_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategoryTree(rctx, args["activeCategoryCode"].(string))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain1.Tree)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Commerce_Category(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Commerce_Category_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommerceCategory(rctx, args["categoryCode"].(string), args["categorySearchRequest"].(*dto.CommerceSearchRequest))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto3.CategorySearchResult)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋdtoᚐCategorySearchResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__DirectiveLocation2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx.Args = args
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCommerce_BillingAddressFormInput(ctx context.Context, v interface{}) (forms.BillingAddressForm, error) {
	var it forms.BillingAddressForm
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "vat":
			var err error
			it.Vat, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstname":
			var err error
			it.Firstname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastname":
			var err error
			it.Lastname, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "middleName":
			var err error
			it.MiddleName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error
			it.Title, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "salutation":
			var err error
			it.Salutation, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "street":
			var err error
			it.Street, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "streetNr":
			var err error
			it.StreetNr, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLine1":
			var err error
			it.AddressLine1, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "addressLine2":
			var err error
			it.AddressLine2, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "company":
			var err error
			it.Company, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "city":
			var err error
			it.City, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postCode":
			var err error
			it.PostCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "state":
			var err error
			it.State, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "regionCode":
			var err error
			it.RegionCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "country":
			var err error
			it.Country, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "countryCode":
			var err error
			it.CountryCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error
			it.PhoneNumber, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_KeyValueFilter(ctx context.Context, v interface{}) (dto.CommerceSearchKeyValueFilter, error) {
	var it dto.CommerceSearchKeyValueFilter
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "k":
			var err error
			it.K, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "v":
			var err error
			it.V, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCommerce_Search_Request(ctx context.Context, v interface{}) (dto.CommerceSearchRequest, error) {
	var it dto.CommerceSearchRequest
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "pageSize":
			var err error
			it.PageSize, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "page":
			var err error
			it.Page, err = ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortBy":
			var err error
			it.SortBy, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sortDirection":
			var err error
			it.SortDirection, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "keyValueFilters":
			var err error
			it.KeyValueFilters, err = ec.unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchKeyValueFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "query":
			var err error
			it.Query, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Commerce_Cart_PaymentSelection(ctx context.Context, sel ast.SelectionSet, obj *cart.PaymentSelection) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case cart.DefaultPaymentSelection:
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, &obj)
	case *cart.DefaultPaymentSelection:
		return ec._Commerce_Cart_DefaultPaymentSelection(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Category(ctx context.Context, sel ast.SelectionSet, obj *domain1.Category) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case domain1.CategoryData:
		return ec._Commerce_CategoryData(ctx, sel, &obj)
	case *domain1.CategoryData:
		return ec._Commerce_CategoryData(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State(ctx context.Context, sel ast.SelectionSet, obj *process.State) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case states.New:
		return ec._Commerce_Checkout_PlaceOrderState_State_New(ctx, sel, &obj)
	case *states.New:
		return ec._Commerce_Checkout_PlaceOrderState_State_New(ctx, sel, obj)
	case states.Wait:
		return ec._Commerce_Checkout_PlaceOrderState_State_Wait(ctx, sel, &obj)
	case *states.Wait:
		return ec._Commerce_Checkout_PlaceOrderState_State_Wait(ctx, sel, obj)
	case states.Success:
		return ec._Commerce_Checkout_PlaceOrderState_State_Success(ctx, sel, &obj)
	case *states.Success:
		return ec._Commerce_Checkout_PlaceOrderState_State_Success(ctx, sel, obj)
	case states.Failed:
		return ec._Commerce_Checkout_PlaceOrderState_State_FatalError(ctx, sel, &obj)
	case *states.Failed:
		return ec._Commerce_Checkout_PlaceOrderState_State_FatalError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason(ctx context.Context, sel ast.SelectionSet, obj *dto2.CancellationReason) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case *dto2.CancellationReasonPaymentError:
		return ec._Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError(ctx, sel, obj)
	case *dto2.CancellationReasonValidationError:
		return ec._Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Product(ctx context.Context, sel ast.SelectionSet, obj *domain.BasicProduct) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case domain.SimpleProduct:
		return ec._Commerce_SimpleProduct(ctx, sel, &obj)
	case *domain.SimpleProduct:
		return ec._Commerce_SimpleProduct(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Commerce_Tree(ctx context.Context, sel ast.SelectionSet, obj *domain1.Tree) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case domain1.TreeData:
		return ec._Commerce_CategoryTree(ctx, sel, &obj)
	case *domain1.TreeData:
		return ec._Commerce_CategoryTree(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var commerce_BasicProductDataImplementors = []string{"Commerce_BasicProductData"}

func (ec *executionContext) _Commerce_BasicProductData(ctx context.Context, sel ast.SelectionSet, obj *domain.BasicProductData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_BasicProductDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_BasicProductData")
		case "title":
			out.Values[i] = ec._Commerce_BasicProductData_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_BasicProductData_attributes(ctx, field, obj)
		case "shortDescription":
			out.Values[i] = ec._Commerce_BasicProductData_shortDescription(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Commerce_BasicProductData_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "media":
			out.Values[i] = ec._Commerce_BasicProductData_media(ctx, field, obj)
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_BasicProductData_marketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retailerCode":
			out.Values[i] = ec._Commerce_BasicProductData_retailerCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retailerSku":
			out.Values[i] = ec._Commerce_BasicProductData_retailerSku(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "retailerName":
			out.Values[i] = ec._Commerce_BasicProductData_retailerName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Commerce_BasicProductData_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Commerce_BasicProductData_updatedAt(ctx, field, obj)
		case "visibleFrom":
			out.Values[i] = ec._Commerce_BasicProductData_visibleFrom(ctx, field, obj)
		case "visibleTo":
			out.Values[i] = ec._Commerce_BasicProductData_visibleTo(ctx, field, obj)
		case "Categories":
			out.Values[i] = ec._Commerce_BasicProductData_Categories(ctx, field, obj)
		case "MainCategory":
			out.Values[i] = ec._Commerce_BasicProductData_MainCategory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "categoryToCodeMapping":
			out.Values[i] = ec._Commerce_BasicProductData_categoryToCodeMapping(ctx, field, obj)
		case "stockLevel":
			out.Values[i] = ec._Commerce_BasicProductData_stockLevel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "keywords":
			out.Values[i] = ec._Commerce_BasicProductData_keywords(ctx, field, obj)
		case "isNew":
			out.Values[i] = ec._Commerce_BasicProductData_isNew(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartImplementors = []string{"Commerce_Cart"}

func (ec *executionContext) _Commerce_Cart(ctx context.Context, sel ast.SelectionSet, obj *cart.Cart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart")
		case "id":
			out.Values[i] = ec._Commerce_Cart_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "entityID":
			out.Values[i] = ec._Commerce_Cart_entityID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billingAddress":
			out.Values[i] = ec._Commerce_Cart_billingAddress(ctx, field, obj)
		case "purchaser":
			out.Values[i] = ec._Commerce_Cart_purchaser(ctx, field, obj)
		case "deliveries":
			out.Values[i] = ec._Commerce_Cart_deliveries(ctx, field, obj)
		case "additionalData":
			out.Values[i] = ec._Commerce_Cart_additionalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentSelection":
			out.Values[i] = ec._Commerce_Cart_paymentSelection(ctx, field, obj)
		case "belongsToAuthenticatedUser":
			out.Values[i] = ec._Commerce_Cart_belongsToAuthenticatedUser(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authenticatedUserID":
			out.Values[i] = ec._Commerce_Cart_authenticatedUserID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appliedCouponCodes":
			out.Values[i] = ec._Commerce_Cart_appliedCouponCodes(ctx, field, obj)
		case "defaultCurrency":
			out.Values[i] = ec._Commerce_Cart_defaultCurrency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalitems":
			out.Values[i] = ec._Commerce_Cart_totalitems(ctx, field, obj)
		case "itemCount":
			out.Values[i] = ec._Commerce_Cart_itemCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productCount":
			out.Values[i] = ec._Commerce_Cart_productCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isPaymentSelected":
			out.Values[i] = ec._Commerce_Cart_isPaymentSelected(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grandTotal":
			out.Values[i] = ec._Commerce_Cart_grandTotal(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_Cart_sumTotalTaxAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subTotalNet":
			out.Values[i] = ec._Commerce_Cart_subTotalNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appliedGiftCards":
			out.Values[i] = ec._Commerce_Cart_appliedGiftCards(ctx, field, obj)
		case "getDeliveryByCode":
			out.Values[i] = ec._Commerce_Cart_getDeliveryByCode(ctx, field, obj)
		case "getDeliveryCodes":
			out.Values[i] = ec._Commerce_Cart_getDeliveryCodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartAdditionalDataImplementors = []string{"Commerce_CartAdditionalData"}

func (ec *executionContext) _Commerce_CartAdditionalData(ctx context.Context, sel ast.SelectionSet, obj *cart.AdditionalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartAdditionalDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartAdditionalData")
		case "reservedOrderID":
			out.Values[i] = ec._Commerce_CartAdditionalData_reservedOrderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartAddressImplementors = []string{"Commerce_CartAddress"}

func (ec *executionContext) _Commerce_CartAddress(ctx context.Context, sel ast.SelectionSet, obj *cart.Address) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartAddress")
		case "vat":
			out.Values[i] = ec._Commerce_CartAddress_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_CartAddress_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_CartAddress_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_CartAddress_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_CartAddress_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_CartAddress_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_CartAddress_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_CartAddress_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalAddressLines":
			out.Values[i] = ec._Commerce_CartAddress_additionalAddressLines(ctx, field, obj)
		case "company":
			out.Values[i] = ec._Commerce_CartAddress_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_CartAddress_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_CartAddress_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_CartAddress_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_CartAddress_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_CartAddress_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_CartAddress_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "telephone":
			out.Values[i] = ec._Commerce_CartAddress_telephone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_CartAddress_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartAppliedDiscountImplementors = []string{"Commerce_CartAppliedDiscount"}

func (ec *executionContext) _Commerce_CartAppliedDiscount(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedDiscount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartAppliedDiscountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartAppliedDiscount")
		case "campaignCode":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_campaignCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "couponCode":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_couponCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isItemRelated":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_isItemRelated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sortOrder":
			out.Values[i] = ec._Commerce_CartAppliedDiscount_sortOrder(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartAppliedDiscountsImplementors = []string{"Commerce_CartAppliedDiscounts"}

func (ec *executionContext) _Commerce_CartAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedDiscounts) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartAppliedDiscountsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartAppliedDiscounts")
		case "items":
			out.Values[i] = ec._Commerce_CartAppliedDiscounts_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartAppliedGiftCardImplementors = []string{"Commerce_CartAppliedGiftCard"}

func (ec *executionContext) _Commerce_CartAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, obj *cart.AppliedGiftCard) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartAppliedGiftCardImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartAppliedGiftCard")
		case "code":
			out.Values[i] = ec._Commerce_CartAppliedGiftCard_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applied":
			out.Values[i] = ec._Commerce_CartAppliedGiftCard_applied(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "remaining":
			out.Values[i] = ec._Commerce_CartAppliedGiftCard_remaining(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartCouponCodeImplementors = []string{"Commerce_CartCouponCode"}

func (ec *executionContext) _Commerce_CartCouponCode(ctx context.Context, sel ast.SelectionSet, obj *cart.CouponCode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartCouponCodeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartCouponCode")
		case "code":
			out.Values[i] = ec._Commerce_CartCouponCode_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartDecoratedDeliveryImplementors = []string{"Commerce_CartDecoratedDelivery"}

func (ec *executionContext) _Commerce_CartDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, obj *decorator.DecoratedDelivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartDecoratedDeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartDecoratedDelivery")
		case "delivery":
			out.Values[i] = ec._Commerce_CartDecoratedDelivery_delivery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decoratedItems":
			out.Values[i] = ec._Commerce_CartDecoratedDelivery_decoratedItems(ctx, field, obj)
		case "getDecoratedCartItemById":
			out.Values[i] = ec._Commerce_CartDecoratedDelivery_getDecoratedCartItemById(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartDecoratedItemImplementors = []string{"Commerce_CartDecoratedItem"}

func (ec *executionContext) _Commerce_CartDecoratedItem(ctx context.Context, sel ast.SelectionSet, obj *decorator.DecoratedCartItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartDecoratedItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartDecoratedItem")
		case "item":
			out.Values[i] = ec._Commerce_CartDecoratedItem_item(ctx, field, obj)
		case "product":
			out.Values[i] = ec._Commerce_CartDecoratedItem_product(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartDeliveryImplementors = []string{"Commerce_CartDelivery"}

func (ec *executionContext) _Commerce_CartDelivery(ctx context.Context, sel ast.SelectionSet, obj *cart.Delivery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartDeliveryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartDelivery")
		case "deliveryInfo":
			out.Values[i] = ec._Commerce_CartDelivery_deliveryInfo(ctx, field, obj)
		case "cartitems":
			out.Values[i] = ec._Commerce_CartDelivery_cartitems(ctx, field, obj)
		case "shippingItem":
			out.Values[i] = ec._Commerce_CartDelivery_shippingItem(ctx, field, obj)
		case "subTotalGross":
			out.Values[i] = ec._Commerce_CartDelivery_subTotalGross(ctx, field, obj)
		case "grandTotal":
			out.Values[i] = ec._Commerce_CartDelivery_grandTotal(ctx, field, obj)
		case "sumTotalTaxAmount":
			out.Values[i] = ec._Commerce_CartDelivery_sumTotalTaxAmount(ctx, field, obj)
		case "subTotalNet":
			out.Values[i] = ec._Commerce_CartDelivery_subTotalNet(ctx, field, obj)
		case "sumTotalDiscountAmount":
			out.Values[i] = ec._Commerce_CartDelivery_sumTotalDiscountAmount(ctx, field, obj)
		case "sumNonItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_CartDelivery_sumNonItemRelatedDiscountAmount(ctx, field, obj)
		case "sumItemRelatedDiscountAmount":
			out.Values[i] = ec._Commerce_CartDelivery_sumItemRelatedDiscountAmount(ctx, field, obj)
		case "subTotalGrossWithDiscounts":
			out.Values[i] = ec._Commerce_CartDelivery_subTotalGrossWithDiscounts(ctx, field, obj)
		case "subTotalNetWithDiscounts":
			out.Values[i] = ec._Commerce_CartDelivery_subTotalNetWithDiscounts(ctx, field, obj)
		case "hasItems":
			out.Values[i] = ec._Commerce_CartDelivery_hasItems(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartDeliveryInfoImplementors = []string{"Commerce_CartDeliveryInfo"}

func (ec *executionContext) _Commerce_CartDeliveryInfo(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartDeliveryInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartDeliveryInfo")
		case "code":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workflow":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_workflow(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "carrier":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_carrier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryLocation":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_deliveryLocation(ctx, field, obj)
		case "desiredTime":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_desiredTime(ctx, field, obj)
		case "getAdditionalData":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_getAdditionalData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalDataKeys":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_additionalDataKeys(ctx, field, obj)
		case "additionalDeliveryInfoKeys":
			out.Values[i] = ec._Commerce_CartDeliveryInfo_additionalDeliveryInfoKeys(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartDeliveryLocationImplementors = []string{"Commerce_CartDeliveryLocation"}

func (ec *executionContext) _Commerce_CartDeliveryLocation(ctx context.Context, sel ast.SelectionSet, obj *cart.DeliveryLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartDeliveryLocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartDeliveryLocation")
		case "type":
			out.Values[i] = ec._Commerce_CartDeliveryLocation_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._Commerce_CartDeliveryLocation_address(ctx, field, obj)
		case "useBillingAddress":
			out.Values[i] = ec._Commerce_CartDeliveryLocation_useBillingAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":
			out.Values[i] = ec._Commerce_CartDeliveryLocation_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartExistingCustomerDataImplementors = []string{"Commerce_CartExistingCustomerData"}

func (ec *executionContext) _Commerce_CartExistingCustomerData(ctx context.Context, sel ast.SelectionSet, obj *cart.ExistingCustomerData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartExistingCustomerDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartExistingCustomerData")
		case "id":
			out.Values[i] = ec._Commerce_CartExistingCustomerData_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartItemImplementors = []string{"Commerce_CartItem"}

func (ec *executionContext) _Commerce_CartItem(ctx context.Context, sel ast.SelectionSet, obj *cart.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartItem")
		case "id":
			out.Values[i] = ec._Commerce_CartItem_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "externalReference":
			out.Values[i] = ec._Commerce_CartItem_externalReference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "marketplaceCode":
			out.Values[i] = ec._Commerce_CartItem_marketplaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "variantMarketPlaceCode":
			out.Values[i] = ec._Commerce_CartItem_variantMarketPlaceCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productName":
			out.Values[i] = ec._Commerce_CartItem_productName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sourceID":
			out.Values[i] = ec._Commerce_CartItem_sourceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "qty":
			out.Values[i] = ec._Commerce_CartItem_qty(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalDataKeys":
			out.Values[i] = ec._Commerce_CartItem_additionalDataKeys(ctx, field, obj)
		case "additionalDataValues":
			out.Values[i] = ec._Commerce_CartItem_additionalDataValues(ctx, field, obj)
		case "getAdditionalData":
			out.Values[i] = ec._Commerce_CartItem_getAdditionalData(ctx, field, obj)
		case "hasAdditionalDataKey":
			out.Values[i] = ec._Commerce_CartItem_hasAdditionalDataKey(ctx, field, obj)
		case "singlePriceGross":
			out.Values[i] = ec._Commerce_CartItem_singlePriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "singlePriceNet":
			out.Values[i] = ec._Commerce_CartItem_singlePriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rowPriceGross":
			out.Values[i] = ec._Commerce_CartItem_rowPriceGross(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rowPriceNet":
			out.Values[i] = ec._Commerce_CartItem_rowPriceNet(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartPersonImplementors = []string{"Commerce_CartPerson"}

func (ec *executionContext) _Commerce_CartPerson(ctx context.Context, sel ast.SelectionSet, obj *cart.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartPersonImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartPerson")
		case "address":
			out.Values[i] = ec._Commerce_CartPerson_address(ctx, field, obj)
		case "personalDetails":
			out.Values[i] = ec._Commerce_CartPerson_personalDetails(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "existingCustomerData":
			out.Values[i] = ec._Commerce_CartPerson_existingCustomerData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartPersonalDetailsImplementors = []string{"Commerce_CartPersonalDetails"}

func (ec *executionContext) _Commerce_CartPersonalDetails(ctx context.Context, sel ast.SelectionSet, obj *cart.PersonalDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartPersonalDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartPersonalDetails")
		case "dateOfBirth":
			out.Values[i] = ec._Commerce_CartPersonalDetails_dateOfBirth(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passportCountry":
			out.Values[i] = ec._Commerce_CartPersonalDetails_passportCountry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "passportNumber":
			out.Values[i] = ec._Commerce_CartPersonalDetails_passportNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nationality":
			out.Values[i] = ec._Commerce_CartPersonalDetails_nationality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartShippingItemImplementors = []string{"Commerce_CartShippingItem"}

func (ec *executionContext) _Commerce_CartShippingItem(ctx context.Context, sel ast.SelectionSet, obj *cart.ShippingItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartShippingItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartShippingItem")
		case "title":
			out.Values[i] = ec._Commerce_CartShippingItem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priceNet":
			out.Values[i] = ec._Commerce_CartShippingItem_priceNet(ctx, field, obj)
		case "taxAmount":
			out.Values[i] = ec._Commerce_CartShippingItem_taxAmount(ctx, field, obj)
		case "appliedDiscounts":
			out.Values[i] = ec._Commerce_CartShippingItem_appliedDiscounts(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CartTotalitemImplementors = []string{"Commerce_CartTotalitem"}

func (ec *executionContext) _Commerce_CartTotalitem(ctx context.Context, sel ast.SelectionSet, obj *cart.Totalitem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CartTotalitemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CartTotalitem")
		case "code":
			out.Values[i] = ec._Commerce_CartTotalitem_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_CartTotalitem_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._Commerce_CartTotalitem_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_CartTotalitem_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_BillingAddressFormImplementors = []string{"Commerce_Cart_BillingAddressForm"}

func (ec *executionContext) _Commerce_Cart_BillingAddressForm(ctx context.Context, sel ast.SelectionSet, obj *dto1.BillingAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_BillingAddressFormImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_BillingAddressForm")
		case "formData":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_formData(ctx, field, obj)
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_BillingAddressForm_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_BillingAddressFormDataImplementors = []string{"Commerce_Cart_BillingAddressFormData"}

func (ec *executionContext) _Commerce_Cart_BillingAddressFormData(ctx context.Context, sel ast.SelectionSet, obj *forms.BillingAddressForm) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_BillingAddressFormDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_BillingAddressFormData")
		case "vat":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_vat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstname":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_firstname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastname":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_lastname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "middleName":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_middleName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "salutation":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_salutation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "street":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_street(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "streetNr":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_streetNr(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addressLine1":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_addressLine1(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addressLine2":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_addressLine2(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "company":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postCode":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_postCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "countryCode":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_countryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._Commerce_Cart_BillingAddressFormData_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_DefaultPaymentSelectionImplementors = []string{"Commerce_Cart_DefaultPaymentSelection", "Commerce_Cart_PaymentSelection"}

func (ec *executionContext) _Commerce_Cart_DefaultPaymentSelection(ctx context.Context, sel ast.SelectionSet, obj *cart.DefaultPaymentSelection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_DefaultPaymentSelectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_DefaultPaymentSelection")
		case "gateway":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalValue":
			out.Values[i] = ec._Commerce_Cart_DefaultPaymentSelection_totalValue(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_ErrorImplementors = []string{"Commerce_Cart_Form_Error"}

func (ec *executionContext) _Commerce_Cart_Form_Error(ctx context.Context, sel ast.SelectionSet, obj *domain3.Error) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_Form_ErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_Error")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_Error_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_Error_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_FieldErrorImplementors = []string{"Commerce_Cart_Form_FieldError"}

func (ec *executionContext) _Commerce_Cart_Form_FieldError(ctx context.Context, sel ast.SelectionSet, obj *dto1.FieldError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_Form_FieldErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_FieldError")
		case "messageKey":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_messageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultLabel":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_defaultLabel(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fieldName":
			out.Values[i] = ec._Commerce_Cart_Form_FieldError_fieldName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_Form_ValidationInfoImplementors = []string{"Commerce_Cart_Form_ValidationInfo"}

func (ec *executionContext) _Commerce_Cart_Form_ValidationInfo(ctx context.Context, sel ast.SelectionSet, obj *dto1.ValidationInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_Form_ValidationInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_Form_ValidationInfo")
		case "fieldErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_fieldErrors(ctx, field, obj)
		case "generalErrors":
			out.Values[i] = ec._Commerce_Cart_Form_ValidationInfo_generalErrors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_PlacedOrderInfoImplementors = []string{"Commerce_Cart_PlacedOrderInfo"}

func (ec *executionContext) _Commerce_Cart_PlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, obj *placeorder.PlacedOrderInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_PlacedOrderInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_PlacedOrderInfo")
		case "orderNumber":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_orderNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deliveryCode":
			out.Values[i] = ec._Commerce_Cart_PlacedOrderInfo_deliveryCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_SelectedPaymentResultImplementors = []string{"Commerce_Cart_SelectedPaymentResult"}

func (ec *executionContext) _Commerce_Cart_SelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, obj *dto1.SelectedPaymentResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_SelectedPaymentResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_SelectedPaymentResult")
		case "validationInfo":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_validationInfo(ctx, field, obj)
		case "processed":
			out.Values[i] = ec._Commerce_Cart_SelectedPaymentResult_processed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Cart_ValidationResultImplementors = []string{"Commerce_Cart_ValidationResult"}

func (ec *executionContext) _Commerce_Cart_ValidationResult(ctx context.Context, sel ast.SelectionSet, obj *validation.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Cart_ValidationResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Cart_ValidationResult")
		case "hasCommonError":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_hasCommonError(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commonErrorMessageKey":
			out.Values[i] = ec._Commerce_Cart_ValidationResult_commonErrorMessageKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CategoryDataImplementors = []string{"Commerce_CategoryData", "Commerce_Category"}

func (ec *executionContext) _Commerce_CategoryData(ctx context.Context, sel ast.SelectionSet, obj *domain1.CategoryData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CategoryDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryData")
		case "code":
			out.Values[i] = ec._Commerce_CategoryData_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryData_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryData_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryData_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "promoted":
			out.Values[i] = ec._Commerce_CategoryData_promoted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Commerce_CategoryData_attributes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CategoryTeaserImplementors = []string{"Commerce_CategoryTeaser"}

func (ec *executionContext) _Commerce_CategoryTeaser(ctx context.Context, sel ast.SelectionSet, obj *domain.CategoryTeaser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CategoryTeaserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryTeaser")
		case "code":
			out.Values[i] = ec._Commerce_CategoryTeaser_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryTeaser_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryTeaser_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parent":
			out.Values[i] = ec._Commerce_CategoryTeaser_parent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_CategoryTreeImplementors = []string{"Commerce_CategoryTree", "Commerce_Tree"}

func (ec *executionContext) _Commerce_CategoryTree(ctx context.Context, sel ast.SelectionSet, obj *domain1.TreeData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_CategoryTreeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_CategoryTree")
		case "code":
			out.Values[i] = ec._Commerce_CategoryTree_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Commerce_CategoryTree_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "path":
			out.Values[i] = ec._Commerce_CategoryTree_path(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":
			out.Values[i] = ec._Commerce_CategoryTree_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subTrees":
			out.Values[i] = ec._Commerce_CategoryTree_subTrees(ctx, field, obj)
		case "hasChilds":
			out.Values[i] = ec._Commerce_CategoryTree_hasChilds(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "documentCount":
			out.Values[i] = ec._Commerce_CategoryTree_documentCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributeImplementors = []string{"Commerce_Category_Attribute"}

func (ec *executionContext) _Commerce_Category_Attribute(ctx context.Context, sel ast.SelectionSet, obj *domain1.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Category_AttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attribute")
		case "code":
			out.Values[i] = ec._Commerce_Category_Attribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_Attribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_Category_Attribute_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributeValueImplementors = []string{"Commerce_Category_AttributeValue"}

func (ec *executionContext) _Commerce_Category_AttributeValue(ctx context.Context, sel ast.SelectionSet, obj *domain1.AttributeValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Category_AttributeValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_AttributeValue")
		case "value":
			out.Values[i] = ec._Commerce_Category_AttributeValue_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_Category_AttributeValue_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_AttributesImplementors = []string{"Commerce_Category_Attributes"}

func (ec *executionContext) _Commerce_Category_Attributes(ctx context.Context, sel ast.SelectionSet, obj *domain1.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Category_AttributesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_Attributes")
		case "get":
			out.Values[i] = ec._Commerce_Category_Attributes_get(ctx, field, obj)
		case "has":
			out.Values[i] = ec._Commerce_Category_Attributes_has(ctx, field, obj)
		case "all":
			out.Values[i] = ec._Commerce_Category_Attributes_all(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Category_SearchResultImplementors = []string{"Commerce_Category_SearchResult"}

func (ec *executionContext) _Commerce_Category_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *dto3.CategorySearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Category_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Category_SearchResult")
		case "category":
			out.Values[i] = ec._Commerce_Category_SearchResult_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productSearchResult":
			out.Values[i] = ec._Commerce_Category_SearchResult_productSearchResult(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ChargeImplementors = []string{"Commerce_Charge"}

func (ec *executionContext) _Commerce_Charge(ctx context.Context, sel ast.SelectionSet, obj *domain2.Charge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ChargeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Charge")
		case "price":
			out.Values[i] = ec._Commerce_Charge_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":
			out.Values[i] = ec._Commerce_Charge_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_Charge_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_Charge_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ChargeQualifierImplementors = []string{"Commerce_ChargeQualifier"}

func (ec *executionContext) _Commerce_ChargeQualifier(ctx context.Context, sel ast.SelectionSet, obj *domain2.ChargeQualifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ChargeQualifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ChargeQualifier")
		case "type":
			out.Values[i] = ec._Commerce_ChargeQualifier_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_ChargeQualifier_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderContextImplementors = []string{"Commerce_Checkout_PlaceOrderContext"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderContext(ctx context.Context, sel ast.SelectionSet, obj *dto2.PlaceOrderContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderContextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderContext")
		case "cart":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_cart(ctx, field, obj)
		case "orderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_orderInfos(ctx, field, obj)
		case "state":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderContext_state(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderPaymentInfoImplementors = []string{"Commerce_Checkout_PlaceOrderPaymentInfo"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, obj *application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderPaymentInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderPaymentInfo")
		case "gateway":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_gateway(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentProvider":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_paymentProvider(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "method":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_method(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderPaymentInfo_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError", "Commerce_Checkout_PlaceOrderState_State_CancellationReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError(ctx context.Context, sel ast.SelectionSet, obj *dto2.CancellationReasonPaymentError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_CancellationReason_PaymentError_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError", "Commerce_Checkout_PlaceOrderState_State_CancellationReason"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError(ctx context.Context, sel ast.SelectionSet, obj *dto2.CancellationReasonValidationError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError")
		case "reason":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError_reason(ctx, field, obj)
		case "validationResult":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_CancellationReason_ValidationError_validationResult(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_FatalErrorImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_FatalError", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_FatalError(ctx context.Context, sel ast.SelectionSet, obj *states.Failed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_FatalErrorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_FatalError")
		case "isFinal":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FatalError_isFinal(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_FatalError_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_NewImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_New", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_New(ctx context.Context, sel ast.SelectionSet, obj *states.New) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_NewImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_New")
		case "isFinal":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_New_isFinal(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_New_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_SuccessImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Success", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Success(ctx context.Context, sel ast.SelectionSet, obj *states.Success) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_SuccessImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Success")
		case "isFinal":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Success_isFinal(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Success_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlaceOrderState_State_WaitImplementors = []string{"Commerce_Checkout_PlaceOrderState_State_Wait", "Commerce_Checkout_PlaceOrderState_State"}

func (ec *executionContext) _Commerce_Checkout_PlaceOrderState_State_Wait(ctx context.Context, sel ast.SelectionSet, obj *states.Wait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlaceOrderState_State_WaitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlaceOrderState_State_Wait")
		case "isFinal":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Wait_isFinal(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Commerce_Checkout_PlaceOrderState_State_Wait_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Checkout_PlacedOrderInfosImplementors = []string{"Commerce_Checkout_PlacedOrderInfos"}

func (ec *executionContext) _Commerce_Checkout_PlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, obj *dto2.PlacedOrderInfos) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Checkout_PlacedOrderInfosImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Checkout_PlacedOrderInfos")
		case "paymentInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_paymentInfos(ctx, field, obj)
		case "placedOrderInfos":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_placedOrderInfos(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Commerce_Checkout_PlacedOrderInfos_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_DecoratedCartImplementors = []string{"Commerce_DecoratedCart"}

func (ec *executionContext) _Commerce_DecoratedCart(ctx context.Context, sel ast.SelectionSet, obj *decorator.DecoratedCart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_DecoratedCartImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_DecoratedCart")
		case "cart":
			out.Values[i] = ec._Commerce_DecoratedCart_cart(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "decoratedDeliveries":
			out.Values[i] = ec._Commerce_DecoratedCart_decoratedDeliveries(ctx, field, obj)
		case "getDecoratedDeliveryByCode":
			out.Values[i] = ec._Commerce_DecoratedCart_getDecoratedDeliveryByCode(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_PriceImplementors = []string{"Commerce_Price"}

func (ec *executionContext) _Commerce_Price(ctx context.Context, sel ast.SelectionSet, obj *domain2.Price) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_PriceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Price")
		case "amount":
			out.Values[i] = ec._Commerce_Price_amount(ctx, field, obj)
		case "currency":
			out.Values[i] = ec._Commerce_Price_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_PriceContextImplementors = []string{"Commerce_PriceContext"}

func (ec *executionContext) _Commerce_PriceContext(ctx context.Context, sel ast.SelectionSet, obj *domain.PriceContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_PriceContextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_PriceContext")
		case "customerGroup":
			out.Values[i] = ec._Commerce_PriceContext_customerGroup(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channelCode":
			out.Values[i] = ec._Commerce_PriceContext_channelCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locale":
			out.Values[i] = ec._Commerce_PriceContext_locale(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductAttributeImplementors = []string{"Commerce_ProductAttribute"}

func (ec *executionContext) _Commerce_ProductAttribute(ctx context.Context, sel ast.SelectionSet, obj *domain.Attribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductAttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductAttribute")
		case "code":
			out.Values[i] = ec._Commerce_ProductAttribute_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Commerce_ProductAttribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unitCode":
			out.Values[i] = ec._Commerce_ProductAttribute_unitCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductAttributesImplementors = []string{"Commerce_ProductAttributes"}

func (ec *executionContext) _Commerce_ProductAttributes(ctx context.Context, sel ast.SelectionSet, obj *domain.Attributes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductAttributesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductAttributes")
		case "attributeKeys":
			out.Values[i] = ec._Commerce_ProductAttributes_attributeKeys(ctx, field, obj)
		case "attributes":
			out.Values[i] = ec._Commerce_ProductAttributes_attributes(ctx, field, obj)
		case "hasAttribute":
			out.Values[i] = ec._Commerce_ProductAttributes_hasAttribute(ctx, field, obj)
		case "getAttribute":
			out.Values[i] = ec._Commerce_ProductAttributes_getAttribute(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductLoyaltyPriceInfoImplementors = []string{"Commerce_ProductLoyaltyPriceInfo"}

func (ec *executionContext) _Commerce_ProductLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain.LoyaltyPriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductLoyaltyPriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductLoyaltyPriceInfo")
		case "type":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "default":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_default(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDiscounted":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_isDiscounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discounted":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_discounted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discountText":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "minPointsToSpent":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_minPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxPointsToSpent":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_maxPointsToSpent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "context":
			out.Values[i] = ec._Commerce_ProductLoyaltyPriceInfo_context(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductMediaImplementors = []string{"Commerce_ProductMedia"}

func (ec *executionContext) _Commerce_ProductMedia(ctx context.Context, sel ast.SelectionSet, obj *domain.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductMediaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductMedia")
		case "type":
			out.Values[i] = ec._Commerce_ProductMedia_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":
			out.Values[i] = ec._Commerce_ProductMedia_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "usage":
			out.Values[i] = ec._Commerce_ProductMedia_usage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Commerce_ProductMedia_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reference":
			out.Values[i] = ec._Commerce_ProductMedia_reference(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductPriceInfoImplementors = []string{"Commerce_ProductPriceInfo"}

func (ec *executionContext) _Commerce_ProductPriceInfo(ctx context.Context, sel ast.SelectionSet, obj *domain.PriceInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductPriceInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductPriceInfo")
		case "default":
			out.Values[i] = ec._Commerce_ProductPriceInfo_default(ctx, field, obj)
		case "discounted":
			out.Values[i] = ec._Commerce_ProductPriceInfo_discounted(ctx, field, obj)
		case "discountText":
			out.Values[i] = ec._Commerce_ProductPriceInfo_discountText(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activeBase":
			out.Values[i] = ec._Commerce_ProductPriceInfo_activeBase(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activeBaseAmount":
			out.Values[i] = ec._Commerce_ProductPriceInfo_activeBaseAmount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "activeBaseUnit":
			out.Values[i] = ec._Commerce_ProductPriceInfo_activeBaseUnit(ctx, field, obj)
		case "isDiscounted":
			out.Values[i] = ec._Commerce_ProductPriceInfo_isDiscounted(ctx, field, obj)
		case "campaignRules":
			out.Values[i] = ec._Commerce_ProductPriceInfo_campaignRules(ctx, field, obj)
		case "denyMoreDiscounts":
			out.Values[i] = ec._Commerce_ProductPriceInfo_denyMoreDiscounts(ctx, field, obj)
		case "taxClass":
			out.Values[i] = ec._Commerce_ProductPriceInfo_taxClass(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductSaleableImplementors = []string{"Commerce_ProductSaleable"}

func (ec *executionContext) _Commerce_ProductSaleable(ctx context.Context, sel ast.SelectionSet, obj *domain.Saleable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductSaleableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductSaleable")
		case "isSaleable":
			out.Values[i] = ec._Commerce_ProductSaleable_isSaleable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saleableFrom":
			out.Values[i] = ec._Commerce_ProductSaleable_saleableFrom(ctx, field, obj)
		case "saleableTo":
			out.Values[i] = ec._Commerce_ProductSaleable_saleableTo(ctx, field, obj)
		case "activePrice":
			out.Values[i] = ec._Commerce_ProductSaleable_activePrice(ctx, field, obj)
		case "availablePrices":
			out.Values[i] = ec._Commerce_ProductSaleable_availablePrices(ctx, field, obj)
		case "loyaltyPrices":
			out.Values[i] = ec._Commerce_ProductSaleable_loyaltyPrices(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductSpecificationEntryImplementors = []string{"Commerce_ProductSpecificationEntry"}

func (ec *executionContext) _Commerce_ProductSpecificationEntry(ctx context.Context, sel ast.SelectionSet, obj *domain.SpecificationEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductSpecificationEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductSpecificationEntry")
		case "label":
			out.Values[i] = ec._Commerce_ProductSpecificationEntry_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._Commerce_ProductSpecificationEntry_values(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductSpecificationGroupImplementors = []string{"Commerce_ProductSpecificationGroup"}

func (ec *executionContext) _Commerce_ProductSpecificationGroup(ctx context.Context, sel ast.SelectionSet, obj *domain.SpecificationGroup) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductSpecificationGroupImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductSpecificationGroup")
		case "title":
			out.Values[i] = ec._Commerce_ProductSpecificationGroup_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "entries":
			out.Values[i] = ec._Commerce_ProductSpecificationGroup_entries(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductSpecificationsImplementors = []string{"Commerce_ProductSpecifications"}

func (ec *executionContext) _Commerce_ProductSpecifications(ctx context.Context, sel ast.SelectionSet, obj *domain.Specifications) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductSpecificationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductSpecifications")
		case "groups":
			out.Values[i] = ec._Commerce_ProductSpecifications_groups(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_ProductTeaserDataImplementors = []string{"Commerce_ProductTeaserData"}

func (ec *executionContext) _Commerce_ProductTeaserData(ctx context.Context, sel ast.SelectionSet, obj *domain.TeaserData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_ProductTeaserDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_ProductTeaserData")
		case "shortTitle":
			out.Values[i] = ec._Commerce_ProductTeaserData_shortTitle(ctx, field, obj)
		case "shortDescription":
			out.Values[i] = ec._Commerce_ProductTeaserData_shortDescription(ctx, field, obj)
		case "teaserPrice":
			out.Values[i] = ec._Commerce_ProductTeaserData_teaserPrice(ctx, field, obj)
		case "teaserPriceIsFromPrice":
			out.Values[i] = ec._Commerce_ProductTeaserData_teaserPriceIsFromPrice(ctx, field, obj)
		case "preSelectedVariantSku":
			out.Values[i] = ec._Commerce_ProductTeaserData_preSelectedVariantSku(ctx, field, obj)
		case "media":
			out.Values[i] = ec._Commerce_ProductTeaserData_media(ctx, field, obj)
		case "marketPlaceCode":
			out.Values[i] = ec._Commerce_ProductTeaserData_marketPlaceCode(ctx, field, obj)
		case "teaserAvailablePrices":
			out.Values[i] = ec._Commerce_ProductTeaserData_teaserAvailablePrices(ctx, field, obj)
		case "teaserLoyaltyPriceInfo":
			out.Values[i] = ec._Commerce_ProductTeaserData_teaserLoyaltyPriceInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Product_SearchResultImplementors = []string{"Commerce_Product_SearchResult"}

func (ec *executionContext) _Commerce_Product_SearchResult(ctx context.Context, sel ast.SelectionSet, obj *application.SearchResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Product_SearchResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Product_SearchResult")
		case "products":
			out.Values[i] = ec._Commerce_Product_SearchResult_products(ctx, field, obj)
		case "suggestions":
			out.Values[i] = ec._Commerce_Product_SearchResult_suggestions(ctx, field, obj)
		case "searchMeta":
			out.Values[i] = ec._Commerce_Product_SearchResult_searchMeta(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_MetaImplementors = []string{"Commerce_Search_Meta"}

func (ec *executionContext) _Commerce_Search_Meta(ctx context.Context, sel ast.SelectionSet, obj *domain4.SearchMeta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Search_MetaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Meta")
		case "query":
			out.Values[i] = ec._Commerce_Search_Meta_query(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "originalQuery":
			out.Values[i] = ec._Commerce_Search_Meta_originalQuery(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "page":
			out.Values[i] = ec._Commerce_Search_Meta_page(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "numPages":
			out.Values[i] = ec._Commerce_Search_Meta_numPages(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "numResults":
			out.Values[i] = ec._Commerce_Search_Meta_numResults(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sortOptions":
			out.Values[i] = ec._Commerce_Search_Meta_sortOptions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_SortOptionImplementors = []string{"Commerce_Search_SortOption"}

func (ec *executionContext) _Commerce_Search_SortOption(ctx context.Context, sel ast.SelectionSet, obj *domain4.SortOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Search_SortOptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_SortOption")
		case "label":
			out.Values[i] = ec._Commerce_Search_SortOption_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "field":
			out.Values[i] = ec._Commerce_Search_SortOption_field(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectedAsc":
			out.Values[i] = ec._Commerce_Search_SortOption_selectedAsc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "selectedDesc":
			out.Values[i] = ec._Commerce_Search_SortOption_selectedDesc(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_Search_SuggestionImplementors = []string{"Commerce_Search_Suggestion"}

func (ec *executionContext) _Commerce_Search_Suggestion(ctx context.Context, sel ast.SelectionSet, obj *domain4.Suggestion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_Search_SuggestionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_Search_Suggestion")
		case "text":
			out.Values[i] = ec._Commerce_Search_Suggestion_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "highlight":
			out.Values[i] = ec._Commerce_Search_Suggestion_highlight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commerce_SimpleProductImplementors = []string{"Commerce_SimpleProduct", "Commerce_Product"}

func (ec *executionContext) _Commerce_SimpleProduct(ctx context.Context, sel ast.SelectionSet, obj *domain.SimpleProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, commerce_SimpleProductImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Commerce_SimpleProduct")
		case "baseData":
			out.Values[i] = ec._Commerce_SimpleProduct_baseData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "teaserData":
			out.Values[i] = ec._Commerce_SimpleProduct_teaserData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "specifications":
			out.Values[i] = ec._Commerce_SimpleProduct_specifications(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isSaleable":
			out.Values[i] = ec._Commerce_SimpleProduct_isSaleable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saleableData":
			out.Values[i] = ec._Commerce_SimpleProduct_saleableData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._Commerce_SimpleProduct_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getIdentifier":
			out.Values[i] = ec._Commerce_SimpleProduct_getIdentifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasMedia":
			out.Values[i] = ec._Commerce_SimpleProduct_hasMedia(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "getMedia":
			out.Values[i] = ec._Commerce_SimpleProduct_getMedia(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "flamingo":
			out.Values[i] = ec._Mutation_flamingo(ctx, field)
		case "Commerce_AddToCart":
			out.Values[i] = ec._Mutation_Commerce_AddToCart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_DeleteCartDelivery":
			out.Values[i] = ec._Mutation_Commerce_DeleteCartDelivery(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_DeleteItem":
			out.Values[i] = ec._Mutation_Commerce_DeleteItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_UpdateItemQty":
			out.Values[i] = ec._Mutation_Commerce_UpdateItemQty(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateBillingAddress":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateBillingAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Cart_UpdateSelectedPayment":
			out.Values[i] = ec._Mutation_Commerce_Cart_UpdateSelectedPayment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_StartPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_StartPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Commerce_Checkout_CancelPlaceOrder":
			out.Values[i] = ec._Mutation_Commerce_Checkout_CancelPlaceOrder(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "flamingo":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_flamingo(ctx, field)
				return res
			})
		case "Commerce_Product":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product(ctx, field)
				return res
			})
		case "Commerce_Product_Search":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Product_Search(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Cart":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Cart(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Checkout_PlaceOrderContext":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Checkout_PlaceOrderContext(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_CategoryTree":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_CategoryTree(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Commerce_Category":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Commerce_Category(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.RequestContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCommerce_BasicProductData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProductData(ctx context.Context, sel ast.SelectionSet, v domain.BasicProductData) graphql.Marshaler {
	return ec._Commerce_BasicProductData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCart(ctx context.Context, sel ast.SelectionSet, v cart.Cart) graphql.Marshaler {
	return ec._Commerce_Cart(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartAdditionalData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAdditionalData(ctx context.Context, sel ast.SelectionSet, v cart.AdditionalData) graphql.Marshaler {
	return ec._Commerce_CartAdditionalData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartAppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx context.Context, sel ast.SelectionSet, v cart.AppliedDiscount) graphql.Marshaler {
	return ec._Commerce_CartAppliedDiscount(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartAppliedDiscounts2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscounts(ctx context.Context, sel ast.SelectionSet, v cart.AppliedDiscounts) graphql.Marshaler {
	return ec._Commerce_CartAppliedDiscounts(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartAppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, v cart.AppliedGiftCard) graphql.Marshaler {
	return ec._Commerce_CartAppliedGiftCard(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartCouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx context.Context, sel ast.SelectionSet, v cart.CouponCode) graphql.Marshaler {
	return ec._Commerce_CartCouponCode(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartDecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedDelivery) graphql.Marshaler {
	return ec._Commerce_CartDecoratedDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartDecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedCartItem) graphql.Marshaler {
	return ec._Commerce_CartDecoratedItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v cart.Delivery) graphql.Marshaler {
	return ec._Commerce_CartDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_CartItem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartPersonalDetails2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPersonalDetails(ctx context.Context, sel ast.SelectionSet, v cart.PersonalDetails) graphql.Marshaler {
	return ec._Commerce_CartPersonalDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CartTotalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx context.Context, sel ast.SelectionSet, v cart.Totalitem) graphql.Marshaler {
	return ec._Commerce_CartTotalitem(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v dto1.BillingAddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_BillingAddressForm2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v *dto1.BillingAddressForm) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_BillingAddressForm(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx context.Context, sel ast.SelectionSet, v domain3.Error) graphql.Marshaler {
	return ec._Commerce_Cart_Form_Error(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx context.Context, sel ast.SelectionSet, v dto1.FieldError) graphql.Marshaler {
	return ec._Commerce_Cart_Form_FieldError(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, v placeorder.PlacedOrderInfo) graphql.Marshaler {
	return ec._Commerce_Cart_PlacedOrderInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v dto1.SelectedPaymentResult) graphql.Marshaler {
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Cart_SelectedPaymentResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐSelectedPaymentResult(ctx context.Context, sel ast.SelectionSet, v *dto1.SelectedPaymentResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Cart_SelectedPaymentResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Category2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐCategory(ctx context.Context, sel ast.SelectionSet, v domain1.Category) graphql.Marshaler {
	return ec._Commerce_Category(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v domain.CategoryTeaser) graphql.Marshaler {
	return ec._Commerce_CategoryTeaser(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Category_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v domain1.AttributeValue) graphql.Marshaler {
	return ec._Commerce_Category_AttributeValue(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Category_Attributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain1.Attributes) graphql.Marshaler {
	return ec._Commerce_Category_Attributes(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v dto2.PlaceOrderContext) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderContext2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlaceOrderContext(ctx context.Context, sel ast.SelectionSet, v *dto2.PlaceOrderContext) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlaceOrderContext(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, v application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderPaymentInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_DecoratedCart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedCart) graphql.Marshaler {
	return ec._Commerce_DecoratedCart(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *decorator.DecoratedCart) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalNCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain2.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_PriceContext2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceContext(ctx context.Context, sel ast.SelectionSet, v domain.PriceContext) graphql.Marshaler {
	return ec._Commerce_PriceContext(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx context.Context, sel ast.SelectionSet, v domain.BasicProduct) graphql.Marshaler {
	return ec._Commerce_Product(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductAttribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain.Attribute) graphql.Marshaler {
	return ec._Commerce_ProductAttribute(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductLoyaltyPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain.LoyaltyPriceInfo) graphql.Marshaler {
	return ec._Commerce_ProductLoyaltyPriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductMedia2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v domain.Media) graphql.Marshaler {
	return ec._Commerce_ProductMedia(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain.PriceInfo) graphql.Marshaler {
	return ec._Commerce_ProductPriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductSaleable2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSaleable(ctx context.Context, sel ast.SelectionSet, v domain.Saleable) graphql.Marshaler {
	return ec._Commerce_ProductSaleable(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductSpecificationEntry2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationEntry(ctx context.Context, sel ast.SelectionSet, v domain.SpecificationEntry) graphql.Marshaler {
	return ec._Commerce_ProductSpecificationEntry(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductSpecificationGroup2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationGroup(ctx context.Context, sel ast.SelectionSet, v domain.SpecificationGroup) graphql.Marshaler {
	return ec._Commerce_ProductSpecificationGroup(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductSpecifications2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecifications(ctx context.Context, sel ast.SelectionSet, v domain.Specifications) graphql.Marshaler {
	return ec._Commerce_ProductSpecifications(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_ProductTeaserData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐTeaserData(ctx context.Context, sel ast.SelectionSet, v domain.TeaserData) graphql.Marshaler {
	return ec._Commerce_ProductTeaserData(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋapplicationᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v application.SearchResult) graphql.Marshaler {
	return ec._Commerce_Product_SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Product_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋapplicationᚐSearchResult(ctx context.Context, sel ast.SelectionSet, v *application.SearchResult) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Commerce_Product_SearchResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchKeyValueFilter(ctx context.Context, v interface{}) (dto.CommerceSearchKeyValueFilter, error) {
	return ec.unmarshalInputCommerce_Search_KeyValueFilter(ctx, v)
}

func (ec *executionContext) marshalNCommerce_Search_Meta2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSearchMeta(ctx context.Context, sel ast.SelectionSet, v domain4.SearchMeta) graphql.Marshaler {
	return ec._Commerce_Search_Meta(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_SortOption2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSortOption(ctx context.Context, sel ast.SelectionSet, v domain4.SortOption) graphql.Marshaler {
	return ec._Commerce_Search_SortOption(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx context.Context, sel ast.SelectionSet, v domain4.Suggestion) graphql.Marshaler {
	return ec._Commerce_Search_Suggestion(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain1.Tree) graphql.Marshaler {
	return ec._Commerce_Tree(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNFloat2mathᚋbigᚐFloat(ctx context.Context, v interface{}) (big.Float, error) {
	return graphql1.UnmarshalFloat(v)
}

func (ec *executionContext) marshalNFloat2mathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v big.Float) graphql.Marshaler {
	res := graphql1.MarshalFloat(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, v interface{}) (*big.Float, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalNFloat2mathᚋbigᚐFloat(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalNFloat2ᚖmathᚋbigᚐFloat(ctx context.Context, sel ast.SelectionSet, v *big.Float) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.marshalNFloat2mathᚋbigᚐFloat(ctx, sel, *v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalID(v)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !ec.HasError(graphql.GetResolverContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOCommerce_BillingAddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx context.Context, v interface{}) (forms.BillingAddressForm, error) {
	return ec.unmarshalInputCommerce_BillingAddressFormInput(ctx, v)
}

func (ec *executionContext) unmarshalOCommerce_BillingAddressFormInput2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx context.Context, v interface{}) (*forms.BillingAddressForm, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommerce_BillingAddressFormInput2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCommerce_CartAddress2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx context.Context, sel ast.SelectionSet, v cart.Address) graphql.Marshaler {
	return ec._Commerce_CartAddress(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartAddress2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAddress(ctx context.Context, sel ast.SelectionSet, v *cart.Address) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartAddress(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartAppliedDiscount2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedDiscount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartAppliedDiscount2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedDiscount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartAppliedGiftCard2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx context.Context, sel ast.SelectionSet, v []cart.AppliedGiftCard) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartAppliedGiftCard2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐAppliedGiftCard(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartCouponCode2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx context.Context, sel ast.SelectionSet, v []cart.CouponCode) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartCouponCode2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐCouponCode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartDecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedDelivery) graphql.Marshaler {
	return ec._Commerce_CartDecoratedDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartDecoratedDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v []decorator.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartDecoratedDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartDecoratedDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedDelivery(ctx context.Context, sel ast.SelectionSet, v *decorator.DecoratedDelivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartDecoratedDelivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartDecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedCartItem) graphql.Marshaler {
	return ec._Commerce_CartDecoratedItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartDecoratedItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v []decorator.DecoratedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartDecoratedItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartDecoratedItem2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCartItem(ctx context.Context, sel ast.SelectionSet, v *decorator.DecoratedCartItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartDecoratedItem(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v cart.Delivery) graphql.Marshaler {
	return ec._Commerce_CartDelivery(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartDelivery2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v []cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartDelivery2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartDelivery2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDelivery(ctx context.Context, sel ast.SelectionSet, v *cart.Delivery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartDelivery(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartDeliveryInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryInfo(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryInfo) graphql.Marshaler {
	return ec._Commerce_CartDeliveryInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartDeliveryLocation2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐDeliveryLocation(ctx context.Context, sel ast.SelectionSet, v cart.DeliveryLocation) graphql.Marshaler {
	return ec._Commerce_CartDeliveryLocation(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartExistingCustomerData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx context.Context, sel ast.SelectionSet, v cart.ExistingCustomerData) graphql.Marshaler {
	return ec._Commerce_CartExistingCustomerData(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartExistingCustomerData2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐExistingCustomerData(ctx context.Context, sel ast.SelectionSet, v *cart.ExistingCustomerData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartExistingCustomerData(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v cart.Item) graphql.Marshaler {
	return ec._Commerce_CartItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartItem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx context.Context, sel ast.SelectionSet, v []cart.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CartPerson2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx context.Context, sel ast.SelectionSet, v cart.Person) graphql.Marshaler {
	return ec._Commerce_CartPerson(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartPerson2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPerson(ctx context.Context, sel ast.SelectionSet, v *cart.Person) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CartPerson(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_CartShippingItem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐShippingItem(ctx context.Context, sel ast.SelectionSet, v cart.ShippingItem) graphql.Marshaler {
	return ec._Commerce_CartShippingItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CartTotalitem2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx context.Context, sel ast.SelectionSet, v []cart.Totalitem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CartTotalitem2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐTotalitem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_BillingAddressFormData2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋcontrollerᚋformsᚐBillingAddressForm(ctx context.Context, sel ast.SelectionSet, v forms.BillingAddressForm) graphql.Marshaler {
	return ec._Commerce_Cart_BillingAddressFormData(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_Form_Error2ᚕflamingoᚗmeᚋformᚋdomainᚐError(ctx context.Context, sel ast.SelectionSet, v []domain3.Error) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_Error2flamingoᚗmeᚋformᚋdomainᚐError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_FieldError2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx context.Context, sel ast.SelectionSet, v []dto1.FieldError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_Form_FieldError2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐFieldError(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_Form_ValidationInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋinterfacesᚋgraphqlᚋdtoᚐValidationInfo(ctx context.Context, sel ast.SelectionSet, v dto1.ValidationInfo) graphql.Marshaler {
	return ec._Commerce_Cart_Form_ValidationInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_PaymentSelection2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋcartᚐPaymentSelection(ctx context.Context, sel ast.SelectionSet, v cart.PaymentSelection) graphql.Marshaler {
	return ec._Commerce_Cart_PaymentSelection(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Cart_PlacedOrderInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx context.Context, sel ast.SelectionSet, v []placeorder.PlacedOrderInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Cart_PlacedOrderInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋplaceorderᚐPlacedOrderInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Cart_ValidationResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋvalidationᚐResult(ctx context.Context, sel ast.SelectionSet, v validation.Result) graphql.Marshaler {
	return ec._Commerce_Cart_ValidationResult(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v domain.CategoryTeaser) graphql.Marshaler {
	return ec._Commerce_CategoryTeaser(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_CategoryTeaser2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v []domain.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_CategoryTeaser2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_CategoryTeaser2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐCategoryTeaser(ctx context.Context, sel ast.SelectionSet, v *domain.CategoryTeaser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_CategoryTeaser(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain1.Attribute) graphql.Marshaler {
	return ec._Commerce_Category_Attribute(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v []domain1.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_Attribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Category_Attribute2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v *domain1.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_Attribute(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Category_AttributeValue2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx context.Context, sel ast.SelectionSet, v []domain1.AttributeValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Category_AttributeValue2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐAttributeValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Category_SearchResult2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋdtoᚐCategorySearchResult(ctx context.Context, sel ast.SelectionSet, v dto3.CategorySearchResult) graphql.Marshaler {
	return ec._Commerce_Category_SearchResult(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Category_SearchResult2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋinterfacesᚋgraphqlᚋdtoᚐCategorySearchResult(ctx context.Context, sel ast.SelectionSet, v *dto3.CategorySearchResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Category_SearchResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderPaymentInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx context.Context, sel ast.SelectionSet, v []application1.PlaceOrderPaymentInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Checkout_PlaceOrderPaymentInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋapplicationᚐPlaceOrderPaymentInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Checkout_PlaceOrderState_State2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋdomainᚋplaceorderᚋprocessᚐState(ctx context.Context, sel ast.SelectionSet, v process.State) graphql.Marshaler {
	return ec._Commerce_Checkout_PlaceOrderState_State(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlacedOrderInfos2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, v dto2.PlacedOrderInfos) graphql.Marshaler {
	return ec._Commerce_Checkout_PlacedOrderInfos(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Checkout_PlacedOrderInfos2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcheckoutᚋinterfacesᚋgraphqlᚋdtoᚐPlacedOrderInfos(ctx context.Context, sel ast.SelectionSet, v *dto2.PlacedOrderInfos) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_Checkout_PlacedOrderInfos(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_DecoratedCart2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v decorator.DecoratedCart) graphql.Marshaler {
	return ec._Commerce_DecoratedCart(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_DecoratedCart2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcartᚋdomainᚋdecoratorᚐDecoratedCart(ctx context.Context, sel ast.SelectionSet, v *decorator.DecoratedCart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_DecoratedCart(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_Price2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋpriceᚋdomainᚐPrice(ctx context.Context, sel ast.SelectionSet, v domain2.Price) graphql.Marshaler {
	return ec._Commerce_Price(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx context.Context, sel ast.SelectionSet, v domain.BasicProduct) graphql.Marshaler {
	return ec._Commerce_Product(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Product2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx context.Context, sel ast.SelectionSet, v []domain.BasicProduct) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Product2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐBasicProduct(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductAttribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v domain.Attribute) graphql.Marshaler {
	return ec._Commerce_ProductAttribute(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_ProductAttribute2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx context.Context, sel ast.SelectionSet, v []domain.Attribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductAttribute2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductAttributes2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐAttributes(ctx context.Context, sel ast.SelectionSet, v domain.Attributes) graphql.Marshaler {
	return ec._Commerce_ProductAttributes(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_ProductLoyaltyPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain.LoyaltyPriceInfo) graphql.Marshaler {
	return ec._Commerce_ProductLoyaltyPriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_ProductLoyaltyPriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v []domain.LoyaltyPriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductLoyaltyPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductLoyaltyPriceInfo2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐLoyaltyPriceInfo(ctx context.Context, sel ast.SelectionSet, v *domain.LoyaltyPriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Commerce_ProductLoyaltyPriceInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOCommerce_ProductMedia2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx context.Context, sel ast.SelectionSet, v []domain.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductMedia2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx context.Context, sel ast.SelectionSet, v domain.PriceInfo) graphql.Marshaler {
	return ec._Commerce_ProductPriceInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_ProductPriceInfo2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx context.Context, sel ast.SelectionSet, v []domain.PriceInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductPriceInfo2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐPriceInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductSpecificationEntry2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationEntry(ctx context.Context, sel ast.SelectionSet, v []domain.SpecificationEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductSpecificationEntry2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_ProductSpecificationGroup2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationGroup(ctx context.Context, sel ast.SelectionSet, v []domain.SpecificationGroup) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_ProductSpecificationGroup2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋproductᚋdomainᚐSpecificationGroup(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOCommerce_Search_KeyValueFilter2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchKeyValueFilter(ctx context.Context, v interface{}) ([]dto.CommerceSearchKeyValueFilter, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]dto.CommerceSearchKeyValueFilter, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNCommerce_Search_KeyValueFilter2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchKeyValueFilter(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (dto.CommerceSearchRequest, error) {
	return ec.unmarshalInputCommerce_Search_Request(ctx, v)
}

func (ec *executionContext) unmarshalOCommerce_Search_Request2ᚖflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchRequest(ctx context.Context, v interface{}) (*dto.CommerceSearchRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOCommerce_Search_Request2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋinterfacesᚋgraphqlᚋdtoᚐCommerceSearchRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOCommerce_Search_SortOption2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSortOption(ctx context.Context, sel ast.SelectionSet, v []domain4.SortOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_SortOption2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSortOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Search_Suggestion2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx context.Context, sel ast.SelectionSet, v []domain4.Suggestion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommerce_Search_Suggestion2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋsearchᚋdomainᚐSuggestion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v domain1.Tree) graphql.Marshaler {
	return ec._Commerce_Tree(ctx, sel, &v)
}

func (ec *executionContext) marshalOCommerce_Tree2ᚕflamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx context.Context, sel ast.SelectionSet, v []domain1.Tree) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommerce_Tree2flamingoᚗmeᚋflamingoᚑcommerceᚋv3ᚋcategoryᚋdomainᚐTree(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	return graphql.UnmarshalFloat(v)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	return graphql.MarshalFloat(v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	return graphql.UnmarshalTime(v)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		rctx := &graphql.ResolverContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
