// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x30\xb9\x7c\xdf\x80\xa2\xbb\xfb\xb6\x36\xdb\x10\xa0\x28\xb6\xb6\xb7\x61\x28\x14\x8b\xb6\x89\xc9\x94\x21\xd1\x6b\x83\xa1\xff\x7d\xb0\x24\x27\x76\x63\x77\xc1\x96\x53\x4c\x3e\xbf\x47\xd1\x8f\x94\xec\x5b\x84\x6b\xdb\x34\xe8\x0a\x7c\xbc\xee\xbc\xd8\x06\xdd\xe3\xbd\x28\xe9\xfc\xe3\x1d\xfa\xce\x08\xfc\xca\x00\x00\xc8\xdf\xd8\xaa\x42\xbd\xe5\x1c\xae\xac\x35\xa8\x78\x15\x12\x9d\x47\xb7\xdd\xe4\x70\x2f\x8e\xb8\x5a\x65\x2f\x59\xb6\x40\x3b\xe5\xd3\xc7\x57\xfa\xe7\xf5\x00\xf3\xd0\xa2\xf3\x96\x95\x01\xad\x44\xad\x43\x76\x08\x6d\x94\xa8\x7c\x86\xfa\x4b\xc8\xf7\xd9\xc4\xf6\x19\x05\x14\xf8\x16\x0b\x2a\xa9\x00\xa5\xb5\x43\xef\xa1\x74\xb6\x01\xa9\x11\x8a\xf4\x66\xa4\xaf\x50\x3e\x44\xc4\xff\x7d\x5d\xdb\xcd\xea\xdd\x9c\x4a\xc2\x44\x85\xf4\x80\x1e\xa4\x56\x32\x21\x85\xd6\xd9\x9f\xa4\x51\x5f\x40\xa1\x18\x76\xd8\x37\x49\x43\x69\x1d\xec\xc8\x18\xe2\x0a\xde\x83\xaf\xa9\x6d\x89\xab\x58\x81\x1a\xd8\x72\xf8\xb6\x28\xbc\xfa\x1e\xa5\x1f\x6a\x04\x8d\xa5\xea\xbb\x39\xd0\x1c\x8e\x68\xcb\x49\x2d\x17\xc0\x9d\x31\x40\x21\xea\x10\xc8\x03\x5b\xc6\xa8\x9a\x48\xee\x13\x47\x92\xf9\xe3\xd1\xc7\xfa\xc3\x81\xfe\x41\xfe\x2a\x52\x9c\xa1\xbe\xec\xad\xa3\x01\x92\xbf\x2a\x64\x8d\x2e\xef\xff\x4e\x7c\x56\x92\xf3\x72\xab\x1a\xcc\xa7\x71\xa3\x0e\xe1\x49\xbc\x21\xad\x0d\xc6\xcc\x24\xae\x88\x3f\x36\x8a\xcc\x2b\x9e\xd6\x61\x49\xcf\x51\x77\x92\xd8\x91\x93\x5a\xab\x7d\x48\x3d\x50\x83\x21\xca\x4a\xa8\x37\x36\xc9\xfe\x9c\x11\x4a\x8d\x18\xcd\xd0\x76\xb3\x1a\x0c\x44\x91\x2a\x61\x6e\x88\x83\x9b\x12\x69\xb4\x4e\x11\x74\x4e\x7f\xe3\x42\x0b\xdb\xb4\x8a\x4f\x61\x53\x4c\xc7\xe2\xf6\xd7\x56\x63\xbe\x84\x59\x7f\x32\xaa\x8a\x5f\x9e\xfc\xc1\x1f\xbe\xb6\x9d\xd1\x87\x99\x50\x3e\xd8\x65\xc1\x4d\x73\x36\x39\xea\x4d\xd6\xd0\xdf\xa8\xbd\x9e\x9d\xd9\xa1\xc8\x67\xe5\xc6\x36\x5a\x6a\xc0\xd8\x52\x4b\x98\xd6\x7a\x39\xe9\xe2\x6b\xcc\xd8\x52\x0b\x18\x87\x15\x59\x3e\x65\x1a\x63\xbc\x38\x44\x79\x9b\x27\x62\x6e\xbb\x66\x37\x0c\xcf\x29\x46\xd0\x60\x5b\x5b\x7e\xeb\xec\x98\x46\x63\x49\xeb\x25\xcb\xf0\x59\x90\x35\x04\xa7\x7f\xed\xd0\xed\x93\xab\xd7\xeb\xf8\x1d\xee\x50\x3a\xc7\xf1\x8b\x99\x70\xf7\x00\x31\xf8\x70\x37\x85\x5d\x1a\xf7\x8c\x73\xc8\x02\x1e\xbd\x27\xcb\x13\x82\xa5\x8b\x6d\x6e\xc3\x4c\xae\xbc\x33\xca\x38\xac\xfa\x85\x42\xc0\x3a\x50\x0c\xe8\x9c\x75\xbd\x2b\x49\xe2\xea\x93\x23\xc7\x65\xa0\xdf\x96\xb0\xb7\x1d\x68\xcb\xff\x09\x3c\x29\x16\x10\x0b\xb5\x62\x6d\x30\xf0\x06\x86\x0b\x28\x6a\x2c\x7e\xc0\x13\x49\xbd\x58\x7c\xf4\xe4\xe5\xdb\x2d\x98\x3b\x7b\x3a\xf4\x4b\xf6\x3b\x00\x00\xff\xff\x52\x7d\xba\x3d\x0f\x08\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
