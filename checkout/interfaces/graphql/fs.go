// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcd\x6e\x1b\x37\x10\xc7\xef\x7a\x8a\x11\x72\x49\x0e\x79\x81\xbd\xa5\x6a\x8d\x04\x68\x6a\x55\x4e\xd2\x43\x10\x08\x63\x72\x56\x4b\x84\x4b\x6e\x87\x43\x2b\x8b\xa2\xef\x5e\x90\xcb\xac\x57\x5f\x86\x6a\x43\xb0\x75\x30\x2c\x92\xf3\x9f\xdf\x8c\x66\x76\x39\xd2\x77\x04\x0b\xdf\xb6\xc4\x8a\xd6\x8b\x86\xd4\x77\x1f\x65\x7d\x23\xc8\xb2\xb4\xa8\xe8\x9a\x35\xf1\x7a\x45\x21\x5a\x81\x7f\x66\x00\x00\x31\x1a\x5d\xc1\x8d\xb0\x71\x9b\xf9\xec\xdf\xd9\xab\x23\x02\xf7\xb6\x0b\xef\x84\x7e\x08\x30\x75\x4c\x81\x9c\x04\x90\x86\x80\x07\x45\x5f\xe7\x6f\x2a\x32\x93\x13\x78\xcd\xd1\x39\xe3\x36\x6f\xa0\x4b\x02\xe0\x93\x02\xb4\x51\x50\x8c\x77\xb3\x13\xb4\x87\xce\x06\xd0\x57\xf0\xa9\x21\x58\x20\x0b\x48\x83\x02\x26\xc0\xc6\x1b\xb7\x01\xf1\x70\x4b\x83\x0b\x9d\x4f\x2a\x64\xa9\xee\x95\x7f\x25\xe5\x19\x85\x74\xb2\x9d\x48\x0d\x16\x85\xca\x38\x50\x18\x7e\x32\x9a\x00\x68\x99\x50\xf7\x53\xdd\xbc\xf7\xc1\xd5\x3e\x54\xa7\xb8\xf5\xf5\x78\xa6\x78\xba\x11\x14\x02\x4d\x1d\x39\x9d\x68\xbd\xcb\x39\x0a\x79\xd9\xd7\xd0\x61\xdf\xa6\x64\xa1\xd3\x3b\x69\x7a\x5b\x8e\xb4\xd8\x83\xf2\x4e\xd0\x38\x40\xad\x4d\x4a\x1d\x5a\x30\xa3\x8b\x7c\xec\x24\x50\xe6\xc9\x0c\xeb\xfc\xb7\x50\xbd\x83\xe8\xcc\xdf\x91\xc0\x68\xa8\x3d\x67\xa4\x8e\xbd\xa2\x10\x8e\x56\xc5\xec\x74\x5d\x4c\x42\x86\xb7\x03\x17\xe0\xad\x8f\x32\x88\x4e\x92\x9c\xf6\xa5\xef\x8c\x42\x6b\x7b\x08\x8d\xdf\xba\x94\x0e\x84\x10\x15\x51\x08\xd0\xe1\x86\x1e\x2c\x8b\xa9\xaf\xa1\x2a\x4a\xfa\xca\xaf\x52\x3e\x5f\x1f\x4a\xc6\xf2\xde\x62\xfe\x6d\xd0\xd8\x93\xae\xf6\x34\x90\x0f\xdc\x17\x4b\x6a\xd1\xd8\xd1\x6d\xf9\x4c\xb2\x96\x63\x79\xf0\xa7\x99\xd0\x94\x88\x36\x28\xb4\xc5\xbe\x3a\xd0\x9b\x84\xbb\x64\x7f\x67\x34\x71\xb5\xb3\xd9\x92\x34\x5e\x57\x87\x24\xe9\x7f\x6c\x7d\x74\x32\xd9\x1c\xa9\x96\x6c\x14\x0d\x87\xc4\x88\xa5\xea\x78\x2c\xc6\x09\x71\x9d\x0a\xf4\xcc\x52\x2b\xf1\x98\x70\x65\x1c\xda\x0a\x7e\xf1\xde\x12\xba\xbc\xe8\xb0\xa5\xea\x20\x53\x67\x0a\xaf\xff\xa0\x2d\x98\xb6\xb3\xd4\xe6\x27\xd0\xb3\xf3\xfc\x85\x46\x5e\x14\xd0\x4d\x54\xa9\x95\x5f\x14\xd3\x15\x1a\x4b\xfa\xa2\x48\x69\x85\x09\x83\x77\x67\x3f\x0f\x0b\xd6\x2a\x5b\xfd\xff\x3c\x37\x7e\xfb\xa1\x66\x6c\xe9\xe2\x71\x7d\x5e\xfd\xfe\x84\x7a\x68\xfc\xf6\xbd\xb4\xf6\xe2\x94\xef\x3f\x7d\x7c\x02\xe6\x8a\xb4\x61\x52\x97\xed\xa5\x27\x27\x73\xe9\x83\x3c\x0f\x69\x5a\x58\x62\x2a\x37\x21\x0e\xd5\xb1\xf7\xdc\x95\xe7\x76\x3d\x9e\x99\x7f\x7b\xd4\x93\x7b\xa7\x29\x0a\xef\xcf\xbe\x1a\x58\xf2\x95\xe0\x11\xed\x3f\x48\xae\x7f\x63\xf6\xfc\x88\xdc\x9d\x07\xf6\x78\xae\xf2\x36\x7e\xa9\x78\xe9\x26\xf2\x05\xad\xd1\xf9\x02\x7d\x41\xca\xb4\x74\x37\x3a\x1a\xe6\x85\xe9\x23\x35\xdd\x88\xbe\xec\xed\x3f\xd4\x48\xbb\x55\x59\x7c\x7e\xa7\x7e\xb7\xb4\xef\xd0\x46\xaa\xe0\x6b\x59\xcb\xb5\x4b\x3f\x84\x9c\x86\xac\xfb\x67\x24\xee\x8b\xf1\xa1\x8f\x77\x4a\xcc\x1d\xdd\x47\x3c\x76\xd6\x7c\x5f\xe7\x63\x99\x40\xc6\xc1\xe2\xda\xd9\x1e\x3a\x1f\x82\xb9\xb5\x04\xa6\x1e\x2e\xed\x2d\x06\xd5\x18\x47\xe0\xbc\x00\x66\x75\xf0\x79\x52\x40\xa8\x53\xef\x0e\x57\xef\x13\x38\x7b\x43\xd7\x6b\x26\x89\xec\x3e\xb3\x1d\x63\x7e\x73\xec\x25\x75\x7c\x56\x9b\x17\xd0\xe5\x84\x71\x18\x0f\x4c\xc8\x78\x99\xe7\x04\xc9\x02\x9d\x22\x7b\x34\x31\xc7\x0d\x56\x54\x33\x85\x66\x6a\x71\xc6\x98\x96\xd2\xfc\x5f\x00\x00\x00\xff\xff\x85\xa9\x44\xab\x81\x0e\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
